// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tr-140.proto
// Original file comments:
// Generated by cwmp_proto_to_grpc.cc
// source: tr-140-1-3-0-full.proto
// 1st top-level message: StorageService
// Added service 
//
// tr-140-1-3-0-full.proto
// Generated by cwmp_xml_to_proto.cc
// source: tr-140-1-3-0-full.xml
//
#ifndef GRPC_tr_2d140_2eproto__INCLUDED
#define GRPC_tr_2d140_2eproto__INCLUDED

#include "tr-140.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace tr140 {

class Storage final {
 public:
  static constexpr char const* service_full_name() {
    return "tr140.Storage";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetStorageService(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService>> AsyncGetStorageService(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService>>(AsyncGetStorageServiceRaw(context, request, cq));
    }
    virtual ::grpc::Status SetStorageService(::grpc::ClientContext* context, const ::tr140::StorageService& request, ::tr140::StorageReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>> AsyncSetStorageService(::grpc::ClientContext* context, const ::tr140::StorageService& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>>(AsyncSetStorageServiceRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCapabilities(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService_Capabilities* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService_Capabilities>> AsyncGetCapabilities(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService_Capabilities>>(AsyncGetCapabilitiesRaw(context, request, cq));
    }
    virtual ::grpc::Status SetCapabilities(::grpc::ClientContext* context, const ::tr140::StorageService_Capabilities& request, ::tr140::StorageReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>> AsyncSetCapabilities(::grpc::ClientContext* context, const ::tr140::StorageService_Capabilities& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>>(AsyncSetCapabilitiesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNetInfo(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService_NetInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService_NetInfo>> AsyncGetNetInfo(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService_NetInfo>>(AsyncGetNetInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status SetNetInfo(::grpc::ClientContext* context, const ::tr140::StorageService_NetInfo& request, ::tr140::StorageReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>> AsyncSetNetInfo(::grpc::ClientContext* context, const ::tr140::StorageService_NetInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>>(AsyncSetNetInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::tr140::StorageService_UserGroup>> GetUserGroup(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::tr140::StorageService_UserGroup>>(GetUserGroupRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tr140::StorageService_UserGroup>> AsyncGetUserGroup(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tr140::StorageService_UserGroup>>(AsyncGetUserGroupRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::tr140::StorageService_UserGroup>> SetUserGroup(::grpc::ClientContext* context, ::tr140::StorageReply* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::tr140::StorageService_UserGroup>>(SetUserGroupRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::tr140::StorageService_UserGroup>> AsyncSetUserGroup(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::tr140::StorageService_UserGroup>>(AsyncSetUserGroupRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::tr140::StorageService_UserAccount>> GetUserAccount(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::tr140::StorageService_UserAccount>>(GetUserAccountRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tr140::StorageService_UserAccount>> AsyncGetUserAccount(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tr140::StorageService_UserAccount>>(AsyncGetUserAccountRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::tr140::StorageService_UserAccount>> SetUserAccount(::grpc::ClientContext* context, ::tr140::StorageReply* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::tr140::StorageService_UserAccount>>(SetUserAccountRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::tr140::StorageService_UserAccount>> AsyncSetUserAccount(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::tr140::StorageService_UserAccount>>(AsyncSetUserAccountRaw(context, response, cq, tag));
    }
    virtual ::grpc::Status GetNetworkServer(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService_NetworkServer* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService_NetworkServer>> AsyncGetNetworkServer(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService_NetworkServer>>(AsyncGetNetworkServerRaw(context, request, cq));
    }
    virtual ::grpc::Status SetNetworkServer(::grpc::ClientContext* context, const ::tr140::StorageService_NetworkServer& request, ::tr140::StorageReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>> AsyncSetNetworkServer(::grpc::ClientContext* context, const ::tr140::StorageService_NetworkServer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>>(AsyncSetNetworkServerRaw(context, request, cq));
    }
    virtual ::grpc::Status GetFTPServer(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService_FTPServer* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService_FTPServer>> AsyncGetFTPServer(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService_FTPServer>>(AsyncGetFTPServerRaw(context, request, cq));
    }
    virtual ::grpc::Status SetFTPServer(::grpc::ClientContext* context, const ::tr140::StorageService_FTPServer& request, ::tr140::StorageReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>> AsyncSetFTPServer(::grpc::ClientContext* context, const ::tr140::StorageService_FTPServer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>>(AsyncSetFTPServerRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAnonymousUser(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService_FTPServer_AnonymousUser* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService_FTPServer_AnonymousUser>> AsyncGetAnonymousUser(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService_FTPServer_AnonymousUser>>(AsyncGetAnonymousUserRaw(context, request, cq));
    }
    virtual ::grpc::Status SetAnonymousUser(::grpc::ClientContext* context, const ::tr140::StorageService_FTPServer_AnonymousUser& request, ::tr140::StorageReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>> AsyncSetAnonymousUser(::grpc::ClientContext* context, const ::tr140::StorageService_FTPServer_AnonymousUser& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>>(AsyncSetAnonymousUserRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSFTPServer(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService_SFTPServer* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService_SFTPServer>> AsyncGetSFTPServer(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService_SFTPServer>>(AsyncGetSFTPServerRaw(context, request, cq));
    }
    virtual ::grpc::Status SetSFTPServer(::grpc::ClientContext* context, const ::tr140::StorageService_SFTPServer& request, ::tr140::StorageReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>> AsyncSetSFTPServer(::grpc::ClientContext* context, const ::tr140::StorageService_SFTPServer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>>(AsyncSetSFTPServerRaw(context, request, cq));
    }
    virtual ::grpc::Status GetHTTPServer(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService_HTTPServer* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService_HTTPServer>> AsyncGetHTTPServer(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService_HTTPServer>>(AsyncGetHTTPServerRaw(context, request, cq));
    }
    virtual ::grpc::Status SetHTTPServer(::grpc::ClientContext* context, const ::tr140::StorageService_HTTPServer& request, ::tr140::StorageReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>> AsyncSetHTTPServer(::grpc::ClientContext* context, const ::tr140::StorageService_HTTPServer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>>(AsyncSetHTTPServerRaw(context, request, cq));
    }
    virtual ::grpc::Status GetHTTPSServer(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService_HTTPSServer* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService_HTTPSServer>> AsyncGetHTTPSServer(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService_HTTPSServer>>(AsyncGetHTTPSServerRaw(context, request, cq));
    }
    virtual ::grpc::Status SetHTTPSServer(::grpc::ClientContext* context, const ::tr140::StorageService_HTTPSServer& request, ::tr140::StorageReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>> AsyncSetHTTPSServer(::grpc::ClientContext* context, const ::tr140::StorageService_HTTPSServer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>>(AsyncSetHTTPSServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::tr140::StorageService_PhysicalMedium>> GetPhysicalMedium(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::tr140::StorageService_PhysicalMedium>>(GetPhysicalMediumRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tr140::StorageService_PhysicalMedium>> AsyncGetPhysicalMedium(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tr140::StorageService_PhysicalMedium>>(AsyncGetPhysicalMediumRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::tr140::StorageService_PhysicalMedium>> SetPhysicalMedium(::grpc::ClientContext* context, ::tr140::StorageReply* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::tr140::StorageService_PhysicalMedium>>(SetPhysicalMediumRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::tr140::StorageService_PhysicalMedium>> AsyncSetPhysicalMedium(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::tr140::StorageService_PhysicalMedium>>(AsyncSetPhysicalMediumRaw(context, response, cq, tag));
    }
    virtual ::grpc::Status GetSMART(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService_PhysicalMedium_SMART* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService_PhysicalMedium_SMART>> AsyncGetSMART(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService_PhysicalMedium_SMART>>(AsyncGetSMARTRaw(context, request, cq));
    }
    virtual ::grpc::Status SetSMART(::grpc::ClientContext* context, const ::tr140::StorageService_PhysicalMedium_SMART& request, ::tr140::StorageReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>> AsyncSetSMART(::grpc::ClientContext* context, const ::tr140::StorageService_PhysicalMedium_SMART& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>>(AsyncSetSMARTRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::tr140::StorageService_StorageArray>> GetStorageArray(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::tr140::StorageService_StorageArray>>(GetStorageArrayRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tr140::StorageService_StorageArray>> AsyncGetStorageArray(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tr140::StorageService_StorageArray>>(AsyncGetStorageArrayRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::tr140::StorageService_StorageArray>> SetStorageArray(::grpc::ClientContext* context, ::tr140::StorageReply* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::tr140::StorageService_StorageArray>>(SetStorageArrayRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::tr140::StorageService_StorageArray>> AsyncSetStorageArray(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::tr140::StorageService_StorageArray>>(AsyncSetStorageArrayRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::tr140::StorageService_LogicalVolume>> GetLogicalVolume(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::tr140::StorageService_LogicalVolume>>(GetLogicalVolumeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tr140::StorageService_LogicalVolume>> AsyncGetLogicalVolume(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tr140::StorageService_LogicalVolume>>(AsyncGetLogicalVolumeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::tr140::StorageService_LogicalVolume>> SetLogicalVolume(::grpc::ClientContext* context, ::tr140::StorageReply* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::tr140::StorageService_LogicalVolume>>(SetLogicalVolumeRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::tr140::StorageService_LogicalVolume>> AsyncSetLogicalVolume(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::tr140::StorageService_LogicalVolume>>(AsyncSetLogicalVolumeRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::tr140::StorageService_LogicalVolume_Folder>> GetFolder(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::tr140::StorageService_LogicalVolume_Folder>>(GetFolderRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tr140::StorageService_LogicalVolume_Folder>> AsyncGetFolder(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tr140::StorageService_LogicalVolume_Folder>>(AsyncGetFolderRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::tr140::StorageService_LogicalVolume_Folder>> SetFolder(::grpc::ClientContext* context, ::tr140::StorageReply* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::tr140::StorageService_LogicalVolume_Folder>>(SetFolderRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::tr140::StorageService_LogicalVolume_Folder>> AsyncSetFolder(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::tr140::StorageService_LogicalVolume_Folder>>(AsyncSetFolderRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>> GetUserAccess(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>>(GetUserAccessRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>> AsyncGetUserAccess(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>>(AsyncGetUserAccessRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>> SetUserAccess(::grpc::ClientContext* context, ::tr140::StorageReply* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>>(SetUserAccessRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>> AsyncSetUserAccess(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>>(AsyncSetUserAccessRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>> GetGroupAccess(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>>(GetGroupAccessRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>> AsyncGetGroupAccess(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>>(AsyncGetGroupAccessRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>> SetGroupAccess(::grpc::ClientContext* context, ::tr140::StorageReply* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>>(SetGroupAccessRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>> AsyncSetGroupAccess(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>>(AsyncSetGroupAccessRaw(context, response, cq, tag));
    }
    virtual ::grpc::Status GetQuota(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService_LogicalVolume_Folder_Quota* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService_LogicalVolume_Folder_Quota>> AsyncGetQuota(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService_LogicalVolume_Folder_Quota>>(AsyncGetQuotaRaw(context, request, cq));
    }
    virtual ::grpc::Status SetQuota(::grpc::ClientContext* context, const ::tr140::StorageService_LogicalVolume_Folder_Quota& request, ::tr140::StorageReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>> AsyncSetQuota(::grpc::ClientContext* context, const ::tr140::StorageService_LogicalVolume_Folder_Quota& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>>(AsyncSetQuotaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::tr140::StorageService_UserGroup, ::tr140::StorageService_UserAccount>> GetMatchedUserAccout(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::tr140::StorageService_UserGroup, ::tr140::StorageService_UserAccount>>(GetMatchedUserAccoutRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::tr140::StorageService_UserGroup, ::tr140::StorageService_UserAccount>> AsyncGetMatchedUserAccout(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::tr140::StorageService_UserGroup, ::tr140::StorageService_UserAccount>>(AsyncGetMatchedUserAccoutRaw(context, cq, tag));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService>* AsyncGetStorageServiceRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>* AsyncSetStorageServiceRaw(::grpc::ClientContext* context, const ::tr140::StorageService& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService_Capabilities>* AsyncGetCapabilitiesRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>* AsyncSetCapabilitiesRaw(::grpc::ClientContext* context, const ::tr140::StorageService_Capabilities& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService_NetInfo>* AsyncGetNetInfoRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>* AsyncSetNetInfoRaw(::grpc::ClientContext* context, const ::tr140::StorageService_NetInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::tr140::StorageService_UserGroup>* GetUserGroupRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tr140::StorageService_UserGroup>* AsyncGetUserGroupRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientWriterInterface< ::tr140::StorageService_UserGroup>* SetUserGroupRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::tr140::StorageService_UserGroup>* AsyncSetUserGroupRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientReaderInterface< ::tr140::StorageService_UserAccount>* GetUserAccountRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tr140::StorageService_UserAccount>* AsyncGetUserAccountRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientWriterInterface< ::tr140::StorageService_UserAccount>* SetUserAccountRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::tr140::StorageService_UserAccount>* AsyncSetUserAccountRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService_NetworkServer>* AsyncGetNetworkServerRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>* AsyncSetNetworkServerRaw(::grpc::ClientContext* context, const ::tr140::StorageService_NetworkServer& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService_FTPServer>* AsyncGetFTPServerRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>* AsyncSetFTPServerRaw(::grpc::ClientContext* context, const ::tr140::StorageService_FTPServer& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService_FTPServer_AnonymousUser>* AsyncGetAnonymousUserRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>* AsyncSetAnonymousUserRaw(::grpc::ClientContext* context, const ::tr140::StorageService_FTPServer_AnonymousUser& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService_SFTPServer>* AsyncGetSFTPServerRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>* AsyncSetSFTPServerRaw(::grpc::ClientContext* context, const ::tr140::StorageService_SFTPServer& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService_HTTPServer>* AsyncGetHTTPServerRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>* AsyncSetHTTPServerRaw(::grpc::ClientContext* context, const ::tr140::StorageService_HTTPServer& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService_HTTPSServer>* AsyncGetHTTPSServerRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>* AsyncSetHTTPSServerRaw(::grpc::ClientContext* context, const ::tr140::StorageService_HTTPSServer& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::tr140::StorageService_PhysicalMedium>* GetPhysicalMediumRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tr140::StorageService_PhysicalMedium>* AsyncGetPhysicalMediumRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientWriterInterface< ::tr140::StorageService_PhysicalMedium>* SetPhysicalMediumRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::tr140::StorageService_PhysicalMedium>* AsyncSetPhysicalMediumRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService_PhysicalMedium_SMART>* AsyncGetSMARTRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>* AsyncSetSMARTRaw(::grpc::ClientContext* context, const ::tr140::StorageService_PhysicalMedium_SMART& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::tr140::StorageService_StorageArray>* GetStorageArrayRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tr140::StorageService_StorageArray>* AsyncGetStorageArrayRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientWriterInterface< ::tr140::StorageService_StorageArray>* SetStorageArrayRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::tr140::StorageService_StorageArray>* AsyncSetStorageArrayRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientReaderInterface< ::tr140::StorageService_LogicalVolume>* GetLogicalVolumeRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tr140::StorageService_LogicalVolume>* AsyncGetLogicalVolumeRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientWriterInterface< ::tr140::StorageService_LogicalVolume>* SetLogicalVolumeRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::tr140::StorageService_LogicalVolume>* AsyncSetLogicalVolumeRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientReaderInterface< ::tr140::StorageService_LogicalVolume_Folder>* GetFolderRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tr140::StorageService_LogicalVolume_Folder>* AsyncGetFolderRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientWriterInterface< ::tr140::StorageService_LogicalVolume_Folder>* SetFolderRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::tr140::StorageService_LogicalVolume_Folder>* AsyncSetFolderRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientReaderInterface< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>* GetUserAccessRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>* AsyncGetUserAccessRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientWriterInterface< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>* SetUserAccessRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>* AsyncSetUserAccessRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientReaderInterface< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>* GetGroupAccessRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>* AsyncGetGroupAccessRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientWriterInterface< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>* SetGroupAccessRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>* AsyncSetGroupAccessRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageService_LogicalVolume_Folder_Quota>* AsyncGetQuotaRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tr140::StorageReply>* AsyncSetQuotaRaw(::grpc::ClientContext* context, const ::tr140::StorageService_LogicalVolume_Folder_Quota& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::tr140::StorageService_UserGroup, ::tr140::StorageService_UserAccount>* GetMatchedUserAccoutRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::tr140::StorageService_UserGroup, ::tr140::StorageService_UserAccount>* AsyncGetMatchedUserAccoutRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetStorageService(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageService>> AsyncGetStorageService(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageService>>(AsyncGetStorageServiceRaw(context, request, cq));
    }
    ::grpc::Status SetStorageService(::grpc::ClientContext* context, const ::tr140::StorageService& request, ::tr140::StorageReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>> AsyncSetStorageService(::grpc::ClientContext* context, const ::tr140::StorageService& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>>(AsyncSetStorageServiceRaw(context, request, cq));
    }
    ::grpc::Status GetCapabilities(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService_Capabilities* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_Capabilities>> AsyncGetCapabilities(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_Capabilities>>(AsyncGetCapabilitiesRaw(context, request, cq));
    }
    ::grpc::Status SetCapabilities(::grpc::ClientContext* context, const ::tr140::StorageService_Capabilities& request, ::tr140::StorageReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>> AsyncSetCapabilities(::grpc::ClientContext* context, const ::tr140::StorageService_Capabilities& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>>(AsyncSetCapabilitiesRaw(context, request, cq));
    }
    ::grpc::Status GetNetInfo(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService_NetInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_NetInfo>> AsyncGetNetInfo(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_NetInfo>>(AsyncGetNetInfoRaw(context, request, cq));
    }
    ::grpc::Status SetNetInfo(::grpc::ClientContext* context, const ::tr140::StorageService_NetInfo& request, ::tr140::StorageReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>> AsyncSetNetInfo(::grpc::ClientContext* context, const ::tr140::StorageService_NetInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>>(AsyncSetNetInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::tr140::StorageService_UserGroup>> GetUserGroup(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::tr140::StorageService_UserGroup>>(GetUserGroupRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tr140::StorageService_UserGroup>> AsyncGetUserGroup(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tr140::StorageService_UserGroup>>(AsyncGetUserGroupRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::tr140::StorageService_UserGroup>> SetUserGroup(::grpc::ClientContext* context, ::tr140::StorageReply* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::tr140::StorageService_UserGroup>>(SetUserGroupRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::tr140::StorageService_UserGroup>> AsyncSetUserGroup(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::tr140::StorageService_UserGroup>>(AsyncSetUserGroupRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReader< ::tr140::StorageService_UserAccount>> GetUserAccount(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::tr140::StorageService_UserAccount>>(GetUserAccountRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tr140::StorageService_UserAccount>> AsyncGetUserAccount(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tr140::StorageService_UserAccount>>(AsyncGetUserAccountRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::tr140::StorageService_UserAccount>> SetUserAccount(::grpc::ClientContext* context, ::tr140::StorageReply* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::tr140::StorageService_UserAccount>>(SetUserAccountRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::tr140::StorageService_UserAccount>> AsyncSetUserAccount(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::tr140::StorageService_UserAccount>>(AsyncSetUserAccountRaw(context, response, cq, tag));
    }
    ::grpc::Status GetNetworkServer(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService_NetworkServer* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_NetworkServer>> AsyncGetNetworkServer(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_NetworkServer>>(AsyncGetNetworkServerRaw(context, request, cq));
    }
    ::grpc::Status SetNetworkServer(::grpc::ClientContext* context, const ::tr140::StorageService_NetworkServer& request, ::tr140::StorageReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>> AsyncSetNetworkServer(::grpc::ClientContext* context, const ::tr140::StorageService_NetworkServer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>>(AsyncSetNetworkServerRaw(context, request, cq));
    }
    ::grpc::Status GetFTPServer(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService_FTPServer* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_FTPServer>> AsyncGetFTPServer(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_FTPServer>>(AsyncGetFTPServerRaw(context, request, cq));
    }
    ::grpc::Status SetFTPServer(::grpc::ClientContext* context, const ::tr140::StorageService_FTPServer& request, ::tr140::StorageReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>> AsyncSetFTPServer(::grpc::ClientContext* context, const ::tr140::StorageService_FTPServer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>>(AsyncSetFTPServerRaw(context, request, cq));
    }
    ::grpc::Status GetAnonymousUser(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService_FTPServer_AnonymousUser* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_FTPServer_AnonymousUser>> AsyncGetAnonymousUser(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_FTPServer_AnonymousUser>>(AsyncGetAnonymousUserRaw(context, request, cq));
    }
    ::grpc::Status SetAnonymousUser(::grpc::ClientContext* context, const ::tr140::StorageService_FTPServer_AnonymousUser& request, ::tr140::StorageReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>> AsyncSetAnonymousUser(::grpc::ClientContext* context, const ::tr140::StorageService_FTPServer_AnonymousUser& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>>(AsyncSetAnonymousUserRaw(context, request, cq));
    }
    ::grpc::Status GetSFTPServer(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService_SFTPServer* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_SFTPServer>> AsyncGetSFTPServer(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_SFTPServer>>(AsyncGetSFTPServerRaw(context, request, cq));
    }
    ::grpc::Status SetSFTPServer(::grpc::ClientContext* context, const ::tr140::StorageService_SFTPServer& request, ::tr140::StorageReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>> AsyncSetSFTPServer(::grpc::ClientContext* context, const ::tr140::StorageService_SFTPServer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>>(AsyncSetSFTPServerRaw(context, request, cq));
    }
    ::grpc::Status GetHTTPServer(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService_HTTPServer* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_HTTPServer>> AsyncGetHTTPServer(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_HTTPServer>>(AsyncGetHTTPServerRaw(context, request, cq));
    }
    ::grpc::Status SetHTTPServer(::grpc::ClientContext* context, const ::tr140::StorageService_HTTPServer& request, ::tr140::StorageReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>> AsyncSetHTTPServer(::grpc::ClientContext* context, const ::tr140::StorageService_HTTPServer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>>(AsyncSetHTTPServerRaw(context, request, cq));
    }
    ::grpc::Status GetHTTPSServer(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService_HTTPSServer* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_HTTPSServer>> AsyncGetHTTPSServer(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_HTTPSServer>>(AsyncGetHTTPSServerRaw(context, request, cq));
    }
    ::grpc::Status SetHTTPSServer(::grpc::ClientContext* context, const ::tr140::StorageService_HTTPSServer& request, ::tr140::StorageReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>> AsyncSetHTTPSServer(::grpc::ClientContext* context, const ::tr140::StorageService_HTTPSServer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>>(AsyncSetHTTPSServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::tr140::StorageService_PhysicalMedium>> GetPhysicalMedium(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::tr140::StorageService_PhysicalMedium>>(GetPhysicalMediumRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tr140::StorageService_PhysicalMedium>> AsyncGetPhysicalMedium(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tr140::StorageService_PhysicalMedium>>(AsyncGetPhysicalMediumRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::tr140::StorageService_PhysicalMedium>> SetPhysicalMedium(::grpc::ClientContext* context, ::tr140::StorageReply* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::tr140::StorageService_PhysicalMedium>>(SetPhysicalMediumRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::tr140::StorageService_PhysicalMedium>> AsyncSetPhysicalMedium(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::tr140::StorageService_PhysicalMedium>>(AsyncSetPhysicalMediumRaw(context, response, cq, tag));
    }
    ::grpc::Status GetSMART(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService_PhysicalMedium_SMART* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_PhysicalMedium_SMART>> AsyncGetSMART(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_PhysicalMedium_SMART>>(AsyncGetSMARTRaw(context, request, cq));
    }
    ::grpc::Status SetSMART(::grpc::ClientContext* context, const ::tr140::StorageService_PhysicalMedium_SMART& request, ::tr140::StorageReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>> AsyncSetSMART(::grpc::ClientContext* context, const ::tr140::StorageService_PhysicalMedium_SMART& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>>(AsyncSetSMARTRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::tr140::StorageService_StorageArray>> GetStorageArray(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::tr140::StorageService_StorageArray>>(GetStorageArrayRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tr140::StorageService_StorageArray>> AsyncGetStorageArray(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tr140::StorageService_StorageArray>>(AsyncGetStorageArrayRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::tr140::StorageService_StorageArray>> SetStorageArray(::grpc::ClientContext* context, ::tr140::StorageReply* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::tr140::StorageService_StorageArray>>(SetStorageArrayRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::tr140::StorageService_StorageArray>> AsyncSetStorageArray(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::tr140::StorageService_StorageArray>>(AsyncSetStorageArrayRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReader< ::tr140::StorageService_LogicalVolume>> GetLogicalVolume(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::tr140::StorageService_LogicalVolume>>(GetLogicalVolumeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tr140::StorageService_LogicalVolume>> AsyncGetLogicalVolume(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tr140::StorageService_LogicalVolume>>(AsyncGetLogicalVolumeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::tr140::StorageService_LogicalVolume>> SetLogicalVolume(::grpc::ClientContext* context, ::tr140::StorageReply* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::tr140::StorageService_LogicalVolume>>(SetLogicalVolumeRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::tr140::StorageService_LogicalVolume>> AsyncSetLogicalVolume(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::tr140::StorageService_LogicalVolume>>(AsyncSetLogicalVolumeRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReader< ::tr140::StorageService_LogicalVolume_Folder>> GetFolder(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::tr140::StorageService_LogicalVolume_Folder>>(GetFolderRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tr140::StorageService_LogicalVolume_Folder>> AsyncGetFolder(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tr140::StorageService_LogicalVolume_Folder>>(AsyncGetFolderRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::tr140::StorageService_LogicalVolume_Folder>> SetFolder(::grpc::ClientContext* context, ::tr140::StorageReply* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::tr140::StorageService_LogicalVolume_Folder>>(SetFolderRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::tr140::StorageService_LogicalVolume_Folder>> AsyncSetFolder(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::tr140::StorageService_LogicalVolume_Folder>>(AsyncSetFolderRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReader< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>> GetUserAccess(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>>(GetUserAccessRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>> AsyncGetUserAccess(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>>(AsyncGetUserAccessRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>> SetUserAccess(::grpc::ClientContext* context, ::tr140::StorageReply* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>>(SetUserAccessRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>> AsyncSetUserAccess(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>>(AsyncSetUserAccessRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReader< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>> GetGroupAccess(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>>(GetGroupAccessRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>> AsyncGetGroupAccess(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>>(AsyncGetGroupAccessRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>> SetGroupAccess(::grpc::ClientContext* context, ::tr140::StorageReply* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>>(SetGroupAccessRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>> AsyncSetGroupAccess(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>>(AsyncSetGroupAccessRaw(context, response, cq, tag));
    }
    ::grpc::Status GetQuota(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService_LogicalVolume_Folder_Quota* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_LogicalVolume_Folder_Quota>> AsyncGetQuota(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_LogicalVolume_Folder_Quota>>(AsyncGetQuotaRaw(context, request, cq));
    }
    ::grpc::Status SetQuota(::grpc::ClientContext* context, const ::tr140::StorageService_LogicalVolume_Folder_Quota& request, ::tr140::StorageReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>> AsyncSetQuota(::grpc::ClientContext* context, const ::tr140::StorageService_LogicalVolume_Folder_Quota& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>>(AsyncSetQuotaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::tr140::StorageService_UserGroup, ::tr140::StorageService_UserAccount>> GetMatchedUserAccout(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::tr140::StorageService_UserGroup, ::tr140::StorageService_UserAccount>>(GetMatchedUserAccoutRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::tr140::StorageService_UserGroup, ::tr140::StorageService_UserAccount>> AsyncGetMatchedUserAccout(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::tr140::StorageService_UserGroup, ::tr140::StorageService_UserAccount>>(AsyncGetMatchedUserAccoutRaw(context, cq, tag));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::tr140::StorageService>* AsyncGetStorageServiceRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>* AsyncSetStorageServiceRaw(::grpc::ClientContext* context, const ::tr140::StorageService& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_Capabilities>* AsyncGetCapabilitiesRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>* AsyncSetCapabilitiesRaw(::grpc::ClientContext* context, const ::tr140::StorageService_Capabilities& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_NetInfo>* AsyncGetNetInfoRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>* AsyncSetNetInfoRaw(::grpc::ClientContext* context, const ::tr140::StorageService_NetInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::tr140::StorageService_UserGroup>* GetUserGroupRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) override;
    ::grpc::ClientAsyncReader< ::tr140::StorageService_UserGroup>* AsyncGetUserGroupRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientWriter< ::tr140::StorageService_UserGroup>* SetUserGroupRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response) override;
    ::grpc::ClientAsyncWriter< ::tr140::StorageService_UserGroup>* AsyncSetUserGroupRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientReader< ::tr140::StorageService_UserAccount>* GetUserAccountRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) override;
    ::grpc::ClientAsyncReader< ::tr140::StorageService_UserAccount>* AsyncGetUserAccountRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientWriter< ::tr140::StorageService_UserAccount>* SetUserAccountRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response) override;
    ::grpc::ClientAsyncWriter< ::tr140::StorageService_UserAccount>* AsyncSetUserAccountRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_NetworkServer>* AsyncGetNetworkServerRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>* AsyncSetNetworkServerRaw(::grpc::ClientContext* context, const ::tr140::StorageService_NetworkServer& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_FTPServer>* AsyncGetFTPServerRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>* AsyncSetFTPServerRaw(::grpc::ClientContext* context, const ::tr140::StorageService_FTPServer& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_FTPServer_AnonymousUser>* AsyncGetAnonymousUserRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>* AsyncSetAnonymousUserRaw(::grpc::ClientContext* context, const ::tr140::StorageService_FTPServer_AnonymousUser& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_SFTPServer>* AsyncGetSFTPServerRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>* AsyncSetSFTPServerRaw(::grpc::ClientContext* context, const ::tr140::StorageService_SFTPServer& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_HTTPServer>* AsyncGetHTTPServerRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>* AsyncSetHTTPServerRaw(::grpc::ClientContext* context, const ::tr140::StorageService_HTTPServer& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_HTTPSServer>* AsyncGetHTTPSServerRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>* AsyncSetHTTPSServerRaw(::grpc::ClientContext* context, const ::tr140::StorageService_HTTPSServer& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::tr140::StorageService_PhysicalMedium>* GetPhysicalMediumRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) override;
    ::grpc::ClientAsyncReader< ::tr140::StorageService_PhysicalMedium>* AsyncGetPhysicalMediumRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientWriter< ::tr140::StorageService_PhysicalMedium>* SetPhysicalMediumRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response) override;
    ::grpc::ClientAsyncWriter< ::tr140::StorageService_PhysicalMedium>* AsyncSetPhysicalMediumRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_PhysicalMedium_SMART>* AsyncGetSMARTRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>* AsyncSetSMARTRaw(::grpc::ClientContext* context, const ::tr140::StorageService_PhysicalMedium_SMART& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::tr140::StorageService_StorageArray>* GetStorageArrayRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) override;
    ::grpc::ClientAsyncReader< ::tr140::StorageService_StorageArray>* AsyncGetStorageArrayRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientWriter< ::tr140::StorageService_StorageArray>* SetStorageArrayRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response) override;
    ::grpc::ClientAsyncWriter< ::tr140::StorageService_StorageArray>* AsyncSetStorageArrayRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientReader< ::tr140::StorageService_LogicalVolume>* GetLogicalVolumeRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) override;
    ::grpc::ClientAsyncReader< ::tr140::StorageService_LogicalVolume>* AsyncGetLogicalVolumeRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientWriter< ::tr140::StorageService_LogicalVolume>* SetLogicalVolumeRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response) override;
    ::grpc::ClientAsyncWriter< ::tr140::StorageService_LogicalVolume>* AsyncSetLogicalVolumeRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientReader< ::tr140::StorageService_LogicalVolume_Folder>* GetFolderRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) override;
    ::grpc::ClientAsyncReader< ::tr140::StorageService_LogicalVolume_Folder>* AsyncGetFolderRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientWriter< ::tr140::StorageService_LogicalVolume_Folder>* SetFolderRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response) override;
    ::grpc::ClientAsyncWriter< ::tr140::StorageService_LogicalVolume_Folder>* AsyncSetFolderRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientReader< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>* GetUserAccessRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) override;
    ::grpc::ClientAsyncReader< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>* AsyncGetUserAccessRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientWriter< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>* SetUserAccessRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response) override;
    ::grpc::ClientAsyncWriter< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>* AsyncSetUserAccessRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientReader< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>* GetGroupAccessRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) override;
    ::grpc::ClientAsyncReader< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>* AsyncGetGroupAccessRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientWriter< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>* SetGroupAccessRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response) override;
    ::grpc::ClientAsyncWriter< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>* AsyncSetGroupAccessRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_LogicalVolume_Folder_Quota>* AsyncGetQuotaRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>* AsyncSetQuotaRaw(::grpc::ClientContext* context, const ::tr140::StorageService_LogicalVolume_Folder_Quota& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::tr140::StorageService_UserGroup, ::tr140::StorageService_UserAccount>* GetMatchedUserAccoutRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::tr140::StorageService_UserGroup, ::tr140::StorageService_UserAccount>* AsyncGetMatchedUserAccoutRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    const ::grpc::RpcMethod rpcmethod_GetStorageService_;
    const ::grpc::RpcMethod rpcmethod_SetStorageService_;
    const ::grpc::RpcMethod rpcmethod_GetCapabilities_;
    const ::grpc::RpcMethod rpcmethod_SetCapabilities_;
    const ::grpc::RpcMethod rpcmethod_GetNetInfo_;
    const ::grpc::RpcMethod rpcmethod_SetNetInfo_;
    const ::grpc::RpcMethod rpcmethod_GetUserGroup_;
    const ::grpc::RpcMethod rpcmethod_SetUserGroup_;
    const ::grpc::RpcMethod rpcmethod_GetUserAccount_;
    const ::grpc::RpcMethod rpcmethod_SetUserAccount_;
    const ::grpc::RpcMethod rpcmethod_GetNetworkServer_;
    const ::grpc::RpcMethod rpcmethod_SetNetworkServer_;
    const ::grpc::RpcMethod rpcmethod_GetFTPServer_;
    const ::grpc::RpcMethod rpcmethod_SetFTPServer_;
    const ::grpc::RpcMethod rpcmethod_GetAnonymousUser_;
    const ::grpc::RpcMethod rpcmethod_SetAnonymousUser_;
    const ::grpc::RpcMethod rpcmethod_GetSFTPServer_;
    const ::grpc::RpcMethod rpcmethod_SetSFTPServer_;
    const ::grpc::RpcMethod rpcmethod_GetHTTPServer_;
    const ::grpc::RpcMethod rpcmethod_SetHTTPServer_;
    const ::grpc::RpcMethod rpcmethod_GetHTTPSServer_;
    const ::grpc::RpcMethod rpcmethod_SetHTTPSServer_;
    const ::grpc::RpcMethod rpcmethod_GetPhysicalMedium_;
    const ::grpc::RpcMethod rpcmethod_SetPhysicalMedium_;
    const ::grpc::RpcMethod rpcmethod_GetSMART_;
    const ::grpc::RpcMethod rpcmethod_SetSMART_;
    const ::grpc::RpcMethod rpcmethod_GetStorageArray_;
    const ::grpc::RpcMethod rpcmethod_SetStorageArray_;
    const ::grpc::RpcMethod rpcmethod_GetLogicalVolume_;
    const ::grpc::RpcMethod rpcmethod_SetLogicalVolume_;
    const ::grpc::RpcMethod rpcmethod_GetFolder_;
    const ::grpc::RpcMethod rpcmethod_SetFolder_;
    const ::grpc::RpcMethod rpcmethod_GetUserAccess_;
    const ::grpc::RpcMethod rpcmethod_SetUserAccess_;
    const ::grpc::RpcMethod rpcmethod_GetGroupAccess_;
    const ::grpc::RpcMethod rpcmethod_SetGroupAccess_;
    const ::grpc::RpcMethod rpcmethod_GetQuota_;
    const ::grpc::RpcMethod rpcmethod_SetQuota_;
    const ::grpc::RpcMethod rpcmethod_GetMatchedUserAccout_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetStorageService(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService* response);
    virtual ::grpc::Status SetStorageService(::grpc::ServerContext* context, const ::tr140::StorageService* request, ::tr140::StorageReply* response);
    virtual ::grpc::Status GetCapabilities(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_Capabilities* response);
    virtual ::grpc::Status SetCapabilities(::grpc::ServerContext* context, const ::tr140::StorageService_Capabilities* request, ::tr140::StorageReply* response);
    virtual ::grpc::Status GetNetInfo(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_NetInfo* response);
    virtual ::grpc::Status SetNetInfo(::grpc::ServerContext* context, const ::tr140::StorageService_NetInfo* request, ::tr140::StorageReply* response);
    virtual ::grpc::Status GetUserGroup(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_UserGroup>* writer);
    virtual ::grpc::Status SetUserGroup(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_UserGroup>* reader, ::tr140::StorageReply* response);
    virtual ::grpc::Status GetUserAccount(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_UserAccount>* writer);
    virtual ::grpc::Status SetUserAccount(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_UserAccount>* reader, ::tr140::StorageReply* response);
    virtual ::grpc::Status GetNetworkServer(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_NetworkServer* response);
    virtual ::grpc::Status SetNetworkServer(::grpc::ServerContext* context, const ::tr140::StorageService_NetworkServer* request, ::tr140::StorageReply* response);
    virtual ::grpc::Status GetFTPServer(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_FTPServer* response);
    virtual ::grpc::Status SetFTPServer(::grpc::ServerContext* context, const ::tr140::StorageService_FTPServer* request, ::tr140::StorageReply* response);
    virtual ::grpc::Status GetAnonymousUser(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_FTPServer_AnonymousUser* response);
    virtual ::grpc::Status SetAnonymousUser(::grpc::ServerContext* context, const ::tr140::StorageService_FTPServer_AnonymousUser* request, ::tr140::StorageReply* response);
    virtual ::grpc::Status GetSFTPServer(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_SFTPServer* response);
    virtual ::grpc::Status SetSFTPServer(::grpc::ServerContext* context, const ::tr140::StorageService_SFTPServer* request, ::tr140::StorageReply* response);
    virtual ::grpc::Status GetHTTPServer(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_HTTPServer* response);
    virtual ::grpc::Status SetHTTPServer(::grpc::ServerContext* context, const ::tr140::StorageService_HTTPServer* request, ::tr140::StorageReply* response);
    virtual ::grpc::Status GetHTTPSServer(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_HTTPSServer* response);
    virtual ::grpc::Status SetHTTPSServer(::grpc::ServerContext* context, const ::tr140::StorageService_HTTPSServer* request, ::tr140::StorageReply* response);
    virtual ::grpc::Status GetPhysicalMedium(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_PhysicalMedium>* writer);
    virtual ::grpc::Status SetPhysicalMedium(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_PhysicalMedium>* reader, ::tr140::StorageReply* response);
    virtual ::grpc::Status GetSMART(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_PhysicalMedium_SMART* response);
    virtual ::grpc::Status SetSMART(::grpc::ServerContext* context, const ::tr140::StorageService_PhysicalMedium_SMART* request, ::tr140::StorageReply* response);
    virtual ::grpc::Status GetStorageArray(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_StorageArray>* writer);
    virtual ::grpc::Status SetStorageArray(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_StorageArray>* reader, ::tr140::StorageReply* response);
    virtual ::grpc::Status GetLogicalVolume(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_LogicalVolume>* writer);
    virtual ::grpc::Status SetLogicalVolume(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_LogicalVolume>* reader, ::tr140::StorageReply* response);
    virtual ::grpc::Status GetFolder(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_LogicalVolume_Folder>* writer);
    virtual ::grpc::Status SetFolder(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_LogicalVolume_Folder>* reader, ::tr140::StorageReply* response);
    virtual ::grpc::Status GetUserAccess(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>* writer);
    virtual ::grpc::Status SetUserAccess(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>* reader, ::tr140::StorageReply* response);
    virtual ::grpc::Status GetGroupAccess(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>* writer);
    virtual ::grpc::Status SetGroupAccess(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>* reader, ::tr140::StorageReply* response);
    virtual ::grpc::Status GetQuota(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_LogicalVolume_Folder_Quota* response);
    virtual ::grpc::Status SetQuota(::grpc::ServerContext* context, const ::tr140::StorageService_LogicalVolume_Folder_Quota* request, ::tr140::StorageReply* response);
    virtual ::grpc::Status GetMatchedUserAccout(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::tr140::StorageService_UserAccount, ::tr140::StorageService_UserGroup>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStorageService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetStorageService() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetStorageService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStorageService(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStorageService(::grpc::ServerContext* context, ::tr140::StorageRequest* request, ::grpc::ServerAsyncResponseWriter< ::tr140::StorageService>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetStorageService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetStorageService() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SetStorageService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetStorageService(::grpc::ServerContext* context, const ::tr140::StorageService* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetStorageService(::grpc::ServerContext* context, ::tr140::StorageService* request, ::grpc::ServerAsyncResponseWriter< ::tr140::StorageReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCapabilities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetCapabilities() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetCapabilities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCapabilities(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_Capabilities* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCapabilities(::grpc::ServerContext* context, ::tr140::StorageRequest* request, ::grpc::ServerAsyncResponseWriter< ::tr140::StorageService_Capabilities>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetCapabilities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetCapabilities() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SetCapabilities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCapabilities(::grpc::ServerContext* context, const ::tr140::StorageService_Capabilities* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCapabilities(::grpc::ServerContext* context, ::tr140::StorageService_Capabilities* request, ::grpc::ServerAsyncResponseWriter< ::tr140::StorageReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetNetInfo() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetNetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNetInfo(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_NetInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNetInfo(::grpc::ServerContext* context, ::tr140::StorageRequest* request, ::grpc::ServerAsyncResponseWriter< ::tr140::StorageService_NetInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetNetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetNetInfo() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SetNetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNetInfo(::grpc::ServerContext* context, const ::tr140::StorageService_NetInfo* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetNetInfo(::grpc::ServerContext* context, ::tr140::StorageService_NetInfo* request, ::grpc::ServerAsyncResponseWriter< ::tr140::StorageReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUserGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetUserGroup() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetUserGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserGroup(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_UserGroup>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserGroup(::grpc::ServerContext* context, ::tr140::StorageRequest* request, ::grpc::ServerAsyncWriter< ::tr140::StorageService_UserGroup>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetUserGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetUserGroup() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SetUserGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetUserGroup(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_UserGroup>* reader, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetUserGroup(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::tr140::StorageReply, ::tr140::StorageService_UserGroup>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(7, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUserAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetUserAccount() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetUserAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserAccount(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_UserAccount>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserAccount(::grpc::ServerContext* context, ::tr140::StorageRequest* request, ::grpc::ServerAsyncWriter< ::tr140::StorageService_UserAccount>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(8, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetUserAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetUserAccount() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SetUserAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetUserAccount(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_UserAccount>* reader, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetUserAccount(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::tr140::StorageReply, ::tr140::StorageService_UserAccount>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(9, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNetworkServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetNetworkServer() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetNetworkServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNetworkServer(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_NetworkServer* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNetworkServer(::grpc::ServerContext* context, ::tr140::StorageRequest* request, ::grpc::ServerAsyncResponseWriter< ::tr140::StorageService_NetworkServer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetNetworkServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetNetworkServer() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_SetNetworkServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNetworkServer(::grpc::ServerContext* context, const ::tr140::StorageService_NetworkServer* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetNetworkServer(::grpc::ServerContext* context, ::tr140::StorageService_NetworkServer* request, ::grpc::ServerAsyncResponseWriter< ::tr140::StorageReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFTPServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetFTPServer() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetFTPServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFTPServer(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_FTPServer* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFTPServer(::grpc::ServerContext* context, ::tr140::StorageRequest* request, ::grpc::ServerAsyncResponseWriter< ::tr140::StorageService_FTPServer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetFTPServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetFTPServer() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_SetFTPServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFTPServer(::grpc::ServerContext* context, const ::tr140::StorageService_FTPServer* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetFTPServer(::grpc::ServerContext* context, ::tr140::StorageService_FTPServer* request, ::grpc::ServerAsyncResponseWriter< ::tr140::StorageReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAnonymousUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAnonymousUser() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_GetAnonymousUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnonymousUser(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_FTPServer_AnonymousUser* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAnonymousUser(::grpc::ServerContext* context, ::tr140::StorageRequest* request, ::grpc::ServerAsyncResponseWriter< ::tr140::StorageService_FTPServer_AnonymousUser>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetAnonymousUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetAnonymousUser() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_SetAnonymousUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAnonymousUser(::grpc::ServerContext* context, const ::tr140::StorageService_FTPServer_AnonymousUser* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAnonymousUser(::grpc::ServerContext* context, ::tr140::StorageService_FTPServer_AnonymousUser* request, ::grpc::ServerAsyncResponseWriter< ::tr140::StorageReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSFTPServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSFTPServer() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_GetSFTPServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSFTPServer(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_SFTPServer* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSFTPServer(::grpc::ServerContext* context, ::tr140::StorageRequest* request, ::grpc::ServerAsyncResponseWriter< ::tr140::StorageService_SFTPServer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetSFTPServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetSFTPServer() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_SetSFTPServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSFTPServer(::grpc::ServerContext* context, const ::tr140::StorageService_SFTPServer* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSFTPServer(::grpc::ServerContext* context, ::tr140::StorageService_SFTPServer* request, ::grpc::ServerAsyncResponseWriter< ::tr140::StorageReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetHTTPServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetHTTPServer() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_GetHTTPServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHTTPServer(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_HTTPServer* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHTTPServer(::grpc::ServerContext* context, ::tr140::StorageRequest* request, ::grpc::ServerAsyncResponseWriter< ::tr140::StorageService_HTTPServer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetHTTPServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetHTTPServer() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_SetHTTPServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetHTTPServer(::grpc::ServerContext* context, const ::tr140::StorageService_HTTPServer* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetHTTPServer(::grpc::ServerContext* context, ::tr140::StorageService_HTTPServer* request, ::grpc::ServerAsyncResponseWriter< ::tr140::StorageReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetHTTPSServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetHTTPSServer() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_GetHTTPSServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHTTPSServer(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_HTTPSServer* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHTTPSServer(::grpc::ServerContext* context, ::tr140::StorageRequest* request, ::grpc::ServerAsyncResponseWriter< ::tr140::StorageService_HTTPSServer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetHTTPSServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetHTTPSServer() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_SetHTTPSServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetHTTPSServer(::grpc::ServerContext* context, const ::tr140::StorageService_HTTPSServer* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetHTTPSServer(::grpc::ServerContext* context, ::tr140::StorageService_HTTPSServer* request, ::grpc::ServerAsyncResponseWriter< ::tr140::StorageReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPhysicalMedium : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetPhysicalMedium() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_GetPhysicalMedium() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPhysicalMedium(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_PhysicalMedium>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPhysicalMedium(::grpc::ServerContext* context, ::tr140::StorageRequest* request, ::grpc::ServerAsyncWriter< ::tr140::StorageService_PhysicalMedium>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(22, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPhysicalMedium : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetPhysicalMedium() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_SetPhysicalMedium() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPhysicalMedium(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_PhysicalMedium>* reader, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPhysicalMedium(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::tr140::StorageReply, ::tr140::StorageService_PhysicalMedium>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(23, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSMART : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSMART() {
      ::grpc::Service::MarkMethodAsync(24);
    }
    ~WithAsyncMethod_GetSMART() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSMART(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_PhysicalMedium_SMART* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSMART(::grpc::ServerContext* context, ::tr140::StorageRequest* request, ::grpc::ServerAsyncResponseWriter< ::tr140::StorageService_PhysicalMedium_SMART>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetSMART : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetSMART() {
      ::grpc::Service::MarkMethodAsync(25);
    }
    ~WithAsyncMethod_SetSMART() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSMART(::grpc::ServerContext* context, const ::tr140::StorageService_PhysicalMedium_SMART* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSMART(::grpc::ServerContext* context, ::tr140::StorageService_PhysicalMedium_SMART* request, ::grpc::ServerAsyncResponseWriter< ::tr140::StorageReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStorageArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetStorageArray() {
      ::grpc::Service::MarkMethodAsync(26);
    }
    ~WithAsyncMethod_GetStorageArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStorageArray(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_StorageArray>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStorageArray(::grpc::ServerContext* context, ::tr140::StorageRequest* request, ::grpc::ServerAsyncWriter< ::tr140::StorageService_StorageArray>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(26, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetStorageArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetStorageArray() {
      ::grpc::Service::MarkMethodAsync(27);
    }
    ~WithAsyncMethod_SetStorageArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetStorageArray(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_StorageArray>* reader, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetStorageArray(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::tr140::StorageReply, ::tr140::StorageService_StorageArray>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(27, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLogicalVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetLogicalVolume() {
      ::grpc::Service::MarkMethodAsync(28);
    }
    ~WithAsyncMethod_GetLogicalVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLogicalVolume(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_LogicalVolume>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLogicalVolume(::grpc::ServerContext* context, ::tr140::StorageRequest* request, ::grpc::ServerAsyncWriter< ::tr140::StorageService_LogicalVolume>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(28, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetLogicalVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetLogicalVolume() {
      ::grpc::Service::MarkMethodAsync(29);
    }
    ~WithAsyncMethod_SetLogicalVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLogicalVolume(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_LogicalVolume>* reader, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetLogicalVolume(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::tr140::StorageReply, ::tr140::StorageService_LogicalVolume>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(29, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetFolder() {
      ::grpc::Service::MarkMethodAsync(30);
    }
    ~WithAsyncMethod_GetFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFolder(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_LogicalVolume_Folder>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFolder(::grpc::ServerContext* context, ::tr140::StorageRequest* request, ::grpc::ServerAsyncWriter< ::tr140::StorageService_LogicalVolume_Folder>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(30, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetFolder() {
      ::grpc::Service::MarkMethodAsync(31);
    }
    ~WithAsyncMethod_SetFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFolder(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_LogicalVolume_Folder>* reader, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetFolder(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::tr140::StorageReply, ::tr140::StorageService_LogicalVolume_Folder>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(31, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUserAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetUserAccess() {
      ::grpc::Service::MarkMethodAsync(32);
    }
    ~WithAsyncMethod_GetUserAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserAccess(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserAccess(::grpc::ServerContext* context, ::tr140::StorageRequest* request, ::grpc::ServerAsyncWriter< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(32, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetUserAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetUserAccess() {
      ::grpc::Service::MarkMethodAsync(33);
    }
    ~WithAsyncMethod_SetUserAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetUserAccess(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>* reader, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetUserAccess(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::tr140::StorageReply, ::tr140::StorageService_LogicalVolume_Folder_UserAccess>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(33, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetGroupAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetGroupAccess() {
      ::grpc::Service::MarkMethodAsync(34);
    }
    ~WithAsyncMethod_GetGroupAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGroupAccess(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGroupAccess(::grpc::ServerContext* context, ::tr140::StorageRequest* request, ::grpc::ServerAsyncWriter< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(34, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetGroupAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetGroupAccess() {
      ::grpc::Service::MarkMethodAsync(35);
    }
    ~WithAsyncMethod_SetGroupAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGroupAccess(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>* reader, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetGroupAccess(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::tr140::StorageReply, ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(35, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetQuota : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetQuota() {
      ::grpc::Service::MarkMethodAsync(36);
    }
    ~WithAsyncMethod_GetQuota() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQuota(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_LogicalVolume_Folder_Quota* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetQuota(::grpc::ServerContext* context, ::tr140::StorageRequest* request, ::grpc::ServerAsyncResponseWriter< ::tr140::StorageService_LogicalVolume_Folder_Quota>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetQuota : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetQuota() {
      ::grpc::Service::MarkMethodAsync(37);
    }
    ~WithAsyncMethod_SetQuota() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetQuota(::grpc::ServerContext* context, const ::tr140::StorageService_LogicalVolume_Folder_Quota* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetQuota(::grpc::ServerContext* context, ::tr140::StorageService_LogicalVolume_Folder_Quota* request, ::grpc::ServerAsyncResponseWriter< ::tr140::StorageReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMatchedUserAccout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetMatchedUserAccout() {
      ::grpc::Service::MarkMethodAsync(38);
    }
    ~WithAsyncMethod_GetMatchedUserAccout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMatchedUserAccout(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::tr140::StorageService_UserAccount, ::tr140::StorageService_UserGroup>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMatchedUserAccout(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::tr140::StorageService_UserAccount, ::tr140::StorageService_UserGroup>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(38, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetStorageService<WithAsyncMethod_SetStorageService<WithAsyncMethod_GetCapabilities<WithAsyncMethod_SetCapabilities<WithAsyncMethod_GetNetInfo<WithAsyncMethod_SetNetInfo<WithAsyncMethod_GetUserGroup<WithAsyncMethod_SetUserGroup<WithAsyncMethod_GetUserAccount<WithAsyncMethod_SetUserAccount<WithAsyncMethod_GetNetworkServer<WithAsyncMethod_SetNetworkServer<WithAsyncMethod_GetFTPServer<WithAsyncMethod_SetFTPServer<WithAsyncMethod_GetAnonymousUser<WithAsyncMethod_SetAnonymousUser<WithAsyncMethod_GetSFTPServer<WithAsyncMethod_SetSFTPServer<WithAsyncMethod_GetHTTPServer<WithAsyncMethod_SetHTTPServer<WithAsyncMethod_GetHTTPSServer<WithAsyncMethod_SetHTTPSServer<WithAsyncMethod_GetPhysicalMedium<WithAsyncMethod_SetPhysicalMedium<WithAsyncMethod_GetSMART<WithAsyncMethod_SetSMART<WithAsyncMethod_GetStorageArray<WithAsyncMethod_SetStorageArray<WithAsyncMethod_GetLogicalVolume<WithAsyncMethod_SetLogicalVolume<WithAsyncMethod_GetFolder<WithAsyncMethod_SetFolder<WithAsyncMethod_GetUserAccess<WithAsyncMethod_SetUserAccess<WithAsyncMethod_GetGroupAccess<WithAsyncMethod_SetGroupAccess<WithAsyncMethod_GetQuota<WithAsyncMethod_SetQuota<WithAsyncMethod_GetMatchedUserAccout<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetStorageService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetStorageService() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetStorageService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStorageService(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetStorageService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetStorageService() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SetStorageService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetStorageService(::grpc::ServerContext* context, const ::tr140::StorageService* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCapabilities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetCapabilities() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetCapabilities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCapabilities(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_Capabilities* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetCapabilities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetCapabilities() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SetCapabilities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCapabilities(::grpc::ServerContext* context, const ::tr140::StorageService_Capabilities* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetNetInfo() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetNetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNetInfo(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_NetInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetNetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetNetInfo() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SetNetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNetInfo(::grpc::ServerContext* context, const ::tr140::StorageService_NetInfo* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetUserGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetUserGroup() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetUserGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserGroup(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_UserGroup>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetUserGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetUserGroup() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SetUserGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetUserGroup(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_UserGroup>* reader, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetUserAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetUserAccount() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetUserAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserAccount(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_UserAccount>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetUserAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetUserAccount() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SetUserAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetUserAccount(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_UserAccount>* reader, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNetworkServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetNetworkServer() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetNetworkServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNetworkServer(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_NetworkServer* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetNetworkServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetNetworkServer() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_SetNetworkServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNetworkServer(::grpc::ServerContext* context, const ::tr140::StorageService_NetworkServer* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFTPServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetFTPServer() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetFTPServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFTPServer(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_FTPServer* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetFTPServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetFTPServer() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_SetFTPServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFTPServer(::grpc::ServerContext* context, const ::tr140::StorageService_FTPServer* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAnonymousUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAnonymousUser() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_GetAnonymousUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnonymousUser(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_FTPServer_AnonymousUser* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetAnonymousUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetAnonymousUser() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_SetAnonymousUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAnonymousUser(::grpc::ServerContext* context, const ::tr140::StorageService_FTPServer_AnonymousUser* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSFTPServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSFTPServer() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_GetSFTPServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSFTPServer(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_SFTPServer* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetSFTPServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetSFTPServer() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_SetSFTPServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSFTPServer(::grpc::ServerContext* context, const ::tr140::StorageService_SFTPServer* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetHTTPServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetHTTPServer() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_GetHTTPServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHTTPServer(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_HTTPServer* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetHTTPServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetHTTPServer() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_SetHTTPServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetHTTPServer(::grpc::ServerContext* context, const ::tr140::StorageService_HTTPServer* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetHTTPSServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetHTTPSServer() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_GetHTTPSServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHTTPSServer(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_HTTPSServer* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetHTTPSServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetHTTPSServer() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_SetHTTPSServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetHTTPSServer(::grpc::ServerContext* context, const ::tr140::StorageService_HTTPSServer* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPhysicalMedium : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetPhysicalMedium() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_GetPhysicalMedium() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPhysicalMedium(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_PhysicalMedium>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetPhysicalMedium : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetPhysicalMedium() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_SetPhysicalMedium() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPhysicalMedium(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_PhysicalMedium>* reader, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSMART : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSMART() {
      ::grpc::Service::MarkMethodGeneric(24);
    }
    ~WithGenericMethod_GetSMART() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSMART(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_PhysicalMedium_SMART* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetSMART : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetSMART() {
      ::grpc::Service::MarkMethodGeneric(25);
    }
    ~WithGenericMethod_SetSMART() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSMART(::grpc::ServerContext* context, const ::tr140::StorageService_PhysicalMedium_SMART* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetStorageArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetStorageArray() {
      ::grpc::Service::MarkMethodGeneric(26);
    }
    ~WithGenericMethod_GetStorageArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStorageArray(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_StorageArray>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetStorageArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetStorageArray() {
      ::grpc::Service::MarkMethodGeneric(27);
    }
    ~WithGenericMethod_SetStorageArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetStorageArray(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_StorageArray>* reader, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLogicalVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetLogicalVolume() {
      ::grpc::Service::MarkMethodGeneric(28);
    }
    ~WithGenericMethod_GetLogicalVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLogicalVolume(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_LogicalVolume>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetLogicalVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetLogicalVolume() {
      ::grpc::Service::MarkMethodGeneric(29);
    }
    ~WithGenericMethod_SetLogicalVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLogicalVolume(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_LogicalVolume>* reader, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetFolder() {
      ::grpc::Service::MarkMethodGeneric(30);
    }
    ~WithGenericMethod_GetFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFolder(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_LogicalVolume_Folder>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetFolder() {
      ::grpc::Service::MarkMethodGeneric(31);
    }
    ~WithGenericMethod_SetFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFolder(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_LogicalVolume_Folder>* reader, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetUserAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetUserAccess() {
      ::grpc::Service::MarkMethodGeneric(32);
    }
    ~WithGenericMethod_GetUserAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserAccess(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetUserAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetUserAccess() {
      ::grpc::Service::MarkMethodGeneric(33);
    }
    ~WithGenericMethod_SetUserAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetUserAccess(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>* reader, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetGroupAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetGroupAccess() {
      ::grpc::Service::MarkMethodGeneric(34);
    }
    ~WithGenericMethod_GetGroupAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGroupAccess(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetGroupAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetGroupAccess() {
      ::grpc::Service::MarkMethodGeneric(35);
    }
    ~WithGenericMethod_SetGroupAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGroupAccess(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>* reader, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetQuota : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetQuota() {
      ::grpc::Service::MarkMethodGeneric(36);
    }
    ~WithGenericMethod_GetQuota() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQuota(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_LogicalVolume_Folder_Quota* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetQuota : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetQuota() {
      ::grpc::Service::MarkMethodGeneric(37);
    }
    ~WithGenericMethod_SetQuota() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetQuota(::grpc::ServerContext* context, const ::tr140::StorageService_LogicalVolume_Folder_Quota* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMatchedUserAccout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetMatchedUserAccout() {
      ::grpc::Service::MarkMethodGeneric(38);
    }
    ~WithGenericMethod_GetMatchedUserAccout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMatchedUserAccout(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::tr140::StorageService_UserAccount, ::tr140::StorageService_UserGroup>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStorageService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetStorageService() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::tr140::StorageRequest, ::tr140::StorageService>(std::bind(&WithStreamedUnaryMethod_GetStorageService<BaseClass>::StreamedGetStorageService, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetStorageService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStorageService(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStorageService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tr140::StorageRequest,::tr140::StorageService>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetStorageService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetStorageService() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::tr140::StorageService, ::tr140::StorageReply>(std::bind(&WithStreamedUnaryMethod_SetStorageService<BaseClass>::StreamedSetStorageService, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetStorageService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetStorageService(::grpc::ServerContext* context, const ::tr140::StorageService* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetStorageService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tr140::StorageService,::tr140::StorageReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCapabilities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetCapabilities() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::tr140::StorageRequest, ::tr140::StorageService_Capabilities>(std::bind(&WithStreamedUnaryMethod_GetCapabilities<BaseClass>::StreamedGetCapabilities, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetCapabilities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCapabilities(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_Capabilities* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCapabilities(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tr140::StorageRequest,::tr140::StorageService_Capabilities>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetCapabilities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetCapabilities() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::tr140::StorageService_Capabilities, ::tr140::StorageReply>(std::bind(&WithStreamedUnaryMethod_SetCapabilities<BaseClass>::StreamedSetCapabilities, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetCapabilities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetCapabilities(::grpc::ServerContext* context, const ::tr140::StorageService_Capabilities* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetCapabilities(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tr140::StorageService_Capabilities,::tr140::StorageReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetNetInfo() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::StreamedUnaryHandler< ::tr140::StorageRequest, ::tr140::StorageService_NetInfo>(std::bind(&WithStreamedUnaryMethod_GetNetInfo<BaseClass>::StreamedGetNetInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetNetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNetInfo(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_NetInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNetInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tr140::StorageRequest,::tr140::StorageService_NetInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetNetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetNetInfo() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::StreamedUnaryHandler< ::tr140::StorageService_NetInfo, ::tr140::StorageReply>(std::bind(&WithStreamedUnaryMethod_SetNetInfo<BaseClass>::StreamedSetNetInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetNetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetNetInfo(::grpc::ServerContext* context, const ::tr140::StorageService_NetInfo* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetNetInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tr140::StorageService_NetInfo,::tr140::StorageReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNetworkServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetNetworkServer() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::StreamedUnaryHandler< ::tr140::StorageRequest, ::tr140::StorageService_NetworkServer>(std::bind(&WithStreamedUnaryMethod_GetNetworkServer<BaseClass>::StreamedGetNetworkServer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetNetworkServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNetworkServer(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_NetworkServer* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNetworkServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tr140::StorageRequest,::tr140::StorageService_NetworkServer>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetNetworkServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetNetworkServer() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::StreamedUnaryHandler< ::tr140::StorageService_NetworkServer, ::tr140::StorageReply>(std::bind(&WithStreamedUnaryMethod_SetNetworkServer<BaseClass>::StreamedSetNetworkServer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetNetworkServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetNetworkServer(::grpc::ServerContext* context, const ::tr140::StorageService_NetworkServer* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetNetworkServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tr140::StorageService_NetworkServer,::tr140::StorageReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFTPServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetFTPServer() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::StreamedUnaryHandler< ::tr140::StorageRequest, ::tr140::StorageService_FTPServer>(std::bind(&WithStreamedUnaryMethod_GetFTPServer<BaseClass>::StreamedGetFTPServer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetFTPServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFTPServer(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_FTPServer* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFTPServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tr140::StorageRequest,::tr140::StorageService_FTPServer>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetFTPServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetFTPServer() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::StreamedUnaryHandler< ::tr140::StorageService_FTPServer, ::tr140::StorageReply>(std::bind(&WithStreamedUnaryMethod_SetFTPServer<BaseClass>::StreamedSetFTPServer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetFTPServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetFTPServer(::grpc::ServerContext* context, const ::tr140::StorageService_FTPServer* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetFTPServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tr140::StorageService_FTPServer,::tr140::StorageReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAnonymousUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetAnonymousUser() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::StreamedUnaryHandler< ::tr140::StorageRequest, ::tr140::StorageService_FTPServer_AnonymousUser>(std::bind(&WithStreamedUnaryMethod_GetAnonymousUser<BaseClass>::StreamedGetAnonymousUser, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAnonymousUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAnonymousUser(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_FTPServer_AnonymousUser* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAnonymousUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tr140::StorageRequest,::tr140::StorageService_FTPServer_AnonymousUser>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetAnonymousUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetAnonymousUser() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::StreamedUnaryHandler< ::tr140::StorageService_FTPServer_AnonymousUser, ::tr140::StorageReply>(std::bind(&WithStreamedUnaryMethod_SetAnonymousUser<BaseClass>::StreamedSetAnonymousUser, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetAnonymousUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetAnonymousUser(::grpc::ServerContext* context, const ::tr140::StorageService_FTPServer_AnonymousUser* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetAnonymousUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tr140::StorageService_FTPServer_AnonymousUser,::tr140::StorageReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSFTPServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetSFTPServer() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::StreamedUnaryHandler< ::tr140::StorageRequest, ::tr140::StorageService_SFTPServer>(std::bind(&WithStreamedUnaryMethod_GetSFTPServer<BaseClass>::StreamedGetSFTPServer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSFTPServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSFTPServer(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_SFTPServer* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSFTPServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tr140::StorageRequest,::tr140::StorageService_SFTPServer>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetSFTPServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetSFTPServer() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::StreamedUnaryHandler< ::tr140::StorageService_SFTPServer, ::tr140::StorageReply>(std::bind(&WithStreamedUnaryMethod_SetSFTPServer<BaseClass>::StreamedSetSFTPServer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetSFTPServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetSFTPServer(::grpc::ServerContext* context, const ::tr140::StorageService_SFTPServer* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetSFTPServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tr140::StorageService_SFTPServer,::tr140::StorageReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetHTTPServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetHTTPServer() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::StreamedUnaryHandler< ::tr140::StorageRequest, ::tr140::StorageService_HTTPServer>(std::bind(&WithStreamedUnaryMethod_GetHTTPServer<BaseClass>::StreamedGetHTTPServer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetHTTPServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetHTTPServer(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_HTTPServer* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetHTTPServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tr140::StorageRequest,::tr140::StorageService_HTTPServer>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetHTTPServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetHTTPServer() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::StreamedUnaryHandler< ::tr140::StorageService_HTTPServer, ::tr140::StorageReply>(std::bind(&WithStreamedUnaryMethod_SetHTTPServer<BaseClass>::StreamedSetHTTPServer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetHTTPServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetHTTPServer(::grpc::ServerContext* context, const ::tr140::StorageService_HTTPServer* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetHTTPServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tr140::StorageService_HTTPServer,::tr140::StorageReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetHTTPSServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetHTTPSServer() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::StreamedUnaryHandler< ::tr140::StorageRequest, ::tr140::StorageService_HTTPSServer>(std::bind(&WithStreamedUnaryMethod_GetHTTPSServer<BaseClass>::StreamedGetHTTPSServer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetHTTPSServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetHTTPSServer(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_HTTPSServer* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetHTTPSServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tr140::StorageRequest,::tr140::StorageService_HTTPSServer>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetHTTPSServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetHTTPSServer() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::StreamedUnaryHandler< ::tr140::StorageService_HTTPSServer, ::tr140::StorageReply>(std::bind(&WithStreamedUnaryMethod_SetHTTPSServer<BaseClass>::StreamedSetHTTPSServer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetHTTPSServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetHTTPSServer(::grpc::ServerContext* context, const ::tr140::StorageService_HTTPSServer* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetHTTPSServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tr140::StorageService_HTTPSServer,::tr140::StorageReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSMART : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetSMART() {
      ::grpc::Service::MarkMethodStreamed(24,
        new ::grpc::StreamedUnaryHandler< ::tr140::StorageRequest, ::tr140::StorageService_PhysicalMedium_SMART>(std::bind(&WithStreamedUnaryMethod_GetSMART<BaseClass>::StreamedGetSMART, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSMART() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSMART(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_PhysicalMedium_SMART* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSMART(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tr140::StorageRequest,::tr140::StorageService_PhysicalMedium_SMART>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetSMART : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetSMART() {
      ::grpc::Service::MarkMethodStreamed(25,
        new ::grpc::StreamedUnaryHandler< ::tr140::StorageService_PhysicalMedium_SMART, ::tr140::StorageReply>(std::bind(&WithStreamedUnaryMethod_SetSMART<BaseClass>::StreamedSetSMART, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetSMART() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetSMART(::grpc::ServerContext* context, const ::tr140::StorageService_PhysicalMedium_SMART* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetSMART(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tr140::StorageService_PhysicalMedium_SMART,::tr140::StorageReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetQuota : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetQuota() {
      ::grpc::Service::MarkMethodStreamed(36,
        new ::grpc::StreamedUnaryHandler< ::tr140::StorageRequest, ::tr140::StorageService_LogicalVolume_Folder_Quota>(std::bind(&WithStreamedUnaryMethod_GetQuota<BaseClass>::StreamedGetQuota, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetQuota() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetQuota(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_LogicalVolume_Folder_Quota* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetQuota(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tr140::StorageRequest,::tr140::StorageService_LogicalVolume_Folder_Quota>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetQuota : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetQuota() {
      ::grpc::Service::MarkMethodStreamed(37,
        new ::grpc::StreamedUnaryHandler< ::tr140::StorageService_LogicalVolume_Folder_Quota, ::tr140::StorageReply>(std::bind(&WithStreamedUnaryMethod_SetQuota<BaseClass>::StreamedSetQuota, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetQuota() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetQuota(::grpc::ServerContext* context, const ::tr140::StorageService_LogicalVolume_Folder_Quota* request, ::tr140::StorageReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetQuota(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tr140::StorageService_LogicalVolume_Folder_Quota,::tr140::StorageReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetStorageService<WithStreamedUnaryMethod_SetStorageService<WithStreamedUnaryMethod_GetCapabilities<WithStreamedUnaryMethod_SetCapabilities<WithStreamedUnaryMethod_GetNetInfo<WithStreamedUnaryMethod_SetNetInfo<WithStreamedUnaryMethod_GetNetworkServer<WithStreamedUnaryMethod_SetNetworkServer<WithStreamedUnaryMethod_GetFTPServer<WithStreamedUnaryMethod_SetFTPServer<WithStreamedUnaryMethod_GetAnonymousUser<WithStreamedUnaryMethod_SetAnonymousUser<WithStreamedUnaryMethod_GetSFTPServer<WithStreamedUnaryMethod_SetSFTPServer<WithStreamedUnaryMethod_GetHTTPServer<WithStreamedUnaryMethod_SetHTTPServer<WithStreamedUnaryMethod_GetHTTPSServer<WithStreamedUnaryMethod_SetHTTPSServer<WithStreamedUnaryMethod_GetSMART<WithStreamedUnaryMethod_SetSMART<WithStreamedUnaryMethod_GetQuota<WithStreamedUnaryMethod_SetQuota<Service > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetUserGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetUserGroup() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::SplitServerStreamingHandler< ::tr140::StorageRequest, ::tr140::StorageService_UserGroup>(std::bind(&WithSplitStreamingMethod_GetUserGroup<BaseClass>::StreamedGetUserGroup, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetUserGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUserGroup(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_UserGroup>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetUserGroup(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::tr140::StorageRequest,::tr140::StorageService_UserGroup>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetUserAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetUserAccount() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::SplitServerStreamingHandler< ::tr140::StorageRequest, ::tr140::StorageService_UserAccount>(std::bind(&WithSplitStreamingMethod_GetUserAccount<BaseClass>::StreamedGetUserAccount, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetUserAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUserAccount(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_UserAccount>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetUserAccount(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::tr140::StorageRequest,::tr140::StorageService_UserAccount>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetPhysicalMedium : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetPhysicalMedium() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::SplitServerStreamingHandler< ::tr140::StorageRequest, ::tr140::StorageService_PhysicalMedium>(std::bind(&WithSplitStreamingMethod_GetPhysicalMedium<BaseClass>::StreamedGetPhysicalMedium, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetPhysicalMedium() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPhysicalMedium(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_PhysicalMedium>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetPhysicalMedium(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::tr140::StorageRequest,::tr140::StorageService_PhysicalMedium>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetStorageArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetStorageArray() {
      ::grpc::Service::MarkMethodStreamed(26,
        new ::grpc::SplitServerStreamingHandler< ::tr140::StorageRequest, ::tr140::StorageService_StorageArray>(std::bind(&WithSplitStreamingMethod_GetStorageArray<BaseClass>::StreamedGetStorageArray, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetStorageArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStorageArray(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_StorageArray>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetStorageArray(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::tr140::StorageRequest,::tr140::StorageService_StorageArray>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetLogicalVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetLogicalVolume() {
      ::grpc::Service::MarkMethodStreamed(28,
        new ::grpc::SplitServerStreamingHandler< ::tr140::StorageRequest, ::tr140::StorageService_LogicalVolume>(std::bind(&WithSplitStreamingMethod_GetLogicalVolume<BaseClass>::StreamedGetLogicalVolume, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetLogicalVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLogicalVolume(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_LogicalVolume>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetLogicalVolume(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::tr140::StorageRequest,::tr140::StorageService_LogicalVolume>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetFolder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetFolder() {
      ::grpc::Service::MarkMethodStreamed(30,
        new ::grpc::SplitServerStreamingHandler< ::tr140::StorageRequest, ::tr140::StorageService_LogicalVolume_Folder>(std::bind(&WithSplitStreamingMethod_GetFolder<BaseClass>::StreamedGetFolder, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetFolder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFolder(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_LogicalVolume_Folder>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetFolder(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::tr140::StorageRequest,::tr140::StorageService_LogicalVolume_Folder>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetUserAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetUserAccess() {
      ::grpc::Service::MarkMethodStreamed(32,
        new ::grpc::SplitServerStreamingHandler< ::tr140::StorageRequest, ::tr140::StorageService_LogicalVolume_Folder_UserAccess>(std::bind(&WithSplitStreamingMethod_GetUserAccess<BaseClass>::StreamedGetUserAccess, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetUserAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUserAccess(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetUserAccess(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::tr140::StorageRequest,::tr140::StorageService_LogicalVolume_Folder_UserAccess>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetGroupAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetGroupAccess() {
      ::grpc::Service::MarkMethodStreamed(34,
        new ::grpc::SplitServerStreamingHandler< ::tr140::StorageRequest, ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>(std::bind(&WithSplitStreamingMethod_GetGroupAccess<BaseClass>::StreamedGetGroupAccess, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetGroupAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetGroupAccess(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetGroupAccess(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::tr140::StorageRequest,::tr140::StorageService_LogicalVolume_Folder_GroupAccess>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetUserGroup<WithSplitStreamingMethod_GetUserAccount<WithSplitStreamingMethod_GetPhysicalMedium<WithSplitStreamingMethod_GetStorageArray<WithSplitStreamingMethod_GetLogicalVolume<WithSplitStreamingMethod_GetFolder<WithSplitStreamingMethod_GetUserAccess<WithSplitStreamingMethod_GetGroupAccess<Service > > > > > > > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetStorageService<WithStreamedUnaryMethod_SetStorageService<WithStreamedUnaryMethod_GetCapabilities<WithStreamedUnaryMethod_SetCapabilities<WithStreamedUnaryMethod_GetNetInfo<WithStreamedUnaryMethod_SetNetInfo<WithSplitStreamingMethod_GetUserGroup<WithSplitStreamingMethod_GetUserAccount<WithStreamedUnaryMethod_GetNetworkServer<WithStreamedUnaryMethod_SetNetworkServer<WithStreamedUnaryMethod_GetFTPServer<WithStreamedUnaryMethod_SetFTPServer<WithStreamedUnaryMethod_GetAnonymousUser<WithStreamedUnaryMethod_SetAnonymousUser<WithStreamedUnaryMethod_GetSFTPServer<WithStreamedUnaryMethod_SetSFTPServer<WithStreamedUnaryMethod_GetHTTPServer<WithStreamedUnaryMethod_SetHTTPServer<WithStreamedUnaryMethod_GetHTTPSServer<WithStreamedUnaryMethod_SetHTTPSServer<WithSplitStreamingMethod_GetPhysicalMedium<WithStreamedUnaryMethod_GetSMART<WithStreamedUnaryMethod_SetSMART<WithSplitStreamingMethod_GetStorageArray<WithSplitStreamingMethod_GetLogicalVolume<WithSplitStreamingMethod_GetFolder<WithSplitStreamingMethod_GetUserAccess<WithSplitStreamingMethod_GetGroupAccess<WithStreamedUnaryMethod_GetQuota<WithStreamedUnaryMethod_SetQuota<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace tr140


#endif  // GRPC_tr_2d140_2eproto__INCLUDED
