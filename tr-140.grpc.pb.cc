// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tr-140.proto

#include "tr-140.pb.h"
#include "tr-140.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace tr140 {

static const char* Storage_method_names[] = {
  "/tr140.Storage/GetStorageService",
  "/tr140.Storage/SetStorageService",
  "/tr140.Storage/GetCapabilities",
  "/tr140.Storage/SetCapabilities",
  "/tr140.Storage/GetNetInfo",
  "/tr140.Storage/SetNetInfo",
  "/tr140.Storage/GetUserGroup",
  "/tr140.Storage/SetUserGroup",
  "/tr140.Storage/GetUserAccount",
  "/tr140.Storage/SetUserAccount",
  "/tr140.Storage/GetNetworkServer",
  "/tr140.Storage/SetNetworkServer",
  "/tr140.Storage/GetFTPServer",
  "/tr140.Storage/SetFTPServer",
  "/tr140.Storage/GetAnonymousUser",
  "/tr140.Storage/SetAnonymousUser",
  "/tr140.Storage/GetSFTPServer",
  "/tr140.Storage/SetSFTPServer",
  "/tr140.Storage/GetHTTPServer",
  "/tr140.Storage/SetHTTPServer",
  "/tr140.Storage/GetHTTPSServer",
  "/tr140.Storage/SetHTTPSServer",
  "/tr140.Storage/GetPhysicalMedium",
  "/tr140.Storage/SetPhysicalMedium",
  "/tr140.Storage/GetSMART",
  "/tr140.Storage/SetSMART",
  "/tr140.Storage/GetStorageArray",
  "/tr140.Storage/SetStorageArray",
  "/tr140.Storage/GetLogicalVolume",
  "/tr140.Storage/SetLogicalVolume",
  "/tr140.Storage/GetFolder",
  "/tr140.Storage/SetFolder",
  "/tr140.Storage/GetUserAccess",
  "/tr140.Storage/SetUserAccess",
  "/tr140.Storage/GetGroupAccess",
  "/tr140.Storage/SetGroupAccess",
  "/tr140.Storage/GetQuota",
  "/tr140.Storage/SetQuota",
  "/tr140.Storage/GetMatchedUserAccout",
};

std::unique_ptr< Storage::Stub> Storage::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Storage::Stub> stub(new Storage::Stub(channel));
  return stub;
}

Storage::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetStorageService_(Storage_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetStorageService_(Storage_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCapabilities_(Storage_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCapabilities_(Storage_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNetInfo_(Storage_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetNetInfo_(Storage_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUserGroup_(Storage_method_names[6], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SetUserGroup_(Storage_method_names[7], ::grpc::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_GetUserAccount_(Storage_method_names[8], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SetUserAccount_(Storage_method_names[9], ::grpc::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_GetNetworkServer_(Storage_method_names[10], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetNetworkServer_(Storage_method_names[11], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFTPServer_(Storage_method_names[12], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetFTPServer_(Storage_method_names[13], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAnonymousUser_(Storage_method_names[14], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAnonymousUser_(Storage_method_names[15], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSFTPServer_(Storage_method_names[16], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSFTPServer_(Storage_method_names[17], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetHTTPServer_(Storage_method_names[18], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetHTTPServer_(Storage_method_names[19], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetHTTPSServer_(Storage_method_names[20], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetHTTPSServer_(Storage_method_names[21], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPhysicalMedium_(Storage_method_names[22], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SetPhysicalMedium_(Storage_method_names[23], ::grpc::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_GetSMART_(Storage_method_names[24], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSMART_(Storage_method_names[25], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStorageArray_(Storage_method_names[26], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SetStorageArray_(Storage_method_names[27], ::grpc::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_GetLogicalVolume_(Storage_method_names[28], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SetLogicalVolume_(Storage_method_names[29], ::grpc::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_GetFolder_(Storage_method_names[30], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SetFolder_(Storage_method_names[31], ::grpc::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_GetUserAccess_(Storage_method_names[32], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SetUserAccess_(Storage_method_names[33], ::grpc::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_GetGroupAccess_(Storage_method_names[34], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SetGroupAccess_(Storage_method_names[35], ::grpc::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_GetQuota_(Storage_method_names[36], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetQuota_(Storage_method_names[37], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMatchedUserAccout_(Storage_method_names[38], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status Storage::Stub::GetStorageService(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetStorageService_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tr140::StorageService>* Storage::Stub::AsyncGetStorageServiceRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::tr140::StorageService>::Create(channel_.get(), cq, rpcmethod_GetStorageService_, context, request);
}

::grpc::Status Storage::Stub::SetStorageService(::grpc::ClientContext* context, const ::tr140::StorageService& request, ::tr140::StorageReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SetStorageService_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>* Storage::Stub::AsyncSetStorageServiceRaw(::grpc::ClientContext* context, const ::tr140::StorageService& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>::Create(channel_.get(), cq, rpcmethod_SetStorageService_, context, request);
}

::grpc::Status Storage::Stub::GetCapabilities(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService_Capabilities* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetCapabilities_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tr140::StorageService_Capabilities>* Storage::Stub::AsyncGetCapabilitiesRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_Capabilities>::Create(channel_.get(), cq, rpcmethod_GetCapabilities_, context, request);
}

::grpc::Status Storage::Stub::SetCapabilities(::grpc::ClientContext* context, const ::tr140::StorageService_Capabilities& request, ::tr140::StorageReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SetCapabilities_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>* Storage::Stub::AsyncSetCapabilitiesRaw(::grpc::ClientContext* context, const ::tr140::StorageService_Capabilities& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>::Create(channel_.get(), cq, rpcmethod_SetCapabilities_, context, request);
}

::grpc::Status Storage::Stub::GetNetInfo(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService_NetInfo* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetNetInfo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tr140::StorageService_NetInfo>* Storage::Stub::AsyncGetNetInfoRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_NetInfo>::Create(channel_.get(), cq, rpcmethod_GetNetInfo_, context, request);
}

::grpc::Status Storage::Stub::SetNetInfo(::grpc::ClientContext* context, const ::tr140::StorageService_NetInfo& request, ::tr140::StorageReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SetNetInfo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>* Storage::Stub::AsyncSetNetInfoRaw(::grpc::ClientContext* context, const ::tr140::StorageService_NetInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>::Create(channel_.get(), cq, rpcmethod_SetNetInfo_, context, request);
}

::grpc::ClientReader< ::tr140::StorageService_UserGroup>* Storage::Stub::GetUserGroupRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) {
  return new ::grpc::ClientReader< ::tr140::StorageService_UserGroup>(channel_.get(), rpcmethod_GetUserGroup_, context, request);
}

::grpc::ClientAsyncReader< ::tr140::StorageService_UserGroup>* Storage::Stub::AsyncGetUserGroupRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncReader< ::tr140::StorageService_UserGroup>::Create(channel_.get(), cq, rpcmethod_GetUserGroup_, context, request, tag);
}

::grpc::ClientWriter< ::tr140::StorageService_UserGroup>* Storage::Stub::SetUserGroupRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response) {
  return new ::grpc::ClientWriter< ::tr140::StorageService_UserGroup>(channel_.get(), rpcmethod_SetUserGroup_, context, response);
}

::grpc::ClientAsyncWriter< ::tr140::StorageService_UserGroup>* Storage::Stub::AsyncSetUserGroupRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncWriter< ::tr140::StorageService_UserGroup>::Create(channel_.get(), cq, rpcmethod_SetUserGroup_, context, response, tag);
}

::grpc::ClientReader< ::tr140::StorageService_UserAccount>* Storage::Stub::GetUserAccountRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) {
  return new ::grpc::ClientReader< ::tr140::StorageService_UserAccount>(channel_.get(), rpcmethod_GetUserAccount_, context, request);
}

::grpc::ClientAsyncReader< ::tr140::StorageService_UserAccount>* Storage::Stub::AsyncGetUserAccountRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncReader< ::tr140::StorageService_UserAccount>::Create(channel_.get(), cq, rpcmethod_GetUserAccount_, context, request, tag);
}

::grpc::ClientWriter< ::tr140::StorageService_UserAccount>* Storage::Stub::SetUserAccountRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response) {
  return new ::grpc::ClientWriter< ::tr140::StorageService_UserAccount>(channel_.get(), rpcmethod_SetUserAccount_, context, response);
}

::grpc::ClientAsyncWriter< ::tr140::StorageService_UserAccount>* Storage::Stub::AsyncSetUserAccountRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncWriter< ::tr140::StorageService_UserAccount>::Create(channel_.get(), cq, rpcmethod_SetUserAccount_, context, response, tag);
}

::grpc::Status Storage::Stub::GetNetworkServer(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService_NetworkServer* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetNetworkServer_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tr140::StorageService_NetworkServer>* Storage::Stub::AsyncGetNetworkServerRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_NetworkServer>::Create(channel_.get(), cq, rpcmethod_GetNetworkServer_, context, request);
}

::grpc::Status Storage::Stub::SetNetworkServer(::grpc::ClientContext* context, const ::tr140::StorageService_NetworkServer& request, ::tr140::StorageReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SetNetworkServer_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>* Storage::Stub::AsyncSetNetworkServerRaw(::grpc::ClientContext* context, const ::tr140::StorageService_NetworkServer& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>::Create(channel_.get(), cq, rpcmethod_SetNetworkServer_, context, request);
}

::grpc::Status Storage::Stub::GetFTPServer(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService_FTPServer* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetFTPServer_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tr140::StorageService_FTPServer>* Storage::Stub::AsyncGetFTPServerRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_FTPServer>::Create(channel_.get(), cq, rpcmethod_GetFTPServer_, context, request);
}

::grpc::Status Storage::Stub::SetFTPServer(::grpc::ClientContext* context, const ::tr140::StorageService_FTPServer& request, ::tr140::StorageReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SetFTPServer_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>* Storage::Stub::AsyncSetFTPServerRaw(::grpc::ClientContext* context, const ::tr140::StorageService_FTPServer& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>::Create(channel_.get(), cq, rpcmethod_SetFTPServer_, context, request);
}

::grpc::Status Storage::Stub::GetAnonymousUser(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService_FTPServer_AnonymousUser* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetAnonymousUser_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tr140::StorageService_FTPServer_AnonymousUser>* Storage::Stub::AsyncGetAnonymousUserRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_FTPServer_AnonymousUser>::Create(channel_.get(), cq, rpcmethod_GetAnonymousUser_, context, request);
}

::grpc::Status Storage::Stub::SetAnonymousUser(::grpc::ClientContext* context, const ::tr140::StorageService_FTPServer_AnonymousUser& request, ::tr140::StorageReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SetAnonymousUser_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>* Storage::Stub::AsyncSetAnonymousUserRaw(::grpc::ClientContext* context, const ::tr140::StorageService_FTPServer_AnonymousUser& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>::Create(channel_.get(), cq, rpcmethod_SetAnonymousUser_, context, request);
}

::grpc::Status Storage::Stub::GetSFTPServer(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService_SFTPServer* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetSFTPServer_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tr140::StorageService_SFTPServer>* Storage::Stub::AsyncGetSFTPServerRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_SFTPServer>::Create(channel_.get(), cq, rpcmethod_GetSFTPServer_, context, request);
}

::grpc::Status Storage::Stub::SetSFTPServer(::grpc::ClientContext* context, const ::tr140::StorageService_SFTPServer& request, ::tr140::StorageReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SetSFTPServer_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>* Storage::Stub::AsyncSetSFTPServerRaw(::grpc::ClientContext* context, const ::tr140::StorageService_SFTPServer& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>::Create(channel_.get(), cq, rpcmethod_SetSFTPServer_, context, request);
}

::grpc::Status Storage::Stub::GetHTTPServer(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService_HTTPServer* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetHTTPServer_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tr140::StorageService_HTTPServer>* Storage::Stub::AsyncGetHTTPServerRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_HTTPServer>::Create(channel_.get(), cq, rpcmethod_GetHTTPServer_, context, request);
}

::grpc::Status Storage::Stub::SetHTTPServer(::grpc::ClientContext* context, const ::tr140::StorageService_HTTPServer& request, ::tr140::StorageReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SetHTTPServer_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>* Storage::Stub::AsyncSetHTTPServerRaw(::grpc::ClientContext* context, const ::tr140::StorageService_HTTPServer& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>::Create(channel_.get(), cq, rpcmethod_SetHTTPServer_, context, request);
}

::grpc::Status Storage::Stub::GetHTTPSServer(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService_HTTPSServer* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetHTTPSServer_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tr140::StorageService_HTTPSServer>* Storage::Stub::AsyncGetHTTPSServerRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_HTTPSServer>::Create(channel_.get(), cq, rpcmethod_GetHTTPSServer_, context, request);
}

::grpc::Status Storage::Stub::SetHTTPSServer(::grpc::ClientContext* context, const ::tr140::StorageService_HTTPSServer& request, ::tr140::StorageReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SetHTTPSServer_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>* Storage::Stub::AsyncSetHTTPSServerRaw(::grpc::ClientContext* context, const ::tr140::StorageService_HTTPSServer& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>::Create(channel_.get(), cq, rpcmethod_SetHTTPSServer_, context, request);
}

::grpc::ClientReader< ::tr140::StorageService_PhysicalMedium>* Storage::Stub::GetPhysicalMediumRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) {
  return new ::grpc::ClientReader< ::tr140::StorageService_PhysicalMedium>(channel_.get(), rpcmethod_GetPhysicalMedium_, context, request);
}

::grpc::ClientAsyncReader< ::tr140::StorageService_PhysicalMedium>* Storage::Stub::AsyncGetPhysicalMediumRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncReader< ::tr140::StorageService_PhysicalMedium>::Create(channel_.get(), cq, rpcmethod_GetPhysicalMedium_, context, request, tag);
}

::grpc::ClientWriter< ::tr140::StorageService_PhysicalMedium>* Storage::Stub::SetPhysicalMediumRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response) {
  return new ::grpc::ClientWriter< ::tr140::StorageService_PhysicalMedium>(channel_.get(), rpcmethod_SetPhysicalMedium_, context, response);
}

::grpc::ClientAsyncWriter< ::tr140::StorageService_PhysicalMedium>* Storage::Stub::AsyncSetPhysicalMediumRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncWriter< ::tr140::StorageService_PhysicalMedium>::Create(channel_.get(), cq, rpcmethod_SetPhysicalMedium_, context, response, tag);
}

::grpc::Status Storage::Stub::GetSMART(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService_PhysicalMedium_SMART* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetSMART_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tr140::StorageService_PhysicalMedium_SMART>* Storage::Stub::AsyncGetSMARTRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_PhysicalMedium_SMART>::Create(channel_.get(), cq, rpcmethod_GetSMART_, context, request);
}

::grpc::Status Storage::Stub::SetSMART(::grpc::ClientContext* context, const ::tr140::StorageService_PhysicalMedium_SMART& request, ::tr140::StorageReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SetSMART_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>* Storage::Stub::AsyncSetSMARTRaw(::grpc::ClientContext* context, const ::tr140::StorageService_PhysicalMedium_SMART& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>::Create(channel_.get(), cq, rpcmethod_SetSMART_, context, request);
}

::grpc::ClientReader< ::tr140::StorageService_StorageArray>* Storage::Stub::GetStorageArrayRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) {
  return new ::grpc::ClientReader< ::tr140::StorageService_StorageArray>(channel_.get(), rpcmethod_GetStorageArray_, context, request);
}

::grpc::ClientAsyncReader< ::tr140::StorageService_StorageArray>* Storage::Stub::AsyncGetStorageArrayRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncReader< ::tr140::StorageService_StorageArray>::Create(channel_.get(), cq, rpcmethod_GetStorageArray_, context, request, tag);
}

::grpc::ClientWriter< ::tr140::StorageService_StorageArray>* Storage::Stub::SetStorageArrayRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response) {
  return new ::grpc::ClientWriter< ::tr140::StorageService_StorageArray>(channel_.get(), rpcmethod_SetStorageArray_, context, response);
}

::grpc::ClientAsyncWriter< ::tr140::StorageService_StorageArray>* Storage::Stub::AsyncSetStorageArrayRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncWriter< ::tr140::StorageService_StorageArray>::Create(channel_.get(), cq, rpcmethod_SetStorageArray_, context, response, tag);
}

::grpc::ClientReader< ::tr140::StorageService_LogicalVolume>* Storage::Stub::GetLogicalVolumeRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) {
  return new ::grpc::ClientReader< ::tr140::StorageService_LogicalVolume>(channel_.get(), rpcmethod_GetLogicalVolume_, context, request);
}

::grpc::ClientAsyncReader< ::tr140::StorageService_LogicalVolume>* Storage::Stub::AsyncGetLogicalVolumeRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncReader< ::tr140::StorageService_LogicalVolume>::Create(channel_.get(), cq, rpcmethod_GetLogicalVolume_, context, request, tag);
}

::grpc::ClientWriter< ::tr140::StorageService_LogicalVolume>* Storage::Stub::SetLogicalVolumeRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response) {
  return new ::grpc::ClientWriter< ::tr140::StorageService_LogicalVolume>(channel_.get(), rpcmethod_SetLogicalVolume_, context, response);
}

::grpc::ClientAsyncWriter< ::tr140::StorageService_LogicalVolume>* Storage::Stub::AsyncSetLogicalVolumeRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncWriter< ::tr140::StorageService_LogicalVolume>::Create(channel_.get(), cq, rpcmethod_SetLogicalVolume_, context, response, tag);
}

::grpc::ClientReader< ::tr140::StorageService_LogicalVolume_Folder>* Storage::Stub::GetFolderRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) {
  return new ::grpc::ClientReader< ::tr140::StorageService_LogicalVolume_Folder>(channel_.get(), rpcmethod_GetFolder_, context, request);
}

::grpc::ClientAsyncReader< ::tr140::StorageService_LogicalVolume_Folder>* Storage::Stub::AsyncGetFolderRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncReader< ::tr140::StorageService_LogicalVolume_Folder>::Create(channel_.get(), cq, rpcmethod_GetFolder_, context, request, tag);
}

::grpc::ClientWriter< ::tr140::StorageService_LogicalVolume_Folder>* Storage::Stub::SetFolderRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response) {
  return new ::grpc::ClientWriter< ::tr140::StorageService_LogicalVolume_Folder>(channel_.get(), rpcmethod_SetFolder_, context, response);
}

::grpc::ClientAsyncWriter< ::tr140::StorageService_LogicalVolume_Folder>* Storage::Stub::AsyncSetFolderRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncWriter< ::tr140::StorageService_LogicalVolume_Folder>::Create(channel_.get(), cq, rpcmethod_SetFolder_, context, response, tag);
}

::grpc::ClientReader< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>* Storage::Stub::GetUserAccessRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) {
  return new ::grpc::ClientReader< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>(channel_.get(), rpcmethod_GetUserAccess_, context, request);
}

::grpc::ClientAsyncReader< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>* Storage::Stub::AsyncGetUserAccessRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncReader< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>::Create(channel_.get(), cq, rpcmethod_GetUserAccess_, context, request, tag);
}

::grpc::ClientWriter< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>* Storage::Stub::SetUserAccessRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response) {
  return new ::grpc::ClientWriter< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>(channel_.get(), rpcmethod_SetUserAccess_, context, response);
}

::grpc::ClientAsyncWriter< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>* Storage::Stub::AsyncSetUserAccessRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncWriter< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>::Create(channel_.get(), cq, rpcmethod_SetUserAccess_, context, response, tag);
}

::grpc::ClientReader< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>* Storage::Stub::GetGroupAccessRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request) {
  return new ::grpc::ClientReader< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>(channel_.get(), rpcmethod_GetGroupAccess_, context, request);
}

::grpc::ClientAsyncReader< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>* Storage::Stub::AsyncGetGroupAccessRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncReader< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>::Create(channel_.get(), cq, rpcmethod_GetGroupAccess_, context, request, tag);
}

::grpc::ClientWriter< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>* Storage::Stub::SetGroupAccessRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response) {
  return new ::grpc::ClientWriter< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>(channel_.get(), rpcmethod_SetGroupAccess_, context, response);
}

::grpc::ClientAsyncWriter< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>* Storage::Stub::AsyncSetGroupAccessRaw(::grpc::ClientContext* context, ::tr140::StorageReply* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncWriter< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>::Create(channel_.get(), cq, rpcmethod_SetGroupAccess_, context, response, tag);
}

::grpc::Status Storage::Stub::GetQuota(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::tr140::StorageService_LogicalVolume_Folder_Quota* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetQuota_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tr140::StorageService_LogicalVolume_Folder_Quota>* Storage::Stub::AsyncGetQuotaRaw(::grpc::ClientContext* context, const ::tr140::StorageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::tr140::StorageService_LogicalVolume_Folder_Quota>::Create(channel_.get(), cq, rpcmethod_GetQuota_, context, request);
}

::grpc::Status Storage::Stub::SetQuota(::grpc::ClientContext* context, const ::tr140::StorageService_LogicalVolume_Folder_Quota& request, ::tr140::StorageReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SetQuota_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>* Storage::Stub::AsyncSetQuotaRaw(::grpc::ClientContext* context, const ::tr140::StorageService_LogicalVolume_Folder_Quota& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::tr140::StorageReply>::Create(channel_.get(), cq, rpcmethod_SetQuota_, context, request);
}

::grpc::ClientReaderWriter< ::tr140::StorageService_UserGroup, ::tr140::StorageService_UserAccount>* Storage::Stub::GetMatchedUserAccoutRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::tr140::StorageService_UserGroup, ::tr140::StorageService_UserAccount>(channel_.get(), rpcmethod_GetMatchedUserAccout_, context);
}

::grpc::ClientAsyncReaderWriter< ::tr140::StorageService_UserGroup, ::tr140::StorageService_UserAccount>* Storage::Stub::AsyncGetMatchedUserAccoutRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncReaderWriter< ::tr140::StorageService_UserGroup, ::tr140::StorageService_UserAccount>::Create(channel_.get(), cq, rpcmethod_GetMatchedUserAccout_, context, tag);
}

Storage::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Storage::Service, ::tr140::StorageRequest, ::tr140::StorageService>(
          std::mem_fn(&Storage::Service::GetStorageService), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Storage::Service, ::tr140::StorageService, ::tr140::StorageReply>(
          std::mem_fn(&Storage::Service::SetStorageService), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Storage::Service, ::tr140::StorageRequest, ::tr140::StorageService_Capabilities>(
          std::mem_fn(&Storage::Service::GetCapabilities), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Storage::Service, ::tr140::StorageService_Capabilities, ::tr140::StorageReply>(
          std::mem_fn(&Storage::Service::SetCapabilities), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Storage::Service, ::tr140::StorageRequest, ::tr140::StorageService_NetInfo>(
          std::mem_fn(&Storage::Service::GetNetInfo), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Storage::Service, ::tr140::StorageService_NetInfo, ::tr140::StorageReply>(
          std::mem_fn(&Storage::Service::SetNetInfo), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[6],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< Storage::Service, ::tr140::StorageRequest, ::tr140::StorageService_UserGroup>(
          std::mem_fn(&Storage::Service::GetUserGroup), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[7],
      ::grpc::RpcMethod::CLIENT_STREAMING,
      new ::grpc::ClientStreamingHandler< Storage::Service, ::tr140::StorageService_UserGroup, ::tr140::StorageReply>(
          std::mem_fn(&Storage::Service::SetUserGroup), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[8],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< Storage::Service, ::tr140::StorageRequest, ::tr140::StorageService_UserAccount>(
          std::mem_fn(&Storage::Service::GetUserAccount), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[9],
      ::grpc::RpcMethod::CLIENT_STREAMING,
      new ::grpc::ClientStreamingHandler< Storage::Service, ::tr140::StorageService_UserAccount, ::tr140::StorageReply>(
          std::mem_fn(&Storage::Service::SetUserAccount), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[10],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Storage::Service, ::tr140::StorageRequest, ::tr140::StorageService_NetworkServer>(
          std::mem_fn(&Storage::Service::GetNetworkServer), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[11],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Storage::Service, ::tr140::StorageService_NetworkServer, ::tr140::StorageReply>(
          std::mem_fn(&Storage::Service::SetNetworkServer), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[12],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Storage::Service, ::tr140::StorageRequest, ::tr140::StorageService_FTPServer>(
          std::mem_fn(&Storage::Service::GetFTPServer), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[13],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Storage::Service, ::tr140::StorageService_FTPServer, ::tr140::StorageReply>(
          std::mem_fn(&Storage::Service::SetFTPServer), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[14],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Storage::Service, ::tr140::StorageRequest, ::tr140::StorageService_FTPServer_AnonymousUser>(
          std::mem_fn(&Storage::Service::GetAnonymousUser), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[15],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Storage::Service, ::tr140::StorageService_FTPServer_AnonymousUser, ::tr140::StorageReply>(
          std::mem_fn(&Storage::Service::SetAnonymousUser), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[16],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Storage::Service, ::tr140::StorageRequest, ::tr140::StorageService_SFTPServer>(
          std::mem_fn(&Storage::Service::GetSFTPServer), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[17],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Storage::Service, ::tr140::StorageService_SFTPServer, ::tr140::StorageReply>(
          std::mem_fn(&Storage::Service::SetSFTPServer), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[18],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Storage::Service, ::tr140::StorageRequest, ::tr140::StorageService_HTTPServer>(
          std::mem_fn(&Storage::Service::GetHTTPServer), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[19],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Storage::Service, ::tr140::StorageService_HTTPServer, ::tr140::StorageReply>(
          std::mem_fn(&Storage::Service::SetHTTPServer), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[20],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Storage::Service, ::tr140::StorageRequest, ::tr140::StorageService_HTTPSServer>(
          std::mem_fn(&Storage::Service::GetHTTPSServer), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[21],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Storage::Service, ::tr140::StorageService_HTTPSServer, ::tr140::StorageReply>(
          std::mem_fn(&Storage::Service::SetHTTPSServer), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[22],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< Storage::Service, ::tr140::StorageRequest, ::tr140::StorageService_PhysicalMedium>(
          std::mem_fn(&Storage::Service::GetPhysicalMedium), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[23],
      ::grpc::RpcMethod::CLIENT_STREAMING,
      new ::grpc::ClientStreamingHandler< Storage::Service, ::tr140::StorageService_PhysicalMedium, ::tr140::StorageReply>(
          std::mem_fn(&Storage::Service::SetPhysicalMedium), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[24],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Storage::Service, ::tr140::StorageRequest, ::tr140::StorageService_PhysicalMedium_SMART>(
          std::mem_fn(&Storage::Service::GetSMART), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[25],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Storage::Service, ::tr140::StorageService_PhysicalMedium_SMART, ::tr140::StorageReply>(
          std::mem_fn(&Storage::Service::SetSMART), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[26],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< Storage::Service, ::tr140::StorageRequest, ::tr140::StorageService_StorageArray>(
          std::mem_fn(&Storage::Service::GetStorageArray), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[27],
      ::grpc::RpcMethod::CLIENT_STREAMING,
      new ::grpc::ClientStreamingHandler< Storage::Service, ::tr140::StorageService_StorageArray, ::tr140::StorageReply>(
          std::mem_fn(&Storage::Service::SetStorageArray), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[28],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< Storage::Service, ::tr140::StorageRequest, ::tr140::StorageService_LogicalVolume>(
          std::mem_fn(&Storage::Service::GetLogicalVolume), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[29],
      ::grpc::RpcMethod::CLIENT_STREAMING,
      new ::grpc::ClientStreamingHandler< Storage::Service, ::tr140::StorageService_LogicalVolume, ::tr140::StorageReply>(
          std::mem_fn(&Storage::Service::SetLogicalVolume), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[30],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< Storage::Service, ::tr140::StorageRequest, ::tr140::StorageService_LogicalVolume_Folder>(
          std::mem_fn(&Storage::Service::GetFolder), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[31],
      ::grpc::RpcMethod::CLIENT_STREAMING,
      new ::grpc::ClientStreamingHandler< Storage::Service, ::tr140::StorageService_LogicalVolume_Folder, ::tr140::StorageReply>(
          std::mem_fn(&Storage::Service::SetFolder), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[32],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< Storage::Service, ::tr140::StorageRequest, ::tr140::StorageService_LogicalVolume_Folder_UserAccess>(
          std::mem_fn(&Storage::Service::GetUserAccess), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[33],
      ::grpc::RpcMethod::CLIENT_STREAMING,
      new ::grpc::ClientStreamingHandler< Storage::Service, ::tr140::StorageService_LogicalVolume_Folder_UserAccess, ::tr140::StorageReply>(
          std::mem_fn(&Storage::Service::SetUserAccess), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[34],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< Storage::Service, ::tr140::StorageRequest, ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>(
          std::mem_fn(&Storage::Service::GetGroupAccess), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[35],
      ::grpc::RpcMethod::CLIENT_STREAMING,
      new ::grpc::ClientStreamingHandler< Storage::Service, ::tr140::StorageService_LogicalVolume_Folder_GroupAccess, ::tr140::StorageReply>(
          std::mem_fn(&Storage::Service::SetGroupAccess), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[36],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Storage::Service, ::tr140::StorageRequest, ::tr140::StorageService_LogicalVolume_Folder_Quota>(
          std::mem_fn(&Storage::Service::GetQuota), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[37],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Storage::Service, ::tr140::StorageService_LogicalVolume_Folder_Quota, ::tr140::StorageReply>(
          std::mem_fn(&Storage::Service::SetQuota), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Storage_method_names[38],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< Storage::Service, ::tr140::StorageService_UserGroup, ::tr140::StorageService_UserAccount>(
          std::mem_fn(&Storage::Service::GetMatchedUserAccout), this)));
}

Storage::Service::~Service() {
}

::grpc::Status Storage::Service::GetStorageService(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::SetStorageService(::grpc::ServerContext* context, const ::tr140::StorageService* request, ::tr140::StorageReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::GetCapabilities(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_Capabilities* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::SetCapabilities(::grpc::ServerContext* context, const ::tr140::StorageService_Capabilities* request, ::tr140::StorageReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::GetNetInfo(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_NetInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::SetNetInfo(::grpc::ServerContext* context, const ::tr140::StorageService_NetInfo* request, ::tr140::StorageReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::GetUserGroup(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_UserGroup>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::SetUserGroup(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_UserGroup>* reader, ::tr140::StorageReply* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::GetUserAccount(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_UserAccount>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::SetUserAccount(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_UserAccount>* reader, ::tr140::StorageReply* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::GetNetworkServer(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_NetworkServer* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::SetNetworkServer(::grpc::ServerContext* context, const ::tr140::StorageService_NetworkServer* request, ::tr140::StorageReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::GetFTPServer(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_FTPServer* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::SetFTPServer(::grpc::ServerContext* context, const ::tr140::StorageService_FTPServer* request, ::tr140::StorageReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::GetAnonymousUser(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_FTPServer_AnonymousUser* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::SetAnonymousUser(::grpc::ServerContext* context, const ::tr140::StorageService_FTPServer_AnonymousUser* request, ::tr140::StorageReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::GetSFTPServer(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_SFTPServer* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::SetSFTPServer(::grpc::ServerContext* context, const ::tr140::StorageService_SFTPServer* request, ::tr140::StorageReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::GetHTTPServer(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_HTTPServer* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::SetHTTPServer(::grpc::ServerContext* context, const ::tr140::StorageService_HTTPServer* request, ::tr140::StorageReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::GetHTTPSServer(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_HTTPSServer* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::SetHTTPSServer(::grpc::ServerContext* context, const ::tr140::StorageService_HTTPSServer* request, ::tr140::StorageReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::GetPhysicalMedium(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_PhysicalMedium>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::SetPhysicalMedium(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_PhysicalMedium>* reader, ::tr140::StorageReply* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::GetSMART(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_PhysicalMedium_SMART* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::SetSMART(::grpc::ServerContext* context, const ::tr140::StorageService_PhysicalMedium_SMART* request, ::tr140::StorageReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::GetStorageArray(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_StorageArray>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::SetStorageArray(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_StorageArray>* reader, ::tr140::StorageReply* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::GetLogicalVolume(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_LogicalVolume>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::SetLogicalVolume(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_LogicalVolume>* reader, ::tr140::StorageReply* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::GetFolder(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_LogicalVolume_Folder>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::SetFolder(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_LogicalVolume_Folder>* reader, ::tr140::StorageReply* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::GetUserAccess(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::SetUserAccess(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_LogicalVolume_Folder_UserAccess>* reader, ::tr140::StorageReply* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::GetGroupAccess(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::grpc::ServerWriter< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::SetGroupAccess(::grpc::ServerContext* context, ::grpc::ServerReader< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess>* reader, ::tr140::StorageReply* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::GetQuota(::grpc::ServerContext* context, const ::tr140::StorageRequest* request, ::tr140::StorageService_LogicalVolume_Folder_Quota* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::SetQuota(::grpc::ServerContext* context, const ::tr140::StorageService_LogicalVolume_Folder_Quota* request, ::tr140::StorageReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::GetMatchedUserAccout(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::tr140::StorageService_UserAccount, ::tr140::StorageService_UserGroup>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tr140

