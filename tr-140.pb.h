// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tr-140.proto

#ifndef PROTOBUF_tr_2d140_2eproto__INCLUDED
#define PROTOBUF_tr_2d140_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace tr140 {
class StorageReply;
class StorageReplyDefaultTypeInternal;
extern StorageReplyDefaultTypeInternal _StorageReply_default_instance_;
class StorageRequest;
class StorageRequestDefaultTypeInternal;
extern StorageRequestDefaultTypeInternal _StorageRequest_default_instance_;
class StorageService;
class StorageServiceDefaultTypeInternal;
extern StorageServiceDefaultTypeInternal _StorageService_default_instance_;
class StorageService_Capabilities;
class StorageService_CapabilitiesDefaultTypeInternal;
extern StorageService_CapabilitiesDefaultTypeInternal _StorageService_Capabilities_default_instance_;
class StorageService_FTPServer;
class StorageService_FTPServerDefaultTypeInternal;
extern StorageService_FTPServerDefaultTypeInternal _StorageService_FTPServer_default_instance_;
class StorageService_FTPServer_AnonymousUser;
class StorageService_FTPServer_AnonymousUserDefaultTypeInternal;
extern StorageService_FTPServer_AnonymousUserDefaultTypeInternal _StorageService_FTPServer_AnonymousUser_default_instance_;
class StorageService_HTTPSServer;
class StorageService_HTTPSServerDefaultTypeInternal;
extern StorageService_HTTPSServerDefaultTypeInternal _StorageService_HTTPSServer_default_instance_;
class StorageService_HTTPServer;
class StorageService_HTTPServerDefaultTypeInternal;
extern StorageService_HTTPServerDefaultTypeInternal _StorageService_HTTPServer_default_instance_;
class StorageService_LogicalVolume;
class StorageService_LogicalVolumeDefaultTypeInternal;
extern StorageService_LogicalVolumeDefaultTypeInternal _StorageService_LogicalVolume_default_instance_;
class StorageService_LogicalVolume_Folder;
class StorageService_LogicalVolume_FolderDefaultTypeInternal;
extern StorageService_LogicalVolume_FolderDefaultTypeInternal _StorageService_LogicalVolume_Folder_default_instance_;
class StorageService_LogicalVolume_Folder_GroupAccess;
class StorageService_LogicalVolume_Folder_GroupAccessDefaultTypeInternal;
extern StorageService_LogicalVolume_Folder_GroupAccessDefaultTypeInternal _StorageService_LogicalVolume_Folder_GroupAccess_default_instance_;
class StorageService_LogicalVolume_Folder_Quota;
class StorageService_LogicalVolume_Folder_QuotaDefaultTypeInternal;
extern StorageService_LogicalVolume_Folder_QuotaDefaultTypeInternal _StorageService_LogicalVolume_Folder_Quota_default_instance_;
class StorageService_LogicalVolume_Folder_UserAccess;
class StorageService_LogicalVolume_Folder_UserAccessDefaultTypeInternal;
extern StorageService_LogicalVolume_Folder_UserAccessDefaultTypeInternal _StorageService_LogicalVolume_Folder_UserAccess_default_instance_;
class StorageService_NetInfo;
class StorageService_NetInfoDefaultTypeInternal;
extern StorageService_NetInfoDefaultTypeInternal _StorageService_NetInfo_default_instance_;
class StorageService_NetworkServer;
class StorageService_NetworkServerDefaultTypeInternal;
extern StorageService_NetworkServerDefaultTypeInternal _StorageService_NetworkServer_default_instance_;
class StorageService_PhysicalMedium;
class StorageService_PhysicalMediumDefaultTypeInternal;
extern StorageService_PhysicalMediumDefaultTypeInternal _StorageService_PhysicalMedium_default_instance_;
class StorageService_PhysicalMedium_SMART;
class StorageService_PhysicalMedium_SMARTDefaultTypeInternal;
extern StorageService_PhysicalMedium_SMARTDefaultTypeInternal _StorageService_PhysicalMedium_SMART_default_instance_;
class StorageService_SFTPServer;
class StorageService_SFTPServerDefaultTypeInternal;
extern StorageService_SFTPServerDefaultTypeInternal _StorageService_SFTPServer_default_instance_;
class StorageService_StorageArray;
class StorageService_StorageArrayDefaultTypeInternal;
extern StorageService_StorageArrayDefaultTypeInternal _StorageService_StorageArray_default_instance_;
class StorageService_UserAccount;
class StorageService_UserAccountDefaultTypeInternal;
extern StorageService_UserAccountDefaultTypeInternal _StorageService_UserAccount_default_instance_;
class StorageService_UserGroup;
class StorageService_UserGroupDefaultTypeInternal;
extern StorageService_UserGroupDefaultTypeInternal _StorageService_UserGroup_default_instance_;
class X_012345_Message;
class X_012345_MessageDefaultTypeInternal;
extern X_012345_MessageDefaultTypeInternal _X_012345_Message_default_instance_;
}  // namespace tr140

namespace tr140 {

namespace protobuf_tr_2d140_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_tr_2d140_2eproto

// ===================================================================

class StorageService_Capabilities : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tr140.StorageService.Capabilities) */ {
 public:
  StorageService_Capabilities();
  virtual ~StorageService_Capabilities();

  StorageService_Capabilities(const StorageService_Capabilities& from);

  inline StorageService_Capabilities& operator=(const StorageService_Capabilities& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageService_Capabilities& default_instance();

  static inline const StorageService_Capabilities* internal_default_instance() {
    return reinterpret_cast<const StorageService_Capabilities*>(
               &_StorageService_Capabilities_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(StorageService_Capabilities* other);

  // implements Message ----------------------------------------------

  inline StorageService_Capabilities* New() const PROTOBUF_FINAL { return New(NULL); }

  StorageService_Capabilities* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StorageService_Capabilities& from);
  void MergeFrom(const StorageService_Capabilities& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StorageService_Capabilities* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string supported_network_protocols = 6;
  void clear_supported_network_protocols();
  static const int kSupportedNetworkProtocolsFieldNumber = 6;
  const ::std::string& supported_network_protocols() const;
  void set_supported_network_protocols(const ::std::string& value);
  #if LANG_CXX11
  void set_supported_network_protocols(::std::string&& value);
  #endif
  void set_supported_network_protocols(const char* value);
  void set_supported_network_protocols(const char* value, size_t size);
  ::std::string* mutable_supported_network_protocols();
  ::std::string* release_supported_network_protocols();
  void set_allocated_supported_network_protocols(::std::string* supported_network_protocols);

  // string supported_file_system_types = 7;
  void clear_supported_file_system_types();
  static const int kSupportedFileSystemTypesFieldNumber = 7;
  const ::std::string& supported_file_system_types() const;
  void set_supported_file_system_types(const ::std::string& value);
  #if LANG_CXX11
  void set_supported_file_system_types(::std::string&& value);
  #endif
  void set_supported_file_system_types(const char* value);
  void set_supported_file_system_types(const char* value, size_t size);
  ::std::string* mutable_supported_file_system_types();
  ::std::string* release_supported_file_system_types();
  void set_allocated_supported_file_system_types(::std::string* supported_file_system_types);

  // string supported_raid_types = 8;
  void clear_supported_raid_types();
  static const int kSupportedRaidTypesFieldNumber = 8;
  const ::std::string& supported_raid_types() const;
  void set_supported_raid_types(const ::std::string& value);
  #if LANG_CXX11
  void set_supported_raid_types(::std::string&& value);
  #endif
  void set_supported_raid_types(const char* value);
  void set_supported_raid_types(const char* value, size_t size);
  ::std::string* mutable_supported_raid_types();
  ::std::string* release_supported_raid_types();
  void set_allocated_supported_raid_types(::std::string* supported_raid_types);

  // bool ftpcapable = 1;
  void clear_ftpcapable();
  static const int kFtpcapableFieldNumber = 1;
  bool ftpcapable() const;
  void set_ftpcapable(bool value);

  // bool sftpcapable = 2;
  void clear_sftpcapable();
  static const int kSftpcapableFieldNumber = 2;
  bool sftpcapable() const;
  void set_sftpcapable(bool value);

  // bool httpcapable = 3;
  void clear_httpcapable();
  static const int kHttpcapableFieldNumber = 3;
  bool httpcapable() const;
  void set_httpcapable(bool value);

  // bool httpscapable = 4;
  void clear_httpscapable();
  static const int kHttpscapableFieldNumber = 4;
  bool httpscapable() const;
  void set_httpscapable(bool value);

  // bool httpwritable = 5;
  void clear_httpwritable();
  static const int kHttpwritableFieldNumber = 5;
  bool httpwritable() const;
  void set_httpwritable(bool value);

  // bool volume_encryption_capable = 9;
  void clear_volume_encryption_capable();
  static const int kVolumeEncryptionCapableFieldNumber = 9;
  bool volume_encryption_capable() const;
  void set_volume_encryption_capable(bool value);

  // @@protoc_insertion_point(class_scope:tr140.StorageService.Capabilities)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr supported_network_protocols_;
  ::google::protobuf::internal::ArenaStringPtr supported_file_system_types_;
  ::google::protobuf::internal::ArenaStringPtr supported_raid_types_;
  bool ftpcapable_;
  bool sftpcapable_;
  bool httpcapable_;
  bool httpscapable_;
  bool httpwritable_;
  bool volume_encryption_capable_;
  mutable int _cached_size_;
  friend struct protobuf_tr_2d140_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StorageService_NetInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tr140.StorageService.NetInfo) */ {
 public:
  StorageService_NetInfo();
  virtual ~StorageService_NetInfo();

  StorageService_NetInfo(const StorageService_NetInfo& from);

  inline StorageService_NetInfo& operator=(const StorageService_NetInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageService_NetInfo& default_instance();

  static inline const StorageService_NetInfo* internal_default_instance() {
    return reinterpret_cast<const StorageService_NetInfo*>(
               &_StorageService_NetInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(StorageService_NetInfo* other);

  // implements Message ----------------------------------------------

  inline StorageService_NetInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  StorageService_NetInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StorageService_NetInfo& from);
  void MergeFrom(const StorageService_NetInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StorageService_NetInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string host_name = 1;
  void clear_host_name();
  static const int kHostNameFieldNumber = 1;
  const ::std::string& host_name() const;
  void set_host_name(const ::std::string& value);
  #if LANG_CXX11
  void set_host_name(::std::string&& value);
  #endif
  void set_host_name(const char* value);
  void set_host_name(const char* value, size_t size);
  ::std::string* mutable_host_name();
  ::std::string* release_host_name();
  void set_allocated_host_name(::std::string* host_name);

  // string domain_name = 2;
  void clear_domain_name();
  static const int kDomainNameFieldNumber = 2;
  const ::std::string& domain_name() const;
  void set_domain_name(const ::std::string& value);
  #if LANG_CXX11
  void set_domain_name(::std::string&& value);
  #endif
  void set_domain_name(const char* value);
  void set_domain_name(const char* value, size_t size);
  ::std::string* mutable_domain_name();
  ::std::string* release_domain_name();
  void set_allocated_domain_name(::std::string* domain_name);

  // @@protoc_insertion_point(class_scope:tr140.StorageService.NetInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr host_name_;
  ::google::protobuf::internal::ArenaStringPtr domain_name_;
  mutable int _cached_size_;
  friend struct protobuf_tr_2d140_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StorageService_UserGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tr140.StorageService.UserGroup) */ {
 public:
  StorageService_UserGroup();
  virtual ~StorageService_UserGroup();

  StorageService_UserGroup(const StorageService_UserGroup& from);

  inline StorageService_UserGroup& operator=(const StorageService_UserGroup& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageService_UserGroup& default_instance();

  static inline const StorageService_UserGroup* internal_default_instance() {
    return reinterpret_cast<const StorageService_UserGroup*>(
               &_StorageService_UserGroup_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(StorageService_UserGroup* other);

  // implements Message ----------------------------------------------

  inline StorageService_UserGroup* New() const PROTOBUF_FINAL { return New(NULL); }

  StorageService_UserGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StorageService_UserGroup& from);
  void MergeFrom(const StorageService_UserGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StorageService_UserGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string alias = 2;
  void clear_alias();
  static const int kAliasFieldNumber = 2;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // string group_name = 3;
  void clear_group_name();
  static const int kGroupNameFieldNumber = 3;
  const ::std::string& group_name() const;
  void set_group_name(const ::std::string& value);
  #if LANG_CXX11
  void set_group_name(::std::string&& value);
  #endif
  void set_group_name(const char* value);
  void set_group_name(const char* value, size_t size);
  ::std::string* mutable_group_name();
  ::std::string* release_group_name();
  void set_allocated_group_name(::std::string* group_name);

  // bool enable = 1;
  void clear_enable();
  static const int kEnableFieldNumber = 1;
  bool enable() const;
  void set_enable(bool value);

  // @@protoc_insertion_point(class_scope:tr140.StorageService.UserGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr group_name_;
  bool enable_;
  mutable int _cached_size_;
  friend struct protobuf_tr_2d140_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StorageService_UserAccount : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tr140.StorageService.UserAccount) */ {
 public:
  StorageService_UserAccount();
  virtual ~StorageService_UserAccount();

  StorageService_UserAccount(const StorageService_UserAccount& from);

  inline StorageService_UserAccount& operator=(const StorageService_UserAccount& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageService_UserAccount& default_instance();

  static inline const StorageService_UserAccount* internal_default_instance() {
    return reinterpret_cast<const StorageService_UserAccount*>(
               &_StorageService_UserAccount_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(StorageService_UserAccount* other);

  // implements Message ----------------------------------------------

  inline StorageService_UserAccount* New() const PROTOBUF_FINAL { return New(NULL); }

  StorageService_UserAccount* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StorageService_UserAccount& from);
  void MergeFrom(const StorageService_UserAccount& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StorageService_UserAccount* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string alias = 2;
  void clear_alias();
  static const int kAliasFieldNumber = 2;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // string username = 3;
  void clear_username();
  static const int kUsernameFieldNumber = 3;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string password = 4;
  void clear_password();
  static const int kPasswordFieldNumber = 4;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string user_group_participation = 5;
  void clear_user_group_participation();
  static const int kUserGroupParticipationFieldNumber = 5;
  const ::std::string& user_group_participation() const;
  void set_user_group_participation(const ::std::string& value);
  #if LANG_CXX11
  void set_user_group_participation(::std::string&& value);
  #endif
  void set_user_group_participation(const char* value);
  void set_user_group_participation(const char* value, size_t size);
  ::std::string* mutable_user_group_participation();
  ::std::string* release_user_group_participation();
  void set_allocated_user_group_participation(::std::string* user_group_participation);

  // bool enable = 1;
  void clear_enable();
  static const int kEnableFieldNumber = 1;
  bool enable() const;
  void set_enable(bool value);

  // bool allow_ftpaccess = 6;
  void clear_allow_ftpaccess();
  static const int kAllowFtpaccessFieldNumber = 6;
  bool allow_ftpaccess() const;
  void set_allow_ftpaccess(bool value);

  // bool allow_httpaccess = 7;
  void clear_allow_httpaccess();
  static const int kAllowHttpaccessFieldNumber = 7;
  bool allow_httpaccess() const;
  void set_allow_httpaccess(bool value);

  // @@protoc_insertion_point(class_scope:tr140.StorageService.UserAccount)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr user_group_participation_;
  bool enable_;
  bool allow_ftpaccess_;
  bool allow_httpaccess_;
  mutable int _cached_size_;
  friend struct protobuf_tr_2d140_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StorageService_NetworkServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tr140.StorageService.NetworkServer) */ {
 public:
  StorageService_NetworkServer();
  virtual ~StorageService_NetworkServer();

  StorageService_NetworkServer(const StorageService_NetworkServer& from);

  inline StorageService_NetworkServer& operator=(const StorageService_NetworkServer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageService_NetworkServer& default_instance();

  static inline const StorageService_NetworkServer* internal_default_instance() {
    return reinterpret_cast<const StorageService_NetworkServer*>(
               &_StorageService_NetworkServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(StorageService_NetworkServer* other);

  // implements Message ----------------------------------------------

  inline StorageService_NetworkServer* New() const PROTOBUF_FINAL { return New(NULL); }

  StorageService_NetworkServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StorageService_NetworkServer& from);
  void MergeFrom(const StorageService_NetworkServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StorageService_NetworkServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool afpenable = 1;
  void clear_afpenable();
  static const int kAfpenableFieldNumber = 1;
  bool afpenable() const;
  void set_afpenable(bool value);

  // bool nfsenable = 2;
  void clear_nfsenable();
  static const int kNfsenableFieldNumber = 2;
  bool nfsenable() const;
  void set_nfsenable(bool value);

  // bool smbenable = 3;
  void clear_smbenable();
  static const int kSmbenableFieldNumber = 3;
  bool smbenable() const;
  void set_smbenable(bool value);

  // bool network_protocol_auth_req = 4;
  void clear_network_protocol_auth_req();
  static const int kNetworkProtocolAuthReqFieldNumber = 4;
  bool network_protocol_auth_req() const;
  void set_network_protocol_auth_req(bool value);

  // @@protoc_insertion_point(class_scope:tr140.StorageService.NetworkServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool afpenable_;
  bool nfsenable_;
  bool smbenable_;
  bool network_protocol_auth_req_;
  mutable int _cached_size_;
  friend struct protobuf_tr_2d140_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StorageService_FTPServer_AnonymousUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tr140.StorageService.FTPServer.AnonymousUser) */ {
 public:
  StorageService_FTPServer_AnonymousUser();
  virtual ~StorageService_FTPServer_AnonymousUser();

  StorageService_FTPServer_AnonymousUser(const StorageService_FTPServer_AnonymousUser& from);

  inline StorageService_FTPServer_AnonymousUser& operator=(const StorageService_FTPServer_AnonymousUser& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageService_FTPServer_AnonymousUser& default_instance();

  static inline const StorageService_FTPServer_AnonymousUser* internal_default_instance() {
    return reinterpret_cast<const StorageService_FTPServer_AnonymousUser*>(
               &_StorageService_FTPServer_AnonymousUser_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(StorageService_FTPServer_AnonymousUser* other);

  // implements Message ----------------------------------------------

  inline StorageService_FTPServer_AnonymousUser* New() const PROTOBUF_FINAL { return New(NULL); }

  StorageService_FTPServer_AnonymousUser* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StorageService_FTPServer_AnonymousUser& from);
  void MergeFrom(const StorageService_FTPServer_AnonymousUser& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StorageService_FTPServer_AnonymousUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string starting_folder = 2;
  void clear_starting_folder();
  static const int kStartingFolderFieldNumber = 2;
  const ::std::string& starting_folder() const;
  void set_starting_folder(const ::std::string& value);
  #if LANG_CXX11
  void set_starting_folder(::std::string&& value);
  #endif
  void set_starting_folder(const char* value);
  void set_starting_folder(const char* value, size_t size);
  ::std::string* mutable_starting_folder();
  ::std::string* release_starting_folder();
  void set_allocated_starting_folder(::std::string* starting_folder);

  // bool enable = 1;
  void clear_enable();
  static const int kEnableFieldNumber = 1;
  bool enable() const;
  void set_enable(bool value);

  // bool read_only_access = 3;
  void clear_read_only_access();
  static const int kReadOnlyAccessFieldNumber = 3;
  bool read_only_access() const;
  void set_read_only_access(bool value);

  // @@protoc_insertion_point(class_scope:tr140.StorageService.FTPServer.AnonymousUser)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr starting_folder_;
  bool enable_;
  bool read_only_access_;
  mutable int _cached_size_;
  friend struct protobuf_tr_2d140_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StorageService_FTPServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tr140.StorageService.FTPServer) */ {
 public:
  StorageService_FTPServer();
  virtual ~StorageService_FTPServer();

  StorageService_FTPServer(const StorageService_FTPServer& from);

  inline StorageService_FTPServer& operator=(const StorageService_FTPServer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageService_FTPServer& default_instance();

  static inline const StorageService_FTPServer* internal_default_instance() {
    return reinterpret_cast<const StorageService_FTPServer*>(
               &_StorageService_FTPServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(StorageService_FTPServer* other);

  // implements Message ----------------------------------------------

  inline StorageService_FTPServer* New() const PROTOBUF_FINAL { return New(NULL); }

  StorageService_FTPServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StorageService_FTPServer& from);
  void MergeFrom(const StorageService_FTPServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StorageService_FTPServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef StorageService_FTPServer_AnonymousUser AnonymousUser;

  // accessors -------------------------------------------------------

  // string status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // .tr140.StorageService.FTPServer.AnonymousUser anonymous_user = 6;
  bool has_anonymous_user() const;
  void clear_anonymous_user();
  static const int kAnonymousUserFieldNumber = 6;
  const ::tr140::StorageService_FTPServer_AnonymousUser& anonymous_user() const;
  ::tr140::StorageService_FTPServer_AnonymousUser* mutable_anonymous_user();
  ::tr140::StorageService_FTPServer_AnonymousUser* release_anonymous_user();
  void set_allocated_anonymous_user(::tr140::StorageService_FTPServer_AnonymousUser* anonymous_user);

  // bool enable = 1;
  void clear_enable();
  static const int kEnableFieldNumber = 1;
  bool enable() const;
  void set_enable(bool value);

  // uint32 max_num_users = 3;
  void clear_max_num_users();
  static const int kMaxNumUsersFieldNumber = 3;
  ::google::protobuf::uint32 max_num_users() const;
  void set_max_num_users(::google::protobuf::uint32 value);

  // uint32 idle_time = 4;
  void clear_idle_time();
  static const int kIdleTimeFieldNumber = 4;
  ::google::protobuf::uint32 idle_time() const;
  void set_idle_time(::google::protobuf::uint32 value);

  // uint32 port_number = 5;
  void clear_port_number();
  static const int kPortNumberFieldNumber = 5;
  ::google::protobuf::uint32 port_number() const;
  void set_port_number(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tr140.StorageService.FTPServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::tr140::StorageService_FTPServer_AnonymousUser* anonymous_user_;
  bool enable_;
  ::google::protobuf::uint32 max_num_users_;
  ::google::protobuf::uint32 idle_time_;
  ::google::protobuf::uint32 port_number_;
  mutable int _cached_size_;
  friend struct protobuf_tr_2d140_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StorageService_SFTPServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tr140.StorageService.SFTPServer) */ {
 public:
  StorageService_SFTPServer();
  virtual ~StorageService_SFTPServer();

  StorageService_SFTPServer(const StorageService_SFTPServer& from);

  inline StorageService_SFTPServer& operator=(const StorageService_SFTPServer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageService_SFTPServer& default_instance();

  static inline const StorageService_SFTPServer* internal_default_instance() {
    return reinterpret_cast<const StorageService_SFTPServer*>(
               &_StorageService_SFTPServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(StorageService_SFTPServer* other);

  // implements Message ----------------------------------------------

  inline StorageService_SFTPServer* New() const PROTOBUF_FINAL { return New(NULL); }

  StorageService_SFTPServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StorageService_SFTPServer& from);
  void MergeFrom(const StorageService_SFTPServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StorageService_SFTPServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // bool enable = 1;
  void clear_enable();
  static const int kEnableFieldNumber = 1;
  bool enable() const;
  void set_enable(bool value);

  // uint32 max_num_users = 3;
  void clear_max_num_users();
  static const int kMaxNumUsersFieldNumber = 3;
  ::google::protobuf::uint32 max_num_users() const;
  void set_max_num_users(::google::protobuf::uint32 value);

  // uint32 idle_time = 4;
  void clear_idle_time();
  static const int kIdleTimeFieldNumber = 4;
  ::google::protobuf::uint32 idle_time() const;
  void set_idle_time(::google::protobuf::uint32 value);

  // uint32 port_number = 5;
  void clear_port_number();
  static const int kPortNumberFieldNumber = 5;
  ::google::protobuf::uint32 port_number() const;
  void set_port_number(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tr140.StorageService.SFTPServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  bool enable_;
  ::google::protobuf::uint32 max_num_users_;
  ::google::protobuf::uint32 idle_time_;
  ::google::protobuf::uint32 port_number_;
  mutable int _cached_size_;
  friend struct protobuf_tr_2d140_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StorageService_HTTPServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tr140.StorageService.HTTPServer) */ {
 public:
  StorageService_HTTPServer();
  virtual ~StorageService_HTTPServer();

  StorageService_HTTPServer(const StorageService_HTTPServer& from);

  inline StorageService_HTTPServer& operator=(const StorageService_HTTPServer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageService_HTTPServer& default_instance();

  static inline const StorageService_HTTPServer* internal_default_instance() {
    return reinterpret_cast<const StorageService_HTTPServer*>(
               &_StorageService_HTTPServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(StorageService_HTTPServer* other);

  // implements Message ----------------------------------------------

  inline StorageService_HTTPServer* New() const PROTOBUF_FINAL { return New(NULL); }

  StorageService_HTTPServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StorageService_HTTPServer& from);
  void MergeFrom(const StorageService_HTTPServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StorageService_HTTPServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // uint32 max_num_users = 3;
  void clear_max_num_users();
  static const int kMaxNumUsersFieldNumber = 3;
  ::google::protobuf::uint32 max_num_users() const;
  void set_max_num_users(::google::protobuf::uint32 value);

  // uint32 idle_time = 4;
  void clear_idle_time();
  static const int kIdleTimeFieldNumber = 4;
  ::google::protobuf::uint32 idle_time() const;
  void set_idle_time(::google::protobuf::uint32 value);

  // bool enable = 1;
  void clear_enable();
  static const int kEnableFieldNumber = 1;
  bool enable() const;
  void set_enable(bool value);

  // bool httpwriting_enabled = 5;
  void clear_httpwriting_enabled();
  static const int kHttpwritingEnabledFieldNumber = 5;
  bool httpwriting_enabled() const;
  void set_httpwriting_enabled(bool value);

  // bool authentication_req = 7;
  void clear_authentication_req();
  static const int kAuthenticationReqFieldNumber = 7;
  bool authentication_req() const;
  void set_authentication_req(bool value);

  // uint32 port_number = 6;
  void clear_port_number();
  static const int kPortNumberFieldNumber = 6;
  ::google::protobuf::uint32 port_number() const;
  void set_port_number(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tr140.StorageService.HTTPServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::google::protobuf::uint32 max_num_users_;
  ::google::protobuf::uint32 idle_time_;
  bool enable_;
  bool httpwriting_enabled_;
  bool authentication_req_;
  ::google::protobuf::uint32 port_number_;
  mutable int _cached_size_;
  friend struct protobuf_tr_2d140_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StorageService_HTTPSServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tr140.StorageService.HTTPSServer) */ {
 public:
  StorageService_HTTPSServer();
  virtual ~StorageService_HTTPSServer();

  StorageService_HTTPSServer(const StorageService_HTTPSServer& from);

  inline StorageService_HTTPSServer& operator=(const StorageService_HTTPSServer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageService_HTTPSServer& default_instance();

  static inline const StorageService_HTTPSServer* internal_default_instance() {
    return reinterpret_cast<const StorageService_HTTPSServer*>(
               &_StorageService_HTTPSServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(StorageService_HTTPSServer* other);

  // implements Message ----------------------------------------------

  inline StorageService_HTTPSServer* New() const PROTOBUF_FINAL { return New(NULL); }

  StorageService_HTTPSServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StorageService_HTTPSServer& from);
  void MergeFrom(const StorageService_HTTPSServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StorageService_HTTPSServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // uint32 max_num_users = 3;
  void clear_max_num_users();
  static const int kMaxNumUsersFieldNumber = 3;
  ::google::protobuf::uint32 max_num_users() const;
  void set_max_num_users(::google::protobuf::uint32 value);

  // uint32 idle_time = 4;
  void clear_idle_time();
  static const int kIdleTimeFieldNumber = 4;
  ::google::protobuf::uint32 idle_time() const;
  void set_idle_time(::google::protobuf::uint32 value);

  // bool enable = 1;
  void clear_enable();
  static const int kEnableFieldNumber = 1;
  bool enable() const;
  void set_enable(bool value);

  // bool httpwriting_enabled = 5;
  void clear_httpwriting_enabled();
  static const int kHttpwritingEnabledFieldNumber = 5;
  bool httpwriting_enabled() const;
  void set_httpwriting_enabled(bool value);

  // bool authentication_req = 7;
  void clear_authentication_req();
  static const int kAuthenticationReqFieldNumber = 7;
  bool authentication_req() const;
  void set_authentication_req(bool value);

  // uint32 port_number = 6;
  void clear_port_number();
  static const int kPortNumberFieldNumber = 6;
  ::google::protobuf::uint32 port_number() const;
  void set_port_number(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tr140.StorageService.HTTPSServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::google::protobuf::uint32 max_num_users_;
  ::google::protobuf::uint32 idle_time_;
  bool enable_;
  bool httpwriting_enabled_;
  bool authentication_req_;
  ::google::protobuf::uint32 port_number_;
  mutable int _cached_size_;
  friend struct protobuf_tr_2d140_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StorageService_PhysicalMedium_SMART : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tr140.StorageService.PhysicalMedium.SMART) */ {
 public:
  StorageService_PhysicalMedium_SMART();
  virtual ~StorageService_PhysicalMedium_SMART();

  StorageService_PhysicalMedium_SMART(const StorageService_PhysicalMedium_SMART& from);

  inline StorageService_PhysicalMedium_SMART& operator=(const StorageService_PhysicalMedium_SMART& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageService_PhysicalMedium_SMART& default_instance();

  static inline const StorageService_PhysicalMedium_SMART* internal_default_instance() {
    return reinterpret_cast<const StorageService_PhysicalMedium_SMART*>(
               &_StorageService_PhysicalMedium_SMART_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(StorageService_PhysicalMedium_SMART* other);

  // implements Message ----------------------------------------------

  inline StorageService_PhysicalMedium_SMART* New() const PROTOBUF_FINAL { return New(NULL); }

  StorageService_PhysicalMedium_SMART* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StorageService_PhysicalMedium_SMART& from);
  void MergeFrom(const StorageService_PhysicalMedium_SMART& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StorageService_PhysicalMedium_SMART* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 reallocated_sectors_count = 1;
  void clear_reallocated_sectors_count();
  static const int kReallocatedSectorsCountFieldNumber = 1;
  ::google::protobuf::uint32 reallocated_sectors_count() const;
  void set_reallocated_sectors_count(::google::protobuf::uint32 value);

  // uint32 power_on_hours = 2;
  void clear_power_on_hours();
  static const int kPowerOnHoursFieldNumber = 2;
  ::google::protobuf::uint32 power_on_hours() const;
  void set_power_on_hours(::google::protobuf::uint32 value);

  // uint32 spin_retry_count = 3;
  void clear_spin_retry_count();
  static const int kSpinRetryCountFieldNumber = 3;
  ::google::protobuf::uint32 spin_retry_count() const;
  void set_spin_retry_count(::google::protobuf::uint32 value);

  // uint32 power_cycle_count = 4;
  void clear_power_cycle_count();
  static const int kPowerCycleCountFieldNumber = 4;
  ::google::protobuf::uint32 power_cycle_count() const;
  void set_power_cycle_count(::google::protobuf::uint32 value);

  // uint32 temperature = 5;
  void clear_temperature();
  static const int kTemperatureFieldNumber = 5;
  ::google::protobuf::uint32 temperature() const;
  void set_temperature(::google::protobuf::uint32 value);

  // uint32 reallocation_event_count = 6;
  void clear_reallocation_event_count();
  static const int kReallocationEventCountFieldNumber = 6;
  ::google::protobuf::uint32 reallocation_event_count() const;
  void set_reallocation_event_count(::google::protobuf::uint32 value);

  // uint32 current_pending_sector_count = 7;
  void clear_current_pending_sector_count();
  static const int kCurrentPendingSectorCountFieldNumber = 7;
  ::google::protobuf::uint32 current_pending_sector_count() const;
  void set_current_pending_sector_count(::google::protobuf::uint32 value);

  // uint32 uncorrectable_sector_count = 8;
  void clear_uncorrectable_sector_count();
  static const int kUncorrectableSectorCountFieldNumber = 8;
  ::google::protobuf::uint32 uncorrectable_sector_count() const;
  void set_uncorrectable_sector_count(::google::protobuf::uint32 value);

  // uint32 read_errors = 9;
  void clear_read_errors();
  static const int kReadErrorsFieldNumber = 9;
  ::google::protobuf::uint32 read_errors() const;
  void set_read_errors(::google::protobuf::uint32 value);

  // uint32 soft_read_errors = 10;
  void clear_soft_read_errors();
  static const int kSoftReadErrorsFieldNumber = 10;
  ::google::protobuf::uint32 soft_read_errors() const;
  void set_soft_read_errors(::google::protobuf::uint32 value);

  // uint32 write_errors = 11;
  void clear_write_errors();
  static const int kWriteErrorsFieldNumber = 11;
  ::google::protobuf::uint32 write_errors() const;
  void set_write_errors(::google::protobuf::uint32 value);

  // uint32 spares_remaining = 12;
  void clear_spares_remaining();
  static const int kSparesRemainingFieldNumber = 12;
  ::google::protobuf::uint32 spares_remaining() const;
  void set_spares_remaining(::google::protobuf::uint32 value);

  // int32 predicted_failure = 13;
  void clear_predicted_failure();
  static const int kPredictedFailureFieldNumber = 13;
  ::google::protobuf::int32 predicted_failure() const;
  void set_predicted_failure(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tr140.StorageService.PhysicalMedium.SMART)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 reallocated_sectors_count_;
  ::google::protobuf::uint32 power_on_hours_;
  ::google::protobuf::uint32 spin_retry_count_;
  ::google::protobuf::uint32 power_cycle_count_;
  ::google::protobuf::uint32 temperature_;
  ::google::protobuf::uint32 reallocation_event_count_;
  ::google::protobuf::uint32 current_pending_sector_count_;
  ::google::protobuf::uint32 uncorrectable_sector_count_;
  ::google::protobuf::uint32 read_errors_;
  ::google::protobuf::uint32 soft_read_errors_;
  ::google::protobuf::uint32 write_errors_;
  ::google::protobuf::uint32 spares_remaining_;
  ::google::protobuf::int32 predicted_failure_;
  mutable int _cached_size_;
  friend struct protobuf_tr_2d140_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StorageService_PhysicalMedium : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tr140.StorageService.PhysicalMedium) */ {
 public:
  StorageService_PhysicalMedium();
  virtual ~StorageService_PhysicalMedium();

  StorageService_PhysicalMedium(const StorageService_PhysicalMedium& from);

  inline StorageService_PhysicalMedium& operator=(const StorageService_PhysicalMedium& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageService_PhysicalMedium& default_instance();

  static inline const StorageService_PhysicalMedium* internal_default_instance() {
    return reinterpret_cast<const StorageService_PhysicalMedium*>(
               &_StorageService_PhysicalMedium_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(StorageService_PhysicalMedium* other);

  // implements Message ----------------------------------------------

  inline StorageService_PhysicalMedium* New() const PROTOBUF_FINAL { return New(NULL); }

  StorageService_PhysicalMedium* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StorageService_PhysicalMedium& from);
  void MergeFrom(const StorageService_PhysicalMedium& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StorageService_PhysicalMedium* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef StorageService_PhysicalMedium_SMART SMART;

  // accessors -------------------------------------------------------

  // string alias = 1;
  void clear_alias();
  static const int kAliasFieldNumber = 1;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string vendor = 3;
  void clear_vendor();
  static const int kVendorFieldNumber = 3;
  const ::std::string& vendor() const;
  void set_vendor(const ::std::string& value);
  #if LANG_CXX11
  void set_vendor(::std::string&& value);
  #endif
  void set_vendor(const char* value);
  void set_vendor(const char* value, size_t size);
  ::std::string* mutable_vendor();
  ::std::string* release_vendor();
  void set_allocated_vendor(::std::string* vendor);

  // string model = 4;
  void clear_model();
  static const int kModelFieldNumber = 4;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  #if LANG_CXX11
  void set_model(::std::string&& value);
  #endif
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);

  // string serial_number = 5;
  void clear_serial_number();
  static const int kSerialNumberFieldNumber = 5;
  const ::std::string& serial_number() const;
  void set_serial_number(const ::std::string& value);
  #if LANG_CXX11
  void set_serial_number(::std::string&& value);
  #endif
  void set_serial_number(const char* value);
  void set_serial_number(const char* value, size_t size);
  ::std::string* mutable_serial_number();
  ::std::string* release_serial_number();
  void set_allocated_serial_number(::std::string* serial_number);

  // string firmware_version = 6;
  void clear_firmware_version();
  static const int kFirmwareVersionFieldNumber = 6;
  const ::std::string& firmware_version() const;
  void set_firmware_version(const ::std::string& value);
  #if LANG_CXX11
  void set_firmware_version(::std::string&& value);
  #endif
  void set_firmware_version(const char* value);
  void set_firmware_version(const char* value, size_t size);
  ::std::string* mutable_firmware_version();
  ::std::string* release_firmware_version();
  void set_allocated_firmware_version(::std::string* firmware_version);

  // string connection_type = 7;
  void clear_connection_type();
  static const int kConnectionTypeFieldNumber = 7;
  const ::std::string& connection_type() const;
  void set_connection_type(const ::std::string& value);
  #if LANG_CXX11
  void set_connection_type(::std::string&& value);
  #endif
  void set_connection_type(const char* value);
  void set_connection_type(const char* value, size_t size);
  ::std::string* mutable_connection_type();
  ::std::string* release_connection_type();
  void set_allocated_connection_type(::std::string* connection_type);

  // string type = 8;
  void clear_type();
  static const int kTypeFieldNumber = 8;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string status = 11;
  void clear_status();
  static const int kStatusFieldNumber = 11;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // string health = 14;
  void clear_health();
  static const int kHealthFieldNumber = 14;
  const ::std::string& health() const;
  void set_health(const ::std::string& value);
  #if LANG_CXX11
  void set_health(::std::string&& value);
  #endif
  void set_health(const char* value);
  void set_health(const char* value, size_t size);
  ::std::string* mutable_health();
  ::std::string* release_health();
  void set_allocated_health(::std::string* health);

  // .tr140.StorageService.PhysicalMedium.SMART smart = 16;
  bool has_smart() const;
  void clear_smart();
  static const int kSmartFieldNumber = 16;
  const ::tr140::StorageService_PhysicalMedium_SMART& smart() const;
  ::tr140::StorageService_PhysicalMedium_SMART* mutable_smart();
  ::tr140::StorageService_PhysicalMedium_SMART* release_smart();
  void set_allocated_smart(::tr140::StorageService_PhysicalMedium_SMART* smart);

  // uint32 capacity = 10;
  void clear_capacity();
  static const int kCapacityFieldNumber = 10;
  ::google::protobuf::uint32 capacity() const;
  void set_capacity(::google::protobuf::uint32 value);

  // uint32 uptime = 12;
  void clear_uptime();
  static const int kUptimeFieldNumber = 12;
  ::google::protobuf::uint32 uptime() const;
  void set_uptime(::google::protobuf::uint32 value);

  // bool removable = 9;
  void clear_removable();
  static const int kRemovableFieldNumber = 9;
  bool removable() const;
  void set_removable(bool value);

  // bool smartcapable = 13;
  void clear_smartcapable();
  static const int kSmartcapableFieldNumber = 13;
  bool smartcapable() const;
  void set_smartcapable(bool value);

  // bool hot_swappable = 15;
  void clear_hot_swappable();
  static const int kHotSwappableFieldNumber = 15;
  bool hot_swappable() const;
  void set_hot_swappable(bool value);

  // @@protoc_insertion_point(class_scope:tr140.StorageService.PhysicalMedium)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr vendor_;
  ::google::protobuf::internal::ArenaStringPtr model_;
  ::google::protobuf::internal::ArenaStringPtr serial_number_;
  ::google::protobuf::internal::ArenaStringPtr firmware_version_;
  ::google::protobuf::internal::ArenaStringPtr connection_type_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::google::protobuf::internal::ArenaStringPtr health_;
  ::tr140::StorageService_PhysicalMedium_SMART* smart_;
  ::google::protobuf::uint32 capacity_;
  ::google::protobuf::uint32 uptime_;
  bool removable_;
  bool smartcapable_;
  bool hot_swappable_;
  mutable int _cached_size_;
  friend struct protobuf_tr_2d140_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StorageService_StorageArray : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tr140.StorageService.StorageArray) */ {
 public:
  StorageService_StorageArray();
  virtual ~StorageService_StorageArray();

  StorageService_StorageArray(const StorageService_StorageArray& from);

  inline StorageService_StorageArray& operator=(const StorageService_StorageArray& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageService_StorageArray& default_instance();

  static inline const StorageService_StorageArray* internal_default_instance() {
    return reinterpret_cast<const StorageService_StorageArray*>(
               &_StorageService_StorageArray_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(StorageService_StorageArray* other);

  // implements Message ----------------------------------------------

  inline StorageService_StorageArray* New() const PROTOBUF_FINAL { return New(NULL); }

  StorageService_StorageArray* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StorageService_StorageArray& from);
  void MergeFrom(const StorageService_StorageArray& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StorageService_StorageArray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string alias = 1;
  void clear_alias();
  static const int kAliasFieldNumber = 1;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // string raid_type = 5;
  void clear_raid_type();
  static const int kRaidTypeFieldNumber = 5;
  const ::std::string& raid_type() const;
  void set_raid_type(const ::std::string& value);
  #if LANG_CXX11
  void set_raid_type(::std::string&& value);
  #endif
  void set_raid_type(const char* value);
  void set_raid_type(const char* value, size_t size);
  ::std::string* mutable_raid_type();
  ::std::string* release_raid_type();
  void set_allocated_raid_type(::std::string* raid_type);

  // string physical_medium_reference = 7;
  void clear_physical_medium_reference();
  static const int kPhysicalMediumReferenceFieldNumber = 7;
  const ::std::string& physical_medium_reference() const;
  void set_physical_medium_reference(const ::std::string& value);
  #if LANG_CXX11
  void set_physical_medium_reference(::std::string&& value);
  #endif
  void set_physical_medium_reference(const char* value);
  void set_physical_medium_reference(const char* value, size_t size);
  ::std::string* mutable_physical_medium_reference();
  ::std::string* release_physical_medium_reference();
  void set_allocated_physical_medium_reference(::std::string* physical_medium_reference);

  // bool enable = 4;
  void clear_enable();
  static const int kEnableFieldNumber = 4;
  bool enable() const;
  void set_enable(bool value);

  // uint32 usable_capacity = 6;
  void clear_usable_capacity();
  static const int kUsableCapacityFieldNumber = 6;
  ::google::protobuf::uint32 usable_capacity() const;
  void set_usable_capacity(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tr140.StorageService.StorageArray)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::google::protobuf::internal::ArenaStringPtr raid_type_;
  ::google::protobuf::internal::ArenaStringPtr physical_medium_reference_;
  bool enable_;
  ::google::protobuf::uint32 usable_capacity_;
  mutable int _cached_size_;
  friend struct protobuf_tr_2d140_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StorageService_LogicalVolume_Folder_UserAccess : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tr140.StorageService.LogicalVolume.Folder.UserAccess) */ {
 public:
  StorageService_LogicalVolume_Folder_UserAccess();
  virtual ~StorageService_LogicalVolume_Folder_UserAccess();

  StorageService_LogicalVolume_Folder_UserAccess(const StorageService_LogicalVolume_Folder_UserAccess& from);

  inline StorageService_LogicalVolume_Folder_UserAccess& operator=(const StorageService_LogicalVolume_Folder_UserAccess& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageService_LogicalVolume_Folder_UserAccess& default_instance();

  static inline const StorageService_LogicalVolume_Folder_UserAccess* internal_default_instance() {
    return reinterpret_cast<const StorageService_LogicalVolume_Folder_UserAccess*>(
               &_StorageService_LogicalVolume_Folder_UserAccess_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(StorageService_LogicalVolume_Folder_UserAccess* other);

  // implements Message ----------------------------------------------

  inline StorageService_LogicalVolume_Folder_UserAccess* New() const PROTOBUF_FINAL { return New(NULL); }

  StorageService_LogicalVolume_Folder_UserAccess* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StorageService_LogicalVolume_Folder_UserAccess& from);
  void MergeFrom(const StorageService_LogicalVolume_Folder_UserAccess& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StorageService_LogicalVolume_Folder_UserAccess* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string alias = 1;
  void clear_alias();
  static const int kAliasFieldNumber = 1;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // string user_reference = 3;
  void clear_user_reference();
  static const int kUserReferenceFieldNumber = 3;
  const ::std::string& user_reference() const;
  void set_user_reference(const ::std::string& value);
  #if LANG_CXX11
  void set_user_reference(::std::string&& value);
  #endif
  void set_user_reference(const char* value);
  void set_user_reference(const char* value, size_t size);
  ::std::string* mutable_user_reference();
  ::std::string* release_user_reference();
  void set_allocated_user_reference(::std::string* user_reference);

  // bool enable = 2;
  void clear_enable();
  static const int kEnableFieldNumber = 2;
  bool enable() const;
  void set_enable(bool value);

  // uint32 permissions = 4;
  void clear_permissions();
  static const int kPermissionsFieldNumber = 4;
  ::google::protobuf::uint32 permissions() const;
  void set_permissions(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tr140.StorageService.LogicalVolume.Folder.UserAccess)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr user_reference_;
  bool enable_;
  ::google::protobuf::uint32 permissions_;
  mutable int _cached_size_;
  friend struct protobuf_tr_2d140_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StorageService_LogicalVolume_Folder_GroupAccess : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tr140.StorageService.LogicalVolume.Folder.GroupAccess) */ {
 public:
  StorageService_LogicalVolume_Folder_GroupAccess();
  virtual ~StorageService_LogicalVolume_Folder_GroupAccess();

  StorageService_LogicalVolume_Folder_GroupAccess(const StorageService_LogicalVolume_Folder_GroupAccess& from);

  inline StorageService_LogicalVolume_Folder_GroupAccess& operator=(const StorageService_LogicalVolume_Folder_GroupAccess& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageService_LogicalVolume_Folder_GroupAccess& default_instance();

  static inline const StorageService_LogicalVolume_Folder_GroupAccess* internal_default_instance() {
    return reinterpret_cast<const StorageService_LogicalVolume_Folder_GroupAccess*>(
               &_StorageService_LogicalVolume_Folder_GroupAccess_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(StorageService_LogicalVolume_Folder_GroupAccess* other);

  // implements Message ----------------------------------------------

  inline StorageService_LogicalVolume_Folder_GroupAccess* New() const PROTOBUF_FINAL { return New(NULL); }

  StorageService_LogicalVolume_Folder_GroupAccess* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StorageService_LogicalVolume_Folder_GroupAccess& from);
  void MergeFrom(const StorageService_LogicalVolume_Folder_GroupAccess& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StorageService_LogicalVolume_Folder_GroupAccess* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string alias = 1;
  void clear_alias();
  static const int kAliasFieldNumber = 1;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // string group_reference = 3;
  void clear_group_reference();
  static const int kGroupReferenceFieldNumber = 3;
  const ::std::string& group_reference() const;
  void set_group_reference(const ::std::string& value);
  #if LANG_CXX11
  void set_group_reference(::std::string&& value);
  #endif
  void set_group_reference(const char* value);
  void set_group_reference(const char* value, size_t size);
  ::std::string* mutable_group_reference();
  ::std::string* release_group_reference();
  void set_allocated_group_reference(::std::string* group_reference);

  // bool enable = 2;
  void clear_enable();
  static const int kEnableFieldNumber = 2;
  bool enable() const;
  void set_enable(bool value);

  // uint32 permissions = 4;
  void clear_permissions();
  static const int kPermissionsFieldNumber = 4;
  ::google::protobuf::uint32 permissions() const;
  void set_permissions(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tr140.StorageService.LogicalVolume.Folder.GroupAccess)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr group_reference_;
  bool enable_;
  ::google::protobuf::uint32 permissions_;
  mutable int _cached_size_;
  friend struct protobuf_tr_2d140_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StorageService_LogicalVolume_Folder_Quota : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tr140.StorageService.LogicalVolume.Folder.Quota) */ {
 public:
  StorageService_LogicalVolume_Folder_Quota();
  virtual ~StorageService_LogicalVolume_Folder_Quota();

  StorageService_LogicalVolume_Folder_Quota(const StorageService_LogicalVolume_Folder_Quota& from);

  inline StorageService_LogicalVolume_Folder_Quota& operator=(const StorageService_LogicalVolume_Folder_Quota& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageService_LogicalVolume_Folder_Quota& default_instance();

  static inline const StorageService_LogicalVolume_Folder_Quota* internal_default_instance() {
    return reinterpret_cast<const StorageService_LogicalVolume_Folder_Quota*>(
               &_StorageService_LogicalVolume_Folder_Quota_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(StorageService_LogicalVolume_Folder_Quota* other);

  // implements Message ----------------------------------------------

  inline StorageService_LogicalVolume_Folder_Quota* New() const PROTOBUF_FINAL { return New(NULL); }

  StorageService_LogicalVolume_Folder_Quota* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StorageService_LogicalVolume_Folder_Quota& from);
  void MergeFrom(const StorageService_LogicalVolume_Folder_Quota& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StorageService_LogicalVolume_Folder_Quota* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 capacity = 2;
  void clear_capacity();
  static const int kCapacityFieldNumber = 2;
  ::google::protobuf::uint32 capacity() const;
  void set_capacity(::google::protobuf::uint32 value);

  // uint32 used_space = 3;
  void clear_used_space();
  static const int kUsedSpaceFieldNumber = 3;
  ::google::protobuf::uint32 used_space() const;
  void set_used_space(::google::protobuf::uint32 value);

  // bool enable = 1;
  void clear_enable();
  static const int kEnableFieldNumber = 1;
  bool enable() const;
  void set_enable(bool value);

  // bool threshold_reached = 5;
  void clear_threshold_reached();
  static const int kThresholdReachedFieldNumber = 5;
  bool threshold_reached() const;
  void set_threshold_reached(bool value);

  // uint32 threshold_limit = 4;
  void clear_threshold_limit();
  static const int kThresholdLimitFieldNumber = 4;
  ::google::protobuf::uint32 threshold_limit() const;
  void set_threshold_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tr140.StorageService.LogicalVolume.Folder.Quota)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 capacity_;
  ::google::protobuf::uint32 used_space_;
  bool enable_;
  bool threshold_reached_;
  ::google::protobuf::uint32 threshold_limit_;
  mutable int _cached_size_;
  friend struct protobuf_tr_2d140_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StorageService_LogicalVolume_Folder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tr140.StorageService.LogicalVolume.Folder) */ {
 public:
  StorageService_LogicalVolume_Folder();
  virtual ~StorageService_LogicalVolume_Folder();

  StorageService_LogicalVolume_Folder(const StorageService_LogicalVolume_Folder& from);

  inline StorageService_LogicalVolume_Folder& operator=(const StorageService_LogicalVolume_Folder& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageService_LogicalVolume_Folder& default_instance();

  static inline const StorageService_LogicalVolume_Folder* internal_default_instance() {
    return reinterpret_cast<const StorageService_LogicalVolume_Folder*>(
               &_StorageService_LogicalVolume_Folder_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(StorageService_LogicalVolume_Folder* other);

  // implements Message ----------------------------------------------

  inline StorageService_LogicalVolume_Folder* New() const PROTOBUF_FINAL { return New(NULL); }

  StorageService_LogicalVolume_Folder* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StorageService_LogicalVolume_Folder& from);
  void MergeFrom(const StorageService_LogicalVolume_Folder& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StorageService_LogicalVolume_Folder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef StorageService_LogicalVolume_Folder_UserAccess UserAccess;
  typedef StorageService_LogicalVolume_Folder_GroupAccess GroupAccess;
  typedef StorageService_LogicalVolume_Folder_Quota Quota;

  // accessors -------------------------------------------------------

  // repeated .tr140.StorageService.LogicalVolume.Folder.UserAccess user_access = 7;
  int user_access_size() const;
  void clear_user_access();
  static const int kUserAccessFieldNumber = 7;
  const ::tr140::StorageService_LogicalVolume_Folder_UserAccess& user_access(int index) const;
  ::tr140::StorageService_LogicalVolume_Folder_UserAccess* mutable_user_access(int index);
  ::tr140::StorageService_LogicalVolume_Folder_UserAccess* add_user_access();
  ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_LogicalVolume_Folder_UserAccess >*
      mutable_user_access();
  const ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_LogicalVolume_Folder_UserAccess >&
      user_access() const;

  // repeated .tr140.StorageService.LogicalVolume.Folder.GroupAccess group_access = 8;
  int group_access_size() const;
  void clear_group_access();
  static const int kGroupAccessFieldNumber = 8;
  const ::tr140::StorageService_LogicalVolume_Folder_GroupAccess& group_access(int index) const;
  ::tr140::StorageService_LogicalVolume_Folder_GroupAccess* mutable_group_access(int index);
  ::tr140::StorageService_LogicalVolume_Folder_GroupAccess* add_group_access();
  ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess >*
      mutable_group_access();
  const ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess >&
      group_access() const;

  // string alias = 1;
  void clear_alias();
  static const int kAliasFieldNumber = 1;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .tr140.StorageService.LogicalVolume.Folder.Quota quota = 9;
  bool has_quota() const;
  void clear_quota();
  static const int kQuotaFieldNumber = 9;
  const ::tr140::StorageService_LogicalVolume_Folder_Quota& quota() const;
  ::tr140::StorageService_LogicalVolume_Folder_Quota* mutable_quota();
  ::tr140::StorageService_LogicalVolume_Folder_Quota* release_quota();
  void set_allocated_quota(::tr140::StorageService_LogicalVolume_Folder_Quota* quota);

  // bool enable = 3;
  void clear_enable();
  static const int kEnableFieldNumber = 3;
  bool enable() const;
  void set_enable(bool value);

  // uint32 user_account_access = 4;
  void clear_user_account_access();
  static const int kUserAccountAccessFieldNumber = 4;
  ::google::protobuf::uint32 user_account_access() const;
  void set_user_account_access(::google::protobuf::uint32 value);

  // uint32 user_access_number_of_entries = 5;
  void clear_user_access_number_of_entries();
  static const int kUserAccessNumberOfEntriesFieldNumber = 5;
  ::google::protobuf::uint32 user_access_number_of_entries() const;
  void set_user_access_number_of_entries(::google::protobuf::uint32 value);

  // uint32 group_access_number_of_entries = 6;
  void clear_group_access_number_of_entries();
  static const int kGroupAccessNumberOfEntriesFieldNumber = 6;
  ::google::protobuf::uint32 group_access_number_of_entries() const;
  void set_group_access_number_of_entries(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tr140.StorageService.LogicalVolume.Folder)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_LogicalVolume_Folder_UserAccess > user_access_;
  ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess > group_access_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::tr140::StorageService_LogicalVolume_Folder_Quota* quota_;
  bool enable_;
  ::google::protobuf::uint32 user_account_access_;
  ::google::protobuf::uint32 user_access_number_of_entries_;
  ::google::protobuf::uint32 group_access_number_of_entries_;
  mutable int _cached_size_;
  friend struct protobuf_tr_2d140_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StorageService_LogicalVolume : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tr140.StorageService.LogicalVolume) */ {
 public:
  StorageService_LogicalVolume();
  virtual ~StorageService_LogicalVolume();

  StorageService_LogicalVolume(const StorageService_LogicalVolume& from);

  inline StorageService_LogicalVolume& operator=(const StorageService_LogicalVolume& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageService_LogicalVolume& default_instance();

  static inline const StorageService_LogicalVolume* internal_default_instance() {
    return reinterpret_cast<const StorageService_LogicalVolume*>(
               &_StorageService_LogicalVolume_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(StorageService_LogicalVolume* other);

  // implements Message ----------------------------------------------

  inline StorageService_LogicalVolume* New() const PROTOBUF_FINAL { return New(NULL); }

  StorageService_LogicalVolume* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StorageService_LogicalVolume& from);
  void MergeFrom(const StorageService_LogicalVolume& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StorageService_LogicalVolume* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef StorageService_LogicalVolume_Folder Folder;

  // accessors -------------------------------------------------------

  // repeated .tr140.StorageService.LogicalVolume.Folder folder = 13;
  int folder_size() const;
  void clear_folder();
  static const int kFolderFieldNumber = 13;
  const ::tr140::StorageService_LogicalVolume_Folder& folder(int index) const;
  ::tr140::StorageService_LogicalVolume_Folder* mutable_folder(int index);
  ::tr140::StorageService_LogicalVolume_Folder* add_folder();
  ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_LogicalVolume_Folder >*
      mutable_folder();
  const ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_LogicalVolume_Folder >&
      folder() const;

  // string alias = 1;
  void clear_alias();
  static const int kAliasFieldNumber = 1;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // string physical_reference = 5;
  void clear_physical_reference();
  static const int kPhysicalReferenceFieldNumber = 5;
  const ::std::string& physical_reference() const;
  void set_physical_reference(const ::std::string& value);
  #if LANG_CXX11
  void set_physical_reference(::std::string&& value);
  #endif
  void set_physical_reference(const char* value);
  void set_physical_reference(const char* value, size_t size);
  ::std::string* mutable_physical_reference();
  ::std::string* release_physical_reference();
  void set_allocated_physical_reference(::std::string* physical_reference);

  // string file_system = 6;
  void clear_file_system();
  static const int kFileSystemFieldNumber = 6;
  const ::std::string& file_system() const;
  void set_file_system(const ::std::string& value);
  #if LANG_CXX11
  void set_file_system(::std::string&& value);
  #endif
  void set_file_system(const char* value);
  void set_file_system(const char* value, size_t size);
  ::std::string* mutable_file_system();
  ::std::string* release_file_system();
  void set_allocated_file_system(::std::string* file_system);

  // uint32 capacity = 7;
  void clear_capacity();
  static const int kCapacityFieldNumber = 7;
  ::google::protobuf::uint32 capacity() const;
  void set_capacity(::google::protobuf::uint32 value);

  // uint32 used_space = 8;
  void clear_used_space();
  static const int kUsedSpaceFieldNumber = 8;
  ::google::protobuf::uint32 used_space() const;
  void set_used_space(::google::protobuf::uint32 value);

  // bool enable = 4;
  void clear_enable();
  static const int kEnableFieldNumber = 4;
  bool enable() const;
  void set_enable(bool value);

  // bool threshold_reached = 10;
  void clear_threshold_reached();
  static const int kThresholdReachedFieldNumber = 10;
  bool threshold_reached() const;
  void set_threshold_reached(bool value);

  // bool encrypted = 11;
  void clear_encrypted();
  static const int kEncryptedFieldNumber = 11;
  bool encrypted() const;
  void set_encrypted(bool value);

  // uint32 threshold_limit = 9;
  void clear_threshold_limit();
  static const int kThresholdLimitFieldNumber = 9;
  ::google::protobuf::uint32 threshold_limit() const;
  void set_threshold_limit(::google::protobuf::uint32 value);

  // uint32 folder_number_of_entries = 12;
  void clear_folder_number_of_entries();
  static const int kFolderNumberOfEntriesFieldNumber = 12;
  ::google::protobuf::uint32 folder_number_of_entries() const;
  void set_folder_number_of_entries(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tr140.StorageService.LogicalVolume)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_LogicalVolume_Folder > folder_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::google::protobuf::internal::ArenaStringPtr physical_reference_;
  ::google::protobuf::internal::ArenaStringPtr file_system_;
  ::google::protobuf::uint32 capacity_;
  ::google::protobuf::uint32 used_space_;
  bool enable_;
  bool threshold_reached_;
  bool encrypted_;
  ::google::protobuf::uint32 threshold_limit_;
  ::google::protobuf::uint32 folder_number_of_entries_;
  mutable int _cached_size_;
  friend struct protobuf_tr_2d140_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StorageService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tr140.StorageService) */ {
 public:
  StorageService();
  virtual ~StorageService();

  StorageService(const StorageService& from);

  inline StorageService& operator=(const StorageService& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageService& default_instance();

  static inline const StorageService* internal_default_instance() {
    return reinterpret_cast<const StorageService*>(
               &_StorageService_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(StorageService* other);

  // implements Message ----------------------------------------------

  inline StorageService* New() const PROTOBUF_FINAL { return New(NULL); }

  StorageService* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StorageService& from);
  void MergeFrom(const StorageService& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StorageService* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef StorageService_Capabilities Capabilities;
  typedef StorageService_NetInfo NetInfo;
  typedef StorageService_UserGroup UserGroup;
  typedef StorageService_UserAccount UserAccount;
  typedef StorageService_NetworkServer NetworkServer;
  typedef StorageService_FTPServer FTPServer;
  typedef StorageService_SFTPServer SFTPServer;
  typedef StorageService_HTTPServer HTTPServer;
  typedef StorageService_HTTPSServer HTTPSServer;
  typedef StorageService_PhysicalMedium PhysicalMedium;
  typedef StorageService_StorageArray StorageArray;
  typedef StorageService_LogicalVolume LogicalVolume;

  // accessors -------------------------------------------------------

  // repeated .tr140.StorageService.UserGroup user_group = 10;
  int user_group_size() const;
  void clear_user_group();
  static const int kUserGroupFieldNumber = 10;
  const ::tr140::StorageService_UserGroup& user_group(int index) const;
  ::tr140::StorageService_UserGroup* mutable_user_group(int index);
  ::tr140::StorageService_UserGroup* add_user_group();
  ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_UserGroup >*
      mutable_user_group();
  const ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_UserGroup >&
      user_group() const;

  // repeated .tr140.StorageService.UserAccount user_account = 11;
  int user_account_size() const;
  void clear_user_account();
  static const int kUserAccountFieldNumber = 11;
  const ::tr140::StorageService_UserAccount& user_account(int index) const;
  ::tr140::StorageService_UserAccount* mutable_user_account(int index);
  ::tr140::StorageService_UserAccount* add_user_account();
  ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_UserAccount >*
      mutable_user_account();
  const ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_UserAccount >&
      user_account() const;

  // repeated .tr140.StorageService.PhysicalMedium physical_medium = 17;
  int physical_medium_size() const;
  void clear_physical_medium();
  static const int kPhysicalMediumFieldNumber = 17;
  const ::tr140::StorageService_PhysicalMedium& physical_medium(int index) const;
  ::tr140::StorageService_PhysicalMedium* mutable_physical_medium(int index);
  ::tr140::StorageService_PhysicalMedium* add_physical_medium();
  ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_PhysicalMedium >*
      mutable_physical_medium();
  const ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_PhysicalMedium >&
      physical_medium() const;

  // repeated .tr140.StorageService.StorageArray storage_array = 18;
  int storage_array_size() const;
  void clear_storage_array();
  static const int kStorageArrayFieldNumber = 18;
  const ::tr140::StorageService_StorageArray& storage_array(int index) const;
  ::tr140::StorageService_StorageArray* mutable_storage_array(int index);
  ::tr140::StorageService_StorageArray* add_storage_array();
  ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_StorageArray >*
      mutable_storage_array();
  const ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_StorageArray >&
      storage_array() const;

  // repeated .tr140.StorageService.LogicalVolume logical_volume = 19;
  int logical_volume_size() const;
  void clear_logical_volume();
  static const int kLogicalVolumeFieldNumber = 19;
  const ::tr140::StorageService_LogicalVolume& logical_volume(int index) const;
  ::tr140::StorageService_LogicalVolume* mutable_logical_volume(int index);
  ::tr140::StorageService_LogicalVolume* add_logical_volume();
  ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_LogicalVolume >*
      mutable_logical_volume();
  const ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_LogicalVolume >&
      logical_volume() const;

  // string alias = 2;
  void clear_alias();
  static const int kAliasFieldNumber = 2;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // .tr140.StorageService.Capabilities capabilities = 8;
  bool has_capabilities() const;
  void clear_capabilities();
  static const int kCapabilitiesFieldNumber = 8;
  const ::tr140::StorageService_Capabilities& capabilities() const;
  ::tr140::StorageService_Capabilities* mutable_capabilities();
  ::tr140::StorageService_Capabilities* release_capabilities();
  void set_allocated_capabilities(::tr140::StorageService_Capabilities* capabilities);

  // .tr140.StorageService.NetInfo net_info = 9;
  bool has_net_info() const;
  void clear_net_info();
  static const int kNetInfoFieldNumber = 9;
  const ::tr140::StorageService_NetInfo& net_info() const;
  ::tr140::StorageService_NetInfo* mutable_net_info();
  ::tr140::StorageService_NetInfo* release_net_info();
  void set_allocated_net_info(::tr140::StorageService_NetInfo* net_info);

  // .tr140.StorageService.NetworkServer network_server = 12;
  bool has_network_server() const;
  void clear_network_server();
  static const int kNetworkServerFieldNumber = 12;
  const ::tr140::StorageService_NetworkServer& network_server() const;
  ::tr140::StorageService_NetworkServer* mutable_network_server();
  ::tr140::StorageService_NetworkServer* release_network_server();
  void set_allocated_network_server(::tr140::StorageService_NetworkServer* network_server);

  // .tr140.StorageService.FTPServer ftpserver = 13;
  bool has_ftpserver() const;
  void clear_ftpserver();
  static const int kFtpserverFieldNumber = 13;
  const ::tr140::StorageService_FTPServer& ftpserver() const;
  ::tr140::StorageService_FTPServer* mutable_ftpserver();
  ::tr140::StorageService_FTPServer* release_ftpserver();
  void set_allocated_ftpserver(::tr140::StorageService_FTPServer* ftpserver);

  // .tr140.StorageService.SFTPServer sftpserver = 14;
  bool has_sftpserver() const;
  void clear_sftpserver();
  static const int kSftpserverFieldNumber = 14;
  const ::tr140::StorageService_SFTPServer& sftpserver() const;
  ::tr140::StorageService_SFTPServer* mutable_sftpserver();
  ::tr140::StorageService_SFTPServer* release_sftpserver();
  void set_allocated_sftpserver(::tr140::StorageService_SFTPServer* sftpserver);

  // .tr140.StorageService.HTTPServer httpserver = 15;
  bool has_httpserver() const;
  void clear_httpserver();
  static const int kHttpserverFieldNumber = 15;
  const ::tr140::StorageService_HTTPServer& httpserver() const;
  ::tr140::StorageService_HTTPServer* mutable_httpserver();
  ::tr140::StorageService_HTTPServer* release_httpserver();
  void set_allocated_httpserver(::tr140::StorageService_HTTPServer* httpserver);

  // .tr140.StorageService.HTTPSServer httpsserver = 16;
  bool has_httpsserver() const;
  void clear_httpsserver();
  static const int kHttpsserverFieldNumber = 16;
  const ::tr140::StorageService_HTTPSServer& httpsserver() const;
  ::tr140::StorageService_HTTPSServer* mutable_httpsserver();
  ::tr140::StorageService_HTTPSServer* release_httpsserver();
  void set_allocated_httpsserver(::tr140::StorageService_HTTPSServer* httpsserver);

  // bool enable = 1;
  void clear_enable();
  static const int kEnableFieldNumber = 1;
  bool enable() const;
  void set_enable(bool value);

  // uint32 physical_medium_number_of_entries = 3;
  void clear_physical_medium_number_of_entries();
  static const int kPhysicalMediumNumberOfEntriesFieldNumber = 3;
  ::google::protobuf::uint32 physical_medium_number_of_entries() const;
  void set_physical_medium_number_of_entries(::google::protobuf::uint32 value);

  // uint32 storage_array_number_of_entries = 4;
  void clear_storage_array_number_of_entries();
  static const int kStorageArrayNumberOfEntriesFieldNumber = 4;
  ::google::protobuf::uint32 storage_array_number_of_entries() const;
  void set_storage_array_number_of_entries(::google::protobuf::uint32 value);

  // uint32 logical_volume_number_of_entries = 5;
  void clear_logical_volume_number_of_entries();
  static const int kLogicalVolumeNumberOfEntriesFieldNumber = 5;
  ::google::protobuf::uint32 logical_volume_number_of_entries() const;
  void set_logical_volume_number_of_entries(::google::protobuf::uint32 value);

  // uint32 user_account_number_of_entries = 6;
  void clear_user_account_number_of_entries();
  static const int kUserAccountNumberOfEntriesFieldNumber = 6;
  ::google::protobuf::uint32 user_account_number_of_entries() const;
  void set_user_account_number_of_entries(::google::protobuf::uint32 value);

  // uint32 user_group_number_of_entries = 7;
  void clear_user_group_number_of_entries();
  static const int kUserGroupNumberOfEntriesFieldNumber = 7;
  ::google::protobuf::uint32 user_group_number_of_entries() const;
  void set_user_group_number_of_entries(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tr140.StorageService)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_UserGroup > user_group_;
  ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_UserAccount > user_account_;
  ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_PhysicalMedium > physical_medium_;
  ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_StorageArray > storage_array_;
  ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_LogicalVolume > logical_volume_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::tr140::StorageService_Capabilities* capabilities_;
  ::tr140::StorageService_NetInfo* net_info_;
  ::tr140::StorageService_NetworkServer* network_server_;
  ::tr140::StorageService_FTPServer* ftpserver_;
  ::tr140::StorageService_SFTPServer* sftpserver_;
  ::tr140::StorageService_HTTPServer* httpserver_;
  ::tr140::StorageService_HTTPSServer* httpsserver_;
  bool enable_;
  ::google::protobuf::uint32 physical_medium_number_of_entries_;
  ::google::protobuf::uint32 storage_array_number_of_entries_;
  ::google::protobuf::uint32 logical_volume_number_of_entries_;
  ::google::protobuf::uint32 user_account_number_of_entries_;
  ::google::protobuf::uint32 user_group_number_of_entries_;
  mutable int _cached_size_;
  friend struct protobuf_tr_2d140_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StorageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tr140.StorageRequest) */ {
 public:
  StorageRequest();
  virtual ~StorageRequest();

  StorageRequest(const StorageRequest& from);

  inline StorageRequest& operator=(const StorageRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageRequest& default_instance();

  static inline const StorageRequest* internal_default_instance() {
    return reinterpret_cast<const StorageRequest*>(
               &_StorageRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(StorageRequest* other);

  // implements Message ----------------------------------------------

  inline StorageRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  StorageRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StorageRequest& from);
  void MergeFrom(const StorageRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StorageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 unused = 1;
  void clear_unused();
  static const int kUnusedFieldNumber = 1;
  ::google::protobuf::int32 unused() const;
  void set_unused(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tr140.StorageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 unused_;
  mutable int _cached_size_;
  friend struct protobuf_tr_2d140_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StorageReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tr140.StorageReply) */ {
 public:
  StorageReply();
  virtual ~StorageReply();

  StorageReply(const StorageReply& from);

  inline StorageReply& operator=(const StorageReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageReply& default_instance();

  static inline const StorageReply* internal_default_instance() {
    return reinterpret_cast<const StorageReply*>(
               &_StorageReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(StorageReply* other);

  // implements Message ----------------------------------------------

  inline StorageReply* New() const PROTOBUF_FINAL { return New(NULL); }

  StorageReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StorageReply& from);
  void MergeFrom(const StorageReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StorageReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 unused = 1;
  void clear_unused();
  static const int kUnusedFieldNumber = 1;
  ::google::protobuf::int32 unused() const;
  void set_unused(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tr140.StorageReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 unused_;
  mutable int _cached_size_;
  friend struct protobuf_tr_2d140_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class X_012345_Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tr140.X_012345_Message) */ {
 public:
  X_012345_Message();
  virtual ~X_012345_Message();

  X_012345_Message(const X_012345_Message& from);

  inline X_012345_Message& operator=(const X_012345_Message& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const X_012345_Message& default_instance();

  static inline const X_012345_Message* internal_default_instance() {
    return reinterpret_cast<const X_012345_Message*>(
               &_X_012345_Message_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(X_012345_Message* other);

  // implements Message ----------------------------------------------

  inline X_012345_Message* New() const PROTOBUF_FINAL { return New(NULL); }

  X_012345_Message* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const X_012345_Message& from);
  void MergeFrom(const X_012345_Message& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(X_012345_Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 unused = 1;
  void clear_unused();
  static const int kUnusedFieldNumber = 1;
  ::google::protobuf::int32 unused() const;
  void set_unused(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tr140.X_012345_Message)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 unused_;
  mutable int _cached_size_;
  friend struct protobuf_tr_2d140_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// StorageService_Capabilities

// bool ftpcapable = 1;
inline void StorageService_Capabilities::clear_ftpcapable() {
  ftpcapable_ = false;
}
inline bool StorageService_Capabilities::ftpcapable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.Capabilities.ftpcapable)
  return ftpcapable_;
}
inline void StorageService_Capabilities::set_ftpcapable(bool value) {
  
  ftpcapable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.Capabilities.ftpcapable)
}

// bool sftpcapable = 2;
inline void StorageService_Capabilities::clear_sftpcapable() {
  sftpcapable_ = false;
}
inline bool StorageService_Capabilities::sftpcapable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.Capabilities.sftpcapable)
  return sftpcapable_;
}
inline void StorageService_Capabilities::set_sftpcapable(bool value) {
  
  sftpcapable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.Capabilities.sftpcapable)
}

// bool httpcapable = 3;
inline void StorageService_Capabilities::clear_httpcapable() {
  httpcapable_ = false;
}
inline bool StorageService_Capabilities::httpcapable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.Capabilities.httpcapable)
  return httpcapable_;
}
inline void StorageService_Capabilities::set_httpcapable(bool value) {
  
  httpcapable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.Capabilities.httpcapable)
}

// bool httpscapable = 4;
inline void StorageService_Capabilities::clear_httpscapable() {
  httpscapable_ = false;
}
inline bool StorageService_Capabilities::httpscapable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.Capabilities.httpscapable)
  return httpscapable_;
}
inline void StorageService_Capabilities::set_httpscapable(bool value) {
  
  httpscapable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.Capabilities.httpscapable)
}

// bool httpwritable = 5;
inline void StorageService_Capabilities::clear_httpwritable() {
  httpwritable_ = false;
}
inline bool StorageService_Capabilities::httpwritable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.Capabilities.httpwritable)
  return httpwritable_;
}
inline void StorageService_Capabilities::set_httpwritable(bool value) {
  
  httpwritable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.Capabilities.httpwritable)
}

// string supported_network_protocols = 6;
inline void StorageService_Capabilities::clear_supported_network_protocols() {
  supported_network_protocols_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_Capabilities::supported_network_protocols() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.Capabilities.supported_network_protocols)
  return supported_network_protocols_.GetNoArena();
}
inline void StorageService_Capabilities::set_supported_network_protocols(const ::std::string& value) {
  
  supported_network_protocols_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.Capabilities.supported_network_protocols)
}
#if LANG_CXX11
inline void StorageService_Capabilities::set_supported_network_protocols(::std::string&& value) {
  
  supported_network_protocols_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.Capabilities.supported_network_protocols)
}
#endif
inline void StorageService_Capabilities::set_supported_network_protocols(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  supported_network_protocols_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.Capabilities.supported_network_protocols)
}
inline void StorageService_Capabilities::set_supported_network_protocols(const char* value, size_t size) {
  
  supported_network_protocols_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.Capabilities.supported_network_protocols)
}
inline ::std::string* StorageService_Capabilities::mutable_supported_network_protocols() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.Capabilities.supported_network_protocols)
  return supported_network_protocols_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_Capabilities::release_supported_network_protocols() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.Capabilities.supported_network_protocols)
  
  return supported_network_protocols_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_Capabilities::set_allocated_supported_network_protocols(::std::string* supported_network_protocols) {
  if (supported_network_protocols != NULL) {
    
  } else {
    
  }
  supported_network_protocols_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), supported_network_protocols);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.Capabilities.supported_network_protocols)
}

// string supported_file_system_types = 7;
inline void StorageService_Capabilities::clear_supported_file_system_types() {
  supported_file_system_types_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_Capabilities::supported_file_system_types() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.Capabilities.supported_file_system_types)
  return supported_file_system_types_.GetNoArena();
}
inline void StorageService_Capabilities::set_supported_file_system_types(const ::std::string& value) {
  
  supported_file_system_types_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.Capabilities.supported_file_system_types)
}
#if LANG_CXX11
inline void StorageService_Capabilities::set_supported_file_system_types(::std::string&& value) {
  
  supported_file_system_types_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.Capabilities.supported_file_system_types)
}
#endif
inline void StorageService_Capabilities::set_supported_file_system_types(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  supported_file_system_types_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.Capabilities.supported_file_system_types)
}
inline void StorageService_Capabilities::set_supported_file_system_types(const char* value, size_t size) {
  
  supported_file_system_types_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.Capabilities.supported_file_system_types)
}
inline ::std::string* StorageService_Capabilities::mutable_supported_file_system_types() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.Capabilities.supported_file_system_types)
  return supported_file_system_types_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_Capabilities::release_supported_file_system_types() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.Capabilities.supported_file_system_types)
  
  return supported_file_system_types_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_Capabilities::set_allocated_supported_file_system_types(::std::string* supported_file_system_types) {
  if (supported_file_system_types != NULL) {
    
  } else {
    
  }
  supported_file_system_types_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), supported_file_system_types);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.Capabilities.supported_file_system_types)
}

// string supported_raid_types = 8;
inline void StorageService_Capabilities::clear_supported_raid_types() {
  supported_raid_types_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_Capabilities::supported_raid_types() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.Capabilities.supported_raid_types)
  return supported_raid_types_.GetNoArena();
}
inline void StorageService_Capabilities::set_supported_raid_types(const ::std::string& value) {
  
  supported_raid_types_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.Capabilities.supported_raid_types)
}
#if LANG_CXX11
inline void StorageService_Capabilities::set_supported_raid_types(::std::string&& value) {
  
  supported_raid_types_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.Capabilities.supported_raid_types)
}
#endif
inline void StorageService_Capabilities::set_supported_raid_types(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  supported_raid_types_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.Capabilities.supported_raid_types)
}
inline void StorageService_Capabilities::set_supported_raid_types(const char* value, size_t size) {
  
  supported_raid_types_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.Capabilities.supported_raid_types)
}
inline ::std::string* StorageService_Capabilities::mutable_supported_raid_types() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.Capabilities.supported_raid_types)
  return supported_raid_types_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_Capabilities::release_supported_raid_types() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.Capabilities.supported_raid_types)
  
  return supported_raid_types_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_Capabilities::set_allocated_supported_raid_types(::std::string* supported_raid_types) {
  if (supported_raid_types != NULL) {
    
  } else {
    
  }
  supported_raid_types_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), supported_raid_types);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.Capabilities.supported_raid_types)
}

// bool volume_encryption_capable = 9;
inline void StorageService_Capabilities::clear_volume_encryption_capable() {
  volume_encryption_capable_ = false;
}
inline bool StorageService_Capabilities::volume_encryption_capable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.Capabilities.volume_encryption_capable)
  return volume_encryption_capable_;
}
inline void StorageService_Capabilities::set_volume_encryption_capable(bool value) {
  
  volume_encryption_capable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.Capabilities.volume_encryption_capable)
}

// -------------------------------------------------------------------

// StorageService_NetInfo

// string host_name = 1;
inline void StorageService_NetInfo::clear_host_name() {
  host_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_NetInfo::host_name() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.NetInfo.host_name)
  return host_name_.GetNoArena();
}
inline void StorageService_NetInfo::set_host_name(const ::std::string& value) {
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.NetInfo.host_name)
}
#if LANG_CXX11
inline void StorageService_NetInfo::set_host_name(::std::string&& value) {
  
  host_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.NetInfo.host_name)
}
#endif
inline void StorageService_NetInfo::set_host_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.NetInfo.host_name)
}
inline void StorageService_NetInfo::set_host_name(const char* value, size_t size) {
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.NetInfo.host_name)
}
inline ::std::string* StorageService_NetInfo::mutable_host_name() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.NetInfo.host_name)
  return host_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_NetInfo::release_host_name() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.NetInfo.host_name)
  
  return host_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_NetInfo::set_allocated_host_name(::std::string* host_name) {
  if (host_name != NULL) {
    
  } else {
    
  }
  host_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_name);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.NetInfo.host_name)
}

// string domain_name = 2;
inline void StorageService_NetInfo::clear_domain_name() {
  domain_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_NetInfo::domain_name() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.NetInfo.domain_name)
  return domain_name_.GetNoArena();
}
inline void StorageService_NetInfo::set_domain_name(const ::std::string& value) {
  
  domain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.NetInfo.domain_name)
}
#if LANG_CXX11
inline void StorageService_NetInfo::set_domain_name(::std::string&& value) {
  
  domain_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.NetInfo.domain_name)
}
#endif
inline void StorageService_NetInfo::set_domain_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.NetInfo.domain_name)
}
inline void StorageService_NetInfo::set_domain_name(const char* value, size_t size) {
  
  domain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.NetInfo.domain_name)
}
inline ::std::string* StorageService_NetInfo::mutable_domain_name() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.NetInfo.domain_name)
  return domain_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_NetInfo::release_domain_name() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.NetInfo.domain_name)
  
  return domain_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_NetInfo::set_allocated_domain_name(::std::string* domain_name) {
  if (domain_name != NULL) {
    
  } else {
    
  }
  domain_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain_name);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.NetInfo.domain_name)
}

// -------------------------------------------------------------------

// StorageService_UserGroup

// bool enable = 1;
inline void StorageService_UserGroup::clear_enable() {
  enable_ = false;
}
inline bool StorageService_UserGroup::enable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.UserGroup.enable)
  return enable_;
}
inline void StorageService_UserGroup::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.UserGroup.enable)
}

// string alias = 2;
inline void StorageService_UserGroup::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_UserGroup::alias() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.UserGroup.alias)
  return alias_.GetNoArena();
}
inline void StorageService_UserGroup::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.UserGroup.alias)
}
#if LANG_CXX11
inline void StorageService_UserGroup::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.UserGroup.alias)
}
#endif
inline void StorageService_UserGroup::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.UserGroup.alias)
}
inline void StorageService_UserGroup::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.UserGroup.alias)
}
inline ::std::string* StorageService_UserGroup::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.UserGroup.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_UserGroup::release_alias() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.UserGroup.alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_UserGroup::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.UserGroup.alias)
}

// string group_name = 3;
inline void StorageService_UserGroup::clear_group_name() {
  group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_UserGroup::group_name() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.UserGroup.group_name)
  return group_name_.GetNoArena();
}
inline void StorageService_UserGroup::set_group_name(const ::std::string& value) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.UserGroup.group_name)
}
#if LANG_CXX11
inline void StorageService_UserGroup::set_group_name(::std::string&& value) {
  
  group_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.UserGroup.group_name)
}
#endif
inline void StorageService_UserGroup::set_group_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.UserGroup.group_name)
}
inline void StorageService_UserGroup::set_group_name(const char* value, size_t size) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.UserGroup.group_name)
}
inline ::std::string* StorageService_UserGroup::mutable_group_name() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.UserGroup.group_name)
  return group_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_UserGroup::release_group_name() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.UserGroup.group_name)
  
  return group_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_UserGroup::set_allocated_group_name(::std::string* group_name) {
  if (group_name != NULL) {
    
  } else {
    
  }
  group_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_name);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.UserGroup.group_name)
}

// -------------------------------------------------------------------

// StorageService_UserAccount

// bool enable = 1;
inline void StorageService_UserAccount::clear_enable() {
  enable_ = false;
}
inline bool StorageService_UserAccount::enable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.UserAccount.enable)
  return enable_;
}
inline void StorageService_UserAccount::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.UserAccount.enable)
}

// string alias = 2;
inline void StorageService_UserAccount::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_UserAccount::alias() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.UserAccount.alias)
  return alias_.GetNoArena();
}
inline void StorageService_UserAccount::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.UserAccount.alias)
}
#if LANG_CXX11
inline void StorageService_UserAccount::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.UserAccount.alias)
}
#endif
inline void StorageService_UserAccount::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.UserAccount.alias)
}
inline void StorageService_UserAccount::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.UserAccount.alias)
}
inline ::std::string* StorageService_UserAccount::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.UserAccount.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_UserAccount::release_alias() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.UserAccount.alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_UserAccount::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.UserAccount.alias)
}

// string username = 3;
inline void StorageService_UserAccount::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_UserAccount::username() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.UserAccount.username)
  return username_.GetNoArena();
}
inline void StorageService_UserAccount::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.UserAccount.username)
}
#if LANG_CXX11
inline void StorageService_UserAccount::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.UserAccount.username)
}
#endif
inline void StorageService_UserAccount::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.UserAccount.username)
}
inline void StorageService_UserAccount::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.UserAccount.username)
}
inline ::std::string* StorageService_UserAccount::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.UserAccount.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_UserAccount::release_username() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.UserAccount.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_UserAccount::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.UserAccount.username)
}

// string password = 4;
inline void StorageService_UserAccount::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_UserAccount::password() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.UserAccount.password)
  return password_.GetNoArena();
}
inline void StorageService_UserAccount::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.UserAccount.password)
}
#if LANG_CXX11
inline void StorageService_UserAccount::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.UserAccount.password)
}
#endif
inline void StorageService_UserAccount::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.UserAccount.password)
}
inline void StorageService_UserAccount::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.UserAccount.password)
}
inline ::std::string* StorageService_UserAccount::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.UserAccount.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_UserAccount::release_password() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.UserAccount.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_UserAccount::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.UserAccount.password)
}

// string user_group_participation = 5;
inline void StorageService_UserAccount::clear_user_group_participation() {
  user_group_participation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_UserAccount::user_group_participation() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.UserAccount.user_group_participation)
  return user_group_participation_.GetNoArena();
}
inline void StorageService_UserAccount::set_user_group_participation(const ::std::string& value) {
  
  user_group_participation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.UserAccount.user_group_participation)
}
#if LANG_CXX11
inline void StorageService_UserAccount::set_user_group_participation(::std::string&& value) {
  
  user_group_participation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.UserAccount.user_group_participation)
}
#endif
inline void StorageService_UserAccount::set_user_group_participation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_group_participation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.UserAccount.user_group_participation)
}
inline void StorageService_UserAccount::set_user_group_participation(const char* value, size_t size) {
  
  user_group_participation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.UserAccount.user_group_participation)
}
inline ::std::string* StorageService_UserAccount::mutable_user_group_participation() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.UserAccount.user_group_participation)
  return user_group_participation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_UserAccount::release_user_group_participation() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.UserAccount.user_group_participation)
  
  return user_group_participation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_UserAccount::set_allocated_user_group_participation(::std::string* user_group_participation) {
  if (user_group_participation != NULL) {
    
  } else {
    
  }
  user_group_participation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_group_participation);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.UserAccount.user_group_participation)
}

// bool allow_ftpaccess = 6;
inline void StorageService_UserAccount::clear_allow_ftpaccess() {
  allow_ftpaccess_ = false;
}
inline bool StorageService_UserAccount::allow_ftpaccess() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.UserAccount.allow_ftpaccess)
  return allow_ftpaccess_;
}
inline void StorageService_UserAccount::set_allow_ftpaccess(bool value) {
  
  allow_ftpaccess_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.UserAccount.allow_ftpaccess)
}

// bool allow_httpaccess = 7;
inline void StorageService_UserAccount::clear_allow_httpaccess() {
  allow_httpaccess_ = false;
}
inline bool StorageService_UserAccount::allow_httpaccess() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.UserAccount.allow_httpaccess)
  return allow_httpaccess_;
}
inline void StorageService_UserAccount::set_allow_httpaccess(bool value) {
  
  allow_httpaccess_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.UserAccount.allow_httpaccess)
}

// -------------------------------------------------------------------

// StorageService_NetworkServer

// bool afpenable = 1;
inline void StorageService_NetworkServer::clear_afpenable() {
  afpenable_ = false;
}
inline bool StorageService_NetworkServer::afpenable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.NetworkServer.afpenable)
  return afpenable_;
}
inline void StorageService_NetworkServer::set_afpenable(bool value) {
  
  afpenable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.NetworkServer.afpenable)
}

// bool nfsenable = 2;
inline void StorageService_NetworkServer::clear_nfsenable() {
  nfsenable_ = false;
}
inline bool StorageService_NetworkServer::nfsenable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.NetworkServer.nfsenable)
  return nfsenable_;
}
inline void StorageService_NetworkServer::set_nfsenable(bool value) {
  
  nfsenable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.NetworkServer.nfsenable)
}

// bool smbenable = 3;
inline void StorageService_NetworkServer::clear_smbenable() {
  smbenable_ = false;
}
inline bool StorageService_NetworkServer::smbenable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.NetworkServer.smbenable)
  return smbenable_;
}
inline void StorageService_NetworkServer::set_smbenable(bool value) {
  
  smbenable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.NetworkServer.smbenable)
}

// bool network_protocol_auth_req = 4;
inline void StorageService_NetworkServer::clear_network_protocol_auth_req() {
  network_protocol_auth_req_ = false;
}
inline bool StorageService_NetworkServer::network_protocol_auth_req() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.NetworkServer.network_protocol_auth_req)
  return network_protocol_auth_req_;
}
inline void StorageService_NetworkServer::set_network_protocol_auth_req(bool value) {
  
  network_protocol_auth_req_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.NetworkServer.network_protocol_auth_req)
}

// -------------------------------------------------------------------

// StorageService_FTPServer_AnonymousUser

// bool enable = 1;
inline void StorageService_FTPServer_AnonymousUser::clear_enable() {
  enable_ = false;
}
inline bool StorageService_FTPServer_AnonymousUser::enable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.FTPServer.AnonymousUser.enable)
  return enable_;
}
inline void StorageService_FTPServer_AnonymousUser::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.FTPServer.AnonymousUser.enable)
}

// string starting_folder = 2;
inline void StorageService_FTPServer_AnonymousUser::clear_starting_folder() {
  starting_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_FTPServer_AnonymousUser::starting_folder() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.FTPServer.AnonymousUser.starting_folder)
  return starting_folder_.GetNoArena();
}
inline void StorageService_FTPServer_AnonymousUser::set_starting_folder(const ::std::string& value) {
  
  starting_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.FTPServer.AnonymousUser.starting_folder)
}
#if LANG_CXX11
inline void StorageService_FTPServer_AnonymousUser::set_starting_folder(::std::string&& value) {
  
  starting_folder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.FTPServer.AnonymousUser.starting_folder)
}
#endif
inline void StorageService_FTPServer_AnonymousUser::set_starting_folder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  starting_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.FTPServer.AnonymousUser.starting_folder)
}
inline void StorageService_FTPServer_AnonymousUser::set_starting_folder(const char* value, size_t size) {
  
  starting_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.FTPServer.AnonymousUser.starting_folder)
}
inline ::std::string* StorageService_FTPServer_AnonymousUser::mutable_starting_folder() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.FTPServer.AnonymousUser.starting_folder)
  return starting_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_FTPServer_AnonymousUser::release_starting_folder() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.FTPServer.AnonymousUser.starting_folder)
  
  return starting_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_FTPServer_AnonymousUser::set_allocated_starting_folder(::std::string* starting_folder) {
  if (starting_folder != NULL) {
    
  } else {
    
  }
  starting_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), starting_folder);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.FTPServer.AnonymousUser.starting_folder)
}

// bool read_only_access = 3;
inline void StorageService_FTPServer_AnonymousUser::clear_read_only_access() {
  read_only_access_ = false;
}
inline bool StorageService_FTPServer_AnonymousUser::read_only_access() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.FTPServer.AnonymousUser.read_only_access)
  return read_only_access_;
}
inline void StorageService_FTPServer_AnonymousUser::set_read_only_access(bool value) {
  
  read_only_access_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.FTPServer.AnonymousUser.read_only_access)
}

// -------------------------------------------------------------------

// StorageService_FTPServer

// bool enable = 1;
inline void StorageService_FTPServer::clear_enable() {
  enable_ = false;
}
inline bool StorageService_FTPServer::enable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.FTPServer.enable)
  return enable_;
}
inline void StorageService_FTPServer::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.FTPServer.enable)
}

// string status = 2;
inline void StorageService_FTPServer::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_FTPServer::status() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.FTPServer.status)
  return status_.GetNoArena();
}
inline void StorageService_FTPServer::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.FTPServer.status)
}
#if LANG_CXX11
inline void StorageService_FTPServer::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.FTPServer.status)
}
#endif
inline void StorageService_FTPServer::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.FTPServer.status)
}
inline void StorageService_FTPServer::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.FTPServer.status)
}
inline ::std::string* StorageService_FTPServer::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.FTPServer.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_FTPServer::release_status() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.FTPServer.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_FTPServer::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.FTPServer.status)
}

// uint32 max_num_users = 3;
inline void StorageService_FTPServer::clear_max_num_users() {
  max_num_users_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_FTPServer::max_num_users() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.FTPServer.max_num_users)
  return max_num_users_;
}
inline void StorageService_FTPServer::set_max_num_users(::google::protobuf::uint32 value) {
  
  max_num_users_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.FTPServer.max_num_users)
}

// uint32 idle_time = 4;
inline void StorageService_FTPServer::clear_idle_time() {
  idle_time_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_FTPServer::idle_time() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.FTPServer.idle_time)
  return idle_time_;
}
inline void StorageService_FTPServer::set_idle_time(::google::protobuf::uint32 value) {
  
  idle_time_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.FTPServer.idle_time)
}

// uint32 port_number = 5;
inline void StorageService_FTPServer::clear_port_number() {
  port_number_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_FTPServer::port_number() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.FTPServer.port_number)
  return port_number_;
}
inline void StorageService_FTPServer::set_port_number(::google::protobuf::uint32 value) {
  
  port_number_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.FTPServer.port_number)
}

// .tr140.StorageService.FTPServer.AnonymousUser anonymous_user = 6;
inline bool StorageService_FTPServer::has_anonymous_user() const {
  return this != internal_default_instance() && anonymous_user_ != NULL;
}
inline void StorageService_FTPServer::clear_anonymous_user() {
  if (GetArenaNoVirtual() == NULL && anonymous_user_ != NULL) delete anonymous_user_;
  anonymous_user_ = NULL;
}
inline const ::tr140::StorageService_FTPServer_AnonymousUser& StorageService_FTPServer::anonymous_user() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.FTPServer.anonymous_user)
  return anonymous_user_ != NULL ? *anonymous_user_
                         : *::tr140::StorageService_FTPServer_AnonymousUser::internal_default_instance();
}
inline ::tr140::StorageService_FTPServer_AnonymousUser* StorageService_FTPServer::mutable_anonymous_user() {
  
  if (anonymous_user_ == NULL) {
    anonymous_user_ = new ::tr140::StorageService_FTPServer_AnonymousUser;
  }
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.FTPServer.anonymous_user)
  return anonymous_user_;
}
inline ::tr140::StorageService_FTPServer_AnonymousUser* StorageService_FTPServer::release_anonymous_user() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.FTPServer.anonymous_user)
  
  ::tr140::StorageService_FTPServer_AnonymousUser* temp = anonymous_user_;
  anonymous_user_ = NULL;
  return temp;
}
inline void StorageService_FTPServer::set_allocated_anonymous_user(::tr140::StorageService_FTPServer_AnonymousUser* anonymous_user) {
  delete anonymous_user_;
  anonymous_user_ = anonymous_user;
  if (anonymous_user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.FTPServer.anonymous_user)
}

// -------------------------------------------------------------------

// StorageService_SFTPServer

// bool enable = 1;
inline void StorageService_SFTPServer::clear_enable() {
  enable_ = false;
}
inline bool StorageService_SFTPServer::enable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.SFTPServer.enable)
  return enable_;
}
inline void StorageService_SFTPServer::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.SFTPServer.enable)
}

// string status = 2;
inline void StorageService_SFTPServer::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_SFTPServer::status() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.SFTPServer.status)
  return status_.GetNoArena();
}
inline void StorageService_SFTPServer::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.SFTPServer.status)
}
#if LANG_CXX11
inline void StorageService_SFTPServer::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.SFTPServer.status)
}
#endif
inline void StorageService_SFTPServer::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.SFTPServer.status)
}
inline void StorageService_SFTPServer::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.SFTPServer.status)
}
inline ::std::string* StorageService_SFTPServer::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.SFTPServer.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_SFTPServer::release_status() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.SFTPServer.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_SFTPServer::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.SFTPServer.status)
}

// uint32 max_num_users = 3;
inline void StorageService_SFTPServer::clear_max_num_users() {
  max_num_users_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_SFTPServer::max_num_users() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.SFTPServer.max_num_users)
  return max_num_users_;
}
inline void StorageService_SFTPServer::set_max_num_users(::google::protobuf::uint32 value) {
  
  max_num_users_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.SFTPServer.max_num_users)
}

// uint32 idle_time = 4;
inline void StorageService_SFTPServer::clear_idle_time() {
  idle_time_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_SFTPServer::idle_time() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.SFTPServer.idle_time)
  return idle_time_;
}
inline void StorageService_SFTPServer::set_idle_time(::google::protobuf::uint32 value) {
  
  idle_time_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.SFTPServer.idle_time)
}

// uint32 port_number = 5;
inline void StorageService_SFTPServer::clear_port_number() {
  port_number_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_SFTPServer::port_number() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.SFTPServer.port_number)
  return port_number_;
}
inline void StorageService_SFTPServer::set_port_number(::google::protobuf::uint32 value) {
  
  port_number_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.SFTPServer.port_number)
}

// -------------------------------------------------------------------

// StorageService_HTTPServer

// bool enable = 1;
inline void StorageService_HTTPServer::clear_enable() {
  enable_ = false;
}
inline bool StorageService_HTTPServer::enable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.HTTPServer.enable)
  return enable_;
}
inline void StorageService_HTTPServer::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.HTTPServer.enable)
}

// string status = 2;
inline void StorageService_HTTPServer::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_HTTPServer::status() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.HTTPServer.status)
  return status_.GetNoArena();
}
inline void StorageService_HTTPServer::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.HTTPServer.status)
}
#if LANG_CXX11
inline void StorageService_HTTPServer::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.HTTPServer.status)
}
#endif
inline void StorageService_HTTPServer::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.HTTPServer.status)
}
inline void StorageService_HTTPServer::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.HTTPServer.status)
}
inline ::std::string* StorageService_HTTPServer::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.HTTPServer.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_HTTPServer::release_status() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.HTTPServer.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_HTTPServer::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.HTTPServer.status)
}

// uint32 max_num_users = 3;
inline void StorageService_HTTPServer::clear_max_num_users() {
  max_num_users_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_HTTPServer::max_num_users() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.HTTPServer.max_num_users)
  return max_num_users_;
}
inline void StorageService_HTTPServer::set_max_num_users(::google::protobuf::uint32 value) {
  
  max_num_users_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.HTTPServer.max_num_users)
}

// uint32 idle_time = 4;
inline void StorageService_HTTPServer::clear_idle_time() {
  idle_time_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_HTTPServer::idle_time() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.HTTPServer.idle_time)
  return idle_time_;
}
inline void StorageService_HTTPServer::set_idle_time(::google::protobuf::uint32 value) {
  
  idle_time_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.HTTPServer.idle_time)
}

// bool httpwriting_enabled = 5;
inline void StorageService_HTTPServer::clear_httpwriting_enabled() {
  httpwriting_enabled_ = false;
}
inline bool StorageService_HTTPServer::httpwriting_enabled() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.HTTPServer.httpwriting_enabled)
  return httpwriting_enabled_;
}
inline void StorageService_HTTPServer::set_httpwriting_enabled(bool value) {
  
  httpwriting_enabled_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.HTTPServer.httpwriting_enabled)
}

// uint32 port_number = 6;
inline void StorageService_HTTPServer::clear_port_number() {
  port_number_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_HTTPServer::port_number() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.HTTPServer.port_number)
  return port_number_;
}
inline void StorageService_HTTPServer::set_port_number(::google::protobuf::uint32 value) {
  
  port_number_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.HTTPServer.port_number)
}

// bool authentication_req = 7;
inline void StorageService_HTTPServer::clear_authentication_req() {
  authentication_req_ = false;
}
inline bool StorageService_HTTPServer::authentication_req() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.HTTPServer.authentication_req)
  return authentication_req_;
}
inline void StorageService_HTTPServer::set_authentication_req(bool value) {
  
  authentication_req_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.HTTPServer.authentication_req)
}

// -------------------------------------------------------------------

// StorageService_HTTPSServer

// bool enable = 1;
inline void StorageService_HTTPSServer::clear_enable() {
  enable_ = false;
}
inline bool StorageService_HTTPSServer::enable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.HTTPSServer.enable)
  return enable_;
}
inline void StorageService_HTTPSServer::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.HTTPSServer.enable)
}

// string status = 2;
inline void StorageService_HTTPSServer::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_HTTPSServer::status() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.HTTPSServer.status)
  return status_.GetNoArena();
}
inline void StorageService_HTTPSServer::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.HTTPSServer.status)
}
#if LANG_CXX11
inline void StorageService_HTTPSServer::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.HTTPSServer.status)
}
#endif
inline void StorageService_HTTPSServer::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.HTTPSServer.status)
}
inline void StorageService_HTTPSServer::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.HTTPSServer.status)
}
inline ::std::string* StorageService_HTTPSServer::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.HTTPSServer.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_HTTPSServer::release_status() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.HTTPSServer.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_HTTPSServer::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.HTTPSServer.status)
}

// uint32 max_num_users = 3;
inline void StorageService_HTTPSServer::clear_max_num_users() {
  max_num_users_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_HTTPSServer::max_num_users() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.HTTPSServer.max_num_users)
  return max_num_users_;
}
inline void StorageService_HTTPSServer::set_max_num_users(::google::protobuf::uint32 value) {
  
  max_num_users_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.HTTPSServer.max_num_users)
}

// uint32 idle_time = 4;
inline void StorageService_HTTPSServer::clear_idle_time() {
  idle_time_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_HTTPSServer::idle_time() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.HTTPSServer.idle_time)
  return idle_time_;
}
inline void StorageService_HTTPSServer::set_idle_time(::google::protobuf::uint32 value) {
  
  idle_time_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.HTTPSServer.idle_time)
}

// bool httpwriting_enabled = 5;
inline void StorageService_HTTPSServer::clear_httpwriting_enabled() {
  httpwriting_enabled_ = false;
}
inline bool StorageService_HTTPSServer::httpwriting_enabled() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.HTTPSServer.httpwriting_enabled)
  return httpwriting_enabled_;
}
inline void StorageService_HTTPSServer::set_httpwriting_enabled(bool value) {
  
  httpwriting_enabled_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.HTTPSServer.httpwriting_enabled)
}

// uint32 port_number = 6;
inline void StorageService_HTTPSServer::clear_port_number() {
  port_number_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_HTTPSServer::port_number() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.HTTPSServer.port_number)
  return port_number_;
}
inline void StorageService_HTTPSServer::set_port_number(::google::protobuf::uint32 value) {
  
  port_number_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.HTTPSServer.port_number)
}

// bool authentication_req = 7;
inline void StorageService_HTTPSServer::clear_authentication_req() {
  authentication_req_ = false;
}
inline bool StorageService_HTTPSServer::authentication_req() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.HTTPSServer.authentication_req)
  return authentication_req_;
}
inline void StorageService_HTTPSServer::set_authentication_req(bool value) {
  
  authentication_req_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.HTTPSServer.authentication_req)
}

// -------------------------------------------------------------------

// StorageService_PhysicalMedium_SMART

// uint32 reallocated_sectors_count = 1;
inline void StorageService_PhysicalMedium_SMART::clear_reallocated_sectors_count() {
  reallocated_sectors_count_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_PhysicalMedium_SMART::reallocated_sectors_count() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.SMART.reallocated_sectors_count)
  return reallocated_sectors_count_;
}
inline void StorageService_PhysicalMedium_SMART::set_reallocated_sectors_count(::google::protobuf::uint32 value) {
  
  reallocated_sectors_count_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.SMART.reallocated_sectors_count)
}

// uint32 power_on_hours = 2;
inline void StorageService_PhysicalMedium_SMART::clear_power_on_hours() {
  power_on_hours_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_PhysicalMedium_SMART::power_on_hours() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.SMART.power_on_hours)
  return power_on_hours_;
}
inline void StorageService_PhysicalMedium_SMART::set_power_on_hours(::google::protobuf::uint32 value) {
  
  power_on_hours_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.SMART.power_on_hours)
}

// uint32 spin_retry_count = 3;
inline void StorageService_PhysicalMedium_SMART::clear_spin_retry_count() {
  spin_retry_count_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_PhysicalMedium_SMART::spin_retry_count() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.SMART.spin_retry_count)
  return spin_retry_count_;
}
inline void StorageService_PhysicalMedium_SMART::set_spin_retry_count(::google::protobuf::uint32 value) {
  
  spin_retry_count_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.SMART.spin_retry_count)
}

// uint32 power_cycle_count = 4;
inline void StorageService_PhysicalMedium_SMART::clear_power_cycle_count() {
  power_cycle_count_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_PhysicalMedium_SMART::power_cycle_count() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.SMART.power_cycle_count)
  return power_cycle_count_;
}
inline void StorageService_PhysicalMedium_SMART::set_power_cycle_count(::google::protobuf::uint32 value) {
  
  power_cycle_count_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.SMART.power_cycle_count)
}

// uint32 temperature = 5;
inline void StorageService_PhysicalMedium_SMART::clear_temperature() {
  temperature_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_PhysicalMedium_SMART::temperature() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.SMART.temperature)
  return temperature_;
}
inline void StorageService_PhysicalMedium_SMART::set_temperature(::google::protobuf::uint32 value) {
  
  temperature_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.SMART.temperature)
}

// uint32 reallocation_event_count = 6;
inline void StorageService_PhysicalMedium_SMART::clear_reallocation_event_count() {
  reallocation_event_count_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_PhysicalMedium_SMART::reallocation_event_count() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.SMART.reallocation_event_count)
  return reallocation_event_count_;
}
inline void StorageService_PhysicalMedium_SMART::set_reallocation_event_count(::google::protobuf::uint32 value) {
  
  reallocation_event_count_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.SMART.reallocation_event_count)
}

// uint32 current_pending_sector_count = 7;
inline void StorageService_PhysicalMedium_SMART::clear_current_pending_sector_count() {
  current_pending_sector_count_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_PhysicalMedium_SMART::current_pending_sector_count() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.SMART.current_pending_sector_count)
  return current_pending_sector_count_;
}
inline void StorageService_PhysicalMedium_SMART::set_current_pending_sector_count(::google::protobuf::uint32 value) {
  
  current_pending_sector_count_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.SMART.current_pending_sector_count)
}

// uint32 uncorrectable_sector_count = 8;
inline void StorageService_PhysicalMedium_SMART::clear_uncorrectable_sector_count() {
  uncorrectable_sector_count_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_PhysicalMedium_SMART::uncorrectable_sector_count() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.SMART.uncorrectable_sector_count)
  return uncorrectable_sector_count_;
}
inline void StorageService_PhysicalMedium_SMART::set_uncorrectable_sector_count(::google::protobuf::uint32 value) {
  
  uncorrectable_sector_count_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.SMART.uncorrectable_sector_count)
}

// uint32 read_errors = 9;
inline void StorageService_PhysicalMedium_SMART::clear_read_errors() {
  read_errors_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_PhysicalMedium_SMART::read_errors() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.SMART.read_errors)
  return read_errors_;
}
inline void StorageService_PhysicalMedium_SMART::set_read_errors(::google::protobuf::uint32 value) {
  
  read_errors_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.SMART.read_errors)
}

// uint32 soft_read_errors = 10;
inline void StorageService_PhysicalMedium_SMART::clear_soft_read_errors() {
  soft_read_errors_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_PhysicalMedium_SMART::soft_read_errors() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.SMART.soft_read_errors)
  return soft_read_errors_;
}
inline void StorageService_PhysicalMedium_SMART::set_soft_read_errors(::google::protobuf::uint32 value) {
  
  soft_read_errors_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.SMART.soft_read_errors)
}

// uint32 write_errors = 11;
inline void StorageService_PhysicalMedium_SMART::clear_write_errors() {
  write_errors_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_PhysicalMedium_SMART::write_errors() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.SMART.write_errors)
  return write_errors_;
}
inline void StorageService_PhysicalMedium_SMART::set_write_errors(::google::protobuf::uint32 value) {
  
  write_errors_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.SMART.write_errors)
}

// uint32 spares_remaining = 12;
inline void StorageService_PhysicalMedium_SMART::clear_spares_remaining() {
  spares_remaining_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_PhysicalMedium_SMART::spares_remaining() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.SMART.spares_remaining)
  return spares_remaining_;
}
inline void StorageService_PhysicalMedium_SMART::set_spares_remaining(::google::protobuf::uint32 value) {
  
  spares_remaining_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.SMART.spares_remaining)
}

// int32 predicted_failure = 13;
inline void StorageService_PhysicalMedium_SMART::clear_predicted_failure() {
  predicted_failure_ = 0;
}
inline ::google::protobuf::int32 StorageService_PhysicalMedium_SMART::predicted_failure() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.SMART.predicted_failure)
  return predicted_failure_;
}
inline void StorageService_PhysicalMedium_SMART::set_predicted_failure(::google::protobuf::int32 value) {
  
  predicted_failure_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.SMART.predicted_failure)
}

// -------------------------------------------------------------------

// StorageService_PhysicalMedium

// string alias = 1;
inline void StorageService_PhysicalMedium::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_PhysicalMedium::alias() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.alias)
  return alias_.GetNoArena();
}
inline void StorageService_PhysicalMedium::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.alias)
}
#if LANG_CXX11
inline void StorageService_PhysicalMedium::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.PhysicalMedium.alias)
}
#endif
inline void StorageService_PhysicalMedium::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.PhysicalMedium.alias)
}
inline void StorageService_PhysicalMedium::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.PhysicalMedium.alias)
}
inline ::std::string* StorageService_PhysicalMedium::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.PhysicalMedium.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_PhysicalMedium::release_alias() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.PhysicalMedium.alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_PhysicalMedium::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.PhysicalMedium.alias)
}

// string name = 2;
inline void StorageService_PhysicalMedium::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_PhysicalMedium::name() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.name)
  return name_.GetNoArena();
}
inline void StorageService_PhysicalMedium::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.name)
}
#if LANG_CXX11
inline void StorageService_PhysicalMedium::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.PhysicalMedium.name)
}
#endif
inline void StorageService_PhysicalMedium::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.PhysicalMedium.name)
}
inline void StorageService_PhysicalMedium::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.PhysicalMedium.name)
}
inline ::std::string* StorageService_PhysicalMedium::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.PhysicalMedium.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_PhysicalMedium::release_name() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.PhysicalMedium.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_PhysicalMedium::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.PhysicalMedium.name)
}

// string vendor = 3;
inline void StorageService_PhysicalMedium::clear_vendor() {
  vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_PhysicalMedium::vendor() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.vendor)
  return vendor_.GetNoArena();
}
inline void StorageService_PhysicalMedium::set_vendor(const ::std::string& value) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.vendor)
}
#if LANG_CXX11
inline void StorageService_PhysicalMedium::set_vendor(::std::string&& value) {
  
  vendor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.PhysicalMedium.vendor)
}
#endif
inline void StorageService_PhysicalMedium::set_vendor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.PhysicalMedium.vendor)
}
inline void StorageService_PhysicalMedium::set_vendor(const char* value, size_t size) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.PhysicalMedium.vendor)
}
inline ::std::string* StorageService_PhysicalMedium::mutable_vendor() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.PhysicalMedium.vendor)
  return vendor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_PhysicalMedium::release_vendor() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.PhysicalMedium.vendor)
  
  return vendor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_PhysicalMedium::set_allocated_vendor(::std::string* vendor) {
  if (vendor != NULL) {
    
  } else {
    
  }
  vendor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendor);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.PhysicalMedium.vendor)
}

// string model = 4;
inline void StorageService_PhysicalMedium::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_PhysicalMedium::model() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.model)
  return model_.GetNoArena();
}
inline void StorageService_PhysicalMedium::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.model)
}
#if LANG_CXX11
inline void StorageService_PhysicalMedium::set_model(::std::string&& value) {
  
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.PhysicalMedium.model)
}
#endif
inline void StorageService_PhysicalMedium::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.PhysicalMedium.model)
}
inline void StorageService_PhysicalMedium::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.PhysicalMedium.model)
}
inline ::std::string* StorageService_PhysicalMedium::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.PhysicalMedium.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_PhysicalMedium::release_model() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.PhysicalMedium.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_PhysicalMedium::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.PhysicalMedium.model)
}

// string serial_number = 5;
inline void StorageService_PhysicalMedium::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_PhysicalMedium::serial_number() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.serial_number)
  return serial_number_.GetNoArena();
}
inline void StorageService_PhysicalMedium::set_serial_number(const ::std::string& value) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.serial_number)
}
#if LANG_CXX11
inline void StorageService_PhysicalMedium::set_serial_number(::std::string&& value) {
  
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.PhysicalMedium.serial_number)
}
#endif
inline void StorageService_PhysicalMedium::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.PhysicalMedium.serial_number)
}
inline void StorageService_PhysicalMedium::set_serial_number(const char* value, size_t size) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.PhysicalMedium.serial_number)
}
inline ::std::string* StorageService_PhysicalMedium::mutable_serial_number() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.PhysicalMedium.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_PhysicalMedium::release_serial_number() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.PhysicalMedium.serial_number)
  
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_PhysicalMedium::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    
  } else {
    
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.PhysicalMedium.serial_number)
}

// string firmware_version = 6;
inline void StorageService_PhysicalMedium::clear_firmware_version() {
  firmware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_PhysicalMedium::firmware_version() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.firmware_version)
  return firmware_version_.GetNoArena();
}
inline void StorageService_PhysicalMedium::set_firmware_version(const ::std::string& value) {
  
  firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.firmware_version)
}
#if LANG_CXX11
inline void StorageService_PhysicalMedium::set_firmware_version(::std::string&& value) {
  
  firmware_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.PhysicalMedium.firmware_version)
}
#endif
inline void StorageService_PhysicalMedium::set_firmware_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.PhysicalMedium.firmware_version)
}
inline void StorageService_PhysicalMedium::set_firmware_version(const char* value, size_t size) {
  
  firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.PhysicalMedium.firmware_version)
}
inline ::std::string* StorageService_PhysicalMedium::mutable_firmware_version() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.PhysicalMedium.firmware_version)
  return firmware_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_PhysicalMedium::release_firmware_version() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.PhysicalMedium.firmware_version)
  
  return firmware_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_PhysicalMedium::set_allocated_firmware_version(::std::string* firmware_version) {
  if (firmware_version != NULL) {
    
  } else {
    
  }
  firmware_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firmware_version);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.PhysicalMedium.firmware_version)
}

// string connection_type = 7;
inline void StorageService_PhysicalMedium::clear_connection_type() {
  connection_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_PhysicalMedium::connection_type() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.connection_type)
  return connection_type_.GetNoArena();
}
inline void StorageService_PhysicalMedium::set_connection_type(const ::std::string& value) {
  
  connection_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.connection_type)
}
#if LANG_CXX11
inline void StorageService_PhysicalMedium::set_connection_type(::std::string&& value) {
  
  connection_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.PhysicalMedium.connection_type)
}
#endif
inline void StorageService_PhysicalMedium::set_connection_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  connection_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.PhysicalMedium.connection_type)
}
inline void StorageService_PhysicalMedium::set_connection_type(const char* value, size_t size) {
  
  connection_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.PhysicalMedium.connection_type)
}
inline ::std::string* StorageService_PhysicalMedium::mutable_connection_type() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.PhysicalMedium.connection_type)
  return connection_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_PhysicalMedium::release_connection_type() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.PhysicalMedium.connection_type)
  
  return connection_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_PhysicalMedium::set_allocated_connection_type(::std::string* connection_type) {
  if (connection_type != NULL) {
    
  } else {
    
  }
  connection_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connection_type);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.PhysicalMedium.connection_type)
}

// string type = 8;
inline void StorageService_PhysicalMedium::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_PhysicalMedium::type() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.type)
  return type_.GetNoArena();
}
inline void StorageService_PhysicalMedium::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.type)
}
#if LANG_CXX11
inline void StorageService_PhysicalMedium::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.PhysicalMedium.type)
}
#endif
inline void StorageService_PhysicalMedium::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.PhysicalMedium.type)
}
inline void StorageService_PhysicalMedium::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.PhysicalMedium.type)
}
inline ::std::string* StorageService_PhysicalMedium::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.PhysicalMedium.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_PhysicalMedium::release_type() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.PhysicalMedium.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_PhysicalMedium::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.PhysicalMedium.type)
}

// bool removable = 9;
inline void StorageService_PhysicalMedium::clear_removable() {
  removable_ = false;
}
inline bool StorageService_PhysicalMedium::removable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.removable)
  return removable_;
}
inline void StorageService_PhysicalMedium::set_removable(bool value) {
  
  removable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.removable)
}

// uint32 capacity = 10;
inline void StorageService_PhysicalMedium::clear_capacity() {
  capacity_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_PhysicalMedium::capacity() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.capacity)
  return capacity_;
}
inline void StorageService_PhysicalMedium::set_capacity(::google::protobuf::uint32 value) {
  
  capacity_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.capacity)
}

// string status = 11;
inline void StorageService_PhysicalMedium::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_PhysicalMedium::status() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.status)
  return status_.GetNoArena();
}
inline void StorageService_PhysicalMedium::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.status)
}
#if LANG_CXX11
inline void StorageService_PhysicalMedium::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.PhysicalMedium.status)
}
#endif
inline void StorageService_PhysicalMedium::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.PhysicalMedium.status)
}
inline void StorageService_PhysicalMedium::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.PhysicalMedium.status)
}
inline ::std::string* StorageService_PhysicalMedium::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.PhysicalMedium.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_PhysicalMedium::release_status() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.PhysicalMedium.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_PhysicalMedium::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.PhysicalMedium.status)
}

// uint32 uptime = 12;
inline void StorageService_PhysicalMedium::clear_uptime() {
  uptime_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_PhysicalMedium::uptime() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.uptime)
  return uptime_;
}
inline void StorageService_PhysicalMedium::set_uptime(::google::protobuf::uint32 value) {
  
  uptime_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.uptime)
}

// bool smartcapable = 13;
inline void StorageService_PhysicalMedium::clear_smartcapable() {
  smartcapable_ = false;
}
inline bool StorageService_PhysicalMedium::smartcapable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.smartcapable)
  return smartcapable_;
}
inline void StorageService_PhysicalMedium::set_smartcapable(bool value) {
  
  smartcapable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.smartcapable)
}

// string health = 14;
inline void StorageService_PhysicalMedium::clear_health() {
  health_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_PhysicalMedium::health() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.health)
  return health_.GetNoArena();
}
inline void StorageService_PhysicalMedium::set_health(const ::std::string& value) {
  
  health_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.health)
}
#if LANG_CXX11
inline void StorageService_PhysicalMedium::set_health(::std::string&& value) {
  
  health_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.PhysicalMedium.health)
}
#endif
inline void StorageService_PhysicalMedium::set_health(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  health_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.PhysicalMedium.health)
}
inline void StorageService_PhysicalMedium::set_health(const char* value, size_t size) {
  
  health_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.PhysicalMedium.health)
}
inline ::std::string* StorageService_PhysicalMedium::mutable_health() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.PhysicalMedium.health)
  return health_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_PhysicalMedium::release_health() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.PhysicalMedium.health)
  
  return health_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_PhysicalMedium::set_allocated_health(::std::string* health) {
  if (health != NULL) {
    
  } else {
    
  }
  health_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), health);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.PhysicalMedium.health)
}

// bool hot_swappable = 15;
inline void StorageService_PhysicalMedium::clear_hot_swappable() {
  hot_swappable_ = false;
}
inline bool StorageService_PhysicalMedium::hot_swappable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.hot_swappable)
  return hot_swappable_;
}
inline void StorageService_PhysicalMedium::set_hot_swappable(bool value) {
  
  hot_swappable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.hot_swappable)
}

// .tr140.StorageService.PhysicalMedium.SMART smart = 16;
inline bool StorageService_PhysicalMedium::has_smart() const {
  return this != internal_default_instance() && smart_ != NULL;
}
inline void StorageService_PhysicalMedium::clear_smart() {
  if (GetArenaNoVirtual() == NULL && smart_ != NULL) delete smart_;
  smart_ = NULL;
}
inline const ::tr140::StorageService_PhysicalMedium_SMART& StorageService_PhysicalMedium::smart() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.smart)
  return smart_ != NULL ? *smart_
                         : *::tr140::StorageService_PhysicalMedium_SMART::internal_default_instance();
}
inline ::tr140::StorageService_PhysicalMedium_SMART* StorageService_PhysicalMedium::mutable_smart() {
  
  if (smart_ == NULL) {
    smart_ = new ::tr140::StorageService_PhysicalMedium_SMART;
  }
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.PhysicalMedium.smart)
  return smart_;
}
inline ::tr140::StorageService_PhysicalMedium_SMART* StorageService_PhysicalMedium::release_smart() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.PhysicalMedium.smart)
  
  ::tr140::StorageService_PhysicalMedium_SMART* temp = smart_;
  smart_ = NULL;
  return temp;
}
inline void StorageService_PhysicalMedium::set_allocated_smart(::tr140::StorageService_PhysicalMedium_SMART* smart) {
  delete smart_;
  smart_ = smart;
  if (smart) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.PhysicalMedium.smart)
}

// -------------------------------------------------------------------

// StorageService_StorageArray

// string alias = 1;
inline void StorageService_StorageArray::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_StorageArray::alias() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.StorageArray.alias)
  return alias_.GetNoArena();
}
inline void StorageService_StorageArray::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.StorageArray.alias)
}
#if LANG_CXX11
inline void StorageService_StorageArray::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.StorageArray.alias)
}
#endif
inline void StorageService_StorageArray::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.StorageArray.alias)
}
inline void StorageService_StorageArray::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.StorageArray.alias)
}
inline ::std::string* StorageService_StorageArray::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.StorageArray.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_StorageArray::release_alias() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.StorageArray.alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_StorageArray::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.StorageArray.alias)
}

// string name = 2;
inline void StorageService_StorageArray::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_StorageArray::name() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.StorageArray.name)
  return name_.GetNoArena();
}
inline void StorageService_StorageArray::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.StorageArray.name)
}
#if LANG_CXX11
inline void StorageService_StorageArray::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.StorageArray.name)
}
#endif
inline void StorageService_StorageArray::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.StorageArray.name)
}
inline void StorageService_StorageArray::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.StorageArray.name)
}
inline ::std::string* StorageService_StorageArray::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.StorageArray.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_StorageArray::release_name() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.StorageArray.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_StorageArray::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.StorageArray.name)
}

// string status = 3;
inline void StorageService_StorageArray::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_StorageArray::status() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.StorageArray.status)
  return status_.GetNoArena();
}
inline void StorageService_StorageArray::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.StorageArray.status)
}
#if LANG_CXX11
inline void StorageService_StorageArray::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.StorageArray.status)
}
#endif
inline void StorageService_StorageArray::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.StorageArray.status)
}
inline void StorageService_StorageArray::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.StorageArray.status)
}
inline ::std::string* StorageService_StorageArray::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.StorageArray.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_StorageArray::release_status() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.StorageArray.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_StorageArray::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.StorageArray.status)
}

// bool enable = 4;
inline void StorageService_StorageArray::clear_enable() {
  enable_ = false;
}
inline bool StorageService_StorageArray::enable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.StorageArray.enable)
  return enable_;
}
inline void StorageService_StorageArray::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.StorageArray.enable)
}

// string raid_type = 5;
inline void StorageService_StorageArray::clear_raid_type() {
  raid_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_StorageArray::raid_type() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.StorageArray.raid_type)
  return raid_type_.GetNoArena();
}
inline void StorageService_StorageArray::set_raid_type(const ::std::string& value) {
  
  raid_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.StorageArray.raid_type)
}
#if LANG_CXX11
inline void StorageService_StorageArray::set_raid_type(::std::string&& value) {
  
  raid_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.StorageArray.raid_type)
}
#endif
inline void StorageService_StorageArray::set_raid_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  raid_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.StorageArray.raid_type)
}
inline void StorageService_StorageArray::set_raid_type(const char* value, size_t size) {
  
  raid_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.StorageArray.raid_type)
}
inline ::std::string* StorageService_StorageArray::mutable_raid_type() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.StorageArray.raid_type)
  return raid_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_StorageArray::release_raid_type() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.StorageArray.raid_type)
  
  return raid_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_StorageArray::set_allocated_raid_type(::std::string* raid_type) {
  if (raid_type != NULL) {
    
  } else {
    
  }
  raid_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raid_type);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.StorageArray.raid_type)
}

// uint32 usable_capacity = 6;
inline void StorageService_StorageArray::clear_usable_capacity() {
  usable_capacity_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_StorageArray::usable_capacity() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.StorageArray.usable_capacity)
  return usable_capacity_;
}
inline void StorageService_StorageArray::set_usable_capacity(::google::protobuf::uint32 value) {
  
  usable_capacity_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.StorageArray.usable_capacity)
}

// string physical_medium_reference = 7;
inline void StorageService_StorageArray::clear_physical_medium_reference() {
  physical_medium_reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_StorageArray::physical_medium_reference() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.StorageArray.physical_medium_reference)
  return physical_medium_reference_.GetNoArena();
}
inline void StorageService_StorageArray::set_physical_medium_reference(const ::std::string& value) {
  
  physical_medium_reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.StorageArray.physical_medium_reference)
}
#if LANG_CXX11
inline void StorageService_StorageArray::set_physical_medium_reference(::std::string&& value) {
  
  physical_medium_reference_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.StorageArray.physical_medium_reference)
}
#endif
inline void StorageService_StorageArray::set_physical_medium_reference(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  physical_medium_reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.StorageArray.physical_medium_reference)
}
inline void StorageService_StorageArray::set_physical_medium_reference(const char* value, size_t size) {
  
  physical_medium_reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.StorageArray.physical_medium_reference)
}
inline ::std::string* StorageService_StorageArray::mutable_physical_medium_reference() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.StorageArray.physical_medium_reference)
  return physical_medium_reference_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_StorageArray::release_physical_medium_reference() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.StorageArray.physical_medium_reference)
  
  return physical_medium_reference_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_StorageArray::set_allocated_physical_medium_reference(::std::string* physical_medium_reference) {
  if (physical_medium_reference != NULL) {
    
  } else {
    
  }
  physical_medium_reference_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), physical_medium_reference);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.StorageArray.physical_medium_reference)
}

// -------------------------------------------------------------------

// StorageService_LogicalVolume_Folder_UserAccess

// string alias = 1;
inline void StorageService_LogicalVolume_Folder_UserAccess::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_LogicalVolume_Folder_UserAccess::alias() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.UserAccess.alias)
  return alias_.GetNoArena();
}
inline void StorageService_LogicalVolume_Folder_UserAccess::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.UserAccess.alias)
}
#if LANG_CXX11
inline void StorageService_LogicalVolume_Folder_UserAccess::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.LogicalVolume.Folder.UserAccess.alias)
}
#endif
inline void StorageService_LogicalVolume_Folder_UserAccess::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.LogicalVolume.Folder.UserAccess.alias)
}
inline void StorageService_LogicalVolume_Folder_UserAccess::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.LogicalVolume.Folder.UserAccess.alias)
}
inline ::std::string* StorageService_LogicalVolume_Folder_UserAccess::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.LogicalVolume.Folder.UserAccess.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_LogicalVolume_Folder_UserAccess::release_alias() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.LogicalVolume.Folder.UserAccess.alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_LogicalVolume_Folder_UserAccess::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.LogicalVolume.Folder.UserAccess.alias)
}

// bool enable = 2;
inline void StorageService_LogicalVolume_Folder_UserAccess::clear_enable() {
  enable_ = false;
}
inline bool StorageService_LogicalVolume_Folder_UserAccess::enable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.UserAccess.enable)
  return enable_;
}
inline void StorageService_LogicalVolume_Folder_UserAccess::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.UserAccess.enable)
}

// string user_reference = 3;
inline void StorageService_LogicalVolume_Folder_UserAccess::clear_user_reference() {
  user_reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_LogicalVolume_Folder_UserAccess::user_reference() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.UserAccess.user_reference)
  return user_reference_.GetNoArena();
}
inline void StorageService_LogicalVolume_Folder_UserAccess::set_user_reference(const ::std::string& value) {
  
  user_reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.UserAccess.user_reference)
}
#if LANG_CXX11
inline void StorageService_LogicalVolume_Folder_UserAccess::set_user_reference(::std::string&& value) {
  
  user_reference_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.LogicalVolume.Folder.UserAccess.user_reference)
}
#endif
inline void StorageService_LogicalVolume_Folder_UserAccess::set_user_reference(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.LogicalVolume.Folder.UserAccess.user_reference)
}
inline void StorageService_LogicalVolume_Folder_UserAccess::set_user_reference(const char* value, size_t size) {
  
  user_reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.LogicalVolume.Folder.UserAccess.user_reference)
}
inline ::std::string* StorageService_LogicalVolume_Folder_UserAccess::mutable_user_reference() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.LogicalVolume.Folder.UserAccess.user_reference)
  return user_reference_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_LogicalVolume_Folder_UserAccess::release_user_reference() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.LogicalVolume.Folder.UserAccess.user_reference)
  
  return user_reference_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_LogicalVolume_Folder_UserAccess::set_allocated_user_reference(::std::string* user_reference) {
  if (user_reference != NULL) {
    
  } else {
    
  }
  user_reference_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_reference);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.LogicalVolume.Folder.UserAccess.user_reference)
}

// uint32 permissions = 4;
inline void StorageService_LogicalVolume_Folder_UserAccess::clear_permissions() {
  permissions_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_LogicalVolume_Folder_UserAccess::permissions() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.UserAccess.permissions)
  return permissions_;
}
inline void StorageService_LogicalVolume_Folder_UserAccess::set_permissions(::google::protobuf::uint32 value) {
  
  permissions_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.UserAccess.permissions)
}

// -------------------------------------------------------------------

// StorageService_LogicalVolume_Folder_GroupAccess

// string alias = 1;
inline void StorageService_LogicalVolume_Folder_GroupAccess::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_LogicalVolume_Folder_GroupAccess::alias() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.GroupAccess.alias)
  return alias_.GetNoArena();
}
inline void StorageService_LogicalVolume_Folder_GroupAccess::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.GroupAccess.alias)
}
#if LANG_CXX11
inline void StorageService_LogicalVolume_Folder_GroupAccess::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.LogicalVolume.Folder.GroupAccess.alias)
}
#endif
inline void StorageService_LogicalVolume_Folder_GroupAccess::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.LogicalVolume.Folder.GroupAccess.alias)
}
inline void StorageService_LogicalVolume_Folder_GroupAccess::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.LogicalVolume.Folder.GroupAccess.alias)
}
inline ::std::string* StorageService_LogicalVolume_Folder_GroupAccess::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.LogicalVolume.Folder.GroupAccess.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_LogicalVolume_Folder_GroupAccess::release_alias() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.LogicalVolume.Folder.GroupAccess.alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_LogicalVolume_Folder_GroupAccess::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.LogicalVolume.Folder.GroupAccess.alias)
}

// bool enable = 2;
inline void StorageService_LogicalVolume_Folder_GroupAccess::clear_enable() {
  enable_ = false;
}
inline bool StorageService_LogicalVolume_Folder_GroupAccess::enable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.GroupAccess.enable)
  return enable_;
}
inline void StorageService_LogicalVolume_Folder_GroupAccess::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.GroupAccess.enable)
}

// string group_reference = 3;
inline void StorageService_LogicalVolume_Folder_GroupAccess::clear_group_reference() {
  group_reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_LogicalVolume_Folder_GroupAccess::group_reference() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.GroupAccess.group_reference)
  return group_reference_.GetNoArena();
}
inline void StorageService_LogicalVolume_Folder_GroupAccess::set_group_reference(const ::std::string& value) {
  
  group_reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.GroupAccess.group_reference)
}
#if LANG_CXX11
inline void StorageService_LogicalVolume_Folder_GroupAccess::set_group_reference(::std::string&& value) {
  
  group_reference_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.LogicalVolume.Folder.GroupAccess.group_reference)
}
#endif
inline void StorageService_LogicalVolume_Folder_GroupAccess::set_group_reference(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.LogicalVolume.Folder.GroupAccess.group_reference)
}
inline void StorageService_LogicalVolume_Folder_GroupAccess::set_group_reference(const char* value, size_t size) {
  
  group_reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.LogicalVolume.Folder.GroupAccess.group_reference)
}
inline ::std::string* StorageService_LogicalVolume_Folder_GroupAccess::mutable_group_reference() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.LogicalVolume.Folder.GroupAccess.group_reference)
  return group_reference_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_LogicalVolume_Folder_GroupAccess::release_group_reference() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.LogicalVolume.Folder.GroupAccess.group_reference)
  
  return group_reference_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_LogicalVolume_Folder_GroupAccess::set_allocated_group_reference(::std::string* group_reference) {
  if (group_reference != NULL) {
    
  } else {
    
  }
  group_reference_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_reference);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.LogicalVolume.Folder.GroupAccess.group_reference)
}

// uint32 permissions = 4;
inline void StorageService_LogicalVolume_Folder_GroupAccess::clear_permissions() {
  permissions_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_LogicalVolume_Folder_GroupAccess::permissions() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.GroupAccess.permissions)
  return permissions_;
}
inline void StorageService_LogicalVolume_Folder_GroupAccess::set_permissions(::google::protobuf::uint32 value) {
  
  permissions_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.GroupAccess.permissions)
}

// -------------------------------------------------------------------

// StorageService_LogicalVolume_Folder_Quota

// bool enable = 1;
inline void StorageService_LogicalVolume_Folder_Quota::clear_enable() {
  enable_ = false;
}
inline bool StorageService_LogicalVolume_Folder_Quota::enable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.Quota.enable)
  return enable_;
}
inline void StorageService_LogicalVolume_Folder_Quota::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.Quota.enable)
}

// uint32 capacity = 2;
inline void StorageService_LogicalVolume_Folder_Quota::clear_capacity() {
  capacity_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_LogicalVolume_Folder_Quota::capacity() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.Quota.capacity)
  return capacity_;
}
inline void StorageService_LogicalVolume_Folder_Quota::set_capacity(::google::protobuf::uint32 value) {
  
  capacity_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.Quota.capacity)
}

// uint32 used_space = 3;
inline void StorageService_LogicalVolume_Folder_Quota::clear_used_space() {
  used_space_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_LogicalVolume_Folder_Quota::used_space() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.Quota.used_space)
  return used_space_;
}
inline void StorageService_LogicalVolume_Folder_Quota::set_used_space(::google::protobuf::uint32 value) {
  
  used_space_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.Quota.used_space)
}

// uint32 threshold_limit = 4;
inline void StorageService_LogicalVolume_Folder_Quota::clear_threshold_limit() {
  threshold_limit_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_LogicalVolume_Folder_Quota::threshold_limit() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.Quota.threshold_limit)
  return threshold_limit_;
}
inline void StorageService_LogicalVolume_Folder_Quota::set_threshold_limit(::google::protobuf::uint32 value) {
  
  threshold_limit_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.Quota.threshold_limit)
}

// bool threshold_reached = 5;
inline void StorageService_LogicalVolume_Folder_Quota::clear_threshold_reached() {
  threshold_reached_ = false;
}
inline bool StorageService_LogicalVolume_Folder_Quota::threshold_reached() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.Quota.threshold_reached)
  return threshold_reached_;
}
inline void StorageService_LogicalVolume_Folder_Quota::set_threshold_reached(bool value) {
  
  threshold_reached_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.Quota.threshold_reached)
}

// -------------------------------------------------------------------

// StorageService_LogicalVolume_Folder

// string alias = 1;
inline void StorageService_LogicalVolume_Folder::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_LogicalVolume_Folder::alias() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.alias)
  return alias_.GetNoArena();
}
inline void StorageService_LogicalVolume_Folder::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.alias)
}
#if LANG_CXX11
inline void StorageService_LogicalVolume_Folder::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.LogicalVolume.Folder.alias)
}
#endif
inline void StorageService_LogicalVolume_Folder::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.LogicalVolume.Folder.alias)
}
inline void StorageService_LogicalVolume_Folder::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.LogicalVolume.Folder.alias)
}
inline ::std::string* StorageService_LogicalVolume_Folder::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.LogicalVolume.Folder.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_LogicalVolume_Folder::release_alias() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.LogicalVolume.Folder.alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_LogicalVolume_Folder::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.LogicalVolume.Folder.alias)
}

// string name = 2;
inline void StorageService_LogicalVolume_Folder::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_LogicalVolume_Folder::name() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.name)
  return name_.GetNoArena();
}
inline void StorageService_LogicalVolume_Folder::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.name)
}
#if LANG_CXX11
inline void StorageService_LogicalVolume_Folder::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.LogicalVolume.Folder.name)
}
#endif
inline void StorageService_LogicalVolume_Folder::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.LogicalVolume.Folder.name)
}
inline void StorageService_LogicalVolume_Folder::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.LogicalVolume.Folder.name)
}
inline ::std::string* StorageService_LogicalVolume_Folder::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.LogicalVolume.Folder.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_LogicalVolume_Folder::release_name() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.LogicalVolume.Folder.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_LogicalVolume_Folder::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.LogicalVolume.Folder.name)
}

// bool enable = 3;
inline void StorageService_LogicalVolume_Folder::clear_enable() {
  enable_ = false;
}
inline bool StorageService_LogicalVolume_Folder::enable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.enable)
  return enable_;
}
inline void StorageService_LogicalVolume_Folder::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.enable)
}

// uint32 user_account_access = 4;
inline void StorageService_LogicalVolume_Folder::clear_user_account_access() {
  user_account_access_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_LogicalVolume_Folder::user_account_access() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.user_account_access)
  return user_account_access_;
}
inline void StorageService_LogicalVolume_Folder::set_user_account_access(::google::protobuf::uint32 value) {
  
  user_account_access_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.user_account_access)
}

// uint32 user_access_number_of_entries = 5;
inline void StorageService_LogicalVolume_Folder::clear_user_access_number_of_entries() {
  user_access_number_of_entries_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_LogicalVolume_Folder::user_access_number_of_entries() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.user_access_number_of_entries)
  return user_access_number_of_entries_;
}
inline void StorageService_LogicalVolume_Folder::set_user_access_number_of_entries(::google::protobuf::uint32 value) {
  
  user_access_number_of_entries_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.user_access_number_of_entries)
}

// uint32 group_access_number_of_entries = 6;
inline void StorageService_LogicalVolume_Folder::clear_group_access_number_of_entries() {
  group_access_number_of_entries_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_LogicalVolume_Folder::group_access_number_of_entries() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.group_access_number_of_entries)
  return group_access_number_of_entries_;
}
inline void StorageService_LogicalVolume_Folder::set_group_access_number_of_entries(::google::protobuf::uint32 value) {
  
  group_access_number_of_entries_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.group_access_number_of_entries)
}

// repeated .tr140.StorageService.LogicalVolume.Folder.UserAccess user_access = 7;
inline int StorageService_LogicalVolume_Folder::user_access_size() const {
  return user_access_.size();
}
inline void StorageService_LogicalVolume_Folder::clear_user_access() {
  user_access_.Clear();
}
inline const ::tr140::StorageService_LogicalVolume_Folder_UserAccess& StorageService_LogicalVolume_Folder::user_access(int index) const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.user_access)
  return user_access_.Get(index);
}
inline ::tr140::StorageService_LogicalVolume_Folder_UserAccess* StorageService_LogicalVolume_Folder::mutable_user_access(int index) {
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.LogicalVolume.Folder.user_access)
  return user_access_.Mutable(index);
}
inline ::tr140::StorageService_LogicalVolume_Folder_UserAccess* StorageService_LogicalVolume_Folder::add_user_access() {
  // @@protoc_insertion_point(field_add:tr140.StorageService.LogicalVolume.Folder.user_access)
  return user_access_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_LogicalVolume_Folder_UserAccess >*
StorageService_LogicalVolume_Folder::mutable_user_access() {
  // @@protoc_insertion_point(field_mutable_list:tr140.StorageService.LogicalVolume.Folder.user_access)
  return &user_access_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_LogicalVolume_Folder_UserAccess >&
StorageService_LogicalVolume_Folder::user_access() const {
  // @@protoc_insertion_point(field_list:tr140.StorageService.LogicalVolume.Folder.user_access)
  return user_access_;
}

// repeated .tr140.StorageService.LogicalVolume.Folder.GroupAccess group_access = 8;
inline int StorageService_LogicalVolume_Folder::group_access_size() const {
  return group_access_.size();
}
inline void StorageService_LogicalVolume_Folder::clear_group_access() {
  group_access_.Clear();
}
inline const ::tr140::StorageService_LogicalVolume_Folder_GroupAccess& StorageService_LogicalVolume_Folder::group_access(int index) const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.group_access)
  return group_access_.Get(index);
}
inline ::tr140::StorageService_LogicalVolume_Folder_GroupAccess* StorageService_LogicalVolume_Folder::mutable_group_access(int index) {
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.LogicalVolume.Folder.group_access)
  return group_access_.Mutable(index);
}
inline ::tr140::StorageService_LogicalVolume_Folder_GroupAccess* StorageService_LogicalVolume_Folder::add_group_access() {
  // @@protoc_insertion_point(field_add:tr140.StorageService.LogicalVolume.Folder.group_access)
  return group_access_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess >*
StorageService_LogicalVolume_Folder::mutable_group_access() {
  // @@protoc_insertion_point(field_mutable_list:tr140.StorageService.LogicalVolume.Folder.group_access)
  return &group_access_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess >&
StorageService_LogicalVolume_Folder::group_access() const {
  // @@protoc_insertion_point(field_list:tr140.StorageService.LogicalVolume.Folder.group_access)
  return group_access_;
}

// .tr140.StorageService.LogicalVolume.Folder.Quota quota = 9;
inline bool StorageService_LogicalVolume_Folder::has_quota() const {
  return this != internal_default_instance() && quota_ != NULL;
}
inline void StorageService_LogicalVolume_Folder::clear_quota() {
  if (GetArenaNoVirtual() == NULL && quota_ != NULL) delete quota_;
  quota_ = NULL;
}
inline const ::tr140::StorageService_LogicalVolume_Folder_Quota& StorageService_LogicalVolume_Folder::quota() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.quota)
  return quota_ != NULL ? *quota_
                         : *::tr140::StorageService_LogicalVolume_Folder_Quota::internal_default_instance();
}
inline ::tr140::StorageService_LogicalVolume_Folder_Quota* StorageService_LogicalVolume_Folder::mutable_quota() {
  
  if (quota_ == NULL) {
    quota_ = new ::tr140::StorageService_LogicalVolume_Folder_Quota;
  }
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.LogicalVolume.Folder.quota)
  return quota_;
}
inline ::tr140::StorageService_LogicalVolume_Folder_Quota* StorageService_LogicalVolume_Folder::release_quota() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.LogicalVolume.Folder.quota)
  
  ::tr140::StorageService_LogicalVolume_Folder_Quota* temp = quota_;
  quota_ = NULL;
  return temp;
}
inline void StorageService_LogicalVolume_Folder::set_allocated_quota(::tr140::StorageService_LogicalVolume_Folder_Quota* quota) {
  delete quota_;
  quota_ = quota;
  if (quota) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.LogicalVolume.Folder.quota)
}

// -------------------------------------------------------------------

// StorageService_LogicalVolume

// string alias = 1;
inline void StorageService_LogicalVolume::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_LogicalVolume::alias() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.alias)
  return alias_.GetNoArena();
}
inline void StorageService_LogicalVolume::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.alias)
}
#if LANG_CXX11
inline void StorageService_LogicalVolume::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.LogicalVolume.alias)
}
#endif
inline void StorageService_LogicalVolume::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.LogicalVolume.alias)
}
inline void StorageService_LogicalVolume::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.LogicalVolume.alias)
}
inline ::std::string* StorageService_LogicalVolume::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.LogicalVolume.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_LogicalVolume::release_alias() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.LogicalVolume.alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_LogicalVolume::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.LogicalVolume.alias)
}

// string name = 2;
inline void StorageService_LogicalVolume::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_LogicalVolume::name() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.name)
  return name_.GetNoArena();
}
inline void StorageService_LogicalVolume::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.name)
}
#if LANG_CXX11
inline void StorageService_LogicalVolume::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.LogicalVolume.name)
}
#endif
inline void StorageService_LogicalVolume::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.LogicalVolume.name)
}
inline void StorageService_LogicalVolume::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.LogicalVolume.name)
}
inline ::std::string* StorageService_LogicalVolume::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.LogicalVolume.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_LogicalVolume::release_name() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.LogicalVolume.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_LogicalVolume::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.LogicalVolume.name)
}

// string status = 3;
inline void StorageService_LogicalVolume::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_LogicalVolume::status() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.status)
  return status_.GetNoArena();
}
inline void StorageService_LogicalVolume::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.status)
}
#if LANG_CXX11
inline void StorageService_LogicalVolume::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.LogicalVolume.status)
}
#endif
inline void StorageService_LogicalVolume::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.LogicalVolume.status)
}
inline void StorageService_LogicalVolume::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.LogicalVolume.status)
}
inline ::std::string* StorageService_LogicalVolume::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.LogicalVolume.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_LogicalVolume::release_status() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.LogicalVolume.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_LogicalVolume::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.LogicalVolume.status)
}

// bool enable = 4;
inline void StorageService_LogicalVolume::clear_enable() {
  enable_ = false;
}
inline bool StorageService_LogicalVolume::enable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.enable)
  return enable_;
}
inline void StorageService_LogicalVolume::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.enable)
}

// string physical_reference = 5;
inline void StorageService_LogicalVolume::clear_physical_reference() {
  physical_reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_LogicalVolume::physical_reference() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.physical_reference)
  return physical_reference_.GetNoArena();
}
inline void StorageService_LogicalVolume::set_physical_reference(const ::std::string& value) {
  
  physical_reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.physical_reference)
}
#if LANG_CXX11
inline void StorageService_LogicalVolume::set_physical_reference(::std::string&& value) {
  
  physical_reference_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.LogicalVolume.physical_reference)
}
#endif
inline void StorageService_LogicalVolume::set_physical_reference(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  physical_reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.LogicalVolume.physical_reference)
}
inline void StorageService_LogicalVolume::set_physical_reference(const char* value, size_t size) {
  
  physical_reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.LogicalVolume.physical_reference)
}
inline ::std::string* StorageService_LogicalVolume::mutable_physical_reference() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.LogicalVolume.physical_reference)
  return physical_reference_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_LogicalVolume::release_physical_reference() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.LogicalVolume.physical_reference)
  
  return physical_reference_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_LogicalVolume::set_allocated_physical_reference(::std::string* physical_reference) {
  if (physical_reference != NULL) {
    
  } else {
    
  }
  physical_reference_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), physical_reference);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.LogicalVolume.physical_reference)
}

// string file_system = 6;
inline void StorageService_LogicalVolume::clear_file_system() {
  file_system_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService_LogicalVolume::file_system() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.file_system)
  return file_system_.GetNoArena();
}
inline void StorageService_LogicalVolume::set_file_system(const ::std::string& value) {
  
  file_system_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.file_system)
}
#if LANG_CXX11
inline void StorageService_LogicalVolume::set_file_system(::std::string&& value) {
  
  file_system_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.LogicalVolume.file_system)
}
#endif
inline void StorageService_LogicalVolume::set_file_system(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_system_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.LogicalVolume.file_system)
}
inline void StorageService_LogicalVolume::set_file_system(const char* value, size_t size) {
  
  file_system_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.LogicalVolume.file_system)
}
inline ::std::string* StorageService_LogicalVolume::mutable_file_system() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.LogicalVolume.file_system)
  return file_system_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService_LogicalVolume::release_file_system() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.LogicalVolume.file_system)
  
  return file_system_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService_LogicalVolume::set_allocated_file_system(::std::string* file_system) {
  if (file_system != NULL) {
    
  } else {
    
  }
  file_system_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_system);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.LogicalVolume.file_system)
}

// uint32 capacity = 7;
inline void StorageService_LogicalVolume::clear_capacity() {
  capacity_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_LogicalVolume::capacity() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.capacity)
  return capacity_;
}
inline void StorageService_LogicalVolume::set_capacity(::google::protobuf::uint32 value) {
  
  capacity_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.capacity)
}

// uint32 used_space = 8;
inline void StorageService_LogicalVolume::clear_used_space() {
  used_space_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_LogicalVolume::used_space() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.used_space)
  return used_space_;
}
inline void StorageService_LogicalVolume::set_used_space(::google::protobuf::uint32 value) {
  
  used_space_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.used_space)
}

// uint32 threshold_limit = 9;
inline void StorageService_LogicalVolume::clear_threshold_limit() {
  threshold_limit_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_LogicalVolume::threshold_limit() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.threshold_limit)
  return threshold_limit_;
}
inline void StorageService_LogicalVolume::set_threshold_limit(::google::protobuf::uint32 value) {
  
  threshold_limit_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.threshold_limit)
}

// bool threshold_reached = 10;
inline void StorageService_LogicalVolume::clear_threshold_reached() {
  threshold_reached_ = false;
}
inline bool StorageService_LogicalVolume::threshold_reached() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.threshold_reached)
  return threshold_reached_;
}
inline void StorageService_LogicalVolume::set_threshold_reached(bool value) {
  
  threshold_reached_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.threshold_reached)
}

// bool encrypted = 11;
inline void StorageService_LogicalVolume::clear_encrypted() {
  encrypted_ = false;
}
inline bool StorageService_LogicalVolume::encrypted() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.encrypted)
  return encrypted_;
}
inline void StorageService_LogicalVolume::set_encrypted(bool value) {
  
  encrypted_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.encrypted)
}

// uint32 folder_number_of_entries = 12;
inline void StorageService_LogicalVolume::clear_folder_number_of_entries() {
  folder_number_of_entries_ = 0u;
}
inline ::google::protobuf::uint32 StorageService_LogicalVolume::folder_number_of_entries() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.folder_number_of_entries)
  return folder_number_of_entries_;
}
inline void StorageService_LogicalVolume::set_folder_number_of_entries(::google::protobuf::uint32 value) {
  
  folder_number_of_entries_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.folder_number_of_entries)
}

// repeated .tr140.StorageService.LogicalVolume.Folder folder = 13;
inline int StorageService_LogicalVolume::folder_size() const {
  return folder_.size();
}
inline void StorageService_LogicalVolume::clear_folder() {
  folder_.Clear();
}
inline const ::tr140::StorageService_LogicalVolume_Folder& StorageService_LogicalVolume::folder(int index) const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.folder)
  return folder_.Get(index);
}
inline ::tr140::StorageService_LogicalVolume_Folder* StorageService_LogicalVolume::mutable_folder(int index) {
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.LogicalVolume.folder)
  return folder_.Mutable(index);
}
inline ::tr140::StorageService_LogicalVolume_Folder* StorageService_LogicalVolume::add_folder() {
  // @@protoc_insertion_point(field_add:tr140.StorageService.LogicalVolume.folder)
  return folder_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_LogicalVolume_Folder >*
StorageService_LogicalVolume::mutable_folder() {
  // @@protoc_insertion_point(field_mutable_list:tr140.StorageService.LogicalVolume.folder)
  return &folder_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_LogicalVolume_Folder >&
StorageService_LogicalVolume::folder() const {
  // @@protoc_insertion_point(field_list:tr140.StorageService.LogicalVolume.folder)
  return folder_;
}

// -------------------------------------------------------------------

// StorageService

// bool enable = 1;
inline void StorageService::clear_enable() {
  enable_ = false;
}
inline bool StorageService::enable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.enable)
  return enable_;
}
inline void StorageService::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.enable)
}

// string alias = 2;
inline void StorageService::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageService::alias() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.alias)
  return alias_.GetNoArena();
}
inline void StorageService::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.alias)
}
#if LANG_CXX11
inline void StorageService::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.alias)
}
#endif
inline void StorageService::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.alias)
}
inline void StorageService::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.alias)
}
inline ::std::string* StorageService::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageService::release_alias() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageService::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.alias)
}

// uint32 physical_medium_number_of_entries = 3;
inline void StorageService::clear_physical_medium_number_of_entries() {
  physical_medium_number_of_entries_ = 0u;
}
inline ::google::protobuf::uint32 StorageService::physical_medium_number_of_entries() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.physical_medium_number_of_entries)
  return physical_medium_number_of_entries_;
}
inline void StorageService::set_physical_medium_number_of_entries(::google::protobuf::uint32 value) {
  
  physical_medium_number_of_entries_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.physical_medium_number_of_entries)
}

// uint32 storage_array_number_of_entries = 4;
inline void StorageService::clear_storage_array_number_of_entries() {
  storage_array_number_of_entries_ = 0u;
}
inline ::google::protobuf::uint32 StorageService::storage_array_number_of_entries() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.storage_array_number_of_entries)
  return storage_array_number_of_entries_;
}
inline void StorageService::set_storage_array_number_of_entries(::google::protobuf::uint32 value) {
  
  storage_array_number_of_entries_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.storage_array_number_of_entries)
}

// uint32 logical_volume_number_of_entries = 5;
inline void StorageService::clear_logical_volume_number_of_entries() {
  logical_volume_number_of_entries_ = 0u;
}
inline ::google::protobuf::uint32 StorageService::logical_volume_number_of_entries() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.logical_volume_number_of_entries)
  return logical_volume_number_of_entries_;
}
inline void StorageService::set_logical_volume_number_of_entries(::google::protobuf::uint32 value) {
  
  logical_volume_number_of_entries_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.logical_volume_number_of_entries)
}

// uint32 user_account_number_of_entries = 6;
inline void StorageService::clear_user_account_number_of_entries() {
  user_account_number_of_entries_ = 0u;
}
inline ::google::protobuf::uint32 StorageService::user_account_number_of_entries() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.user_account_number_of_entries)
  return user_account_number_of_entries_;
}
inline void StorageService::set_user_account_number_of_entries(::google::protobuf::uint32 value) {
  
  user_account_number_of_entries_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.user_account_number_of_entries)
}

// uint32 user_group_number_of_entries = 7;
inline void StorageService::clear_user_group_number_of_entries() {
  user_group_number_of_entries_ = 0u;
}
inline ::google::protobuf::uint32 StorageService::user_group_number_of_entries() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.user_group_number_of_entries)
  return user_group_number_of_entries_;
}
inline void StorageService::set_user_group_number_of_entries(::google::protobuf::uint32 value) {
  
  user_group_number_of_entries_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.user_group_number_of_entries)
}

// .tr140.StorageService.Capabilities capabilities = 8;
inline bool StorageService::has_capabilities() const {
  return this != internal_default_instance() && capabilities_ != NULL;
}
inline void StorageService::clear_capabilities() {
  if (GetArenaNoVirtual() == NULL && capabilities_ != NULL) delete capabilities_;
  capabilities_ = NULL;
}
inline const ::tr140::StorageService_Capabilities& StorageService::capabilities() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.capabilities)
  return capabilities_ != NULL ? *capabilities_
                         : *::tr140::StorageService_Capabilities::internal_default_instance();
}
inline ::tr140::StorageService_Capabilities* StorageService::mutable_capabilities() {
  
  if (capabilities_ == NULL) {
    capabilities_ = new ::tr140::StorageService_Capabilities;
  }
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.capabilities)
  return capabilities_;
}
inline ::tr140::StorageService_Capabilities* StorageService::release_capabilities() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.capabilities)
  
  ::tr140::StorageService_Capabilities* temp = capabilities_;
  capabilities_ = NULL;
  return temp;
}
inline void StorageService::set_allocated_capabilities(::tr140::StorageService_Capabilities* capabilities) {
  delete capabilities_;
  capabilities_ = capabilities;
  if (capabilities) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.capabilities)
}

// .tr140.StorageService.NetInfo net_info = 9;
inline bool StorageService::has_net_info() const {
  return this != internal_default_instance() && net_info_ != NULL;
}
inline void StorageService::clear_net_info() {
  if (GetArenaNoVirtual() == NULL && net_info_ != NULL) delete net_info_;
  net_info_ = NULL;
}
inline const ::tr140::StorageService_NetInfo& StorageService::net_info() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.net_info)
  return net_info_ != NULL ? *net_info_
                         : *::tr140::StorageService_NetInfo::internal_default_instance();
}
inline ::tr140::StorageService_NetInfo* StorageService::mutable_net_info() {
  
  if (net_info_ == NULL) {
    net_info_ = new ::tr140::StorageService_NetInfo;
  }
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.net_info)
  return net_info_;
}
inline ::tr140::StorageService_NetInfo* StorageService::release_net_info() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.net_info)
  
  ::tr140::StorageService_NetInfo* temp = net_info_;
  net_info_ = NULL;
  return temp;
}
inline void StorageService::set_allocated_net_info(::tr140::StorageService_NetInfo* net_info) {
  delete net_info_;
  net_info_ = net_info;
  if (net_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.net_info)
}

// repeated .tr140.StorageService.UserGroup user_group = 10;
inline int StorageService::user_group_size() const {
  return user_group_.size();
}
inline void StorageService::clear_user_group() {
  user_group_.Clear();
}
inline const ::tr140::StorageService_UserGroup& StorageService::user_group(int index) const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.user_group)
  return user_group_.Get(index);
}
inline ::tr140::StorageService_UserGroup* StorageService::mutable_user_group(int index) {
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.user_group)
  return user_group_.Mutable(index);
}
inline ::tr140::StorageService_UserGroup* StorageService::add_user_group() {
  // @@protoc_insertion_point(field_add:tr140.StorageService.user_group)
  return user_group_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_UserGroup >*
StorageService::mutable_user_group() {
  // @@protoc_insertion_point(field_mutable_list:tr140.StorageService.user_group)
  return &user_group_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_UserGroup >&
StorageService::user_group() const {
  // @@protoc_insertion_point(field_list:tr140.StorageService.user_group)
  return user_group_;
}

// repeated .tr140.StorageService.UserAccount user_account = 11;
inline int StorageService::user_account_size() const {
  return user_account_.size();
}
inline void StorageService::clear_user_account() {
  user_account_.Clear();
}
inline const ::tr140::StorageService_UserAccount& StorageService::user_account(int index) const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.user_account)
  return user_account_.Get(index);
}
inline ::tr140::StorageService_UserAccount* StorageService::mutable_user_account(int index) {
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.user_account)
  return user_account_.Mutable(index);
}
inline ::tr140::StorageService_UserAccount* StorageService::add_user_account() {
  // @@protoc_insertion_point(field_add:tr140.StorageService.user_account)
  return user_account_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_UserAccount >*
StorageService::mutable_user_account() {
  // @@protoc_insertion_point(field_mutable_list:tr140.StorageService.user_account)
  return &user_account_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_UserAccount >&
StorageService::user_account() const {
  // @@protoc_insertion_point(field_list:tr140.StorageService.user_account)
  return user_account_;
}

// .tr140.StorageService.NetworkServer network_server = 12;
inline bool StorageService::has_network_server() const {
  return this != internal_default_instance() && network_server_ != NULL;
}
inline void StorageService::clear_network_server() {
  if (GetArenaNoVirtual() == NULL && network_server_ != NULL) delete network_server_;
  network_server_ = NULL;
}
inline const ::tr140::StorageService_NetworkServer& StorageService::network_server() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.network_server)
  return network_server_ != NULL ? *network_server_
                         : *::tr140::StorageService_NetworkServer::internal_default_instance();
}
inline ::tr140::StorageService_NetworkServer* StorageService::mutable_network_server() {
  
  if (network_server_ == NULL) {
    network_server_ = new ::tr140::StorageService_NetworkServer;
  }
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.network_server)
  return network_server_;
}
inline ::tr140::StorageService_NetworkServer* StorageService::release_network_server() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.network_server)
  
  ::tr140::StorageService_NetworkServer* temp = network_server_;
  network_server_ = NULL;
  return temp;
}
inline void StorageService::set_allocated_network_server(::tr140::StorageService_NetworkServer* network_server) {
  delete network_server_;
  network_server_ = network_server;
  if (network_server) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.network_server)
}

// .tr140.StorageService.FTPServer ftpserver = 13;
inline bool StorageService::has_ftpserver() const {
  return this != internal_default_instance() && ftpserver_ != NULL;
}
inline void StorageService::clear_ftpserver() {
  if (GetArenaNoVirtual() == NULL && ftpserver_ != NULL) delete ftpserver_;
  ftpserver_ = NULL;
}
inline const ::tr140::StorageService_FTPServer& StorageService::ftpserver() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.ftpserver)
  return ftpserver_ != NULL ? *ftpserver_
                         : *::tr140::StorageService_FTPServer::internal_default_instance();
}
inline ::tr140::StorageService_FTPServer* StorageService::mutable_ftpserver() {
  
  if (ftpserver_ == NULL) {
    ftpserver_ = new ::tr140::StorageService_FTPServer;
  }
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.ftpserver)
  return ftpserver_;
}
inline ::tr140::StorageService_FTPServer* StorageService::release_ftpserver() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.ftpserver)
  
  ::tr140::StorageService_FTPServer* temp = ftpserver_;
  ftpserver_ = NULL;
  return temp;
}
inline void StorageService::set_allocated_ftpserver(::tr140::StorageService_FTPServer* ftpserver) {
  delete ftpserver_;
  ftpserver_ = ftpserver;
  if (ftpserver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.ftpserver)
}

// .tr140.StorageService.SFTPServer sftpserver = 14;
inline bool StorageService::has_sftpserver() const {
  return this != internal_default_instance() && sftpserver_ != NULL;
}
inline void StorageService::clear_sftpserver() {
  if (GetArenaNoVirtual() == NULL && sftpserver_ != NULL) delete sftpserver_;
  sftpserver_ = NULL;
}
inline const ::tr140::StorageService_SFTPServer& StorageService::sftpserver() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.sftpserver)
  return sftpserver_ != NULL ? *sftpserver_
                         : *::tr140::StorageService_SFTPServer::internal_default_instance();
}
inline ::tr140::StorageService_SFTPServer* StorageService::mutable_sftpserver() {
  
  if (sftpserver_ == NULL) {
    sftpserver_ = new ::tr140::StorageService_SFTPServer;
  }
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.sftpserver)
  return sftpserver_;
}
inline ::tr140::StorageService_SFTPServer* StorageService::release_sftpserver() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.sftpserver)
  
  ::tr140::StorageService_SFTPServer* temp = sftpserver_;
  sftpserver_ = NULL;
  return temp;
}
inline void StorageService::set_allocated_sftpserver(::tr140::StorageService_SFTPServer* sftpserver) {
  delete sftpserver_;
  sftpserver_ = sftpserver;
  if (sftpserver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.sftpserver)
}

// .tr140.StorageService.HTTPServer httpserver = 15;
inline bool StorageService::has_httpserver() const {
  return this != internal_default_instance() && httpserver_ != NULL;
}
inline void StorageService::clear_httpserver() {
  if (GetArenaNoVirtual() == NULL && httpserver_ != NULL) delete httpserver_;
  httpserver_ = NULL;
}
inline const ::tr140::StorageService_HTTPServer& StorageService::httpserver() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.httpserver)
  return httpserver_ != NULL ? *httpserver_
                         : *::tr140::StorageService_HTTPServer::internal_default_instance();
}
inline ::tr140::StorageService_HTTPServer* StorageService::mutable_httpserver() {
  
  if (httpserver_ == NULL) {
    httpserver_ = new ::tr140::StorageService_HTTPServer;
  }
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.httpserver)
  return httpserver_;
}
inline ::tr140::StorageService_HTTPServer* StorageService::release_httpserver() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.httpserver)
  
  ::tr140::StorageService_HTTPServer* temp = httpserver_;
  httpserver_ = NULL;
  return temp;
}
inline void StorageService::set_allocated_httpserver(::tr140::StorageService_HTTPServer* httpserver) {
  delete httpserver_;
  httpserver_ = httpserver;
  if (httpserver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.httpserver)
}

// .tr140.StorageService.HTTPSServer httpsserver = 16;
inline bool StorageService::has_httpsserver() const {
  return this != internal_default_instance() && httpsserver_ != NULL;
}
inline void StorageService::clear_httpsserver() {
  if (GetArenaNoVirtual() == NULL && httpsserver_ != NULL) delete httpsserver_;
  httpsserver_ = NULL;
}
inline const ::tr140::StorageService_HTTPSServer& StorageService::httpsserver() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.httpsserver)
  return httpsserver_ != NULL ? *httpsserver_
                         : *::tr140::StorageService_HTTPSServer::internal_default_instance();
}
inline ::tr140::StorageService_HTTPSServer* StorageService::mutable_httpsserver() {
  
  if (httpsserver_ == NULL) {
    httpsserver_ = new ::tr140::StorageService_HTTPSServer;
  }
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.httpsserver)
  return httpsserver_;
}
inline ::tr140::StorageService_HTTPSServer* StorageService::release_httpsserver() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.httpsserver)
  
  ::tr140::StorageService_HTTPSServer* temp = httpsserver_;
  httpsserver_ = NULL;
  return temp;
}
inline void StorageService::set_allocated_httpsserver(::tr140::StorageService_HTTPSServer* httpsserver) {
  delete httpsserver_;
  httpsserver_ = httpsserver;
  if (httpsserver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.httpsserver)
}

// repeated .tr140.StorageService.PhysicalMedium physical_medium = 17;
inline int StorageService::physical_medium_size() const {
  return physical_medium_.size();
}
inline void StorageService::clear_physical_medium() {
  physical_medium_.Clear();
}
inline const ::tr140::StorageService_PhysicalMedium& StorageService::physical_medium(int index) const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.physical_medium)
  return physical_medium_.Get(index);
}
inline ::tr140::StorageService_PhysicalMedium* StorageService::mutable_physical_medium(int index) {
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.physical_medium)
  return physical_medium_.Mutable(index);
}
inline ::tr140::StorageService_PhysicalMedium* StorageService::add_physical_medium() {
  // @@protoc_insertion_point(field_add:tr140.StorageService.physical_medium)
  return physical_medium_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_PhysicalMedium >*
StorageService::mutable_physical_medium() {
  // @@protoc_insertion_point(field_mutable_list:tr140.StorageService.physical_medium)
  return &physical_medium_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_PhysicalMedium >&
StorageService::physical_medium() const {
  // @@protoc_insertion_point(field_list:tr140.StorageService.physical_medium)
  return physical_medium_;
}

// repeated .tr140.StorageService.StorageArray storage_array = 18;
inline int StorageService::storage_array_size() const {
  return storage_array_.size();
}
inline void StorageService::clear_storage_array() {
  storage_array_.Clear();
}
inline const ::tr140::StorageService_StorageArray& StorageService::storage_array(int index) const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.storage_array)
  return storage_array_.Get(index);
}
inline ::tr140::StorageService_StorageArray* StorageService::mutable_storage_array(int index) {
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.storage_array)
  return storage_array_.Mutable(index);
}
inline ::tr140::StorageService_StorageArray* StorageService::add_storage_array() {
  // @@protoc_insertion_point(field_add:tr140.StorageService.storage_array)
  return storage_array_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_StorageArray >*
StorageService::mutable_storage_array() {
  // @@protoc_insertion_point(field_mutable_list:tr140.StorageService.storage_array)
  return &storage_array_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_StorageArray >&
StorageService::storage_array() const {
  // @@protoc_insertion_point(field_list:tr140.StorageService.storage_array)
  return storage_array_;
}

// repeated .tr140.StorageService.LogicalVolume logical_volume = 19;
inline int StorageService::logical_volume_size() const {
  return logical_volume_.size();
}
inline void StorageService::clear_logical_volume() {
  logical_volume_.Clear();
}
inline const ::tr140::StorageService_LogicalVolume& StorageService::logical_volume(int index) const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.logical_volume)
  return logical_volume_.Get(index);
}
inline ::tr140::StorageService_LogicalVolume* StorageService::mutable_logical_volume(int index) {
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.logical_volume)
  return logical_volume_.Mutable(index);
}
inline ::tr140::StorageService_LogicalVolume* StorageService::add_logical_volume() {
  // @@protoc_insertion_point(field_add:tr140.StorageService.logical_volume)
  return logical_volume_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_LogicalVolume >*
StorageService::mutable_logical_volume() {
  // @@protoc_insertion_point(field_mutable_list:tr140.StorageService.logical_volume)
  return &logical_volume_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_LogicalVolume >&
StorageService::logical_volume() const {
  // @@protoc_insertion_point(field_list:tr140.StorageService.logical_volume)
  return logical_volume_;
}

// -------------------------------------------------------------------

// StorageRequest

// int32 unused = 1;
inline void StorageRequest::clear_unused() {
  unused_ = 0;
}
inline ::google::protobuf::int32 StorageRequest::unused() const {
  // @@protoc_insertion_point(field_get:tr140.StorageRequest.unused)
  return unused_;
}
inline void StorageRequest::set_unused(::google::protobuf::int32 value) {
  
  unused_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageRequest.unused)
}

// -------------------------------------------------------------------

// StorageReply

// int32 unused = 1;
inline void StorageReply::clear_unused() {
  unused_ = 0;
}
inline ::google::protobuf::int32 StorageReply::unused() const {
  // @@protoc_insertion_point(field_get:tr140.StorageReply.unused)
  return unused_;
}
inline void StorageReply::set_unused(::google::protobuf::int32 value) {
  
  unused_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageReply.unused)
}

// -------------------------------------------------------------------

// X_012345_Message

// int32 unused = 1;
inline void X_012345_Message::clear_unused() {
  unused_ = 0;
}
inline ::google::protobuf::int32 X_012345_Message::unused() const {
  // @@protoc_insertion_point(field_get:tr140.X_012345_Message.unused)
  return unused_;
}
inline void X_012345_Message::set_unused(::google::protobuf::int32 value) {
  
  unused_ = value;
  // @@protoc_insertion_point(field_set:tr140.X_012345_Message.unused)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace tr140

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tr_2d140_2eproto__INCLUDED
