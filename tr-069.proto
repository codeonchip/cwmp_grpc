// Generated by cwmp_proto_to_grpc.cc
// source: tr-069-1-0-0-full.proto
// 1st top-level message: InternetGatewayDevice
// Added service 

// tr-069-1-0-0-full.proto
// Generated by cwmp_xml_to_proto.cc
// source: tr-069-1-0-0-full.xml

syntax = "proto3";

package tr069; //!! renamed

message InternetGatewayDevice { // InternetGatewayDevice.
  uint32    landevice_number_of_entries              = 1  ; //  Number of instances of {{object|LANDevic
  uint32    wandevice_number_of_entries              = 2  ; //  Number of instances of {{object|WANDevic
  message DeviceInfo { // InternetGatewayDevice.DeviceInfo.
    string    manufacturer                             = 1  ; //  The manufacturer of the CPE (human reada
    string    manufacturer_oui                         = 2  ; //  Organizationally unique identifier of th
    string    model_name                               = 3  ; //  Model name of the CPE (human readable st
    string    description                              = 4  ; //  A full description of the CPE device (hu
    string    product_class                            = 5  ; //  Identifier of the class of product for w
    string    serial_number                            = 6  ; //  Serial number of the CPE.        .   
    string    hardware_version                         = 7  ; //  A string identifying the particular CPE 
    string    software_version                         = 8  ; //  A string identifying the software versio
    string    modem_firmware_version                   = 9  ; //  A string identifying the version of the 
    string    enabled_options                          = 10 ; //  The OptionName of each Option that is cu
    string    additional_hardware_version              = 11 ; //  Represents any additional hardware versi
    string    additional_software_version              = 12 ; //  Represents any additional software versi
    string    spec_version                             = 13 ; //  Represents the version of the specificat
    string    provisioning_code                        = 14 ; //  Identifier of the primary service provid
    uint32    up_time                                  = 15 ; //  Time in seconds since the CPE was last r
    string    first_use_date                           = 16 ; //  Date and time in UTC that the CPE first 
    string    device_log                               = 17 ; //  Vendor-specific log(s).        .     
    uint32    vendor_config_file_number_of_entries     = 18 ; //  Number of instances of {{object|VendorCo
    message VendorConfigFile { // InternetGatewayDevice.DeviceInfo.VendorConfigFile.{i}.
      string    name                                     = 1  ; //  Name of the vendor configuration file. 
      string    version                                  = 2  ; //  A string identifying the configuration f
      string    date                                     = 3  ; //  Date and time when the content of the cu
      string    description                              = 4  ; //  A description of the vendor configuratio
    }
    repeated VendorConfigFile vendor_config_file = 19; // InternetGatewayDevice.DeviceInfo.VendorConfigFile.{i}.
  }
  DeviceInfo device_info = 3; // InternetGatewayDevice.DeviceInfo.
  message DeviceConfig { // InternetGatewayDevice.DeviceConfig.
    string    persistent_data                          = 1  ; //  Arbitrary user data that must persist ac
    string    config_file                              = 2  ; //  A dump of the currently running configur
  }
  DeviceConfig device_config = 4; // InternetGatewayDevice.DeviceConfig.
  message ManagementServer { // InternetGatewayDevice.ManagementServer.
    string    url                                      = 1  ; //  URL for the CPE to connect to the ACS us
    string    username                                 = 2  ; //  Username used to authenticate the CPE wh
    string    password                                 = 3  ; //  Password used to authenticate the CPE wh
    bool      periodic_inform_enable                   = 4  ; //  Whether or not the CPE must periodically
    uint32    periodic_inform_interval                 = 5  ; //  The duration in seconds of the interval 
    string    periodic_inform_time                     = 6  ; //  An absolute time reference in UTC to det
    string    parameter_key                            = 7  ; //  The value of the ParameterKey argument f
    string    connection_request_url                   = 8  ; //  HTTP URL for an ACS to make a Connection
    string    connection_request_username              = 9  ; //  Username used to authenticate an ACS mak
    string    connection_request_password              = 10 ; //  Password used to authenticate an ACS mak
    bool      upgrades_managed                         = 11 ; //  Indicates whether or not the ACS will ma
    string    kick_url                                 = 12 ; //  Present only for a CPE that supports the
    string    download_progress_url                    = 13 ; //  Present only for a CPE that provides a L
  }
  ManagementServer management_server = 5; // InternetGatewayDevice.ManagementServer.
  message Time { // InternetGatewayDevice.Time.
    string    ntpserver1                               = 1  ; //  First NTP timeserver.  Either a host nam
    string    ntpserver2                               = 2  ; //  Second NTP timeserver.  Either a host na
    string    ntpserver3                               = 3  ; //  Third NTP timeserver.  Either a host nam
    string    ntpserver4                               = 4  ; //  Fourth NTP timeserver.  Either a host na
    string    ntpserver5                               = 5  ; //  Fifth NTP timeserver.  Either a host nam
    string    current_local_time                       = 6  ; //  The current date and time in the CPE's l
    string    local_time_zone                          = 7  ; //  The local time offset from UTC in the fo
    string    local_time_zone_name                     = 8  ; //  Name of the local time zone (human reada
    bool      daylight_savings_used                    = 9  ; //  Whether or not daylight savings time is 
    string    daylight_savings_start                   = 10 ; //  Date and time daylight savings time begi
    string    daylight_savings_end                     = 11 ; //  Date and time daylight savings time ends
  }
  Time time = 6; // InternetGatewayDevice.Time.
  message UserInterface { // InternetGatewayDevice.UserInterface.
    bool      password_required                        = 1  ; //  Present only if the CPE provides a passw
    bool      password_user_selectable                 = 2  ; //  Present only if the CPE provides a passw
    bool      upgrade_available                        = 3  ; //  Indicates that a CPE upgrade is availabl
    string    warranty_date                            = 4  ; //  Indicates the date and time in UTC that 
    string    ispname                                  = 5  ; //  The name of the customer's ISP.        
    string    isphelp_desk                             = 6  ; //  The help desk phone number of the ISP. 
    string    isphome_page                             = 7  ; //  The URL of the ISP's home page.        
    string    isphelp_page                             = 8  ; //  The URL of the ISP's on-line support pag
    bytes     isplogo                                  = 9  ; //  Base64 encoded GIF or JPEG image. The bi
    uint32    isplogo_size                             = 10 ; //  Un-encoded binary image size in bytes. 
    string    ispmail_server                           = 11 ; //  The URL of the ISP's mail server.      
    string    ispnews_server                           = 12 ; //  The URL of the ISP's news server.      
    string    text_color                               = 13 ; //  The color of text on the GUI screens in 
    string    background_color                         = 14 ; //  The color of the GUI screen backgrounds 
    string    button_color                             = 15 ; //  The color of buttons on the GUI screens 
    string    button_text_color                        = 16 ; //  The color of text on buttons on the GUI 
    string    auto_update_server                       = 17 ; //  The server the CPE can check to see if a
    string    user_update_server                       = 18 ; //  The server where a user can check via a 
    string    example_login                            = 19 ; //  An example of a correct login, according
    string    example_password                         = 20 ; //  An example of a correct password, accord
  }
  UserInterface user_interface = 7; // InternetGatewayDevice.UserInterface.
  message Layer3Forwarding { // InternetGatewayDevice.Layer3Forwarding.
    string    default_connection_service               = 1  ; //  Specifies the default WAN interface.  Th
    uint32    forward_number_of_entries                = 2  ; //  Number of forwarding instances.        
    message Forwarding { // InternetGatewayDevice.Layer3Forwarding.Forwarding.{i}.
      bool      enable                                   = 1  ; //  Enables or disables the forwarding entry
      string    status                                   = 2  ; //  Indicates the status of the forwarding e
      string    type                                     = 3  ; //  Indicates the type of route.        .
      string    dest_ipaddress                           = 4  ; //  Destination address.        .        
      string    dest_subnet_mask                         = 5  ; //  Destination subnet mask.        .    
      string    source_ipaddress                         = 6  ; //  Source address.        .           
      string    source_subnet_mask                       = 7  ; //  Source subnet mask.        .        
      string    gateway_ipaddress                        = 8  ; //  IP address of the gateway.        .  
      string    interface                                = 9  ; //  Specifies the WAN interface associated w
      int32     forwarding_metric                        = 10 ; //  Forwarding metric.  A value of -1 indica
      uint32    mtu                                      = 11 ; //  The maximum allowed size of an Ethernet 
    }
    repeated Forwarding forwarding = 3; // InternetGatewayDevice.Layer3Forwarding.Forwarding.{i}.
  }
  Layer3Forwarding layer3forwarding = 8; // InternetGatewayDevice.Layer3Forwarding.
  message LANConfigSecurity { // InternetGatewayDevice.LANConfigSecurity.
    string    config_password                          = 1  ; //  A password to allow LAN access to protec
  }
  LANConfigSecurity lanconfig_security = 9; // InternetGatewayDevice.LANConfigSecurity.
  message IPPingDiagnostics { // InternetGatewayDevice.IPPingDiagnostics.
    string    diagnostics_state                        = 1  ; //  Indicates availability of diagnostic dat
    string    interface                                = 2  ; //  Specifies the WAN or LAN IP-layer interf
    string    host                                     = 3  ; //  Host name or address of the host to ping
    uint32    number_of_repetitions                    = 4  ; //  Number of repetitions of the ping test t
    uint32    timeout                                  = 5  ; //  Timeout in milliseconds for the ping tes
    uint32    data_block_size                          = 6  ; //  Size of the data block in bytes to be se
    uint32    dscp                                     = 7  ; //  DiffServ codepoint to be used for the te
    uint32    success_count                            = 8  ; //  Result parameter indicating the number o
    uint32    failure_count                            = 9  ; //  Result parameter indicating the number o
    uint32    average_response_time                    = 10 ; //  Result parameter indicating the average 
    uint32    minimum_response_tmie                    = 11 ; //  Result parameter indicating the minimum 
    uint32    maximum_response_time                    = 12 ; //  Result parameter indicating the maximum 
  }
  IPPingDiagnostics ipping_diagnostics = 10; // InternetGatewayDevice.IPPingDiagnostics.
  message LANDevice { // InternetGatewayDevice.LANDevice.{i}.
    uint32    lanethernet_interface_number_of_entries  = 1  ; //  Number of instances of {{object|LANEther
    uint32    lanusbinterface_number_of_entries        = 2  ; //  Number of instances of {{object|LANUSBIn
    uint32    lanwlanconfiguration_number_of_entries   = 3  ; //  Number of instances of {{object|WLANConf
    message LANHostConfigManagement { // InternetGatewayDevice.LANDevice.{i}.LANHostConfigManagement.
      bool      dhcpserver_configurable                  = 1  ; //  Enables the configuration of the DHCP se
      bool      dhcpserver_enable                        = 2  ; //  Enables or disables the DHCP server on t
      bool      dhcprelay                                = 3  ; //  Indicates if the DHCP server performs th
      string    min_address                              = 4  ; //  Specifies first address in the pool to b
      string    max_address                              = 5  ; //  Specifies last address in the pool to be
      string    reserved_addresses                       = 6  ; //  Comma separated list of addresses marked
      string    subnet_mask                              = 7  ; //  Specifies the client's network subnet ma
      string    dnsservers                               = 8  ; //  Comma separated list of DNS servers offe
      string    domain_name                              = 9  ; //  Sets the domain name to provide to clien
      string    iprouters                                = 10 ; //  Comma separated list of IP addresses of 
      int32     dhcplease_time                           = 11 ; //  Specifies the lease time in seconds of c
      string    use_allocated_wan                        = 12 ; //  {{enum}}          If {{enum|Normal}}, t
      string    associated_connection                    = 13 ; //  Specifies the connection instance for th
      uint32    passthrough_lease                        = 14 ; //  DHCP lease time in seconds given to the 
      string    passthrough_macaddress                   = 15 ; //  Hardware address of the LAN Host that is
      string    allowed_macaddresses                     = 16 ; //  Hardware addresses that are allowed to c
      uint32    ipinterface_number_of_entries            = 17 ; //  Number of IP interface at LAN side of th
      message IPInterface { // InternetGatewayDevice.LANDevice.{i}.LANHostConfigManagement.IPInterface.{i}.
        bool      enable                                   = 1  ; //  Enables or disables this entry.  On crea
        string    ipinterface_ipaddress                    = 2  ; //  IP address of the LAN-side interface of 
        string    ipinterface_subnet_mask                  = 3  ; //  Subnet mask of the LAN-side interface of
        string    ipinterface_addressing_type              = 4  ; //  Represents the addressing method used to
      }
      repeated IPInterface ipinterface = 18; // InternetGatewayDevice.LANDevice.{i}.LANHostConfigManagement.IPInterface.{i}.
    }
    LANHostConfigManagement lanhost_config_management = 4; // InternetGatewayDevice.LANDevice.{i}.LANHostConfigManagement.
    message LANEthernetInterfaceConfig { // InternetGatewayDevice.LANDevice.{i}.LANEthernetInterfaceConfig.{i}.
      bool      enable                                   = 1  ; //  Enables or disables this interface.    
      string    status                                   = 2  ; //  Indicates the status of this interface.
      string    macaddress                               = 3  ; //  The physical address of the interface. 
      bool      macaddress_control_enabled               = 4  ; //  Indicates whether MAC Address Control is
      string    max_bit_rate                             = 5  ; //  The maximum upstream and downstream bit 
      string    duplex_mode                              = 6  ; //  The duplex mode available to this connec
      message Stats { // InternetGatewayDevice.LANDevice.{i}.LANEthernetInterfaceConfig.{i}.Stats.
        uint32    bytes_sent                               = 1  ; //  Total number of bytes sent over the inte
        uint32    bytes_received                           = 2  ; //  Total number of bytes received over the 
        uint32    packets_sent                             = 3  ; //  Total number of packets sent over the in
        uint32    packets_received                         = 4  ; //  Total number of packets received over th
      }
      Stats stats = 7; // InternetGatewayDevice.LANDevice.{i}.LANEthernetInterfaceConfig.{i}.Stats.
    }
    repeated LANEthernetInterfaceConfig lanethernet_interface_config = 5; // InternetGatewayDevice.LANDevice.{i}.LANEthernetInterfaceConfig.{i}.
    message LANUSBInterfaceConfig { // InternetGatewayDevice.LANDevice.{i}.LANUSBInterfaceConfig.{i}.
      bool      enable                                   = 1  ; //  Enables or disables this interface.    
      string    status                                   = 2  ; //  Indicates the status of this interface.
      string    macaddress                               = 3  ; //  The physical address of the interface. 
      bool      macaddress_control_enabled               = 4  ; //  Indicates whether MAC Address Control is
      string    standard                                 = 5  ; //  USB version supported by the device.   
      string    type                                     = 6  ; //  Type of the USB interface.        .  
      string    rate                                     = 7  ; //  Speed of the USB interface.        . 
      string    power                                    = 8  ; //  Power configuration of the USB interface
      message Stats { // InternetGatewayDevice.LANDevice.{i}.LANUSBInterfaceConfig.{i}.Stats.
        uint32    bytes_sent                               = 1  ; //  Total number of bytes sent over the inte
        uint32    bytes_received                           = 2  ; //  Total number of bytes received over the 
        uint32    cells_sent                               = 3  ; //  Total number of cells sent over the inte
        uint32    cells_received                           = 4  ; //  Total number of cells received over the 
      }
      Stats stats = 9; // InternetGatewayDevice.LANDevice.{i}.LANUSBInterfaceConfig.{i}.Stats.
    }
    repeated LANUSBInterfaceConfig lanusbinterface_config = 6; // InternetGatewayDevice.LANDevice.{i}.LANUSBInterfaceConfig.{i}.
    message WLANConfiguration { // InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.
      bool      enable                                   = 1  ; //  Enables or disables this interface.    
      string    status                                   = 2  ; //  Indicates the status of this interface.
      string    bssid                                    = 3  ; //  The MAC address of the interface.      
      string    max_bit_rate                             = 4  ; //  The maximum upstream and downstream bit 
      uint32    channel                                  = 5  ; //  The current radio channel used by the co
      string    ssid                                     = 6  ; //  The current service set identifier in us
      string    beacon_type                              = 7  ; //  The breacon types to be use with this co
      bool      macaddress_control_enabled               = 8  ; //  Indicates whether MAC Address Control is
      string    standard                                 = 9  ; //  Indicates which IEEE 802.11 mode the dev
      uint32    wepkey_index                             = 10 ; //  The index of the default WEP key.      
      string    key_passphrase                           = 11 ; //  A passphrase from which the WEP keys wer
      string    wepencryption_level                      = 12 ; //  Supported key lengths.  {{enum}}       
      string    basic_encryption_modes                   = 13 ; //  Encryption modes that are available when
      string    basic_authentication_mode                = 14 ; //  Authentication modes that are available 
      string    wpaencryption_modes                      = 15 ; //  Encryption modes that are available when
      string    wpaauthentication_mode                   = 16 ; //  Authentication modes that are available 
      string    ieee11i_encryption_modes                 = 17 ; //  Encryption modes that are available when
      string    ieee11i_authentication_mode              = 18 ; //  Authentication modes that are available 
      string    possible_channels                        = 19 ; //  Possible radio channels for the wireless
      string    basic_data_transmit_rates                = 20 ; //  Maximum access point data transmit rates
      string    operational_data_transmit_rates          = 21 ; //  Maximum access point data transmit rates
      string    possible_data_transmit_rates             = 22 ; //  Data transmit rates for unicast frames a
      bool      insecure_oobaccess_enabled               = 23 ; //  Indicates whether insecure write access 
      bool      beacon_advertisement_enabled             = 24 ; //  Indicates whether or not the access poin
      bool      radio_enabled                            = 25 ; //  Indicates whether or not the access poin
      bool      auto_rate_fall_back_enabled              = 26 ; //  Indicates whether the access point can a
      string    location_description                     = 27 ; //  An XML description of information used t
      string    regulatory_domain                        = 28 ; //  802.11d Regulatory Domain String.  First
      uint32    total_pskfailures                        = 29 ; //  The number of times pre-shared key (PSK)
      uint32    total_integrity_failures                 = 30 ; //  The number of times the MICHAEL integrit
      string    channels_in_use                          = 31 ; //  Channels that the access point determine
      string    device_operation_mode                    = 32 ; //  The current access-point operating mode.
      uint32    distance_from_root                       = 33 ; //  The number of hops from the root access 
      string    peer_bssid                               = 34 ; //  The MAC address of the peer in wireless 
      string    authentication_service_mode              = 35 ; //  Indicates whether another service is inv
      uint32    total_bytes_sent                         = 36 ; //  Total number of bytes sent over the inte
      uint32    total_bytes_received                     = 37 ; //  Total number of bytes received over the 
      uint32    total_packets_sent                       = 38 ; //  Total number of packets sent over the in
      uint32    total_packets_received                   = 39 ; //  Total number of packets received over th
      uint32    total_associations                       = 40 ; //  The number of devices currently associat
      message AssociatedDevice { // InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.AssociatedDevice.{i}.
        string    associated_device_macaddress             = 1  ; //  The MAC address of an associated device.
        string    associated_device_ipaddress              = 2  ; //  The IP address or DNS name of an associa
        bool      associated_device_authentication_state   = 3  ; //  Whether an associated device has authent
        string    last_requested_unicast_cipher            = 4  ; //  The unicast cipher that was most recentl
        string    last_requested_multicast_cipher          = 5  ; //  The multicast cipher that was most recen
        string    last_pmkid                               = 6  ; //  The pairwise master key (PMK) that was m
      }
      repeated AssociatedDevice associated_device = 41; // InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.AssociatedDevice.{i}.
      message WEPKey { // InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.WEPKey.{i}.
        string    wepkey                                   = 1  ; //  A WEP key expressed as a hexadecimal str
      }
      repeated WEPKey wepkey = 42; // InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.WEPKey.{i}.
      message PreSharedKey { // InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.PreSharedKey.{i}.
        string    pre_shared_key                           = 1  ; //  A literal WPA PSK expressed as a hexadec
        string    key_passphrase                           = 2  ; //  A passphrase from which WEP or PSK keys 
        string    associated_device_macaddress             = 3  ; //  The MAC address associated with a presha
      }
      repeated PreSharedKey pre_shared_key = 43; // InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.PreSharedKey.{i}.
    }
    repeated WLANConfiguration wlanconfiguration = 7; // InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.
    message Hosts { // InternetGatewayDevice.LANDevice.{i}.Hosts.
      uint32    host_number_of_entries                   = 1  ; //  Number of entries in the {{object|Host}}
      message Host { // InternetGatewayDevice.LANDevice.{i}.Hosts.Host.{i}.
        string    ipaddress                                = 1  ; //  Current IP Address of the host.        
        string    address_source                           = 2  ; //  Indicates whether the IP address of the 
        int32     lease_time_remaining                     = 3  ; //  DHCP lease time remaining in seconds.  A
        string    macaddress                               = 4  ; //  MAC address of the host.        .    
        string    host_name                                = 5  ; //  The device's host name or {{empty}} if u
        string    interface_type                           = 6  ; //  Type of physical interface through which
        bool      active                                   = 7  ; //  Whether or not the host is currently pre
      }
      repeated Host host = 2; // InternetGatewayDevice.LANDevice.{i}.Hosts.Host.{i}.
    }
    Hosts hosts = 8; // InternetGatewayDevice.LANDevice.{i}.Hosts.
  }
  repeated LANDevice landevice = 11; // InternetGatewayDevice.LANDevice.{i}.
  message WANDevice { // InternetGatewayDevice.WANDevice.{i}.
    uint32    wanconnection_number_of_entries          = 1  ; //  Number of instances of {{object|WANConne
    message WANCommonInterfaceConfig { // InternetGatewayDevice.WANDevice.{i}.WANCommonInterfaceConfig.
      bool      enabled_for_internet                     = 1  ; //  Used to enable or disable access to and 
      string    wanaccess_type                           = 2  ; //  Specifies the WAN access (modem) type. 
      uint32    layer1upstream_max_bit_rate              = 3  ; //  Specifies the maximum upstream theoretic
      uint32    layer1downstream_max_bit_rate            = 4  ; //  Specifies the maximum downstream theoret
      string    physical_link_status                     = 5  ; //  Indicates the state of the physical conn
      string    wanaccess_provider                       = 6  ; //  Name of the Service Provider providing l
      uint32    total_bytes_sent                         = 7  ; //  The cumulative counter for total number 
      uint32    total_bytes_received                     = 8  ; //  The cumulative counter for total number 
      uint32    total_packets_sent                       = 9  ; //  The cumulative counter for total number 
      uint32    total_packets_received                   = 10 ; //  The cumulative counter for total number 
      uint32    maximum_active_connections               = 11 ; //  Indicates the maximum number of active c
      uint32    number_of_active_connections             = 12 ; //  Number of WAN connection service instanc
      message Connection { // InternetGatewayDevice.WANDevice.{i}.WANCommonInterfaceConfig.Connection.{i}.
        string    active_connection_device_container       = 1  ; //  Specifies a WAN connection device object
        string    active_connection_service_id             = 2  ; //  Specifies a WAN connection object associ
      }
      repeated Connection connection = 13; // InternetGatewayDevice.WANDevice.{i}.WANCommonInterfaceConfig.Connection.{i}.
    }
    WANCommonInterfaceConfig wancommon_interface_config = 2; // InternetGatewayDevice.WANDevice.{i}.WANCommonInterfaceConfig.
    message WANDSLInterfaceConfig { // InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.
      bool      enable                                   = 1  ; //  Enables or disables the link.        .
      string    status                                   = 2  ; //  Status of the DSL physical link.       
      string    modulation_type                          = 3  ; //  Indicates the type of modulation used on
      string    line_encoding                            = 4  ; //  The line encoding method used in establi
      string    data_path                                = 5  ; //  Indicates whether the data path is fast 
      uint32    interleave_depth                         = 6  ; //  ADSL Interleaved depth.  This variable i
      int32     line_number                              = 7  ; //  Signifies the line pair that the modem i
      uint32    upstream_curr_rate                       = 8  ; //  The current payload bandwidth (expressed
      uint32    downstream_curr_rate                     = 9  ; //  The current payload bandwidth (expressed
      uint32    upstream_max_rate                        = 10 ; //  The current attainable rate (expressed i
      uint32    downstream_max_rate                      = 11 ; //  The current attainable rate (expressed i
      int32     upstream_noise_margin                    = 12 ; //  The current signal-to-noise ratio (expre
      int32     downstream_noise_margin                  = 13 ; //  The current signal-to-noise ratio (expre
      int32     upstream_attenuation                     = 14 ; //  The current upstream signal loss (expres
      int32     downstream_attenuation                   = 15 ; //  The current downstream signal loss (expr
      int32     upstream_power                           = 16 ; //  The current output power at the CPE's DS
      int32     downstream_power                         = 17 ; //  The current received power at the CPE's 
      string    aturvendor                               = 18 ; //  ATU-R vendor identifier as defined in G.
      uint32    aturcountry                              = 19 ; //  T.35 country code of the ATU-R vendor as
      uint32    aturansistd                              = 20 ; //  ATU-R T1.413 Revision Number as defined 
      uint32    aturansirev                              = 21 ; //  ATU-R Vendor Revision Number as defined 
      string    atucvendor                               = 22 ; //  ATU-C vendor identifier as defined in G.
      uint32    atuccountry                              = 23 ; //  T.35 country code of the ATU-C vendor as
      uint32    atucansistd                              = 24 ; //  ATU-C T1.413 Revision Number as defined 
      uint32    atucansirev                              = 25 ; //  ATU-C Vendor Revision Number as defined 
      uint32    total_start                              = 26 ; //  Number of seconds since the beginning of
      uint32    showtime_start                           = 27 ; //  Number of seconds since the most recent 
      uint32    last_showtime_start                      = 28 ; //  Number of seconds since the second most 
      uint32    current_day_start                        = 29 ; //  Number of seconds since the beginning of
      uint32    quarter_hour_start                       = 30 ; //  Number of seconds since the beginning of
      message Stats { // InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.
        message Total { // InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.Total.
          uint32    receive_blocks                           = 1  ; //  Total number of successfully received bl
          uint32    transmit_blocks                          = 2  ; //  Total number of successfully transmitted
          uint32    cell_delin                               = 3  ; //  Total number of cell-delineation errors 
          uint32    link_retrain                             = 4  ; //  Total number of link-retrain errors (Ful
          uint32    init_errors                              = 5  ; //  Total number of initialization errors (L
          uint32    init_timeouts                            = 6  ; //  Total number of initialization timeout e
          uint32    loss_of_framing                          = 7  ; //  Total number of loss-of-framing errors (
          uint32    errored_secs                             = 8  ; //  Total number of errored seconds (ES-L as
          uint32    severely_errored_secs                    = 9  ; //  Total number of severely errored seconds
          uint32    fecerrors                                = 10 ; //  Total number of FEC errors detected (FEC
          uint32    atucfecerrors                            = 11 ; //  Total number of FEC errors detected by t
          uint32    hecerrors                                = 12 ; //  Total number of HEC errors detected (HEC
          uint32    atuchecerrors                            = 13 ; //  Total number of HEC errors detected by t
          uint32    crcerrors                                = 14 ; //  Total number of CRC errors detected (CV-
          uint32    atuccrcerrors                            = 15 ; //  Total number of CRC errors detected by t
        }
        Total total = 1; // InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.Total.
        message Showtime { // InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.Showtime.
          uint32    receive_blocks                           = 1  ; //  Number of successfully received blocks s
          uint32    transmit_blocks                          = 2  ; //  Number of successfully transmitted block
          uint32    cell_delin                               = 3  ; //  Number of cell-delineation errors since 
          uint32    link_retrain                             = 4  ; //  Number of link-retrain errors since the 
          uint32    init_errors                              = 5  ; //  Number of initialization errors since th
          uint32    init_timeouts                            = 6  ; //  Number of initialization timeout errors 
          uint32    loss_of_framing                          = 7  ; //  Number of loss-of-framing errors since t
          uint32    errored_secs                             = 8  ; //  Number of errored seconds since the most
          uint32    severely_errored_secs                    = 9  ; //  Number of severely errored seconds since
          uint32    fecerrors                                = 10 ; //  Number of FEC errors detected since the 
          uint32    atucfecerrors                            = 11 ; //  Number of FEC errors detected by the ATU
          uint32    hecerrors                                = 12 ; //  Number of HEC errors detected since the 
          uint32    atuchecerrors                            = 13 ; //  Number of HEC errors detected by the ATU
          uint32    crcerrors                                = 14 ; //  Number of CRC errors detected since the 
          uint32    atuccrcerrors                            = 15 ; //  Number of CRC errors detected by the ATU
        }
        Showtime showtime = 2; // InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.Showtime.
        message LastShowtime { // InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.LastShowtime.
          uint32    receive_blocks                           = 1  ; //  Number of successfully received blocks s
          uint32    transmit_blocks                          = 2  ; //  Number of successfully transmitted block
          uint32    cell_delin                               = 3  ; //  Number of cell-delineation errors since 
          uint32    link_retrain                             = 4  ; //  Number of link-retrain errors since the 
          uint32    init_errors                              = 5  ; //  Number of initialization errors since th
          uint32    init_timeouts                            = 6  ; //  Number of initialization timeout errors 
          uint32    loss_of_framing                          = 7  ; //  Number of loss-of-framing errors since t
          uint32    errored_secs                             = 8  ; //  Number of errored seconds since the seco
          uint32    severely_errored_secs                    = 9  ; //  Number of severely errored seconds since
          uint32    fecerrors                                = 10 ; //  Number of FEC errors detected since the 
          uint32    atucfecerrors                            = 11 ; //  Number of FEC errors detected by the ATU
          uint32    hecerrors                                = 12 ; //  Number of HEC errors detected since the 
          uint32    atuchecerrors                            = 13 ; //  Number of HEC errors detected by the ATU
          uint32    crcerrors                                = 14 ; //  Number of CRC errors detected since the 
          uint32    atuccrcerrors                            = 15 ; //  Number of CRC errors detected by the ATU
        }
        LastShowtime last_showtime = 3; // InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.LastShowtime.
        message CurrentDay { // InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.CurrentDay.
          uint32    receive_blocks                           = 1  ; //  Number of successfully received blocks d
          uint32    transmit_blocks                          = 2  ; //  Number of successfully transmitted block
          uint32    cell_delin                               = 3  ; //  Number of cell-delineation errors during
          uint32    link_retrain                             = 4  ; //  Number of link-retrain errors during the
          uint32    init_errors                              = 5  ; //  Number of initialization errors during t
          uint32    init_timeouts                            = 6  ; //  Number of initialization timeout errors 
          uint32    loss_of_framing                          = 7  ; //  Number of loss-of-framing errors during 
          uint32    errored_secs                             = 8  ; //  Number of errored seconds during the cur
          uint32    severely_errored_secs                    = 9  ; //  Number of severely errored seconds durin
          uint32    fecerrors                                = 10 ; //  Number of FEC errors detected during the
          uint32    atucfecerrors                            = 11 ; //  Number of FEC errors detected by the ATU
          uint32    hecerrors                                = 12 ; //  Number of HEC errors detected during the
          uint32    atuchecerrors                            = 13 ; //  Number of HEC errors detected by the ATU
          uint32    crcerrors                                = 14 ; //  Number of CRC errors detected during the
          uint32    atuccrcerrors                            = 15 ; //  Number of CRC errors detected by the ATU
        }
        CurrentDay current_day = 4; // InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.CurrentDay.
        message QuarterHour { // InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.QuarterHour.
          uint32    receive_blocks                           = 1  ; //  Number of successfully received blocks d
          uint32    transmit_blocks                          = 2  ; //  Number of successfully transmitted block
          uint32    cell_delin                               = 3  ; //  Number of cell-delineation errors during
          uint32    link_retrain                             = 4  ; //  Number of link-retrain errors during the
          uint32    init_errors                              = 5  ; //  Number of initialization errors during t
          uint32    init_timeouts                            = 6  ; //  Number of initialization timeout errors 
          uint32    loss_of_framing                          = 7  ; //  Number of loss-of-framing errors during 
          uint32    errored_secs                             = 8  ; //  Number of errored seconds during the cur
          uint32    severely_errored_secs                    = 9  ; //  Number of severely errored seconds durin
          uint32    fecerrors                                = 10 ; //  Number of FEC errors detected during the
          uint32    atucfecerrors                            = 11 ; //  Number of FEC errors detected by the ATU
          uint32    hecerrors                                = 12 ; //  Number of HEC errors detected during the
          uint32    atuchecerrors                            = 13 ; //  Number of HEC errors detected by the ATU
          uint32    crcerrors                                = 14 ; //  Number of CRC errors detected during the
          uint32    atuccrcerrors                            = 15 ; //  Number of CRC errors detected by the ATU
        }
        QuarterHour quarter_hour = 5; // InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.QuarterHour.
      }
      Stats stats = 31; // InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.
    }
    WANDSLInterfaceConfig wandslinterface_config = 3; // InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.
    message WANEthernetInterfaceConfig { // InternetGatewayDevice.WANDevice.{i}.WANEthernetInterfaceConfig.
      bool      enable                                   = 1  ; //  Enables or disables this interface.    
      string    status                                   = 2  ; //  Indicates the status of this interface.
      string    macaddress                               = 3  ; //  The physical address of the interface. 
      string    max_bit_rate                             = 4  ; //  The maximum upstream and downstream bit 
      string    duplex_mode                              = 5  ; //  The duplex mode available to this connec
      message Stats { // InternetGatewayDevice.WANDevice.{i}.WANEthernetInterfaceConfig.Stats.
        uint32    bytes_sent                               = 1  ; //  Total number of bytes sent over the inte
        uint32    bytes_received                           = 2  ; //  Total number of bytes received over the 
        uint32    packets_sent                             = 3  ; //  Total number of packets sent over the in
        uint32    packets_received                         = 4  ; //  Total number of packets received over th
      }
      Stats stats = 6; // InternetGatewayDevice.WANDevice.{i}.WANEthernetInterfaceConfig.Stats.
    }
    WANEthernetInterfaceConfig wanethernet_interface_config = 4; // InternetGatewayDevice.WANDevice.{i}.WANEthernetInterfaceConfig.
    message WANDSLConnectionManagement { // InternetGatewayDevice.WANDevice.{i}.WANDSLConnectionManagement.
      uint32    connection_service_number_of_entries     = 1  ; //  Number of table entries in the Connectio
      message ConnectionService { // InternetGatewayDevice.WANDevice.{i}.WANDSLConnectionManagement.ConnectionService.{i}.
        string    wanconnection_device                     = 1  ; //  Specifies a WAN connection device object
        string    wanconnection_service                    = 2  ; //  Specifies a WAN connection object associ
        string    destination_address                      = 3  ; //  Destination address of the WANConnection
        string    link_type                                = 4  ; //  Link Type of the WANConnectionDevice ent
        string    connection_type                          = 5  ; //  Connection Type of the ''WANPPPConnectio
        string    name                                     = 6  ; //  User-readable name of the connection.  
      }
      repeated ConnectionService connection_service = 2; // InternetGatewayDevice.WANDevice.{i}.WANDSLConnectionManagement.ConnectionService.{i}.
    }
    WANDSLConnectionManagement wandslconnection_management = 5; // InternetGatewayDevice.WANDevice.{i}.WANDSLConnectionManagement.
    message WANDSLDiagnostics { // InternetGatewayDevice.WANDevice.{i}.WANDSLDiagnostics.
      string    loop_diagnostics_state                   = 1  ; //  Indicates availability of diagnostic dat
      int32     actpsdds                                 = 2  ; //  Downstream actual power spectral density
      int32     actpsdus                                 = 3  ; //  Upstream actual power spectral density. 
      int32     actatpds                                 = 4  ; //  Downstream actual aggregate transmitter 
      int32     actatpus                                 = 5  ; //  Upstream actual aggregate transmitter po
      int32     hlinscds                                 = 6  ; //  Downstream linear representation scale. 
      string    hlinpsds                                 = 7  ; //  Downstream linear channel characteristic
      string    qlnpsds                                  = 8  ; //  Downstream quiet line noise per subcarri
      string    snrpsds                                  = 9  ; //  Downstream SNR per subcarrier.  Maximum 
      string    bitspsds                                 = 10 ; //  Downstream bit allocation per subcarrier
      string    gainspsds                                = 11 ; //  Downstream gain allocation per subcarrie
    }
    WANDSLDiagnostics wandsldiagnostics = 6; // InternetGatewayDevice.WANDevice.{i}.WANDSLDiagnostics.
    message WANConnectionDevice { // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.
      uint32    wanipconnection_number_of_entries        = 1  ; //  Number of instances of {{object|WANIPCon
      uint32    wanpppconnection_number_of_entries       = 2  ; //  Number of instances of {{object|WANPPPCo
      message WANDSLLinkConfig { // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANDSLLinkConfig.
        bool      enable                                   = 1  ; //  Enables or disables the link.  On creati
        string    link_status                              = 2  ; //  Status of the link.        .        
        string    link_type                                = 3  ; //  Indicates the type of DSL connection and
        bool      auto_config                              = 4  ; //  Indicates if the CPE is currently using 
        string    modulation_type                          = 5  ; //  Indicates the type of DSL modulation use
        string    destination_address                      = 6  ; //  Destination address of this link.  One o
        string    atmencapsulation                         = 7  ; //  Identifies the connection encapsulation 
        bool      fcspreserved                             = 8  ; //  This flag tells if a checksum should be 
        string    vcsearch_list                            = 9  ; //  Comma separated ordered list of VPI/VCI 
        string    atmaal                                   = 10 ; //  Describes the ATM Adaptation Layer (AAL)
        uint32    atmtransmitted_blocks                    = 11 ; //  The current count of successfully transm
        uint32    atmreceived_blocks                       = 12 ; //  The current count of successfully receiv
        string    atmqo_s                                  = 13 ; //  Describes the ATM Quality Of Service (Qo
        uint32    atmpeak_cell_rate                        = 14 ; //  Specifies the upstream peak cell rate in
        uint32    atmmaximum_burst_size                    = 15 ; //  Specifies the upstream maximum burst siz
        uint32    atmsustainable_cell_rate                 = 16 ; //  Specifies the upstream sustainable cell 
        uint32    aal5crcerrors                            = 17 ; //  Count of the AAL5 layer cyclic redundanc
        uint32    atmcrcerrors                             = 18 ; //  Count of the ATM layer cyclic redundancy
        uint32    atmhecerrors                             = 19 ; //  Count of the number of Header Error Chec
      }
      WANDSLLinkConfig wandsllink_config = 3; // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANDSLLinkConfig.
      message WANATMF5LoopbackDiagnostics { // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANATMF5LoopbackDiagnostics.
        string    diagnostics_state                        = 1  ; //  Indicates availability of diagnostic dat
        uint32    number_of_repetitions                    = 2  ; //  Number of repetitions of the ping test t
        uint32    timeout                                  = 3  ; //  Timeout in milliseconds for the ping tes
        uint32    success_count                            = 4  ; //  Result parameter indicating the number o
        uint32    failure_count                            = 5  ; //  Result parameter indicating the number o
        uint32    average_response_time                    = 6  ; //  Result parameter indicating the average 
        uint32    minimum_response_time                    = 7  ; //  Result parameter indicating the minimum 
        uint32    maximum_response_time                    = 8  ; //  Result parameter indicating the maximum 
      }
      WANATMF5LoopbackDiagnostics wanatmf5loopback_diagnostics = 4; // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANATMF5LoopbackDiagnostics.
      message WANEthernetLinkConfig { // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANEthernetLinkConfig.
        string    ethernet_link_status                     = 1  ; //  Status of the Ethernet link.        .
      }
      WANEthernetLinkConfig wanethernet_link_config = 5; // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANEthernetLinkConfig.
      message WANPOTSLinkConfig { // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANPOTSLinkConfig.
        bool      enable                                   = 1  ; //  Enables or disables the link.  On creati
        string    link_status                              = 2  ; //  Status of the link.        .        
        string    ispphone_number                          = 3  ; //  Specifies a list of strings separated by
        string    ispinfo                                  = 4  ; //  Information identifying the Internet Ser
        string    link_type                                = 5  ; //  This variable indicates the type of POTS
        uint32    number_of_retries                        = 6  ; //  The number of times the CPE should attem
        uint32    delay_between_retries                    = 7  ; //  The number of seconds the CPE should wai
        string    fclass                                   = 8  ; //  Specifies capabilities of the POTS modem
        string    data_modulation_supported                = 9  ; //  The modulation standard currently being 
        string    data_protocol                            = 10 ; //  The protocol standard currently being us
        string    data_compression                         = 11 ; //  The compression technology implemented o
        bool      plus_vtrcommand_supported                = 12 ; //  Capability for full duplex operation wit
      }
      WANPOTSLinkConfig wanpotslink_config = 6; // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANPOTSLinkConfig.
      message WANIPConnection { // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection.{i}.
        bool      enable                                   = 1  ; //  Enables or disables the connection insta
        string    connection_status                        = 2  ; //  Current status of the connection.      
        string    possible_connection_types                = 3  ; //  Types of connections possible for this c
        string    connection_type                          = 4  ; //  Specifies the connection type of the con
        string    name                                     = 5  ; //  User-readable name of this connection. 
        uint32    uptime                                   = 6  ; //  The time in seconds that this connection
        string    last_connection_error                    = 7  ; //  The cause of failure for the last connec
        uint32    auto_disconnect_time                     = 8  ; //  The time in seconds since the establishm
        uint32    idle_disconnect_time                     = 9  ; //  The time in seconds that if the connecti
        uint32    warn_disconnect_delay                    = 10 ; //  Time in seconds the Status remains in th
        bool      rsipavailable                            = 11 ; //  Indicates if Realm-specific IP (RSIP) is
        bool      natenabled                               = 12 ; //  Indicates if Network Address Translation
        string    addressing_type                          = 13 ; //  The method used to assign an address to 
        string    external_ipaddress                       = 14 ; //  This is the external IP address used by 
        string    subnet_mask                              = 15 ; //  Subnet mask of the WAN interface.  This 
        string    default_gateway                          = 16 ; //  The IP address of the default gateway fo
        bool      dnsenabled                               = 17 ; //  Whether or not the device should attempt
        bool      dnsoverride_allowed                      = 18 ; //  Whether or not a manually set, non-empty
        string    dnsservers                               = 19 ; //  Comma separated list of DNS server IP ad
        uint32    max_mtusize                              = 20 ; //  The maximum allowed size of an Ethernet 
        string    macaddress                               = 21 ; //  The physical address of the ''WANIPConne
        bool      macaddress_override                      = 22 ; //  Whether the value of {{param|MACAddress}
        string    connection_trigger                       = 23 ; //  Trigger used to establish the IP connect
        string    route_protocol_rx                        = 24 ; //  Defines the Rx protocol to be used.    
        uint32    port_mapping_number_of_entries           = 25 ; //  Total number of port mapping entries.  
        message PortMapping { // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection.{i}.PortMapping.{i}.
          bool      port_mapping_enabled                     = 1  ; //  Enables or disables the port mapping ins
          uint32    port_mapping_lease_duration              = 2  ; //  Determines the time to live, in seconds,
          string    remote_host                              = 3  ; //  This parameter is the IP address of the 
          uint32    external_port                            = 4  ; //  The external port that the NAT gateway w
          uint32    internal_port                            = 5  ; //  The port on {{param|InternalClient}} tha
          string    port_mapping_protocol                    = 6  ; //  The protocol of the port mapping.      
          string    internal_client                          = 7  ; //  The IP address or DNS host name of an in
          string    port_mapping_description                 = 8  ; //  User-readable description of this port m
        }
        repeated PortMapping port_mapping = 26; // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection.{i}.PortMapping.{i}.
        message Stats { // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection.{i}.Stats.
          uint32    ethernet_bytes_sent                      = 1  ; //  Total number of bytes sent over all conn
          uint32    ethernet_bytes_received                  = 2  ; //  Total number of bytes received over all 
          uint32    ethernet_packets_sent                    = 3  ; //  Total number of Ethernet packets sent ov
          uint32    ethernet_packets_received                = 4  ; //  Total number of Ethernet packets receive
        }
        Stats stats = 27; // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection.{i}.Stats.
      }
      repeated WANIPConnection wanipconnection = 7; // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection.{i}.
      message WANPPPConnection { // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANPPPConnection.{i}.
        bool      enable                                   = 1  ; //  Enables or disables the connection insta
        string    connection_status                        = 2  ; //  Current status of the connection.      
        string    possible_connection_types                = 3  ; //  Types of connections possible for this c
        string    connection_type                          = 4  ; //  Specifies the connection type of the con
        string    name                                     = 5  ; //  User-readable name of this connection. 
        uint32    uptime                                   = 6  ; //  The time in seconds that this connection
        string    last_connection_error                    = 7  ; //  The cause of failure for the last connec
        uint32    auto_disconnect_time                     = 8  ; //  The time in seconds since the establishm
        uint32    idle_disconnect_time                     = 9  ; //  The time in seconds that if the connecti
        uint32    warn_disconnect_delay                    = 10 ; //  Time in seconds the Status remains in th
        bool      rsipavailable                            = 11 ; //  Indicates if Realm-specific IP (RSIP) is
        bool      natenabled                               = 12 ; //  Indicates if Network Address Translation
        string    username                                 = 13 ; //  Username to be used for authentication.
        string    password                                 = 14 ; //  Password to be usef for authentication.
        string    pppencryption_protocol                   = 15 ; //  Describes the PPP encryption protocol us
        string    pppcompression_protocol                  = 16 ; //  Describes the PPP compression protocol u
        string    pppauthentication_protocol               = 17 ; //  Describes the PPP authentication protoco
        string    external_ipaddress                       = 18 ; //  This is the external IP address used by 
        string    remote_ipaddress                         = 19 ; //  The remote IP address for this connectio
        uint32    max_mrusize                              = 20 ; //  The maximum allowed size of frames sent 
        uint32    current_mrusize                          = 21 ; //  The current MRU in use over this connect
        bool      dnsenabled                               = 22 ; //  Whether or not the device should attempt
        bool      dnsoverride_allowed                      = 23 ; //  Whether or not a manually set, non-empty
        string    dnsservers                               = 24 ; //  Comma separated list of DNS server IP ad
        string    macaddress                               = 25 ; //  The physical address of the ''WANIPConne
        bool      macaddress_override                      = 26 ; //  Whether the value of {{param|MACAddress}
        string    transport_type                           = 27 ; //  PPP transport type of the connection.  
        string    pppo_eacname                             = 28 ; //  PPPoE Access Concentrator.        .  
        string    pppo_eservice_name                       = 29 ; //  PPPoE Service Name.        .        
        string    connection_trigger                       = 30 ; //  Trigger used to establish the IP connect
        string    route_protocol_rx                        = 31 ; //  Defines the Rx protocol to be used.    
        uint32    ppplcpecho                               = 32 ; //  PPP LCP Echo period in seconds.        
        uint32    ppplcpecho_retry                         = 33 ; //  Number of PPP LCP Echo retries within an
        uint32    port_mapping_number_of_entries           = 34 ; //  Total number of port mapping entries.  
        message PortMapping { // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANPPPConnection.{i}.PortMapping.{i}.
          bool      port_mapping_enabled                     = 1  ; //  Enables or disables the port mapping ins
          uint32    port_mapping_lease_duration              = 2  ; //  Determines the time to live, in seconds,
          string    remote_host                              = 3  ; //  This parameter is the IP address of the 
          uint32    external_port                            = 4  ; //  The external port that the NAT gateway w
          uint32    internal_port                            = 5  ; //  The port on {{param|InternalClient}} tha
          string    port_mapping_protocol                    = 6  ; //  The protocol of the port mapping.      
          string    internal_client                          = 7  ; //  The IP address or DNS host name of an in
          string    port_mapping_description                 = 8  ; //  User-readable description of this port m
        }
        repeated PortMapping port_mapping = 35; // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANPPPConnection.{i}.PortMapping.{i}.
        message Stats { // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANPPPConnection.{i}.Stats.
          uint32    ethernet_bytes_sent                      = 1  ; //  Total number of bytes sent over all conn
          uint32    ethernet_bytes_received                  = 2  ; //  Total number of bytes received over all 
          uint32    ethernet_packets_sent                    = 3  ; //  Total number of Ethernet packets sent ov
          uint32    ethernet_packets_received                = 4  ; //  Total number of Ethernet packets receive
        }
        Stats stats = 36; // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANPPPConnection.{i}.Stats.
      }
      repeated WANPPPConnection wanpppconnection = 8; // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANPPPConnection.{i}.
    }
    repeated WANConnectionDevice wanconnection_device = 7; // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.
  }
  repeated WANDevice wandevice = 12; // InternetGatewayDevice.WANDevice.{i}.
}

message GatewayRequest { int32 unused = 1; }

message GatewayReply { int32 unused = 1; }

message X_012345_Message { int32 unused = 1;  } // Vendor extensions X_{OUI}_{NameOfNewThing}

service Gateway {
  rpc GetInternetGatewayDevice(GatewayRequest) returns (tr069.InternetGatewayDevice) {}
  rpc SetInternetGatewayDevice(tr069.InternetGatewayDevice) returns (GatewayReply) {}

  rpc GetDeviceInfo(GatewayRequest) returns (tr069.InternetGatewayDevice.DeviceInfo) {}
  rpc SetDeviceInfo(tr069.InternetGatewayDevice.DeviceInfo) returns (GatewayReply) {}

  rpc GetVendorConfigFile(GatewayRequest) returns (stream tr069.InternetGatewayDevice.DeviceInfo.VendorConfigFile) {}
  rpc SetVendorConfigFile(stream tr069.InternetGatewayDevice.DeviceInfo.VendorConfigFile) returns (GatewayReply) {}

  rpc GetDeviceConfig(GatewayRequest) returns (tr069.InternetGatewayDevice.DeviceConfig) {}
  rpc SetDeviceConfig(tr069.InternetGatewayDevice.DeviceConfig) returns (GatewayReply) {}

  rpc GetManagementServer(GatewayRequest) returns (tr069.InternetGatewayDevice.ManagementServer) {}
  rpc SetManagementServer(tr069.InternetGatewayDevice.ManagementServer) returns (GatewayReply) {}

  rpc GetTime(GatewayRequest) returns (tr069.InternetGatewayDevice.Time) {}
  rpc SetTime(tr069.InternetGatewayDevice.Time) returns (GatewayReply) {}

  rpc GetUserInterface(GatewayRequest) returns (tr069.InternetGatewayDevice.UserInterface) {}
  rpc SetUserInterface(tr069.InternetGatewayDevice.UserInterface) returns (GatewayReply) {}

  rpc GetLayer3Forwarding(GatewayRequest) returns (tr069.InternetGatewayDevice.Layer3Forwarding) {}
  rpc SetLayer3Forwarding(tr069.InternetGatewayDevice.Layer3Forwarding) returns (GatewayReply) {}

  rpc GetForwarding(GatewayRequest) returns (stream tr069.InternetGatewayDevice.Layer3Forwarding.Forwarding) {}
  rpc SetForwarding(stream tr069.InternetGatewayDevice.Layer3Forwarding.Forwarding) returns (GatewayReply) {}

  rpc GetLANConfigSecurity(GatewayRequest) returns (tr069.InternetGatewayDevice.LANConfigSecurity) {}
  rpc SetLANConfigSecurity(tr069.InternetGatewayDevice.LANConfigSecurity) returns (GatewayReply) {}

  rpc GetIPPingDiagnostics(GatewayRequest) returns (tr069.InternetGatewayDevice.IPPingDiagnostics) {}
  rpc SetIPPingDiagnostics(tr069.InternetGatewayDevice.IPPingDiagnostics) returns (GatewayReply) {}

  rpc GetLANDevice(GatewayRequest) returns (stream tr069.InternetGatewayDevice.LANDevice) {}
  rpc SetLANDevice(stream tr069.InternetGatewayDevice.LANDevice) returns (GatewayReply) {}

  rpc GetLANHostConfigManagement(GatewayRequest) returns (tr069.InternetGatewayDevice.LANDevice.LANHostConfigManagement) {}
  rpc SetLANHostConfigManagement(tr069.InternetGatewayDevice.LANDevice.LANHostConfigManagement) returns (GatewayReply) {}

  rpc GetIPInterface(GatewayRequest) returns (stream tr069.InternetGatewayDevice.LANDevice.LANHostConfigManagement.IPInterface) {}
  rpc SetIPInterface(stream tr069.InternetGatewayDevice.LANDevice.LANHostConfigManagement.IPInterface) returns (GatewayReply) {}

  rpc GetLANEthernetInterfaceConfig(GatewayRequest) returns (stream tr069.InternetGatewayDevice.LANDevice.LANEthernetInterfaceConfig) {}
  rpc SetLANEthernetInterfaceConfig(stream tr069.InternetGatewayDevice.LANDevice.LANEthernetInterfaceConfig) returns (GatewayReply) {}

  rpc GetStats(GatewayRequest) returns (tr069.InternetGatewayDevice.LANDevice.LANEthernetInterfaceConfig.Stats) {}
  rpc SetStats(tr069.InternetGatewayDevice.LANDevice.LANEthernetInterfaceConfig.Stats) returns (GatewayReply) {}

  rpc GetLANUSBInterfaceConfig(GatewayRequest) returns (stream tr069.InternetGatewayDevice.LANDevice.LANUSBInterfaceConfig) {}
  rpc SetLANUSBInterfaceConfig(stream tr069.InternetGatewayDevice.LANDevice.LANUSBInterfaceConfig) returns (GatewayReply) {}

  //?? rpc GetStats(GatewayRequest) returns (tr069.InternetGatewayDevice.LANDevice.LANUSBInterfaceConfig.Stats) {}
  //?? rpc SetStats(tr069.InternetGatewayDevice.LANDevice.LANUSBInterfaceConfig.Stats) returns (GatewayReply) {}

  rpc GetWLANConfiguration(GatewayRequest) returns (stream tr069.InternetGatewayDevice.LANDevice.WLANConfiguration) {}
  rpc SetWLANConfiguration(stream tr069.InternetGatewayDevice.LANDevice.WLANConfiguration) returns (GatewayReply) {}

  rpc GetAssociatedDevice(GatewayRequest) returns (stream tr069.InternetGatewayDevice.LANDevice.WLANConfiguration.AssociatedDevice) {}
  rpc SetAssociatedDevice(stream tr069.InternetGatewayDevice.LANDevice.WLANConfiguration.AssociatedDevice) returns (GatewayReply) {}

  rpc GetWEPKey(GatewayRequest) returns (stream tr069.InternetGatewayDevice.LANDevice.WLANConfiguration.WEPKey) {}
  rpc SetWEPKey(stream tr069.InternetGatewayDevice.LANDevice.WLANConfiguration.WEPKey) returns (GatewayReply) {}

  rpc GetPreSharedKey(GatewayRequest) returns (stream tr069.InternetGatewayDevice.LANDevice.WLANConfiguration.PreSharedKey) {}
  rpc SetPreSharedKey(stream tr069.InternetGatewayDevice.LANDevice.WLANConfiguration.PreSharedKey) returns (GatewayReply) {}

  rpc GetHosts(GatewayRequest) returns (tr069.InternetGatewayDevice.LANDevice.Hosts) {}
  rpc SetHosts(tr069.InternetGatewayDevice.LANDevice.Hosts) returns (GatewayReply) {}

  rpc GetHost(GatewayRequest) returns (stream tr069.InternetGatewayDevice.LANDevice.Hosts.Host) {}
  rpc SetHost(stream tr069.InternetGatewayDevice.LANDevice.Hosts.Host) returns (GatewayReply) {}

  rpc GetWANDevice(GatewayRequest) returns (stream tr069.InternetGatewayDevice.WANDevice) {}
  rpc SetWANDevice(stream tr069.InternetGatewayDevice.WANDevice) returns (GatewayReply) {}

  rpc GetWANCommonInterfaceConfig(GatewayRequest) returns (tr069.InternetGatewayDevice.WANDevice.WANCommonInterfaceConfig) {}
  rpc SetWANCommonInterfaceConfig(tr069.InternetGatewayDevice.WANDevice.WANCommonInterfaceConfig) returns (GatewayReply) {}

  rpc GetConnection(GatewayRequest) returns (stream tr069.InternetGatewayDevice.WANDevice.WANCommonInterfaceConfig.Connection) {}
  rpc SetConnection(stream tr069.InternetGatewayDevice.WANDevice.WANCommonInterfaceConfig.Connection) returns (GatewayReply) {}

  rpc GetWANDSLInterfaceConfig(GatewayRequest) returns (tr069.InternetGatewayDevice.WANDevice.WANDSLInterfaceConfig) {}
  rpc SetWANDSLInterfaceConfig(tr069.InternetGatewayDevice.WANDevice.WANDSLInterfaceConfig) returns (GatewayReply) {}

  //?? rpc GetStats(GatewayRequest) returns (tr069.InternetGatewayDevice.WANDevice.WANDSLInterfaceConfig.Stats) {}
  //?? rpc SetStats(tr069.InternetGatewayDevice.WANDevice.WANDSLInterfaceConfig.Stats) returns (GatewayReply) {}

  rpc GetTotal(GatewayRequest) returns (tr069.InternetGatewayDevice.WANDevice.WANDSLInterfaceConfig.Stats.Total) {}
  rpc SetTotal(tr069.InternetGatewayDevice.WANDevice.WANDSLInterfaceConfig.Stats.Total) returns (GatewayReply) {}

  rpc GetShowtime(GatewayRequest) returns (tr069.InternetGatewayDevice.WANDevice.WANDSLInterfaceConfig.Stats.Showtime) {}
  rpc SetShowtime(tr069.InternetGatewayDevice.WANDevice.WANDSLInterfaceConfig.Stats.Showtime) returns (GatewayReply) {}

  rpc GetLastShowtime(GatewayRequest) returns (tr069.InternetGatewayDevice.WANDevice.WANDSLInterfaceConfig.Stats.LastShowtime) {}
  rpc SetLastShowtime(tr069.InternetGatewayDevice.WANDevice.WANDSLInterfaceConfig.Stats.LastShowtime) returns (GatewayReply) {}

  rpc GetCurrentDay(GatewayRequest) returns (tr069.InternetGatewayDevice.WANDevice.WANDSLInterfaceConfig.Stats.CurrentDay) {}
  rpc SetCurrentDay(tr069.InternetGatewayDevice.WANDevice.WANDSLInterfaceConfig.Stats.CurrentDay) returns (GatewayReply) {}

  rpc GetQuarterHour(GatewayRequest) returns (tr069.InternetGatewayDevice.WANDevice.WANDSLInterfaceConfig.Stats.QuarterHour) {}
  rpc SetQuarterHour(tr069.InternetGatewayDevice.WANDevice.WANDSLInterfaceConfig.Stats.QuarterHour) returns (GatewayReply) {}

  rpc GetWANEthernetInterfaceConfig(GatewayRequest) returns (tr069.InternetGatewayDevice.WANDevice.WANEthernetInterfaceConfig) {}
  rpc SetWANEthernetInterfaceConfig(tr069.InternetGatewayDevice.WANDevice.WANEthernetInterfaceConfig) returns (GatewayReply) {}

  //?? rpc GetStats(GatewayRequest) returns (tr069.InternetGatewayDevice.WANDevice.WANEthernetInterfaceConfig.Stats) {}
  //?? rpc SetStats(tr069.InternetGatewayDevice.WANDevice.WANEthernetInterfaceConfig.Stats) returns (GatewayReply) {}

  rpc GetWANDSLConnectionManagement(GatewayRequest) returns (tr069.InternetGatewayDevice.WANDevice.WANDSLConnectionManagement) {}
  rpc SetWANDSLConnectionManagement(tr069.InternetGatewayDevice.WANDevice.WANDSLConnectionManagement) returns (GatewayReply) {}

  rpc GetConnectionService(GatewayRequest) returns (stream tr069.InternetGatewayDevice.WANDevice.WANDSLConnectionManagement.ConnectionService) {}
  rpc SetConnectionService(stream tr069.InternetGatewayDevice.WANDevice.WANDSLConnectionManagement.ConnectionService) returns (GatewayReply) {}

  rpc GetWANDSLDiagnostics(GatewayRequest) returns (tr069.InternetGatewayDevice.WANDevice.WANDSLDiagnostics) {}
  rpc SetWANDSLDiagnostics(tr069.InternetGatewayDevice.WANDevice.WANDSLDiagnostics) returns (GatewayReply) {}

  rpc GetWANConnectionDevice(GatewayRequest) returns (stream tr069.InternetGatewayDevice.WANDevice.WANConnectionDevice) {}
  rpc SetWANConnectionDevice(stream tr069.InternetGatewayDevice.WANDevice.WANConnectionDevice) returns (GatewayReply) {}

  rpc GetWANDSLLinkConfig(GatewayRequest) returns (tr069.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANDSLLinkConfig) {}
  rpc SetWANDSLLinkConfig(tr069.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANDSLLinkConfig) returns (GatewayReply) {}

  rpc GetWANATMF5LoopbackDiagnostics(GatewayRequest) returns (tr069.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANATMF5LoopbackDiagnostics) {}
  rpc SetWANATMF5LoopbackDiagnostics(tr069.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANATMF5LoopbackDiagnostics) returns (GatewayReply) {}

  rpc GetWANEthernetLinkConfig(GatewayRequest) returns (tr069.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANEthernetLinkConfig) {}
  rpc SetWANEthernetLinkConfig(tr069.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANEthernetLinkConfig) returns (GatewayReply) {}

  rpc GetWANPOTSLinkConfig(GatewayRequest) returns (tr069.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANPOTSLinkConfig) {}
  rpc SetWANPOTSLinkConfig(tr069.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANPOTSLinkConfig) returns (GatewayReply) {}

  rpc GetWANIPConnection(GatewayRequest) returns (stream tr069.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANIPConnection) {}
  rpc SetWANIPConnection(stream tr069.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANIPConnection) returns (GatewayReply) {}

  rpc GetPortMapping(GatewayRequest) returns (stream tr069.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANIPConnection.PortMapping) {}
  rpc SetPortMapping(stream tr069.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANIPConnection.PortMapping) returns (GatewayReply) {}

  //?? rpc GetStats(GatewayRequest) returns (tr069.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANIPConnection.Stats) {}
  //?? rpc SetStats(tr069.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANIPConnection.Stats) returns (GatewayReply) {}

  rpc GetWANPPPConnection(GatewayRequest) returns (stream tr069.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANPPPConnection) {}
  rpc SetWANPPPConnection(stream tr069.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANPPPConnection) returns (GatewayReply) {}

  //?? rpc GetPortMapping(GatewayRequest) returns (stream tr069.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANPPPConnection.PortMapping) {}
  //?? rpc SetPortMapping(stream tr069.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANPPPConnection.PortMapping) returns (GatewayReply) {}

  //?? rpc GetStats(GatewayRequest) returns (tr069.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANPPPConnection.Stats) {}
  //?? rpc SetStats(tr069.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANPPPConnection.Stats) returns (GatewayReply) {}

}
