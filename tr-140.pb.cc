// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tr-140.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tr-140.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tr140 {
class StorageService_CapabilitiesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StorageService_Capabilities> {
} _StorageService_Capabilities_default_instance_;
class StorageService_NetInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StorageService_NetInfo> {
} _StorageService_NetInfo_default_instance_;
class StorageService_UserGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StorageService_UserGroup> {
} _StorageService_UserGroup_default_instance_;
class StorageService_UserAccountDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StorageService_UserAccount> {
} _StorageService_UserAccount_default_instance_;
class StorageService_NetworkServerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StorageService_NetworkServer> {
} _StorageService_NetworkServer_default_instance_;
class StorageService_FTPServer_AnonymousUserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StorageService_FTPServer_AnonymousUser> {
} _StorageService_FTPServer_AnonymousUser_default_instance_;
class StorageService_FTPServerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StorageService_FTPServer> {
} _StorageService_FTPServer_default_instance_;
class StorageService_SFTPServerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StorageService_SFTPServer> {
} _StorageService_SFTPServer_default_instance_;
class StorageService_HTTPServerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StorageService_HTTPServer> {
} _StorageService_HTTPServer_default_instance_;
class StorageService_HTTPSServerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StorageService_HTTPSServer> {
} _StorageService_HTTPSServer_default_instance_;
class StorageService_PhysicalMedium_SMARTDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StorageService_PhysicalMedium_SMART> {
} _StorageService_PhysicalMedium_SMART_default_instance_;
class StorageService_PhysicalMediumDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StorageService_PhysicalMedium> {
} _StorageService_PhysicalMedium_default_instance_;
class StorageService_StorageArrayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StorageService_StorageArray> {
} _StorageService_StorageArray_default_instance_;
class StorageService_LogicalVolume_Folder_UserAccessDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StorageService_LogicalVolume_Folder_UserAccess> {
} _StorageService_LogicalVolume_Folder_UserAccess_default_instance_;
class StorageService_LogicalVolume_Folder_GroupAccessDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StorageService_LogicalVolume_Folder_GroupAccess> {
} _StorageService_LogicalVolume_Folder_GroupAccess_default_instance_;
class StorageService_LogicalVolume_Folder_QuotaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StorageService_LogicalVolume_Folder_Quota> {
} _StorageService_LogicalVolume_Folder_Quota_default_instance_;
class StorageService_LogicalVolume_FolderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StorageService_LogicalVolume_Folder> {
} _StorageService_LogicalVolume_Folder_default_instance_;
class StorageService_LogicalVolumeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StorageService_LogicalVolume> {
} _StorageService_LogicalVolume_default_instance_;
class StorageServiceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StorageService> {
} _StorageService_default_instance_;
class StorageRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StorageRequest> {
} _StorageRequest_default_instance_;
class StorageReplyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StorageReply> {
} _StorageReply_default_instance_;
class X_012345_MessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<X_012345_Message> {
} _X_012345_Message_default_instance_;

namespace protobuf_tr_2d140_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[22];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_Capabilities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_Capabilities, ftpcapable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_Capabilities, sftpcapable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_Capabilities, httpcapable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_Capabilities, httpscapable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_Capabilities, httpwritable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_Capabilities, supported_network_protocols_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_Capabilities, supported_file_system_types_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_Capabilities, supported_raid_types_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_Capabilities, volume_encryption_capable_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_NetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_NetInfo, host_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_NetInfo, domain_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_UserGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_UserGroup, enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_UserGroup, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_UserGroup, group_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_UserAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_UserAccount, enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_UserAccount, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_UserAccount, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_UserAccount, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_UserAccount, user_group_participation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_UserAccount, allow_ftpaccess_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_UserAccount, allow_httpaccess_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_NetworkServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_NetworkServer, afpenable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_NetworkServer, nfsenable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_NetworkServer, smbenable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_NetworkServer, network_protocol_auth_req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_FTPServer_AnonymousUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_FTPServer_AnonymousUser, enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_FTPServer_AnonymousUser, starting_folder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_FTPServer_AnonymousUser, read_only_access_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_FTPServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_FTPServer, enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_FTPServer, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_FTPServer, max_num_users_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_FTPServer, idle_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_FTPServer, port_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_FTPServer, anonymous_user_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_SFTPServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_SFTPServer, enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_SFTPServer, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_SFTPServer, max_num_users_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_SFTPServer, idle_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_SFTPServer, port_number_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_HTTPServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_HTTPServer, enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_HTTPServer, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_HTTPServer, max_num_users_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_HTTPServer, idle_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_HTTPServer, httpwriting_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_HTTPServer, port_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_HTTPServer, authentication_req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_HTTPSServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_HTTPSServer, enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_HTTPSServer, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_HTTPSServer, max_num_users_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_HTTPSServer, idle_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_HTTPSServer, httpwriting_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_HTTPSServer, port_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_HTTPSServer, authentication_req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_PhysicalMedium_SMART, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_PhysicalMedium_SMART, reallocated_sectors_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_PhysicalMedium_SMART, power_on_hours_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_PhysicalMedium_SMART, spin_retry_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_PhysicalMedium_SMART, power_cycle_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_PhysicalMedium_SMART, temperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_PhysicalMedium_SMART, reallocation_event_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_PhysicalMedium_SMART, current_pending_sector_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_PhysicalMedium_SMART, uncorrectable_sector_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_PhysicalMedium_SMART, read_errors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_PhysicalMedium_SMART, soft_read_errors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_PhysicalMedium_SMART, write_errors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_PhysicalMedium_SMART, spares_remaining_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_PhysicalMedium_SMART, predicted_failure_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_PhysicalMedium, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_PhysicalMedium, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_PhysicalMedium, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_PhysicalMedium, vendor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_PhysicalMedium, model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_PhysicalMedium, serial_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_PhysicalMedium, firmware_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_PhysicalMedium, connection_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_PhysicalMedium, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_PhysicalMedium, removable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_PhysicalMedium, capacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_PhysicalMedium, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_PhysicalMedium, uptime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_PhysicalMedium, smartcapable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_PhysicalMedium, health_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_PhysicalMedium, hot_swappable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_PhysicalMedium, smart_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_StorageArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_StorageArray, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_StorageArray, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_StorageArray, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_StorageArray, enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_StorageArray, raid_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_StorageArray, usable_capacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_StorageArray, physical_medium_reference_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume_Folder_UserAccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume_Folder_UserAccess, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume_Folder_UserAccess, enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume_Folder_UserAccess, user_reference_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume_Folder_UserAccess, permissions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume_Folder_GroupAccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume_Folder_GroupAccess, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume_Folder_GroupAccess, enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume_Folder_GroupAccess, group_reference_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume_Folder_GroupAccess, permissions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume_Folder_Quota, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume_Folder_Quota, enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume_Folder_Quota, capacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume_Folder_Quota, used_space_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume_Folder_Quota, threshold_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume_Folder_Quota, threshold_reached_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume_Folder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume_Folder, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume_Folder, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume_Folder, enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume_Folder, user_account_access_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume_Folder, user_access_number_of_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume_Folder, group_access_number_of_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume_Folder, user_access_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume_Folder, group_access_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume_Folder, quota_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume, enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume, physical_reference_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume, file_system_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume, capacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume, used_space_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume, threshold_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume, threshold_reached_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume, encrypted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume, folder_number_of_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService_LogicalVolume, folder_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService, enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService, physical_medium_number_of_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService, storage_array_number_of_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService, logical_volume_number_of_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService, user_account_number_of_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService, user_group_number_of_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService, capabilities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService, net_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService, user_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService, user_account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService, network_server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService, ftpserver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService, sftpserver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService, httpserver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService, httpsserver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService, physical_medium_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService, storage_array_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageService, logical_volume_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageRequest, unused_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageReply, unused_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_012345_Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(X_012345_Message, unused_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(StorageService_Capabilities)},
  { 14, -1, sizeof(StorageService_NetInfo)},
  { 21, -1, sizeof(StorageService_UserGroup)},
  { 29, -1, sizeof(StorageService_UserAccount)},
  { 41, -1, sizeof(StorageService_NetworkServer)},
  { 50, -1, sizeof(StorageService_FTPServer_AnonymousUser)},
  { 58, -1, sizeof(StorageService_FTPServer)},
  { 69, -1, sizeof(StorageService_SFTPServer)},
  { 79, -1, sizeof(StorageService_HTTPServer)},
  { 91, -1, sizeof(StorageService_HTTPSServer)},
  { 103, -1, sizeof(StorageService_PhysicalMedium_SMART)},
  { 121, -1, sizeof(StorageService_PhysicalMedium)},
  { 142, -1, sizeof(StorageService_StorageArray)},
  { 154, -1, sizeof(StorageService_LogicalVolume_Folder_UserAccess)},
  { 163, -1, sizeof(StorageService_LogicalVolume_Folder_GroupAccess)},
  { 172, -1, sizeof(StorageService_LogicalVolume_Folder_Quota)},
  { 182, -1, sizeof(StorageService_LogicalVolume_Folder)},
  { 196, -1, sizeof(StorageService_LogicalVolume)},
  { 214, -1, sizeof(StorageService)},
  { 238, -1, sizeof(StorageRequest)},
  { 244, -1, sizeof(StorageReply)},
  { 250, -1, sizeof(X_012345_Message)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_StorageService_Capabilities_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StorageService_NetInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StorageService_UserGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StorageService_UserAccount_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StorageService_NetworkServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StorageService_FTPServer_AnonymousUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StorageService_FTPServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StorageService_SFTPServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StorageService_HTTPServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StorageService_HTTPSServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StorageService_PhysicalMedium_SMART_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StorageService_PhysicalMedium_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StorageService_StorageArray_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StorageService_LogicalVolume_Folder_UserAccess_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StorageService_LogicalVolume_Folder_GroupAccess_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StorageService_LogicalVolume_Folder_Quota_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StorageService_LogicalVolume_Folder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StorageService_LogicalVolume_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StorageService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StorageRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StorageReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_X_012345_Message_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tr-140.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 22);
}

}  // namespace

void TableStruct::Shutdown() {
  _StorageService_Capabilities_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _StorageService_NetInfo_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _StorageService_UserGroup_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _StorageService_UserAccount_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _StorageService_NetworkServer_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _StorageService_FTPServer_AnonymousUser_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _StorageService_FTPServer_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _StorageService_SFTPServer_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _StorageService_HTTPServer_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _StorageService_HTTPSServer_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _StorageService_PhysicalMedium_SMART_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _StorageService_PhysicalMedium_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _StorageService_StorageArray_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _StorageService_LogicalVolume_Folder_UserAccess_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _StorageService_LogicalVolume_Folder_GroupAccess_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _StorageService_LogicalVolume_Folder_Quota_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _StorageService_LogicalVolume_Folder_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _StorageService_LogicalVolume_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _StorageService_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _StorageRequest_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _StorageReply_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _X_012345_Message_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _StorageService_Capabilities_default_instance_.DefaultConstruct();
  _StorageService_NetInfo_default_instance_.DefaultConstruct();
  _StorageService_UserGroup_default_instance_.DefaultConstruct();
  _StorageService_UserAccount_default_instance_.DefaultConstruct();
  _StorageService_NetworkServer_default_instance_.DefaultConstruct();
  _StorageService_FTPServer_AnonymousUser_default_instance_.DefaultConstruct();
  _StorageService_FTPServer_default_instance_.DefaultConstruct();
  _StorageService_SFTPServer_default_instance_.DefaultConstruct();
  _StorageService_HTTPServer_default_instance_.DefaultConstruct();
  _StorageService_HTTPSServer_default_instance_.DefaultConstruct();
  _StorageService_PhysicalMedium_SMART_default_instance_.DefaultConstruct();
  _StorageService_PhysicalMedium_default_instance_.DefaultConstruct();
  _StorageService_StorageArray_default_instance_.DefaultConstruct();
  _StorageService_LogicalVolume_Folder_UserAccess_default_instance_.DefaultConstruct();
  _StorageService_LogicalVolume_Folder_GroupAccess_default_instance_.DefaultConstruct();
  _StorageService_LogicalVolume_Folder_Quota_default_instance_.DefaultConstruct();
  _StorageService_LogicalVolume_Folder_default_instance_.DefaultConstruct();
  _StorageService_LogicalVolume_default_instance_.DefaultConstruct();
  _StorageService_default_instance_.DefaultConstruct();
  _StorageRequest_default_instance_.DefaultConstruct();
  _StorageReply_default_instance_.DefaultConstruct();
  _X_012345_Message_default_instance_.DefaultConstruct();
  _StorageService_FTPServer_default_instance_.get_mutable()->anonymous_user_ = const_cast< ::tr140::StorageService_FTPServer_AnonymousUser*>(
      ::tr140::StorageService_FTPServer_AnonymousUser::internal_default_instance());
  _StorageService_PhysicalMedium_default_instance_.get_mutable()->smart_ = const_cast< ::tr140::StorageService_PhysicalMedium_SMART*>(
      ::tr140::StorageService_PhysicalMedium_SMART::internal_default_instance());
  _StorageService_LogicalVolume_Folder_default_instance_.get_mutable()->quota_ = const_cast< ::tr140::StorageService_LogicalVolume_Folder_Quota*>(
      ::tr140::StorageService_LogicalVolume_Folder_Quota::internal_default_instance());
  _StorageService_default_instance_.get_mutable()->capabilities_ = const_cast< ::tr140::StorageService_Capabilities*>(
      ::tr140::StorageService_Capabilities::internal_default_instance());
  _StorageService_default_instance_.get_mutable()->net_info_ = const_cast< ::tr140::StorageService_NetInfo*>(
      ::tr140::StorageService_NetInfo::internal_default_instance());
  _StorageService_default_instance_.get_mutable()->network_server_ = const_cast< ::tr140::StorageService_NetworkServer*>(
      ::tr140::StorageService_NetworkServer::internal_default_instance());
  _StorageService_default_instance_.get_mutable()->ftpserver_ = const_cast< ::tr140::StorageService_FTPServer*>(
      ::tr140::StorageService_FTPServer::internal_default_instance());
  _StorageService_default_instance_.get_mutable()->sftpserver_ = const_cast< ::tr140::StorageService_SFTPServer*>(
      ::tr140::StorageService_SFTPServer::internal_default_instance());
  _StorageService_default_instance_.get_mutable()->httpserver_ = const_cast< ::tr140::StorageService_HTTPServer*>(
      ::tr140::StorageService_HTTPServer::internal_default_instance());
  _StorageService_default_instance_.get_mutable()->httpsserver_ = const_cast< ::tr140::StorageService_HTTPSServer*>(
      ::tr140::StorageService_HTTPSServer::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014tr-140.proto\022\005tr140\"\333 \n\016StorageService"
      "\022\016\n\006enable\030\001 \001(\010\022\r\n\005alias\030\002 \001(\t\022)\n!physi"
      "cal_medium_number_of_entries\030\003 \001(\r\022\'\n\037st"
      "orage_array_number_of_entries\030\004 \001(\r\022(\n l"
      "ogical_volume_number_of_entries\030\005 \001(\r\022&\n"
      "\036user_account_number_of_entries\030\006 \001(\r\022$\n"
      "\034user_group_number_of_entries\030\007 \001(\r\0228\n\014c"
      "apabilities\030\010 \001(\0132\".tr140.StorageService"
      ".Capabilities\022/\n\010net_info\030\t \001(\0132\035.tr140."
      "StorageService.NetInfo\0223\n\nuser_group\030\n \003"
      "(\0132\037.tr140.StorageService.UserGroup\0227\n\014u"
      "ser_account\030\013 \003(\0132!.tr140.StorageService"
      ".UserAccount\022;\n\016network_server\030\014 \001(\0132#.t"
      "r140.StorageService.NetworkServer\0222\n\tftp"
      "server\030\r \001(\0132\037.tr140.StorageService.FTPS"
      "erver\0224\n\nsftpserver\030\016 \001(\0132 .tr140.Storag"
      "eService.SFTPServer\0224\n\nhttpserver\030\017 \001(\0132"
      " .tr140.StorageService.HTTPServer\0226\n\013htt"
      "psserver\030\020 \001(\0132!.tr140.StorageService.HT"
      "TPSServer\022=\n\017physical_medium\030\021 \003(\0132$.tr1"
      "40.StorageService.PhysicalMedium\0229\n\rstor"
      "age_array\030\022 \003(\0132\".tr140.StorageService.S"
      "torageArray\022;\n\016logical_volume\030\023 \003(\0132#.tr"
      "140.StorageService.LogicalVolume\032\203\002\n\014Cap"
      "abilities\022\022\n\nftpcapable\030\001 \001(\010\022\023\n\013sftpcap"
      "able\030\002 \001(\010\022\023\n\013httpcapable\030\003 \001(\010\022\024\n\014https"
      "capable\030\004 \001(\010\022\024\n\014httpwritable\030\005 \001(\010\022#\n\033s"
      "upported_network_protocols\030\006 \001(\t\022#\n\033supp"
      "orted_file_system_types\030\007 \001(\t\022\034\n\024support"
      "ed_raid_types\030\010 \001(\t\022!\n\031volume_encryption"
      "_capable\030\t \001(\010\0321\n\007NetInfo\022\021\n\thost_name\030\001"
      " \001(\t\022\023\n\013domain_name\030\002 \001(\t\032>\n\tUserGroup\022\016"
      "\n\006enable\030\001 \001(\010\022\r\n\005alias\030\002 \001(\t\022\022\n\ngroup_n"
      "ame\030\003 \001(\t\032\245\001\n\013UserAccount\022\016\n\006enable\030\001 \001("
      "\010\022\r\n\005alias\030\002 \001(\t\022\020\n\010username\030\003 \001(\t\022\020\n\010pa"
      "ssword\030\004 \001(\t\022 \n\030user_group_participation"
      "\030\005 \001(\t\022\027\n\017allow_ftpaccess\030\006 \001(\010\022\030\n\020allow"
      "_httpaccess\030\007 \001(\010\032k\n\rNetworkServer\022\021\n\taf"
      "penable\030\001 \001(\010\022\021\n\tnfsenable\030\002 \001(\010\022\021\n\tsmbe"
      "nable\030\003 \001(\010\022!\n\031network_protocol_auth_req"
      "\030\004 \001(\010\032\205\002\n\tFTPServer\022\016\n\006enable\030\001 \001(\010\022\016\n\006"
      "status\030\002 \001(\t\022\025\n\rmax_num_users\030\003 \001(\r\022\021\n\ti"
      "dle_time\030\004 \001(\r\022\023\n\013port_number\030\005 \001(\r\022E\n\016a"
      "nonymous_user\030\006 \001(\0132-.tr140.StorageServi"
      "ce.FTPServer.AnonymousUser\032R\n\rAnonymousU"
      "ser\022\016\n\006enable\030\001 \001(\010\022\027\n\017starting_folder\030\002"
      " \001(\t\022\030\n\020read_only_access\030\003 \001(\010\032k\n\nSFTPSe"
      "rver\022\016\n\006enable\030\001 \001(\010\022\016\n\006status\030\002 \001(\t\022\025\n\r"
      "max_num_users\030\003 \001(\r\022\021\n\tidle_time\030\004 \001(\r\022\023"
      "\n\013port_number\030\005 \001(\r\032\244\001\n\nHTTPServer\022\016\n\006en"
      "able\030\001 \001(\010\022\016\n\006status\030\002 \001(\t\022\025\n\rmax_num_us"
      "ers\030\003 \001(\r\022\021\n\tidle_time\030\004 \001(\r\022\033\n\023httpwrit"
      "ing_enabled\030\005 \001(\010\022\023\n\013port_number\030\006 \001(\r\022\032"
      "\n\022authentication_req\030\007 \001(\010\032\245\001\n\013HTTPSServ"
      "er\022\016\n\006enable\030\001 \001(\010\022\016\n\006status\030\002 \001(\t\022\025\n\rma"
      "x_num_users\030\003 \001(\r\022\021\n\tidle_time\030\004 \001(\r\022\033\n\023"
      "httpwriting_enabled\030\005 \001(\010\022\023\n\013port_number"
      "\030\006 \001(\r\022\032\n\022authentication_req\030\007 \001(\010\032\326\005\n\016P"
      "hysicalMedium\022\r\n\005alias\030\001 \001(\t\022\014\n\004name\030\002 \001"
      "(\t\022\016\n\006vendor\030\003 \001(\t\022\r\n\005model\030\004 \001(\t\022\025\n\rser"
      "ial_number\030\005 \001(\t\022\030\n\020firmware_version\030\006 \001"
      "(\t\022\027\n\017connection_type\030\007 \001(\t\022\014\n\004type\030\010 \001("
      "\t\022\021\n\tremovable\030\t \001(\010\022\020\n\010capacity\030\n \001(\r\022\016"
      "\n\006status\030\013 \001(\t\022\016\n\006uptime\030\014 \001(\r\022\024\n\014smartc"
      "apable\030\r \001(\010\022\016\n\006health\030\016 \001(\t\022\025\n\rhot_swap"
      "pable\030\017 \001(\010\0229\n\005smart\030\020 \001(\0132*.tr140.Stora"
      "geService.PhysicalMedium.SMART\032\362\002\n\005SMART"
      "\022!\n\031reallocated_sectors_count\030\001 \001(\r\022\026\n\016p"
      "ower_on_hours\030\002 \001(\r\022\030\n\020spin_retry_count\030"
      "\003 \001(\r\022\031\n\021power_cycle_count\030\004 \001(\r\022\023\n\013temp"
      "erature\030\005 \001(\r\022 \n\030reallocation_event_coun"
      "t\030\006 \001(\r\022$\n\034current_pending_sector_count\030"
      "\007 \001(\r\022\"\n\032uncorrectable_sector_count\030\010 \001("
      "\r\022\023\n\013read_errors\030\t \001(\r\022\030\n\020soft_read_erro"
      "rs\030\n \001(\r\022\024\n\014write_errors\030\013 \001(\r\022\030\n\020spares"
      "_remaining\030\014 \001(\r\022\031\n\021predicted_failure\030\r "
      "\001(\005\032\232\001\n\014StorageArray\022\r\n\005alias\030\001 \001(\t\022\014\n\004n"
      "ame\030\002 \001(\t\022\016\n\006status\030\003 \001(\t\022\016\n\006enable\030\004 \001("
      "\010\022\021\n\traid_type\030\005 \001(\t\022\027\n\017usable_capacity\030"
      "\006 \001(\r\022!\n\031physical_medium_reference\030\007 \001(\t"
      "\032\360\007\n\rLogicalVolume\022\r\n\005alias\030\001 \001(\t\022\014\n\004nam"
      "e\030\002 \001(\t\022\016\n\006status\030\003 \001(\t\022\016\n\006enable\030\004 \001(\010\022"
      "\032\n\022physical_reference\030\005 \001(\t\022\023\n\013file_syst"
      "em\030\006 \001(\t\022\020\n\010capacity\030\007 \001(\r\022\022\n\nused_space"
      "\030\010 \001(\r\022\027\n\017threshold_limit\030\t \001(\r\022\031\n\021thres"
      "hold_reached\030\n \001(\010\022\021\n\tencrypted\030\013 \001(\010\022 \n"
      "\030folder_number_of_entries\030\014 \001(\r\022:\n\006folde"
      "r\030\r \003(\0132*.tr140.StorageService.LogicalVo"
      "lume.Folder\032\245\005\n\006Folder\022\r\n\005alias\030\001 \001(\t\022\014\n"
      "\004name\030\002 \001(\t\022\016\n\006enable\030\003 \001(\010\022\033\n\023user_acco"
      "unt_access\030\004 \001(\r\022%\n\035user_access_number_o"
      "f_entries\030\005 \001(\r\022&\n\036group_access_number_o"
      "f_entries\030\006 \001(\r\022J\n\013user_access\030\007 \003(\01325.t"
      "r140.StorageService.LogicalVolume.Folder"
      ".UserAccess\022L\n\014group_access\030\010 \003(\01326.tr14"
      "0.StorageService.LogicalVolume.Folder.Gr"
      "oupAccess\022\?\n\005quota\030\t \001(\01320.tr140.Storage"
      "Service.LogicalVolume.Folder.Quota\032X\n\nUs"
      "erAccess\022\r\n\005alias\030\001 \001(\t\022\016\n\006enable\030\002 \001(\010\022"
      "\026\n\016user_reference\030\003 \001(\t\022\023\n\013permissions\030\004"
      " \001(\r\032Z\n\013GroupAccess\022\r\n\005alias\030\001 \001(\t\022\016\n\006en"
      "able\030\002 \001(\010\022\027\n\017group_reference\030\003 \001(\t\022\023\n\013p"
      "ermissions\030\004 \001(\r\032q\n\005Quota\022\016\n\006enable\030\001 \001("
      "\010\022\020\n\010capacity\030\002 \001(\r\022\022\n\nused_space\030\003 \001(\r\022"
      "\027\n\017threshold_limit\030\004 \001(\r\022\031\n\021threshold_re"
      "ached\030\005 \001(\010\" \n\016StorageRequest\022\016\n\006unused\030"
      "\001 \001(\005\"\036\n\014StorageReply\022\016\n\006unused\030\001 \001(\005\"\"\n"
      "\020X_012345_Message\022\016\n\006unused\030\001 \001(\0052\357\030\n\007St"
      "orage\022C\n\021GetStorageService\022\025.tr140.Stora"
      "geRequest\032\025.tr140.StorageService\"\000\022A\n\021Se"
      "tStorageService\022\025.tr140.StorageService\032\023"
      ".tr140.StorageReply\"\000\022N\n\017GetCapabilities"
      "\022\025.tr140.StorageRequest\032\".tr140.StorageS"
      "ervice.Capabilities\"\000\022L\n\017SetCapabilities"
      "\022\".tr140.StorageService.Capabilities\032\023.t"
      "r140.StorageReply\"\000\022D\n\nGetNetInfo\022\025.tr14"
      "0.StorageRequest\032\035.tr140.StorageService."
      "NetInfo\"\000\022B\n\nSetNetInfo\022\035.tr140.StorageS"
      "ervice.NetInfo\032\023.tr140.StorageReply\"\000\022J\n"
      "\014GetUserGroup\022\025.tr140.StorageRequest\032\037.t"
      "r140.StorageService.UserGroup\"\0000\001\022H\n\014Set"
      "UserGroup\022\037.tr140.StorageService.UserGro"
      "up\032\023.tr140.StorageReply\"\000(\001\022N\n\016GetUserAc"
      "count\022\025.tr140.StorageRequest\032!.tr140.Sto"
      "rageService.UserAccount\"\0000\001\022L\n\016SetUserAc"
      "count\022!.tr140.StorageService.UserAccount"
      "\032\023.tr140.StorageReply\"\000(\001\022P\n\020GetNetworkS"
      "erver\022\025.tr140.StorageRequest\032#.tr140.Sto"
      "rageService.NetworkServer\"\000\022N\n\020SetNetwor"
      "kServer\022#.tr140.StorageService.NetworkSe"
      "rver\032\023.tr140.StorageReply\"\000\022H\n\014GetFTPSer"
      "ver\022\025.tr140.StorageRequest\032\037.tr140.Stora"
      "geService.FTPServer\"\000\022F\n\014SetFTPServer\022\037."
      "tr140.StorageService.FTPServer\032\023.tr140.S"
      "torageReply\"\000\022Z\n\020GetAnonymousUser\022\025.tr14"
      "0.StorageRequest\032-.tr140.StorageService."
      "FTPServer.AnonymousUser\"\000\022X\n\020SetAnonymou"
      "sUser\022-.tr140.StorageService.FTPServer.A"
      "nonymousUser\032\023.tr140.StorageReply\"\000\022J\n\rG"
      "etSFTPServer\022\025.tr140.StorageRequest\032 .tr"
      "140.StorageService.SFTPServer\"\000\022H\n\rSetSF"
      "TPServer\022 .tr140.StorageService.SFTPServ"
      "er\032\023.tr140.StorageReply\"\000\022J\n\rGetHTTPServ"
      "er\022\025.tr140.StorageRequest\032 .tr140.Storag"
      "eService.HTTPServer\"\000\022H\n\rSetHTTPServer\022 "
      ".tr140.StorageService.HTTPServer\032\023.tr140"
      ".StorageReply\"\000\022L\n\016GetHTTPSServer\022\025.tr14"
      "0.StorageRequest\032!.tr140.StorageService."
      "HTTPSServer\"\000\022J\n\016SetHTTPSServer\022!.tr140."
      "StorageService.HTTPSServer\032\023.tr140.Stora"
      "geReply\"\000\022T\n\021GetPhysicalMedium\022\025.tr140.S"
      "torageRequest\032$.tr140.StorageService.Phy"
      "sicalMedium\"\0000\001\022R\n\021SetPhysicalMedium\022$.t"
      "r140.StorageService.PhysicalMedium\032\023.tr1"
      "40.StorageReply\"\000(\001\022O\n\010GetSMART\022\025.tr140."
      "StorageRequest\032*.tr140.StorageService.Ph"
      "ysicalMedium.SMART\"\000\022M\n\010SetSMART\022*.tr140"
      ".StorageService.PhysicalMedium.SMART\032\023.t"
      "r140.StorageReply\"\000\022P\n\017GetStorageArray\022\025"
      ".tr140.StorageRequest\032\".tr140.StorageSer"
      "vice.StorageArray\"\0000\001\022N\n\017SetStorageArray"
      "\022\".tr140.StorageService.StorageArray\032\023.t"
      "r140.StorageReply\"\000(\001\022R\n\020GetLogicalVolum"
      "e\022\025.tr140.StorageRequest\032#.tr140.Storage"
      "Service.LogicalVolume\"\0000\001\022P\n\020SetLogicalV"
      "olume\022#.tr140.StorageService.LogicalVolu"
      "me\032\023.tr140.StorageReply\"\000(\001\022R\n\tGetFolder"
      "\022\025.tr140.StorageRequest\032*.tr140.StorageS"
      "ervice.LogicalVolume.Folder\"\0000\001\022P\n\tSetFo"
      "lder\022*.tr140.StorageService.LogicalVolum"
      "e.Folder\032\023.tr140.StorageReply\"\000(\001\022a\n\rGet"
      "UserAccess\022\025.tr140.StorageRequest\0325.tr14"
      "0.StorageService.LogicalVolume.Folder.Us"
      "erAccess\"\0000\001\022_\n\rSetUserAccess\0225.tr140.St"
      "orageService.LogicalVolume.Folder.UserAc"
      "cess\032\023.tr140.StorageReply\"\000(\001\022c\n\016GetGrou"
      "pAccess\022\025.tr140.StorageRequest\0326.tr140.S"
      "torageService.LogicalVolume.Folder.Group"
      "Access\"\0000\001\022a\n\016SetGroupAccess\0226.tr140.Sto"
      "rageService.LogicalVolume.Folder.GroupAc"
      "cess\032\023.tr140.StorageReply\"\000(\001\022U\n\010GetQuot"
      "a\022\025.tr140.StorageRequest\0320.tr140.Storage"
      "Service.LogicalVolume.Folder.Quota\"\000\022S\n\010"
      "SetQuota\0220.tr140.StorageService.LogicalV"
      "olume.Folder.Quota\032\023.tr140.StorageReply\""
      "\000\022`\n\024GetMatchedUserAccout\022\037.tr140.Storag"
      "eService.UserGroup\032!.tr140.StorageServic"
      "e.UserAccount\"\000(\0010\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 7507);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tr-140.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tr_2d140_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageService_Capabilities::kFtpcapableFieldNumber;
const int StorageService_Capabilities::kSftpcapableFieldNumber;
const int StorageService_Capabilities::kHttpcapableFieldNumber;
const int StorageService_Capabilities::kHttpscapableFieldNumber;
const int StorageService_Capabilities::kHttpwritableFieldNumber;
const int StorageService_Capabilities::kSupportedNetworkProtocolsFieldNumber;
const int StorageService_Capabilities::kSupportedFileSystemTypesFieldNumber;
const int StorageService_Capabilities::kSupportedRaidTypesFieldNumber;
const int StorageService_Capabilities::kVolumeEncryptionCapableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageService_Capabilities::StorageService_Capabilities()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tr_2d140_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tr140.StorageService.Capabilities)
}
StorageService_Capabilities::StorageService_Capabilities(const StorageService_Capabilities& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  supported_network_protocols_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.supported_network_protocols().size() > 0) {
    supported_network_protocols_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.supported_network_protocols_);
  }
  supported_file_system_types_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.supported_file_system_types().size() > 0) {
    supported_file_system_types_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.supported_file_system_types_);
  }
  supported_raid_types_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.supported_raid_types().size() > 0) {
    supported_raid_types_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.supported_raid_types_);
  }
  ::memcpy(&ftpcapable_, &from.ftpcapable_,
    reinterpret_cast<char*>(&volume_encryption_capable_) -
    reinterpret_cast<char*>(&ftpcapable_) + sizeof(volume_encryption_capable_));
  // @@protoc_insertion_point(copy_constructor:tr140.StorageService.Capabilities)
}

void StorageService_Capabilities::SharedCtor() {
  supported_network_protocols_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  supported_file_system_types_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  supported_raid_types_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ftpcapable_, 0, reinterpret_cast<char*>(&volume_encryption_capable_) -
    reinterpret_cast<char*>(&ftpcapable_) + sizeof(volume_encryption_capable_));
  _cached_size_ = 0;
}

StorageService_Capabilities::~StorageService_Capabilities() {
  // @@protoc_insertion_point(destructor:tr140.StorageService.Capabilities)
  SharedDtor();
}

void StorageService_Capabilities::SharedDtor() {
  supported_network_protocols_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  supported_file_system_types_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  supported_raid_types_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StorageService_Capabilities::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageService_Capabilities::descriptor() {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StorageService_Capabilities& StorageService_Capabilities::default_instance() {
  protobuf_tr_2d140_2eproto::InitDefaults();
  return *internal_default_instance();
}

StorageService_Capabilities* StorageService_Capabilities::New(::google::protobuf::Arena* arena) const {
  StorageService_Capabilities* n = new StorageService_Capabilities;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StorageService_Capabilities::Clear() {
// @@protoc_insertion_point(message_clear_start:tr140.StorageService.Capabilities)
  supported_network_protocols_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  supported_file_system_types_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  supported_raid_types_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ftpcapable_, 0, reinterpret_cast<char*>(&volume_encryption_capable_) -
    reinterpret_cast<char*>(&ftpcapable_) + sizeof(volume_encryption_capable_));
}

bool StorageService_Capabilities::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tr140.StorageService.Capabilities)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool ftpcapable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ftpcapable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool sftpcapable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sftpcapable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool httpcapable = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &httpcapable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool httpscapable = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &httpscapable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool httpwritable = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &httpwritable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string supported_network_protocols = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_supported_network_protocols()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->supported_network_protocols().data(), this->supported_network_protocols().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.Capabilities.supported_network_protocols"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string supported_file_system_types = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_supported_file_system_types()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->supported_file_system_types().data(), this->supported_file_system_types().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.Capabilities.supported_file_system_types"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string supported_raid_types = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_supported_raid_types()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->supported_raid_types().data(), this->supported_raid_types().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.Capabilities.supported_raid_types"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool volume_encryption_capable = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &volume_encryption_capable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tr140.StorageService.Capabilities)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tr140.StorageService.Capabilities)
  return false;
#undef DO_
}

void StorageService_Capabilities::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tr140.StorageService.Capabilities)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ftpcapable = 1;
  if (this->ftpcapable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ftpcapable(), output);
  }

  // bool sftpcapable = 2;
  if (this->sftpcapable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->sftpcapable(), output);
  }

  // bool httpcapable = 3;
  if (this->httpcapable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->httpcapable(), output);
  }

  // bool httpscapable = 4;
  if (this->httpscapable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->httpscapable(), output);
  }

  // bool httpwritable = 5;
  if (this->httpwritable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->httpwritable(), output);
  }

  // string supported_network_protocols = 6;
  if (this->supported_network_protocols().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->supported_network_protocols().data(), this->supported_network_protocols().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.Capabilities.supported_network_protocols");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->supported_network_protocols(), output);
  }

  // string supported_file_system_types = 7;
  if (this->supported_file_system_types().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->supported_file_system_types().data(), this->supported_file_system_types().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.Capabilities.supported_file_system_types");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->supported_file_system_types(), output);
  }

  // string supported_raid_types = 8;
  if (this->supported_raid_types().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->supported_raid_types().data(), this->supported_raid_types().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.Capabilities.supported_raid_types");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->supported_raid_types(), output);
  }

  // bool volume_encryption_capable = 9;
  if (this->volume_encryption_capable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->volume_encryption_capable(), output);
  }

  // @@protoc_insertion_point(serialize_end:tr140.StorageService.Capabilities)
}

::google::protobuf::uint8* StorageService_Capabilities::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tr140.StorageService.Capabilities)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ftpcapable = 1;
  if (this->ftpcapable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ftpcapable(), target);
  }

  // bool sftpcapable = 2;
  if (this->sftpcapable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->sftpcapable(), target);
  }

  // bool httpcapable = 3;
  if (this->httpcapable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->httpcapable(), target);
  }

  // bool httpscapable = 4;
  if (this->httpscapable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->httpscapable(), target);
  }

  // bool httpwritable = 5;
  if (this->httpwritable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->httpwritable(), target);
  }

  // string supported_network_protocols = 6;
  if (this->supported_network_protocols().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->supported_network_protocols().data(), this->supported_network_protocols().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.Capabilities.supported_network_protocols");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->supported_network_protocols(), target);
  }

  // string supported_file_system_types = 7;
  if (this->supported_file_system_types().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->supported_file_system_types().data(), this->supported_file_system_types().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.Capabilities.supported_file_system_types");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->supported_file_system_types(), target);
  }

  // string supported_raid_types = 8;
  if (this->supported_raid_types().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->supported_raid_types().data(), this->supported_raid_types().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.Capabilities.supported_raid_types");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->supported_raid_types(), target);
  }

  // bool volume_encryption_capable = 9;
  if (this->volume_encryption_capable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->volume_encryption_capable(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tr140.StorageService.Capabilities)
  return target;
}

size_t StorageService_Capabilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tr140.StorageService.Capabilities)
  size_t total_size = 0;

  // string supported_network_protocols = 6;
  if (this->supported_network_protocols().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->supported_network_protocols());
  }

  // string supported_file_system_types = 7;
  if (this->supported_file_system_types().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->supported_file_system_types());
  }

  // string supported_raid_types = 8;
  if (this->supported_raid_types().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->supported_raid_types());
  }

  // bool ftpcapable = 1;
  if (this->ftpcapable() != 0) {
    total_size += 1 + 1;
  }

  // bool sftpcapable = 2;
  if (this->sftpcapable() != 0) {
    total_size += 1 + 1;
  }

  // bool httpcapable = 3;
  if (this->httpcapable() != 0) {
    total_size += 1 + 1;
  }

  // bool httpscapable = 4;
  if (this->httpscapable() != 0) {
    total_size += 1 + 1;
  }

  // bool httpwritable = 5;
  if (this->httpwritable() != 0) {
    total_size += 1 + 1;
  }

  // bool volume_encryption_capable = 9;
  if (this->volume_encryption_capable() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageService_Capabilities::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tr140.StorageService.Capabilities)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageService_Capabilities* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageService_Capabilities>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tr140.StorageService.Capabilities)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tr140.StorageService.Capabilities)
    MergeFrom(*source);
  }
}

void StorageService_Capabilities::MergeFrom(const StorageService_Capabilities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tr140.StorageService.Capabilities)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.supported_network_protocols().size() > 0) {

    supported_network_protocols_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.supported_network_protocols_);
  }
  if (from.supported_file_system_types().size() > 0) {

    supported_file_system_types_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.supported_file_system_types_);
  }
  if (from.supported_raid_types().size() > 0) {

    supported_raid_types_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.supported_raid_types_);
  }
  if (from.ftpcapable() != 0) {
    set_ftpcapable(from.ftpcapable());
  }
  if (from.sftpcapable() != 0) {
    set_sftpcapable(from.sftpcapable());
  }
  if (from.httpcapable() != 0) {
    set_httpcapable(from.httpcapable());
  }
  if (from.httpscapable() != 0) {
    set_httpscapable(from.httpscapable());
  }
  if (from.httpwritable() != 0) {
    set_httpwritable(from.httpwritable());
  }
  if (from.volume_encryption_capable() != 0) {
    set_volume_encryption_capable(from.volume_encryption_capable());
  }
}

void StorageService_Capabilities::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tr140.StorageService.Capabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageService_Capabilities::CopyFrom(const StorageService_Capabilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tr140.StorageService.Capabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageService_Capabilities::IsInitialized() const {
  return true;
}

void StorageService_Capabilities::Swap(StorageService_Capabilities* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageService_Capabilities::InternalSwap(StorageService_Capabilities* other) {
  supported_network_protocols_.Swap(&other->supported_network_protocols_);
  supported_file_system_types_.Swap(&other->supported_file_system_types_);
  supported_raid_types_.Swap(&other->supported_raid_types_);
  std::swap(ftpcapable_, other->ftpcapable_);
  std::swap(sftpcapable_, other->sftpcapable_);
  std::swap(httpcapable_, other->httpcapable_);
  std::swap(httpscapable_, other->httpscapable_);
  std::swap(httpwritable_, other->httpwritable_);
  std::swap(volume_encryption_capable_, other->volume_encryption_capable_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StorageService_Capabilities::GetMetadata() const {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StorageService_Capabilities

// bool ftpcapable = 1;
void StorageService_Capabilities::clear_ftpcapable() {
  ftpcapable_ = false;
}
bool StorageService_Capabilities::ftpcapable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.Capabilities.ftpcapable)
  return ftpcapable_;
}
void StorageService_Capabilities::set_ftpcapable(bool value) {
  
  ftpcapable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.Capabilities.ftpcapable)
}

// bool sftpcapable = 2;
void StorageService_Capabilities::clear_sftpcapable() {
  sftpcapable_ = false;
}
bool StorageService_Capabilities::sftpcapable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.Capabilities.sftpcapable)
  return sftpcapable_;
}
void StorageService_Capabilities::set_sftpcapable(bool value) {
  
  sftpcapable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.Capabilities.sftpcapable)
}

// bool httpcapable = 3;
void StorageService_Capabilities::clear_httpcapable() {
  httpcapable_ = false;
}
bool StorageService_Capabilities::httpcapable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.Capabilities.httpcapable)
  return httpcapable_;
}
void StorageService_Capabilities::set_httpcapable(bool value) {
  
  httpcapable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.Capabilities.httpcapable)
}

// bool httpscapable = 4;
void StorageService_Capabilities::clear_httpscapable() {
  httpscapable_ = false;
}
bool StorageService_Capabilities::httpscapable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.Capabilities.httpscapable)
  return httpscapable_;
}
void StorageService_Capabilities::set_httpscapable(bool value) {
  
  httpscapable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.Capabilities.httpscapable)
}

// bool httpwritable = 5;
void StorageService_Capabilities::clear_httpwritable() {
  httpwritable_ = false;
}
bool StorageService_Capabilities::httpwritable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.Capabilities.httpwritable)
  return httpwritable_;
}
void StorageService_Capabilities::set_httpwritable(bool value) {
  
  httpwritable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.Capabilities.httpwritable)
}

// string supported_network_protocols = 6;
void StorageService_Capabilities::clear_supported_network_protocols() {
  supported_network_protocols_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_Capabilities::supported_network_protocols() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.Capabilities.supported_network_protocols)
  return supported_network_protocols_.GetNoArena();
}
void StorageService_Capabilities::set_supported_network_protocols(const ::std::string& value) {
  
  supported_network_protocols_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.Capabilities.supported_network_protocols)
}
#if LANG_CXX11
void StorageService_Capabilities::set_supported_network_protocols(::std::string&& value) {
  
  supported_network_protocols_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.Capabilities.supported_network_protocols)
}
#endif
void StorageService_Capabilities::set_supported_network_protocols(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  supported_network_protocols_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.Capabilities.supported_network_protocols)
}
void StorageService_Capabilities::set_supported_network_protocols(const char* value, size_t size) {
  
  supported_network_protocols_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.Capabilities.supported_network_protocols)
}
::std::string* StorageService_Capabilities::mutable_supported_network_protocols() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.Capabilities.supported_network_protocols)
  return supported_network_protocols_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_Capabilities::release_supported_network_protocols() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.Capabilities.supported_network_protocols)
  
  return supported_network_protocols_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_Capabilities::set_allocated_supported_network_protocols(::std::string* supported_network_protocols) {
  if (supported_network_protocols != NULL) {
    
  } else {
    
  }
  supported_network_protocols_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), supported_network_protocols);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.Capabilities.supported_network_protocols)
}

// string supported_file_system_types = 7;
void StorageService_Capabilities::clear_supported_file_system_types() {
  supported_file_system_types_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_Capabilities::supported_file_system_types() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.Capabilities.supported_file_system_types)
  return supported_file_system_types_.GetNoArena();
}
void StorageService_Capabilities::set_supported_file_system_types(const ::std::string& value) {
  
  supported_file_system_types_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.Capabilities.supported_file_system_types)
}
#if LANG_CXX11
void StorageService_Capabilities::set_supported_file_system_types(::std::string&& value) {
  
  supported_file_system_types_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.Capabilities.supported_file_system_types)
}
#endif
void StorageService_Capabilities::set_supported_file_system_types(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  supported_file_system_types_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.Capabilities.supported_file_system_types)
}
void StorageService_Capabilities::set_supported_file_system_types(const char* value, size_t size) {
  
  supported_file_system_types_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.Capabilities.supported_file_system_types)
}
::std::string* StorageService_Capabilities::mutable_supported_file_system_types() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.Capabilities.supported_file_system_types)
  return supported_file_system_types_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_Capabilities::release_supported_file_system_types() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.Capabilities.supported_file_system_types)
  
  return supported_file_system_types_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_Capabilities::set_allocated_supported_file_system_types(::std::string* supported_file_system_types) {
  if (supported_file_system_types != NULL) {
    
  } else {
    
  }
  supported_file_system_types_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), supported_file_system_types);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.Capabilities.supported_file_system_types)
}

// string supported_raid_types = 8;
void StorageService_Capabilities::clear_supported_raid_types() {
  supported_raid_types_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_Capabilities::supported_raid_types() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.Capabilities.supported_raid_types)
  return supported_raid_types_.GetNoArena();
}
void StorageService_Capabilities::set_supported_raid_types(const ::std::string& value) {
  
  supported_raid_types_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.Capabilities.supported_raid_types)
}
#if LANG_CXX11
void StorageService_Capabilities::set_supported_raid_types(::std::string&& value) {
  
  supported_raid_types_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.Capabilities.supported_raid_types)
}
#endif
void StorageService_Capabilities::set_supported_raid_types(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  supported_raid_types_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.Capabilities.supported_raid_types)
}
void StorageService_Capabilities::set_supported_raid_types(const char* value, size_t size) {
  
  supported_raid_types_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.Capabilities.supported_raid_types)
}
::std::string* StorageService_Capabilities::mutable_supported_raid_types() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.Capabilities.supported_raid_types)
  return supported_raid_types_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_Capabilities::release_supported_raid_types() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.Capabilities.supported_raid_types)
  
  return supported_raid_types_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_Capabilities::set_allocated_supported_raid_types(::std::string* supported_raid_types) {
  if (supported_raid_types != NULL) {
    
  } else {
    
  }
  supported_raid_types_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), supported_raid_types);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.Capabilities.supported_raid_types)
}

// bool volume_encryption_capable = 9;
void StorageService_Capabilities::clear_volume_encryption_capable() {
  volume_encryption_capable_ = false;
}
bool StorageService_Capabilities::volume_encryption_capable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.Capabilities.volume_encryption_capable)
  return volume_encryption_capable_;
}
void StorageService_Capabilities::set_volume_encryption_capable(bool value) {
  
  volume_encryption_capable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.Capabilities.volume_encryption_capable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageService_NetInfo::kHostNameFieldNumber;
const int StorageService_NetInfo::kDomainNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageService_NetInfo::StorageService_NetInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tr_2d140_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tr140.StorageService.NetInfo)
}
StorageService_NetInfo::StorageService_NetInfo(const StorageService_NetInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host_name().size() > 0) {
    host_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_name_);
  }
  domain_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain_name().size() > 0) {
    domain_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_name_);
  }
  // @@protoc_insertion_point(copy_constructor:tr140.StorageService.NetInfo)
}

void StorageService_NetInfo::SharedCtor() {
  host_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

StorageService_NetInfo::~StorageService_NetInfo() {
  // @@protoc_insertion_point(destructor:tr140.StorageService.NetInfo)
  SharedDtor();
}

void StorageService_NetInfo::SharedDtor() {
  host_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StorageService_NetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageService_NetInfo::descriptor() {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StorageService_NetInfo& StorageService_NetInfo::default_instance() {
  protobuf_tr_2d140_2eproto::InitDefaults();
  return *internal_default_instance();
}

StorageService_NetInfo* StorageService_NetInfo::New(::google::protobuf::Arena* arena) const {
  StorageService_NetInfo* n = new StorageService_NetInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StorageService_NetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tr140.StorageService.NetInfo)
  host_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StorageService_NetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tr140.StorageService.NetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string host_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host_name().data(), this->host_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.NetInfo.host_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string domain_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain_name().data(), this->domain_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.NetInfo.domain_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tr140.StorageService.NetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tr140.StorageService.NetInfo)
  return false;
#undef DO_
}

void StorageService_NetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tr140.StorageService.NetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host_name = 1;
  if (this->host_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.NetInfo.host_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host_name(), output);
  }

  // string domain_name = 2;
  if (this->domain_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain_name().data(), this->domain_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.NetInfo.domain_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->domain_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:tr140.StorageService.NetInfo)
}

::google::protobuf::uint8* StorageService_NetInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tr140.StorageService.NetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host_name = 1;
  if (this->host_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.NetInfo.host_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host_name(), target);
  }

  // string domain_name = 2;
  if (this->domain_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain_name().data(), this->domain_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.NetInfo.domain_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->domain_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tr140.StorageService.NetInfo)
  return target;
}

size_t StorageService_NetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tr140.StorageService.NetInfo)
  size_t total_size = 0;

  // string host_name = 1;
  if (this->host_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host_name());
  }

  // string domain_name = 2;
  if (this->domain_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageService_NetInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tr140.StorageService.NetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageService_NetInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageService_NetInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tr140.StorageService.NetInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tr140.StorageService.NetInfo)
    MergeFrom(*source);
  }
}

void StorageService_NetInfo::MergeFrom(const StorageService_NetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tr140.StorageService.NetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host_name().size() > 0) {

    host_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_name_);
  }
  if (from.domain_name().size() > 0) {

    domain_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_name_);
  }
}

void StorageService_NetInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tr140.StorageService.NetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageService_NetInfo::CopyFrom(const StorageService_NetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tr140.StorageService.NetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageService_NetInfo::IsInitialized() const {
  return true;
}

void StorageService_NetInfo::Swap(StorageService_NetInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageService_NetInfo::InternalSwap(StorageService_NetInfo* other) {
  host_name_.Swap(&other->host_name_);
  domain_name_.Swap(&other->domain_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StorageService_NetInfo::GetMetadata() const {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StorageService_NetInfo

// string host_name = 1;
void StorageService_NetInfo::clear_host_name() {
  host_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_NetInfo::host_name() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.NetInfo.host_name)
  return host_name_.GetNoArena();
}
void StorageService_NetInfo::set_host_name(const ::std::string& value) {
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.NetInfo.host_name)
}
#if LANG_CXX11
void StorageService_NetInfo::set_host_name(::std::string&& value) {
  
  host_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.NetInfo.host_name)
}
#endif
void StorageService_NetInfo::set_host_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.NetInfo.host_name)
}
void StorageService_NetInfo::set_host_name(const char* value, size_t size) {
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.NetInfo.host_name)
}
::std::string* StorageService_NetInfo::mutable_host_name() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.NetInfo.host_name)
  return host_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_NetInfo::release_host_name() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.NetInfo.host_name)
  
  return host_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_NetInfo::set_allocated_host_name(::std::string* host_name) {
  if (host_name != NULL) {
    
  } else {
    
  }
  host_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_name);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.NetInfo.host_name)
}

// string domain_name = 2;
void StorageService_NetInfo::clear_domain_name() {
  domain_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_NetInfo::domain_name() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.NetInfo.domain_name)
  return domain_name_.GetNoArena();
}
void StorageService_NetInfo::set_domain_name(const ::std::string& value) {
  
  domain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.NetInfo.domain_name)
}
#if LANG_CXX11
void StorageService_NetInfo::set_domain_name(::std::string&& value) {
  
  domain_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.NetInfo.domain_name)
}
#endif
void StorageService_NetInfo::set_domain_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.NetInfo.domain_name)
}
void StorageService_NetInfo::set_domain_name(const char* value, size_t size) {
  
  domain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.NetInfo.domain_name)
}
::std::string* StorageService_NetInfo::mutable_domain_name() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.NetInfo.domain_name)
  return domain_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_NetInfo::release_domain_name() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.NetInfo.domain_name)
  
  return domain_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_NetInfo::set_allocated_domain_name(::std::string* domain_name) {
  if (domain_name != NULL) {
    
  } else {
    
  }
  domain_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain_name);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.NetInfo.domain_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageService_UserGroup::kEnableFieldNumber;
const int StorageService_UserGroup::kAliasFieldNumber;
const int StorageService_UserGroup::kGroupNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageService_UserGroup::StorageService_UserGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tr_2d140_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tr140.StorageService.UserGroup)
}
StorageService_UserGroup::StorageService_UserGroup(const StorageService_UserGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.alias().size() > 0) {
    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_name().size() > 0) {
    group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_name_);
  }
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:tr140.StorageService.UserGroup)
}

void StorageService_UserGroup::SharedCtor() {
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enable_ = false;
  _cached_size_ = 0;
}

StorageService_UserGroup::~StorageService_UserGroup() {
  // @@protoc_insertion_point(destructor:tr140.StorageService.UserGroup)
  SharedDtor();
}

void StorageService_UserGroup::SharedDtor() {
  alias_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StorageService_UserGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageService_UserGroup::descriptor() {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StorageService_UserGroup& StorageService_UserGroup::default_instance() {
  protobuf_tr_2d140_2eproto::InitDefaults();
  return *internal_default_instance();
}

StorageService_UserGroup* StorageService_UserGroup::New(::google::protobuf::Arena* arena) const {
  StorageService_UserGroup* n = new StorageService_UserGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StorageService_UserGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:tr140.StorageService.UserGroup)
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enable_ = false;
}

bool StorageService_UserGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tr140.StorageService.UserGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string alias = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.UserGroup.alias"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string group_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_name().data(), this->group_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.UserGroup.group_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tr140.StorageService.UserGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tr140.StorageService.UserGroup)
  return false;
#undef DO_
}

void StorageService_UserGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tr140.StorageService.UserGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // string alias = 2;
  if (this->alias().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.UserGroup.alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->alias(), output);
  }

  // string group_name = 3;
  if (this->group_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.UserGroup.group_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->group_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:tr140.StorageService.UserGroup)
}

::google::protobuf::uint8* StorageService_UserGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tr140.StorageService.UserGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }

  // string alias = 2;
  if (this->alias().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.UserGroup.alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->alias(), target);
  }

  // string group_name = 3;
  if (this->group_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.UserGroup.group_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->group_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tr140.StorageService.UserGroup)
  return target;
}

size_t StorageService_UserGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tr140.StorageService.UserGroup)
  size_t total_size = 0;

  // string alias = 2;
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alias());
  }

  // string group_name = 3;
  if (this->group_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_name());
  }

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageService_UserGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tr140.StorageService.UserGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageService_UserGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageService_UserGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tr140.StorageService.UserGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tr140.StorageService.UserGroup)
    MergeFrom(*source);
  }
}

void StorageService_UserGroup::MergeFrom(const StorageService_UserGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tr140.StorageService.UserGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.alias().size() > 0) {

    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  if (from.group_name().size() > 0) {

    group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_name_);
  }
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
}

void StorageService_UserGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tr140.StorageService.UserGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageService_UserGroup::CopyFrom(const StorageService_UserGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tr140.StorageService.UserGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageService_UserGroup::IsInitialized() const {
  return true;
}

void StorageService_UserGroup::Swap(StorageService_UserGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageService_UserGroup::InternalSwap(StorageService_UserGroup* other) {
  alias_.Swap(&other->alias_);
  group_name_.Swap(&other->group_name_);
  std::swap(enable_, other->enable_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StorageService_UserGroup::GetMetadata() const {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StorageService_UserGroup

// bool enable = 1;
void StorageService_UserGroup::clear_enable() {
  enable_ = false;
}
bool StorageService_UserGroup::enable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.UserGroup.enable)
  return enable_;
}
void StorageService_UserGroup::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.UserGroup.enable)
}

// string alias = 2;
void StorageService_UserGroup::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_UserGroup::alias() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.UserGroup.alias)
  return alias_.GetNoArena();
}
void StorageService_UserGroup::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.UserGroup.alias)
}
#if LANG_CXX11
void StorageService_UserGroup::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.UserGroup.alias)
}
#endif
void StorageService_UserGroup::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.UserGroup.alias)
}
void StorageService_UserGroup::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.UserGroup.alias)
}
::std::string* StorageService_UserGroup::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.UserGroup.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_UserGroup::release_alias() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.UserGroup.alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_UserGroup::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.UserGroup.alias)
}

// string group_name = 3;
void StorageService_UserGroup::clear_group_name() {
  group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_UserGroup::group_name() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.UserGroup.group_name)
  return group_name_.GetNoArena();
}
void StorageService_UserGroup::set_group_name(const ::std::string& value) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.UserGroup.group_name)
}
#if LANG_CXX11
void StorageService_UserGroup::set_group_name(::std::string&& value) {
  
  group_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.UserGroup.group_name)
}
#endif
void StorageService_UserGroup::set_group_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.UserGroup.group_name)
}
void StorageService_UserGroup::set_group_name(const char* value, size_t size) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.UserGroup.group_name)
}
::std::string* StorageService_UserGroup::mutable_group_name() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.UserGroup.group_name)
  return group_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_UserGroup::release_group_name() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.UserGroup.group_name)
  
  return group_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_UserGroup::set_allocated_group_name(::std::string* group_name) {
  if (group_name != NULL) {
    
  } else {
    
  }
  group_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_name);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.UserGroup.group_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageService_UserAccount::kEnableFieldNumber;
const int StorageService_UserAccount::kAliasFieldNumber;
const int StorageService_UserAccount::kUsernameFieldNumber;
const int StorageService_UserAccount::kPasswordFieldNumber;
const int StorageService_UserAccount::kUserGroupParticipationFieldNumber;
const int StorageService_UserAccount::kAllowFtpaccessFieldNumber;
const int StorageService_UserAccount::kAllowHttpaccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageService_UserAccount::StorageService_UserAccount()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tr_2d140_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tr140.StorageService.UserAccount)
}
StorageService_UserAccount::StorageService_UserAccount(const StorageService_UserAccount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.alias().size() > 0) {
    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  user_group_participation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_group_participation().size() > 0) {
    user_group_participation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_group_participation_);
  }
  ::memcpy(&enable_, &from.enable_,
    reinterpret_cast<char*>(&allow_httpaccess_) -
    reinterpret_cast<char*>(&enable_) + sizeof(allow_httpaccess_));
  // @@protoc_insertion_point(copy_constructor:tr140.StorageService.UserAccount)
}

void StorageService_UserAccount::SharedCtor() {
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_group_participation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&enable_, 0, reinterpret_cast<char*>(&allow_httpaccess_) -
    reinterpret_cast<char*>(&enable_) + sizeof(allow_httpaccess_));
  _cached_size_ = 0;
}

StorageService_UserAccount::~StorageService_UserAccount() {
  // @@protoc_insertion_point(destructor:tr140.StorageService.UserAccount)
  SharedDtor();
}

void StorageService_UserAccount::SharedDtor() {
  alias_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_group_participation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StorageService_UserAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageService_UserAccount::descriptor() {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StorageService_UserAccount& StorageService_UserAccount::default_instance() {
  protobuf_tr_2d140_2eproto::InitDefaults();
  return *internal_default_instance();
}

StorageService_UserAccount* StorageService_UserAccount::New(::google::protobuf::Arena* arena) const {
  StorageService_UserAccount* n = new StorageService_UserAccount;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StorageService_UserAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:tr140.StorageService.UserAccount)
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_group_participation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&enable_, 0, reinterpret_cast<char*>(&allow_httpaccess_) -
    reinterpret_cast<char*>(&enable_) + sizeof(allow_httpaccess_));
}

bool StorageService_UserAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tr140.StorageService.UserAccount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string alias = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.UserAccount.alias"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.UserAccount.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.UserAccount.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_group_participation = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_group_participation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_group_participation().data(), this->user_group_participation().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.UserAccount.user_group_participation"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool allow_ftpaccess = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_ftpaccess_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool allow_httpaccess = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_httpaccess_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tr140.StorageService.UserAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tr140.StorageService.UserAccount)
  return false;
#undef DO_
}

void StorageService_UserAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tr140.StorageService.UserAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // string alias = 2;
  if (this->alias().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.UserAccount.alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->alias(), output);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.UserAccount.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  // string password = 4;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.UserAccount.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->password(), output);
  }

  // string user_group_participation = 5;
  if (this->user_group_participation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_group_participation().data(), this->user_group_participation().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.UserAccount.user_group_participation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->user_group_participation(), output);
  }

  // bool allow_ftpaccess = 6;
  if (this->allow_ftpaccess() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->allow_ftpaccess(), output);
  }

  // bool allow_httpaccess = 7;
  if (this->allow_httpaccess() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->allow_httpaccess(), output);
  }

  // @@protoc_insertion_point(serialize_end:tr140.StorageService.UserAccount)
}

::google::protobuf::uint8* StorageService_UserAccount::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tr140.StorageService.UserAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }

  // string alias = 2;
  if (this->alias().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.UserAccount.alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->alias(), target);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.UserAccount.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // string password = 4;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.UserAccount.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  // string user_group_participation = 5;
  if (this->user_group_participation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_group_participation().data(), this->user_group_participation().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.UserAccount.user_group_participation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user_group_participation(), target);
  }

  // bool allow_ftpaccess = 6;
  if (this->allow_ftpaccess() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->allow_ftpaccess(), target);
  }

  // bool allow_httpaccess = 7;
  if (this->allow_httpaccess() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->allow_httpaccess(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tr140.StorageService.UserAccount)
  return target;
}

size_t StorageService_UserAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tr140.StorageService.UserAccount)
  size_t total_size = 0;

  // string alias = 2;
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alias());
  }

  // string username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string password = 4;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // string user_group_participation = 5;
  if (this->user_group_participation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_group_participation());
  }

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // bool allow_ftpaccess = 6;
  if (this->allow_ftpaccess() != 0) {
    total_size += 1 + 1;
  }

  // bool allow_httpaccess = 7;
  if (this->allow_httpaccess() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageService_UserAccount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tr140.StorageService.UserAccount)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageService_UserAccount* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageService_UserAccount>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tr140.StorageService.UserAccount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tr140.StorageService.UserAccount)
    MergeFrom(*source);
  }
}

void StorageService_UserAccount::MergeFrom(const StorageService_UserAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tr140.StorageService.UserAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.alias().size() > 0) {

    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.user_group_participation().size() > 0) {

    user_group_participation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_group_participation_);
  }
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
  if (from.allow_ftpaccess() != 0) {
    set_allow_ftpaccess(from.allow_ftpaccess());
  }
  if (from.allow_httpaccess() != 0) {
    set_allow_httpaccess(from.allow_httpaccess());
  }
}

void StorageService_UserAccount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tr140.StorageService.UserAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageService_UserAccount::CopyFrom(const StorageService_UserAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tr140.StorageService.UserAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageService_UserAccount::IsInitialized() const {
  return true;
}

void StorageService_UserAccount::Swap(StorageService_UserAccount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageService_UserAccount::InternalSwap(StorageService_UserAccount* other) {
  alias_.Swap(&other->alias_);
  username_.Swap(&other->username_);
  password_.Swap(&other->password_);
  user_group_participation_.Swap(&other->user_group_participation_);
  std::swap(enable_, other->enable_);
  std::swap(allow_ftpaccess_, other->allow_ftpaccess_);
  std::swap(allow_httpaccess_, other->allow_httpaccess_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StorageService_UserAccount::GetMetadata() const {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StorageService_UserAccount

// bool enable = 1;
void StorageService_UserAccount::clear_enable() {
  enable_ = false;
}
bool StorageService_UserAccount::enable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.UserAccount.enable)
  return enable_;
}
void StorageService_UserAccount::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.UserAccount.enable)
}

// string alias = 2;
void StorageService_UserAccount::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_UserAccount::alias() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.UserAccount.alias)
  return alias_.GetNoArena();
}
void StorageService_UserAccount::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.UserAccount.alias)
}
#if LANG_CXX11
void StorageService_UserAccount::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.UserAccount.alias)
}
#endif
void StorageService_UserAccount::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.UserAccount.alias)
}
void StorageService_UserAccount::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.UserAccount.alias)
}
::std::string* StorageService_UserAccount::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.UserAccount.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_UserAccount::release_alias() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.UserAccount.alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_UserAccount::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.UserAccount.alias)
}

// string username = 3;
void StorageService_UserAccount::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_UserAccount::username() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.UserAccount.username)
  return username_.GetNoArena();
}
void StorageService_UserAccount::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.UserAccount.username)
}
#if LANG_CXX11
void StorageService_UserAccount::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.UserAccount.username)
}
#endif
void StorageService_UserAccount::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.UserAccount.username)
}
void StorageService_UserAccount::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.UserAccount.username)
}
::std::string* StorageService_UserAccount::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.UserAccount.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_UserAccount::release_username() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.UserAccount.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_UserAccount::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.UserAccount.username)
}

// string password = 4;
void StorageService_UserAccount::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_UserAccount::password() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.UserAccount.password)
  return password_.GetNoArena();
}
void StorageService_UserAccount::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.UserAccount.password)
}
#if LANG_CXX11
void StorageService_UserAccount::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.UserAccount.password)
}
#endif
void StorageService_UserAccount::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.UserAccount.password)
}
void StorageService_UserAccount::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.UserAccount.password)
}
::std::string* StorageService_UserAccount::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.UserAccount.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_UserAccount::release_password() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.UserAccount.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_UserAccount::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.UserAccount.password)
}

// string user_group_participation = 5;
void StorageService_UserAccount::clear_user_group_participation() {
  user_group_participation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_UserAccount::user_group_participation() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.UserAccount.user_group_participation)
  return user_group_participation_.GetNoArena();
}
void StorageService_UserAccount::set_user_group_participation(const ::std::string& value) {
  
  user_group_participation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.UserAccount.user_group_participation)
}
#if LANG_CXX11
void StorageService_UserAccount::set_user_group_participation(::std::string&& value) {
  
  user_group_participation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.UserAccount.user_group_participation)
}
#endif
void StorageService_UserAccount::set_user_group_participation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_group_participation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.UserAccount.user_group_participation)
}
void StorageService_UserAccount::set_user_group_participation(const char* value, size_t size) {
  
  user_group_participation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.UserAccount.user_group_participation)
}
::std::string* StorageService_UserAccount::mutable_user_group_participation() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.UserAccount.user_group_participation)
  return user_group_participation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_UserAccount::release_user_group_participation() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.UserAccount.user_group_participation)
  
  return user_group_participation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_UserAccount::set_allocated_user_group_participation(::std::string* user_group_participation) {
  if (user_group_participation != NULL) {
    
  } else {
    
  }
  user_group_participation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_group_participation);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.UserAccount.user_group_participation)
}

// bool allow_ftpaccess = 6;
void StorageService_UserAccount::clear_allow_ftpaccess() {
  allow_ftpaccess_ = false;
}
bool StorageService_UserAccount::allow_ftpaccess() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.UserAccount.allow_ftpaccess)
  return allow_ftpaccess_;
}
void StorageService_UserAccount::set_allow_ftpaccess(bool value) {
  
  allow_ftpaccess_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.UserAccount.allow_ftpaccess)
}

// bool allow_httpaccess = 7;
void StorageService_UserAccount::clear_allow_httpaccess() {
  allow_httpaccess_ = false;
}
bool StorageService_UserAccount::allow_httpaccess() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.UserAccount.allow_httpaccess)
  return allow_httpaccess_;
}
void StorageService_UserAccount::set_allow_httpaccess(bool value) {
  
  allow_httpaccess_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.UserAccount.allow_httpaccess)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageService_NetworkServer::kAfpenableFieldNumber;
const int StorageService_NetworkServer::kNfsenableFieldNumber;
const int StorageService_NetworkServer::kSmbenableFieldNumber;
const int StorageService_NetworkServer::kNetworkProtocolAuthReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageService_NetworkServer::StorageService_NetworkServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tr_2d140_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tr140.StorageService.NetworkServer)
}
StorageService_NetworkServer::StorageService_NetworkServer(const StorageService_NetworkServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&afpenable_, &from.afpenable_,
    reinterpret_cast<char*>(&network_protocol_auth_req_) -
    reinterpret_cast<char*>(&afpenable_) + sizeof(network_protocol_auth_req_));
  // @@protoc_insertion_point(copy_constructor:tr140.StorageService.NetworkServer)
}

void StorageService_NetworkServer::SharedCtor() {
  ::memset(&afpenable_, 0, reinterpret_cast<char*>(&network_protocol_auth_req_) -
    reinterpret_cast<char*>(&afpenable_) + sizeof(network_protocol_auth_req_));
  _cached_size_ = 0;
}

StorageService_NetworkServer::~StorageService_NetworkServer() {
  // @@protoc_insertion_point(destructor:tr140.StorageService.NetworkServer)
  SharedDtor();
}

void StorageService_NetworkServer::SharedDtor() {
}

void StorageService_NetworkServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageService_NetworkServer::descriptor() {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StorageService_NetworkServer& StorageService_NetworkServer::default_instance() {
  protobuf_tr_2d140_2eproto::InitDefaults();
  return *internal_default_instance();
}

StorageService_NetworkServer* StorageService_NetworkServer::New(::google::protobuf::Arena* arena) const {
  StorageService_NetworkServer* n = new StorageService_NetworkServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StorageService_NetworkServer::Clear() {
// @@protoc_insertion_point(message_clear_start:tr140.StorageService.NetworkServer)
  ::memset(&afpenable_, 0, reinterpret_cast<char*>(&network_protocol_auth_req_) -
    reinterpret_cast<char*>(&afpenable_) + sizeof(network_protocol_auth_req_));
}

bool StorageService_NetworkServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tr140.StorageService.NetworkServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool afpenable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &afpenable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool nfsenable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &nfsenable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool smbenable = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &smbenable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool network_protocol_auth_req = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &network_protocol_auth_req_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tr140.StorageService.NetworkServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tr140.StorageService.NetworkServer)
  return false;
#undef DO_
}

void StorageService_NetworkServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tr140.StorageService.NetworkServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool afpenable = 1;
  if (this->afpenable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->afpenable(), output);
  }

  // bool nfsenable = 2;
  if (this->nfsenable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->nfsenable(), output);
  }

  // bool smbenable = 3;
  if (this->smbenable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->smbenable(), output);
  }

  // bool network_protocol_auth_req = 4;
  if (this->network_protocol_auth_req() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->network_protocol_auth_req(), output);
  }

  // @@protoc_insertion_point(serialize_end:tr140.StorageService.NetworkServer)
}

::google::protobuf::uint8* StorageService_NetworkServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tr140.StorageService.NetworkServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool afpenable = 1;
  if (this->afpenable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->afpenable(), target);
  }

  // bool nfsenable = 2;
  if (this->nfsenable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->nfsenable(), target);
  }

  // bool smbenable = 3;
  if (this->smbenable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->smbenable(), target);
  }

  // bool network_protocol_auth_req = 4;
  if (this->network_protocol_auth_req() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->network_protocol_auth_req(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tr140.StorageService.NetworkServer)
  return target;
}

size_t StorageService_NetworkServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tr140.StorageService.NetworkServer)
  size_t total_size = 0;

  // bool afpenable = 1;
  if (this->afpenable() != 0) {
    total_size += 1 + 1;
  }

  // bool nfsenable = 2;
  if (this->nfsenable() != 0) {
    total_size += 1 + 1;
  }

  // bool smbenable = 3;
  if (this->smbenable() != 0) {
    total_size += 1 + 1;
  }

  // bool network_protocol_auth_req = 4;
  if (this->network_protocol_auth_req() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageService_NetworkServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tr140.StorageService.NetworkServer)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageService_NetworkServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageService_NetworkServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tr140.StorageService.NetworkServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tr140.StorageService.NetworkServer)
    MergeFrom(*source);
  }
}

void StorageService_NetworkServer::MergeFrom(const StorageService_NetworkServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tr140.StorageService.NetworkServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.afpenable() != 0) {
    set_afpenable(from.afpenable());
  }
  if (from.nfsenable() != 0) {
    set_nfsenable(from.nfsenable());
  }
  if (from.smbenable() != 0) {
    set_smbenable(from.smbenable());
  }
  if (from.network_protocol_auth_req() != 0) {
    set_network_protocol_auth_req(from.network_protocol_auth_req());
  }
}

void StorageService_NetworkServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tr140.StorageService.NetworkServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageService_NetworkServer::CopyFrom(const StorageService_NetworkServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tr140.StorageService.NetworkServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageService_NetworkServer::IsInitialized() const {
  return true;
}

void StorageService_NetworkServer::Swap(StorageService_NetworkServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageService_NetworkServer::InternalSwap(StorageService_NetworkServer* other) {
  std::swap(afpenable_, other->afpenable_);
  std::swap(nfsenable_, other->nfsenable_);
  std::swap(smbenable_, other->smbenable_);
  std::swap(network_protocol_auth_req_, other->network_protocol_auth_req_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StorageService_NetworkServer::GetMetadata() const {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StorageService_NetworkServer

// bool afpenable = 1;
void StorageService_NetworkServer::clear_afpenable() {
  afpenable_ = false;
}
bool StorageService_NetworkServer::afpenable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.NetworkServer.afpenable)
  return afpenable_;
}
void StorageService_NetworkServer::set_afpenable(bool value) {
  
  afpenable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.NetworkServer.afpenable)
}

// bool nfsenable = 2;
void StorageService_NetworkServer::clear_nfsenable() {
  nfsenable_ = false;
}
bool StorageService_NetworkServer::nfsenable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.NetworkServer.nfsenable)
  return nfsenable_;
}
void StorageService_NetworkServer::set_nfsenable(bool value) {
  
  nfsenable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.NetworkServer.nfsenable)
}

// bool smbenable = 3;
void StorageService_NetworkServer::clear_smbenable() {
  smbenable_ = false;
}
bool StorageService_NetworkServer::smbenable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.NetworkServer.smbenable)
  return smbenable_;
}
void StorageService_NetworkServer::set_smbenable(bool value) {
  
  smbenable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.NetworkServer.smbenable)
}

// bool network_protocol_auth_req = 4;
void StorageService_NetworkServer::clear_network_protocol_auth_req() {
  network_protocol_auth_req_ = false;
}
bool StorageService_NetworkServer::network_protocol_auth_req() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.NetworkServer.network_protocol_auth_req)
  return network_protocol_auth_req_;
}
void StorageService_NetworkServer::set_network_protocol_auth_req(bool value) {
  
  network_protocol_auth_req_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.NetworkServer.network_protocol_auth_req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageService_FTPServer_AnonymousUser::kEnableFieldNumber;
const int StorageService_FTPServer_AnonymousUser::kStartingFolderFieldNumber;
const int StorageService_FTPServer_AnonymousUser::kReadOnlyAccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageService_FTPServer_AnonymousUser::StorageService_FTPServer_AnonymousUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tr_2d140_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tr140.StorageService.FTPServer.AnonymousUser)
}
StorageService_FTPServer_AnonymousUser::StorageService_FTPServer_AnonymousUser(const StorageService_FTPServer_AnonymousUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  starting_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.starting_folder().size() > 0) {
    starting_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.starting_folder_);
  }
  ::memcpy(&enable_, &from.enable_,
    reinterpret_cast<char*>(&read_only_access_) -
    reinterpret_cast<char*>(&enable_) + sizeof(read_only_access_));
  // @@protoc_insertion_point(copy_constructor:tr140.StorageService.FTPServer.AnonymousUser)
}

void StorageService_FTPServer_AnonymousUser::SharedCtor() {
  starting_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&enable_, 0, reinterpret_cast<char*>(&read_only_access_) -
    reinterpret_cast<char*>(&enable_) + sizeof(read_only_access_));
  _cached_size_ = 0;
}

StorageService_FTPServer_AnonymousUser::~StorageService_FTPServer_AnonymousUser() {
  // @@protoc_insertion_point(destructor:tr140.StorageService.FTPServer.AnonymousUser)
  SharedDtor();
}

void StorageService_FTPServer_AnonymousUser::SharedDtor() {
  starting_folder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StorageService_FTPServer_AnonymousUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageService_FTPServer_AnonymousUser::descriptor() {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StorageService_FTPServer_AnonymousUser& StorageService_FTPServer_AnonymousUser::default_instance() {
  protobuf_tr_2d140_2eproto::InitDefaults();
  return *internal_default_instance();
}

StorageService_FTPServer_AnonymousUser* StorageService_FTPServer_AnonymousUser::New(::google::protobuf::Arena* arena) const {
  StorageService_FTPServer_AnonymousUser* n = new StorageService_FTPServer_AnonymousUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StorageService_FTPServer_AnonymousUser::Clear() {
// @@protoc_insertion_point(message_clear_start:tr140.StorageService.FTPServer.AnonymousUser)
  starting_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&enable_, 0, reinterpret_cast<char*>(&read_only_access_) -
    reinterpret_cast<char*>(&enable_) + sizeof(read_only_access_));
}

bool StorageService_FTPServer_AnonymousUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tr140.StorageService.FTPServer.AnonymousUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string starting_folder = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starting_folder()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->starting_folder().data(), this->starting_folder().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.FTPServer.AnonymousUser.starting_folder"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool read_only_access = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_only_access_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tr140.StorageService.FTPServer.AnonymousUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tr140.StorageService.FTPServer.AnonymousUser)
  return false;
#undef DO_
}

void StorageService_FTPServer_AnonymousUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tr140.StorageService.FTPServer.AnonymousUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // string starting_folder = 2;
  if (this->starting_folder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->starting_folder().data(), this->starting_folder().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.FTPServer.AnonymousUser.starting_folder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->starting_folder(), output);
  }

  // bool read_only_access = 3;
  if (this->read_only_access() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->read_only_access(), output);
  }

  // @@protoc_insertion_point(serialize_end:tr140.StorageService.FTPServer.AnonymousUser)
}

::google::protobuf::uint8* StorageService_FTPServer_AnonymousUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tr140.StorageService.FTPServer.AnonymousUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }

  // string starting_folder = 2;
  if (this->starting_folder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->starting_folder().data(), this->starting_folder().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.FTPServer.AnonymousUser.starting_folder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->starting_folder(), target);
  }

  // bool read_only_access = 3;
  if (this->read_only_access() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->read_only_access(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tr140.StorageService.FTPServer.AnonymousUser)
  return target;
}

size_t StorageService_FTPServer_AnonymousUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tr140.StorageService.FTPServer.AnonymousUser)
  size_t total_size = 0;

  // string starting_folder = 2;
  if (this->starting_folder().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->starting_folder());
  }

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // bool read_only_access = 3;
  if (this->read_only_access() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageService_FTPServer_AnonymousUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tr140.StorageService.FTPServer.AnonymousUser)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageService_FTPServer_AnonymousUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageService_FTPServer_AnonymousUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tr140.StorageService.FTPServer.AnonymousUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tr140.StorageService.FTPServer.AnonymousUser)
    MergeFrom(*source);
  }
}

void StorageService_FTPServer_AnonymousUser::MergeFrom(const StorageService_FTPServer_AnonymousUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tr140.StorageService.FTPServer.AnonymousUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.starting_folder().size() > 0) {

    starting_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.starting_folder_);
  }
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
  if (from.read_only_access() != 0) {
    set_read_only_access(from.read_only_access());
  }
}

void StorageService_FTPServer_AnonymousUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tr140.StorageService.FTPServer.AnonymousUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageService_FTPServer_AnonymousUser::CopyFrom(const StorageService_FTPServer_AnonymousUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tr140.StorageService.FTPServer.AnonymousUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageService_FTPServer_AnonymousUser::IsInitialized() const {
  return true;
}

void StorageService_FTPServer_AnonymousUser::Swap(StorageService_FTPServer_AnonymousUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageService_FTPServer_AnonymousUser::InternalSwap(StorageService_FTPServer_AnonymousUser* other) {
  starting_folder_.Swap(&other->starting_folder_);
  std::swap(enable_, other->enable_);
  std::swap(read_only_access_, other->read_only_access_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StorageService_FTPServer_AnonymousUser::GetMetadata() const {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StorageService_FTPServer_AnonymousUser

// bool enable = 1;
void StorageService_FTPServer_AnonymousUser::clear_enable() {
  enable_ = false;
}
bool StorageService_FTPServer_AnonymousUser::enable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.FTPServer.AnonymousUser.enable)
  return enable_;
}
void StorageService_FTPServer_AnonymousUser::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.FTPServer.AnonymousUser.enable)
}

// string starting_folder = 2;
void StorageService_FTPServer_AnonymousUser::clear_starting_folder() {
  starting_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_FTPServer_AnonymousUser::starting_folder() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.FTPServer.AnonymousUser.starting_folder)
  return starting_folder_.GetNoArena();
}
void StorageService_FTPServer_AnonymousUser::set_starting_folder(const ::std::string& value) {
  
  starting_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.FTPServer.AnonymousUser.starting_folder)
}
#if LANG_CXX11
void StorageService_FTPServer_AnonymousUser::set_starting_folder(::std::string&& value) {
  
  starting_folder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.FTPServer.AnonymousUser.starting_folder)
}
#endif
void StorageService_FTPServer_AnonymousUser::set_starting_folder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  starting_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.FTPServer.AnonymousUser.starting_folder)
}
void StorageService_FTPServer_AnonymousUser::set_starting_folder(const char* value, size_t size) {
  
  starting_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.FTPServer.AnonymousUser.starting_folder)
}
::std::string* StorageService_FTPServer_AnonymousUser::mutable_starting_folder() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.FTPServer.AnonymousUser.starting_folder)
  return starting_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_FTPServer_AnonymousUser::release_starting_folder() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.FTPServer.AnonymousUser.starting_folder)
  
  return starting_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_FTPServer_AnonymousUser::set_allocated_starting_folder(::std::string* starting_folder) {
  if (starting_folder != NULL) {
    
  } else {
    
  }
  starting_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), starting_folder);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.FTPServer.AnonymousUser.starting_folder)
}

// bool read_only_access = 3;
void StorageService_FTPServer_AnonymousUser::clear_read_only_access() {
  read_only_access_ = false;
}
bool StorageService_FTPServer_AnonymousUser::read_only_access() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.FTPServer.AnonymousUser.read_only_access)
  return read_only_access_;
}
void StorageService_FTPServer_AnonymousUser::set_read_only_access(bool value) {
  
  read_only_access_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.FTPServer.AnonymousUser.read_only_access)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageService_FTPServer::kEnableFieldNumber;
const int StorageService_FTPServer::kStatusFieldNumber;
const int StorageService_FTPServer::kMaxNumUsersFieldNumber;
const int StorageService_FTPServer::kIdleTimeFieldNumber;
const int StorageService_FTPServer::kPortNumberFieldNumber;
const int StorageService_FTPServer::kAnonymousUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageService_FTPServer::StorageService_FTPServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tr_2d140_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tr140.StorageService.FTPServer)
}
StorageService_FTPServer::StorageService_FTPServer(const StorageService_FTPServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status().size() > 0) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.has_anonymous_user()) {
    anonymous_user_ = new ::tr140::StorageService_FTPServer_AnonymousUser(*from.anonymous_user_);
  } else {
    anonymous_user_ = NULL;
  }
  ::memcpy(&enable_, &from.enable_,
    reinterpret_cast<char*>(&port_number_) -
    reinterpret_cast<char*>(&enable_) + sizeof(port_number_));
  // @@protoc_insertion_point(copy_constructor:tr140.StorageService.FTPServer)
}

void StorageService_FTPServer::SharedCtor() {
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&anonymous_user_, 0, reinterpret_cast<char*>(&port_number_) -
    reinterpret_cast<char*>(&anonymous_user_) + sizeof(port_number_));
  _cached_size_ = 0;
}

StorageService_FTPServer::~StorageService_FTPServer() {
  // @@protoc_insertion_point(destructor:tr140.StorageService.FTPServer)
  SharedDtor();
}

void StorageService_FTPServer::SharedDtor() {
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete anonymous_user_;
  }
}

void StorageService_FTPServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageService_FTPServer::descriptor() {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StorageService_FTPServer& StorageService_FTPServer::default_instance() {
  protobuf_tr_2d140_2eproto::InitDefaults();
  return *internal_default_instance();
}

StorageService_FTPServer* StorageService_FTPServer::New(::google::protobuf::Arena* arena) const {
  StorageService_FTPServer* n = new StorageService_FTPServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StorageService_FTPServer::Clear() {
// @@protoc_insertion_point(message_clear_start:tr140.StorageService.FTPServer)
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && anonymous_user_ != NULL) {
    delete anonymous_user_;
  }
  anonymous_user_ = NULL;
  ::memset(&enable_, 0, reinterpret_cast<char*>(&port_number_) -
    reinterpret_cast<char*>(&enable_) + sizeof(port_number_));
}

bool StorageService_FTPServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tr140.StorageService.FTPServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.FTPServer.status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_num_users = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_num_users_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 idle_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idle_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port_number = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tr140.StorageService.FTPServer.AnonymousUser anonymous_user = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_anonymous_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tr140.StorageService.FTPServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tr140.StorageService.FTPServer)
  return false;
#undef DO_
}

void StorageService_FTPServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tr140.StorageService.FTPServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.FTPServer.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->status(), output);
  }

  // uint32 max_num_users = 3;
  if (this->max_num_users() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_num_users(), output);
  }

  // uint32 idle_time = 4;
  if (this->idle_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->idle_time(), output);
  }

  // uint32 port_number = 5;
  if (this->port_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->port_number(), output);
  }

  // .tr140.StorageService.FTPServer.AnonymousUser anonymous_user = 6;
  if (this->has_anonymous_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->anonymous_user_, output);
  }

  // @@protoc_insertion_point(serialize_end:tr140.StorageService.FTPServer)
}

::google::protobuf::uint8* StorageService_FTPServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tr140.StorageService.FTPServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.FTPServer.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->status(), target);
  }

  // uint32 max_num_users = 3;
  if (this->max_num_users() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_num_users(), target);
  }

  // uint32 idle_time = 4;
  if (this->idle_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->idle_time(), target);
  }

  // uint32 port_number = 5;
  if (this->port_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->port_number(), target);
  }

  // .tr140.StorageService.FTPServer.AnonymousUser anonymous_user = 6;
  if (this->has_anonymous_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->anonymous_user_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tr140.StorageService.FTPServer)
  return target;
}

size_t StorageService_FTPServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tr140.StorageService.FTPServer)
  size_t total_size = 0;

  // string status = 2;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  // .tr140.StorageService.FTPServer.AnonymousUser anonymous_user = 6;
  if (this->has_anonymous_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->anonymous_user_);
  }

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // uint32 max_num_users = 3;
  if (this->max_num_users() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_num_users());
  }

  // uint32 idle_time = 4;
  if (this->idle_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idle_time());
  }

  // uint32 port_number = 5;
  if (this->port_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageService_FTPServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tr140.StorageService.FTPServer)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageService_FTPServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageService_FTPServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tr140.StorageService.FTPServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tr140.StorageService.FTPServer)
    MergeFrom(*source);
  }
}

void StorageService_FTPServer::MergeFrom(const StorageService_FTPServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tr140.StorageService.FTPServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.has_anonymous_user()) {
    mutable_anonymous_user()->::tr140::StorageService_FTPServer_AnonymousUser::MergeFrom(from.anonymous_user());
  }
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
  if (from.max_num_users() != 0) {
    set_max_num_users(from.max_num_users());
  }
  if (from.idle_time() != 0) {
    set_idle_time(from.idle_time());
  }
  if (from.port_number() != 0) {
    set_port_number(from.port_number());
  }
}

void StorageService_FTPServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tr140.StorageService.FTPServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageService_FTPServer::CopyFrom(const StorageService_FTPServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tr140.StorageService.FTPServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageService_FTPServer::IsInitialized() const {
  return true;
}

void StorageService_FTPServer::Swap(StorageService_FTPServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageService_FTPServer::InternalSwap(StorageService_FTPServer* other) {
  status_.Swap(&other->status_);
  std::swap(anonymous_user_, other->anonymous_user_);
  std::swap(enable_, other->enable_);
  std::swap(max_num_users_, other->max_num_users_);
  std::swap(idle_time_, other->idle_time_);
  std::swap(port_number_, other->port_number_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StorageService_FTPServer::GetMetadata() const {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StorageService_FTPServer

// bool enable = 1;
void StorageService_FTPServer::clear_enable() {
  enable_ = false;
}
bool StorageService_FTPServer::enable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.FTPServer.enable)
  return enable_;
}
void StorageService_FTPServer::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.FTPServer.enable)
}

// string status = 2;
void StorageService_FTPServer::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_FTPServer::status() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.FTPServer.status)
  return status_.GetNoArena();
}
void StorageService_FTPServer::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.FTPServer.status)
}
#if LANG_CXX11
void StorageService_FTPServer::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.FTPServer.status)
}
#endif
void StorageService_FTPServer::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.FTPServer.status)
}
void StorageService_FTPServer::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.FTPServer.status)
}
::std::string* StorageService_FTPServer::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.FTPServer.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_FTPServer::release_status() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.FTPServer.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_FTPServer::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.FTPServer.status)
}

// uint32 max_num_users = 3;
void StorageService_FTPServer::clear_max_num_users() {
  max_num_users_ = 0u;
}
::google::protobuf::uint32 StorageService_FTPServer::max_num_users() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.FTPServer.max_num_users)
  return max_num_users_;
}
void StorageService_FTPServer::set_max_num_users(::google::protobuf::uint32 value) {
  
  max_num_users_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.FTPServer.max_num_users)
}

// uint32 idle_time = 4;
void StorageService_FTPServer::clear_idle_time() {
  idle_time_ = 0u;
}
::google::protobuf::uint32 StorageService_FTPServer::idle_time() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.FTPServer.idle_time)
  return idle_time_;
}
void StorageService_FTPServer::set_idle_time(::google::protobuf::uint32 value) {
  
  idle_time_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.FTPServer.idle_time)
}

// uint32 port_number = 5;
void StorageService_FTPServer::clear_port_number() {
  port_number_ = 0u;
}
::google::protobuf::uint32 StorageService_FTPServer::port_number() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.FTPServer.port_number)
  return port_number_;
}
void StorageService_FTPServer::set_port_number(::google::protobuf::uint32 value) {
  
  port_number_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.FTPServer.port_number)
}

// .tr140.StorageService.FTPServer.AnonymousUser anonymous_user = 6;
bool StorageService_FTPServer::has_anonymous_user() const {
  return this != internal_default_instance() && anonymous_user_ != NULL;
}
void StorageService_FTPServer::clear_anonymous_user() {
  if (GetArenaNoVirtual() == NULL && anonymous_user_ != NULL) delete anonymous_user_;
  anonymous_user_ = NULL;
}
const ::tr140::StorageService_FTPServer_AnonymousUser& StorageService_FTPServer::anonymous_user() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.FTPServer.anonymous_user)
  return anonymous_user_ != NULL ? *anonymous_user_
                         : *::tr140::StorageService_FTPServer_AnonymousUser::internal_default_instance();
}
::tr140::StorageService_FTPServer_AnonymousUser* StorageService_FTPServer::mutable_anonymous_user() {
  
  if (anonymous_user_ == NULL) {
    anonymous_user_ = new ::tr140::StorageService_FTPServer_AnonymousUser;
  }
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.FTPServer.anonymous_user)
  return anonymous_user_;
}
::tr140::StorageService_FTPServer_AnonymousUser* StorageService_FTPServer::release_anonymous_user() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.FTPServer.anonymous_user)
  
  ::tr140::StorageService_FTPServer_AnonymousUser* temp = anonymous_user_;
  anonymous_user_ = NULL;
  return temp;
}
void StorageService_FTPServer::set_allocated_anonymous_user(::tr140::StorageService_FTPServer_AnonymousUser* anonymous_user) {
  delete anonymous_user_;
  anonymous_user_ = anonymous_user;
  if (anonymous_user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.FTPServer.anonymous_user)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageService_SFTPServer::kEnableFieldNumber;
const int StorageService_SFTPServer::kStatusFieldNumber;
const int StorageService_SFTPServer::kMaxNumUsersFieldNumber;
const int StorageService_SFTPServer::kIdleTimeFieldNumber;
const int StorageService_SFTPServer::kPortNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageService_SFTPServer::StorageService_SFTPServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tr_2d140_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tr140.StorageService.SFTPServer)
}
StorageService_SFTPServer::StorageService_SFTPServer(const StorageService_SFTPServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status().size() > 0) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  ::memcpy(&enable_, &from.enable_,
    reinterpret_cast<char*>(&port_number_) -
    reinterpret_cast<char*>(&enable_) + sizeof(port_number_));
  // @@protoc_insertion_point(copy_constructor:tr140.StorageService.SFTPServer)
}

void StorageService_SFTPServer::SharedCtor() {
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&enable_, 0, reinterpret_cast<char*>(&port_number_) -
    reinterpret_cast<char*>(&enable_) + sizeof(port_number_));
  _cached_size_ = 0;
}

StorageService_SFTPServer::~StorageService_SFTPServer() {
  // @@protoc_insertion_point(destructor:tr140.StorageService.SFTPServer)
  SharedDtor();
}

void StorageService_SFTPServer::SharedDtor() {
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StorageService_SFTPServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageService_SFTPServer::descriptor() {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StorageService_SFTPServer& StorageService_SFTPServer::default_instance() {
  protobuf_tr_2d140_2eproto::InitDefaults();
  return *internal_default_instance();
}

StorageService_SFTPServer* StorageService_SFTPServer::New(::google::protobuf::Arena* arena) const {
  StorageService_SFTPServer* n = new StorageService_SFTPServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StorageService_SFTPServer::Clear() {
// @@protoc_insertion_point(message_clear_start:tr140.StorageService.SFTPServer)
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&enable_, 0, reinterpret_cast<char*>(&port_number_) -
    reinterpret_cast<char*>(&enable_) + sizeof(port_number_));
}

bool StorageService_SFTPServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tr140.StorageService.SFTPServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.SFTPServer.status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_num_users = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_num_users_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 idle_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idle_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port_number = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tr140.StorageService.SFTPServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tr140.StorageService.SFTPServer)
  return false;
#undef DO_
}

void StorageService_SFTPServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tr140.StorageService.SFTPServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.SFTPServer.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->status(), output);
  }

  // uint32 max_num_users = 3;
  if (this->max_num_users() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_num_users(), output);
  }

  // uint32 idle_time = 4;
  if (this->idle_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->idle_time(), output);
  }

  // uint32 port_number = 5;
  if (this->port_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->port_number(), output);
  }

  // @@protoc_insertion_point(serialize_end:tr140.StorageService.SFTPServer)
}

::google::protobuf::uint8* StorageService_SFTPServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tr140.StorageService.SFTPServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.SFTPServer.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->status(), target);
  }

  // uint32 max_num_users = 3;
  if (this->max_num_users() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_num_users(), target);
  }

  // uint32 idle_time = 4;
  if (this->idle_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->idle_time(), target);
  }

  // uint32 port_number = 5;
  if (this->port_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->port_number(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tr140.StorageService.SFTPServer)
  return target;
}

size_t StorageService_SFTPServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tr140.StorageService.SFTPServer)
  size_t total_size = 0;

  // string status = 2;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // uint32 max_num_users = 3;
  if (this->max_num_users() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_num_users());
  }

  // uint32 idle_time = 4;
  if (this->idle_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idle_time());
  }

  // uint32 port_number = 5;
  if (this->port_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageService_SFTPServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tr140.StorageService.SFTPServer)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageService_SFTPServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageService_SFTPServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tr140.StorageService.SFTPServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tr140.StorageService.SFTPServer)
    MergeFrom(*source);
  }
}

void StorageService_SFTPServer::MergeFrom(const StorageService_SFTPServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tr140.StorageService.SFTPServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
  if (from.max_num_users() != 0) {
    set_max_num_users(from.max_num_users());
  }
  if (from.idle_time() != 0) {
    set_idle_time(from.idle_time());
  }
  if (from.port_number() != 0) {
    set_port_number(from.port_number());
  }
}

void StorageService_SFTPServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tr140.StorageService.SFTPServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageService_SFTPServer::CopyFrom(const StorageService_SFTPServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tr140.StorageService.SFTPServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageService_SFTPServer::IsInitialized() const {
  return true;
}

void StorageService_SFTPServer::Swap(StorageService_SFTPServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageService_SFTPServer::InternalSwap(StorageService_SFTPServer* other) {
  status_.Swap(&other->status_);
  std::swap(enable_, other->enable_);
  std::swap(max_num_users_, other->max_num_users_);
  std::swap(idle_time_, other->idle_time_);
  std::swap(port_number_, other->port_number_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StorageService_SFTPServer::GetMetadata() const {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StorageService_SFTPServer

// bool enable = 1;
void StorageService_SFTPServer::clear_enable() {
  enable_ = false;
}
bool StorageService_SFTPServer::enable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.SFTPServer.enable)
  return enable_;
}
void StorageService_SFTPServer::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.SFTPServer.enable)
}

// string status = 2;
void StorageService_SFTPServer::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_SFTPServer::status() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.SFTPServer.status)
  return status_.GetNoArena();
}
void StorageService_SFTPServer::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.SFTPServer.status)
}
#if LANG_CXX11
void StorageService_SFTPServer::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.SFTPServer.status)
}
#endif
void StorageService_SFTPServer::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.SFTPServer.status)
}
void StorageService_SFTPServer::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.SFTPServer.status)
}
::std::string* StorageService_SFTPServer::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.SFTPServer.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_SFTPServer::release_status() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.SFTPServer.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_SFTPServer::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.SFTPServer.status)
}

// uint32 max_num_users = 3;
void StorageService_SFTPServer::clear_max_num_users() {
  max_num_users_ = 0u;
}
::google::protobuf::uint32 StorageService_SFTPServer::max_num_users() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.SFTPServer.max_num_users)
  return max_num_users_;
}
void StorageService_SFTPServer::set_max_num_users(::google::protobuf::uint32 value) {
  
  max_num_users_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.SFTPServer.max_num_users)
}

// uint32 idle_time = 4;
void StorageService_SFTPServer::clear_idle_time() {
  idle_time_ = 0u;
}
::google::protobuf::uint32 StorageService_SFTPServer::idle_time() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.SFTPServer.idle_time)
  return idle_time_;
}
void StorageService_SFTPServer::set_idle_time(::google::protobuf::uint32 value) {
  
  idle_time_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.SFTPServer.idle_time)
}

// uint32 port_number = 5;
void StorageService_SFTPServer::clear_port_number() {
  port_number_ = 0u;
}
::google::protobuf::uint32 StorageService_SFTPServer::port_number() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.SFTPServer.port_number)
  return port_number_;
}
void StorageService_SFTPServer::set_port_number(::google::protobuf::uint32 value) {
  
  port_number_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.SFTPServer.port_number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageService_HTTPServer::kEnableFieldNumber;
const int StorageService_HTTPServer::kStatusFieldNumber;
const int StorageService_HTTPServer::kMaxNumUsersFieldNumber;
const int StorageService_HTTPServer::kIdleTimeFieldNumber;
const int StorageService_HTTPServer::kHttpwritingEnabledFieldNumber;
const int StorageService_HTTPServer::kPortNumberFieldNumber;
const int StorageService_HTTPServer::kAuthenticationReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageService_HTTPServer::StorageService_HTTPServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tr_2d140_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tr140.StorageService.HTTPServer)
}
StorageService_HTTPServer::StorageService_HTTPServer(const StorageService_HTTPServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status().size() > 0) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  ::memcpy(&max_num_users_, &from.max_num_users_,
    reinterpret_cast<char*>(&port_number_) -
    reinterpret_cast<char*>(&max_num_users_) + sizeof(port_number_));
  // @@protoc_insertion_point(copy_constructor:tr140.StorageService.HTTPServer)
}

void StorageService_HTTPServer::SharedCtor() {
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&max_num_users_, 0, reinterpret_cast<char*>(&port_number_) -
    reinterpret_cast<char*>(&max_num_users_) + sizeof(port_number_));
  _cached_size_ = 0;
}

StorageService_HTTPServer::~StorageService_HTTPServer() {
  // @@protoc_insertion_point(destructor:tr140.StorageService.HTTPServer)
  SharedDtor();
}

void StorageService_HTTPServer::SharedDtor() {
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StorageService_HTTPServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageService_HTTPServer::descriptor() {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StorageService_HTTPServer& StorageService_HTTPServer::default_instance() {
  protobuf_tr_2d140_2eproto::InitDefaults();
  return *internal_default_instance();
}

StorageService_HTTPServer* StorageService_HTTPServer::New(::google::protobuf::Arena* arena) const {
  StorageService_HTTPServer* n = new StorageService_HTTPServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StorageService_HTTPServer::Clear() {
// @@protoc_insertion_point(message_clear_start:tr140.StorageService.HTTPServer)
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&max_num_users_, 0, reinterpret_cast<char*>(&port_number_) -
    reinterpret_cast<char*>(&max_num_users_) + sizeof(port_number_));
}

bool StorageService_HTTPServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tr140.StorageService.HTTPServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.HTTPServer.status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_num_users = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_num_users_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 idle_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idle_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool httpwriting_enabled = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &httpwriting_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port_number = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool authentication_req = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &authentication_req_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tr140.StorageService.HTTPServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tr140.StorageService.HTTPServer)
  return false;
#undef DO_
}

void StorageService_HTTPServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tr140.StorageService.HTTPServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.HTTPServer.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->status(), output);
  }

  // uint32 max_num_users = 3;
  if (this->max_num_users() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_num_users(), output);
  }

  // uint32 idle_time = 4;
  if (this->idle_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->idle_time(), output);
  }

  // bool httpwriting_enabled = 5;
  if (this->httpwriting_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->httpwriting_enabled(), output);
  }

  // uint32 port_number = 6;
  if (this->port_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->port_number(), output);
  }

  // bool authentication_req = 7;
  if (this->authentication_req() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->authentication_req(), output);
  }

  // @@protoc_insertion_point(serialize_end:tr140.StorageService.HTTPServer)
}

::google::protobuf::uint8* StorageService_HTTPServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tr140.StorageService.HTTPServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.HTTPServer.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->status(), target);
  }

  // uint32 max_num_users = 3;
  if (this->max_num_users() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_num_users(), target);
  }

  // uint32 idle_time = 4;
  if (this->idle_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->idle_time(), target);
  }

  // bool httpwriting_enabled = 5;
  if (this->httpwriting_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->httpwriting_enabled(), target);
  }

  // uint32 port_number = 6;
  if (this->port_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->port_number(), target);
  }

  // bool authentication_req = 7;
  if (this->authentication_req() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->authentication_req(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tr140.StorageService.HTTPServer)
  return target;
}

size_t StorageService_HTTPServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tr140.StorageService.HTTPServer)
  size_t total_size = 0;

  // string status = 2;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  // uint32 max_num_users = 3;
  if (this->max_num_users() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_num_users());
  }

  // uint32 idle_time = 4;
  if (this->idle_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idle_time());
  }

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // bool httpwriting_enabled = 5;
  if (this->httpwriting_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool authentication_req = 7;
  if (this->authentication_req() != 0) {
    total_size += 1 + 1;
  }

  // uint32 port_number = 6;
  if (this->port_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageService_HTTPServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tr140.StorageService.HTTPServer)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageService_HTTPServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageService_HTTPServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tr140.StorageService.HTTPServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tr140.StorageService.HTTPServer)
    MergeFrom(*source);
  }
}

void StorageService_HTTPServer::MergeFrom(const StorageService_HTTPServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tr140.StorageService.HTTPServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.max_num_users() != 0) {
    set_max_num_users(from.max_num_users());
  }
  if (from.idle_time() != 0) {
    set_idle_time(from.idle_time());
  }
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
  if (from.httpwriting_enabled() != 0) {
    set_httpwriting_enabled(from.httpwriting_enabled());
  }
  if (from.authentication_req() != 0) {
    set_authentication_req(from.authentication_req());
  }
  if (from.port_number() != 0) {
    set_port_number(from.port_number());
  }
}

void StorageService_HTTPServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tr140.StorageService.HTTPServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageService_HTTPServer::CopyFrom(const StorageService_HTTPServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tr140.StorageService.HTTPServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageService_HTTPServer::IsInitialized() const {
  return true;
}

void StorageService_HTTPServer::Swap(StorageService_HTTPServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageService_HTTPServer::InternalSwap(StorageService_HTTPServer* other) {
  status_.Swap(&other->status_);
  std::swap(max_num_users_, other->max_num_users_);
  std::swap(idle_time_, other->idle_time_);
  std::swap(enable_, other->enable_);
  std::swap(httpwriting_enabled_, other->httpwriting_enabled_);
  std::swap(authentication_req_, other->authentication_req_);
  std::swap(port_number_, other->port_number_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StorageService_HTTPServer::GetMetadata() const {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StorageService_HTTPServer

// bool enable = 1;
void StorageService_HTTPServer::clear_enable() {
  enable_ = false;
}
bool StorageService_HTTPServer::enable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.HTTPServer.enable)
  return enable_;
}
void StorageService_HTTPServer::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.HTTPServer.enable)
}

// string status = 2;
void StorageService_HTTPServer::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_HTTPServer::status() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.HTTPServer.status)
  return status_.GetNoArena();
}
void StorageService_HTTPServer::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.HTTPServer.status)
}
#if LANG_CXX11
void StorageService_HTTPServer::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.HTTPServer.status)
}
#endif
void StorageService_HTTPServer::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.HTTPServer.status)
}
void StorageService_HTTPServer::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.HTTPServer.status)
}
::std::string* StorageService_HTTPServer::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.HTTPServer.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_HTTPServer::release_status() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.HTTPServer.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_HTTPServer::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.HTTPServer.status)
}

// uint32 max_num_users = 3;
void StorageService_HTTPServer::clear_max_num_users() {
  max_num_users_ = 0u;
}
::google::protobuf::uint32 StorageService_HTTPServer::max_num_users() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.HTTPServer.max_num_users)
  return max_num_users_;
}
void StorageService_HTTPServer::set_max_num_users(::google::protobuf::uint32 value) {
  
  max_num_users_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.HTTPServer.max_num_users)
}

// uint32 idle_time = 4;
void StorageService_HTTPServer::clear_idle_time() {
  idle_time_ = 0u;
}
::google::protobuf::uint32 StorageService_HTTPServer::idle_time() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.HTTPServer.idle_time)
  return idle_time_;
}
void StorageService_HTTPServer::set_idle_time(::google::protobuf::uint32 value) {
  
  idle_time_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.HTTPServer.idle_time)
}

// bool httpwriting_enabled = 5;
void StorageService_HTTPServer::clear_httpwriting_enabled() {
  httpwriting_enabled_ = false;
}
bool StorageService_HTTPServer::httpwriting_enabled() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.HTTPServer.httpwriting_enabled)
  return httpwriting_enabled_;
}
void StorageService_HTTPServer::set_httpwriting_enabled(bool value) {
  
  httpwriting_enabled_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.HTTPServer.httpwriting_enabled)
}

// uint32 port_number = 6;
void StorageService_HTTPServer::clear_port_number() {
  port_number_ = 0u;
}
::google::protobuf::uint32 StorageService_HTTPServer::port_number() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.HTTPServer.port_number)
  return port_number_;
}
void StorageService_HTTPServer::set_port_number(::google::protobuf::uint32 value) {
  
  port_number_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.HTTPServer.port_number)
}

// bool authentication_req = 7;
void StorageService_HTTPServer::clear_authentication_req() {
  authentication_req_ = false;
}
bool StorageService_HTTPServer::authentication_req() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.HTTPServer.authentication_req)
  return authentication_req_;
}
void StorageService_HTTPServer::set_authentication_req(bool value) {
  
  authentication_req_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.HTTPServer.authentication_req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageService_HTTPSServer::kEnableFieldNumber;
const int StorageService_HTTPSServer::kStatusFieldNumber;
const int StorageService_HTTPSServer::kMaxNumUsersFieldNumber;
const int StorageService_HTTPSServer::kIdleTimeFieldNumber;
const int StorageService_HTTPSServer::kHttpwritingEnabledFieldNumber;
const int StorageService_HTTPSServer::kPortNumberFieldNumber;
const int StorageService_HTTPSServer::kAuthenticationReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageService_HTTPSServer::StorageService_HTTPSServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tr_2d140_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tr140.StorageService.HTTPSServer)
}
StorageService_HTTPSServer::StorageService_HTTPSServer(const StorageService_HTTPSServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status().size() > 0) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  ::memcpy(&max_num_users_, &from.max_num_users_,
    reinterpret_cast<char*>(&port_number_) -
    reinterpret_cast<char*>(&max_num_users_) + sizeof(port_number_));
  // @@protoc_insertion_point(copy_constructor:tr140.StorageService.HTTPSServer)
}

void StorageService_HTTPSServer::SharedCtor() {
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&max_num_users_, 0, reinterpret_cast<char*>(&port_number_) -
    reinterpret_cast<char*>(&max_num_users_) + sizeof(port_number_));
  _cached_size_ = 0;
}

StorageService_HTTPSServer::~StorageService_HTTPSServer() {
  // @@protoc_insertion_point(destructor:tr140.StorageService.HTTPSServer)
  SharedDtor();
}

void StorageService_HTTPSServer::SharedDtor() {
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StorageService_HTTPSServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageService_HTTPSServer::descriptor() {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StorageService_HTTPSServer& StorageService_HTTPSServer::default_instance() {
  protobuf_tr_2d140_2eproto::InitDefaults();
  return *internal_default_instance();
}

StorageService_HTTPSServer* StorageService_HTTPSServer::New(::google::protobuf::Arena* arena) const {
  StorageService_HTTPSServer* n = new StorageService_HTTPSServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StorageService_HTTPSServer::Clear() {
// @@protoc_insertion_point(message_clear_start:tr140.StorageService.HTTPSServer)
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&max_num_users_, 0, reinterpret_cast<char*>(&port_number_) -
    reinterpret_cast<char*>(&max_num_users_) + sizeof(port_number_));
}

bool StorageService_HTTPSServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tr140.StorageService.HTTPSServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.HTTPSServer.status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_num_users = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_num_users_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 idle_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idle_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool httpwriting_enabled = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &httpwriting_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port_number = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool authentication_req = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &authentication_req_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tr140.StorageService.HTTPSServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tr140.StorageService.HTTPSServer)
  return false;
#undef DO_
}

void StorageService_HTTPSServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tr140.StorageService.HTTPSServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.HTTPSServer.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->status(), output);
  }

  // uint32 max_num_users = 3;
  if (this->max_num_users() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_num_users(), output);
  }

  // uint32 idle_time = 4;
  if (this->idle_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->idle_time(), output);
  }

  // bool httpwriting_enabled = 5;
  if (this->httpwriting_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->httpwriting_enabled(), output);
  }

  // uint32 port_number = 6;
  if (this->port_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->port_number(), output);
  }

  // bool authentication_req = 7;
  if (this->authentication_req() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->authentication_req(), output);
  }

  // @@protoc_insertion_point(serialize_end:tr140.StorageService.HTTPSServer)
}

::google::protobuf::uint8* StorageService_HTTPSServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tr140.StorageService.HTTPSServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.HTTPSServer.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->status(), target);
  }

  // uint32 max_num_users = 3;
  if (this->max_num_users() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_num_users(), target);
  }

  // uint32 idle_time = 4;
  if (this->idle_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->idle_time(), target);
  }

  // bool httpwriting_enabled = 5;
  if (this->httpwriting_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->httpwriting_enabled(), target);
  }

  // uint32 port_number = 6;
  if (this->port_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->port_number(), target);
  }

  // bool authentication_req = 7;
  if (this->authentication_req() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->authentication_req(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tr140.StorageService.HTTPSServer)
  return target;
}

size_t StorageService_HTTPSServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tr140.StorageService.HTTPSServer)
  size_t total_size = 0;

  // string status = 2;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  // uint32 max_num_users = 3;
  if (this->max_num_users() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_num_users());
  }

  // uint32 idle_time = 4;
  if (this->idle_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idle_time());
  }

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // bool httpwriting_enabled = 5;
  if (this->httpwriting_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool authentication_req = 7;
  if (this->authentication_req() != 0) {
    total_size += 1 + 1;
  }

  // uint32 port_number = 6;
  if (this->port_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageService_HTTPSServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tr140.StorageService.HTTPSServer)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageService_HTTPSServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageService_HTTPSServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tr140.StorageService.HTTPSServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tr140.StorageService.HTTPSServer)
    MergeFrom(*source);
  }
}

void StorageService_HTTPSServer::MergeFrom(const StorageService_HTTPSServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tr140.StorageService.HTTPSServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.max_num_users() != 0) {
    set_max_num_users(from.max_num_users());
  }
  if (from.idle_time() != 0) {
    set_idle_time(from.idle_time());
  }
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
  if (from.httpwriting_enabled() != 0) {
    set_httpwriting_enabled(from.httpwriting_enabled());
  }
  if (from.authentication_req() != 0) {
    set_authentication_req(from.authentication_req());
  }
  if (from.port_number() != 0) {
    set_port_number(from.port_number());
  }
}

void StorageService_HTTPSServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tr140.StorageService.HTTPSServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageService_HTTPSServer::CopyFrom(const StorageService_HTTPSServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tr140.StorageService.HTTPSServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageService_HTTPSServer::IsInitialized() const {
  return true;
}

void StorageService_HTTPSServer::Swap(StorageService_HTTPSServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageService_HTTPSServer::InternalSwap(StorageService_HTTPSServer* other) {
  status_.Swap(&other->status_);
  std::swap(max_num_users_, other->max_num_users_);
  std::swap(idle_time_, other->idle_time_);
  std::swap(enable_, other->enable_);
  std::swap(httpwriting_enabled_, other->httpwriting_enabled_);
  std::swap(authentication_req_, other->authentication_req_);
  std::swap(port_number_, other->port_number_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StorageService_HTTPSServer::GetMetadata() const {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StorageService_HTTPSServer

// bool enable = 1;
void StorageService_HTTPSServer::clear_enable() {
  enable_ = false;
}
bool StorageService_HTTPSServer::enable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.HTTPSServer.enable)
  return enable_;
}
void StorageService_HTTPSServer::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.HTTPSServer.enable)
}

// string status = 2;
void StorageService_HTTPSServer::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_HTTPSServer::status() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.HTTPSServer.status)
  return status_.GetNoArena();
}
void StorageService_HTTPSServer::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.HTTPSServer.status)
}
#if LANG_CXX11
void StorageService_HTTPSServer::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.HTTPSServer.status)
}
#endif
void StorageService_HTTPSServer::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.HTTPSServer.status)
}
void StorageService_HTTPSServer::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.HTTPSServer.status)
}
::std::string* StorageService_HTTPSServer::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.HTTPSServer.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_HTTPSServer::release_status() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.HTTPSServer.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_HTTPSServer::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.HTTPSServer.status)
}

// uint32 max_num_users = 3;
void StorageService_HTTPSServer::clear_max_num_users() {
  max_num_users_ = 0u;
}
::google::protobuf::uint32 StorageService_HTTPSServer::max_num_users() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.HTTPSServer.max_num_users)
  return max_num_users_;
}
void StorageService_HTTPSServer::set_max_num_users(::google::protobuf::uint32 value) {
  
  max_num_users_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.HTTPSServer.max_num_users)
}

// uint32 idle_time = 4;
void StorageService_HTTPSServer::clear_idle_time() {
  idle_time_ = 0u;
}
::google::protobuf::uint32 StorageService_HTTPSServer::idle_time() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.HTTPSServer.idle_time)
  return idle_time_;
}
void StorageService_HTTPSServer::set_idle_time(::google::protobuf::uint32 value) {
  
  idle_time_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.HTTPSServer.idle_time)
}

// bool httpwriting_enabled = 5;
void StorageService_HTTPSServer::clear_httpwriting_enabled() {
  httpwriting_enabled_ = false;
}
bool StorageService_HTTPSServer::httpwriting_enabled() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.HTTPSServer.httpwriting_enabled)
  return httpwriting_enabled_;
}
void StorageService_HTTPSServer::set_httpwriting_enabled(bool value) {
  
  httpwriting_enabled_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.HTTPSServer.httpwriting_enabled)
}

// uint32 port_number = 6;
void StorageService_HTTPSServer::clear_port_number() {
  port_number_ = 0u;
}
::google::protobuf::uint32 StorageService_HTTPSServer::port_number() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.HTTPSServer.port_number)
  return port_number_;
}
void StorageService_HTTPSServer::set_port_number(::google::protobuf::uint32 value) {
  
  port_number_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.HTTPSServer.port_number)
}

// bool authentication_req = 7;
void StorageService_HTTPSServer::clear_authentication_req() {
  authentication_req_ = false;
}
bool StorageService_HTTPSServer::authentication_req() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.HTTPSServer.authentication_req)
  return authentication_req_;
}
void StorageService_HTTPSServer::set_authentication_req(bool value) {
  
  authentication_req_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.HTTPSServer.authentication_req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageService_PhysicalMedium_SMART::kReallocatedSectorsCountFieldNumber;
const int StorageService_PhysicalMedium_SMART::kPowerOnHoursFieldNumber;
const int StorageService_PhysicalMedium_SMART::kSpinRetryCountFieldNumber;
const int StorageService_PhysicalMedium_SMART::kPowerCycleCountFieldNumber;
const int StorageService_PhysicalMedium_SMART::kTemperatureFieldNumber;
const int StorageService_PhysicalMedium_SMART::kReallocationEventCountFieldNumber;
const int StorageService_PhysicalMedium_SMART::kCurrentPendingSectorCountFieldNumber;
const int StorageService_PhysicalMedium_SMART::kUncorrectableSectorCountFieldNumber;
const int StorageService_PhysicalMedium_SMART::kReadErrorsFieldNumber;
const int StorageService_PhysicalMedium_SMART::kSoftReadErrorsFieldNumber;
const int StorageService_PhysicalMedium_SMART::kWriteErrorsFieldNumber;
const int StorageService_PhysicalMedium_SMART::kSparesRemainingFieldNumber;
const int StorageService_PhysicalMedium_SMART::kPredictedFailureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageService_PhysicalMedium_SMART::StorageService_PhysicalMedium_SMART()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tr_2d140_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tr140.StorageService.PhysicalMedium.SMART)
}
StorageService_PhysicalMedium_SMART::StorageService_PhysicalMedium_SMART(const StorageService_PhysicalMedium_SMART& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reallocated_sectors_count_, &from.reallocated_sectors_count_,
    reinterpret_cast<char*>(&predicted_failure_) -
    reinterpret_cast<char*>(&reallocated_sectors_count_) + sizeof(predicted_failure_));
  // @@protoc_insertion_point(copy_constructor:tr140.StorageService.PhysicalMedium.SMART)
}

void StorageService_PhysicalMedium_SMART::SharedCtor() {
  ::memset(&reallocated_sectors_count_, 0, reinterpret_cast<char*>(&predicted_failure_) -
    reinterpret_cast<char*>(&reallocated_sectors_count_) + sizeof(predicted_failure_));
  _cached_size_ = 0;
}

StorageService_PhysicalMedium_SMART::~StorageService_PhysicalMedium_SMART() {
  // @@protoc_insertion_point(destructor:tr140.StorageService.PhysicalMedium.SMART)
  SharedDtor();
}

void StorageService_PhysicalMedium_SMART::SharedDtor() {
}

void StorageService_PhysicalMedium_SMART::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageService_PhysicalMedium_SMART::descriptor() {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StorageService_PhysicalMedium_SMART& StorageService_PhysicalMedium_SMART::default_instance() {
  protobuf_tr_2d140_2eproto::InitDefaults();
  return *internal_default_instance();
}

StorageService_PhysicalMedium_SMART* StorageService_PhysicalMedium_SMART::New(::google::protobuf::Arena* arena) const {
  StorageService_PhysicalMedium_SMART* n = new StorageService_PhysicalMedium_SMART;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StorageService_PhysicalMedium_SMART::Clear() {
// @@protoc_insertion_point(message_clear_start:tr140.StorageService.PhysicalMedium.SMART)
  ::memset(&reallocated_sectors_count_, 0, reinterpret_cast<char*>(&predicted_failure_) -
    reinterpret_cast<char*>(&reallocated_sectors_count_) + sizeof(predicted_failure_));
}

bool StorageService_PhysicalMedium_SMART::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tr140.StorageService.PhysicalMedium.SMART)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 reallocated_sectors_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reallocated_sectors_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 power_on_hours = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_on_hours_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 spin_retry_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spin_retry_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 power_cycle_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_cycle_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 temperature = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 reallocation_event_count = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reallocation_event_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 current_pending_sector_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_pending_sector_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uncorrectable_sector_count = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uncorrectable_sector_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 read_errors = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &read_errors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 soft_read_errors = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &soft_read_errors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 write_errors = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &write_errors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 spares_remaining = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spares_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 predicted_failure = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &predicted_failure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tr140.StorageService.PhysicalMedium.SMART)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tr140.StorageService.PhysicalMedium.SMART)
  return false;
#undef DO_
}

void StorageService_PhysicalMedium_SMART::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tr140.StorageService.PhysicalMedium.SMART)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reallocated_sectors_count = 1;
  if (this->reallocated_sectors_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reallocated_sectors_count(), output);
  }

  // uint32 power_on_hours = 2;
  if (this->power_on_hours() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->power_on_hours(), output);
  }

  // uint32 spin_retry_count = 3;
  if (this->spin_retry_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->spin_retry_count(), output);
  }

  // uint32 power_cycle_count = 4;
  if (this->power_cycle_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->power_cycle_count(), output);
  }

  // uint32 temperature = 5;
  if (this->temperature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->temperature(), output);
  }

  // uint32 reallocation_event_count = 6;
  if (this->reallocation_event_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->reallocation_event_count(), output);
  }

  // uint32 current_pending_sector_count = 7;
  if (this->current_pending_sector_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->current_pending_sector_count(), output);
  }

  // uint32 uncorrectable_sector_count = 8;
  if (this->uncorrectable_sector_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->uncorrectable_sector_count(), output);
  }

  // uint32 read_errors = 9;
  if (this->read_errors() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->read_errors(), output);
  }

  // uint32 soft_read_errors = 10;
  if (this->soft_read_errors() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->soft_read_errors(), output);
  }

  // uint32 write_errors = 11;
  if (this->write_errors() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->write_errors(), output);
  }

  // uint32 spares_remaining = 12;
  if (this->spares_remaining() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->spares_remaining(), output);
  }

  // int32 predicted_failure = 13;
  if (this->predicted_failure() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->predicted_failure(), output);
  }

  // @@protoc_insertion_point(serialize_end:tr140.StorageService.PhysicalMedium.SMART)
}

::google::protobuf::uint8* StorageService_PhysicalMedium_SMART::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tr140.StorageService.PhysicalMedium.SMART)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reallocated_sectors_count = 1;
  if (this->reallocated_sectors_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reallocated_sectors_count(), target);
  }

  // uint32 power_on_hours = 2;
  if (this->power_on_hours() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->power_on_hours(), target);
  }

  // uint32 spin_retry_count = 3;
  if (this->spin_retry_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->spin_retry_count(), target);
  }

  // uint32 power_cycle_count = 4;
  if (this->power_cycle_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->power_cycle_count(), target);
  }

  // uint32 temperature = 5;
  if (this->temperature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->temperature(), target);
  }

  // uint32 reallocation_event_count = 6;
  if (this->reallocation_event_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->reallocation_event_count(), target);
  }

  // uint32 current_pending_sector_count = 7;
  if (this->current_pending_sector_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->current_pending_sector_count(), target);
  }

  // uint32 uncorrectable_sector_count = 8;
  if (this->uncorrectable_sector_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->uncorrectable_sector_count(), target);
  }

  // uint32 read_errors = 9;
  if (this->read_errors() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->read_errors(), target);
  }

  // uint32 soft_read_errors = 10;
  if (this->soft_read_errors() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->soft_read_errors(), target);
  }

  // uint32 write_errors = 11;
  if (this->write_errors() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->write_errors(), target);
  }

  // uint32 spares_remaining = 12;
  if (this->spares_remaining() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->spares_remaining(), target);
  }

  // int32 predicted_failure = 13;
  if (this->predicted_failure() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->predicted_failure(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tr140.StorageService.PhysicalMedium.SMART)
  return target;
}

size_t StorageService_PhysicalMedium_SMART::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tr140.StorageService.PhysicalMedium.SMART)
  size_t total_size = 0;

  // uint32 reallocated_sectors_count = 1;
  if (this->reallocated_sectors_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reallocated_sectors_count());
  }

  // uint32 power_on_hours = 2;
  if (this->power_on_hours() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->power_on_hours());
  }

  // uint32 spin_retry_count = 3;
  if (this->spin_retry_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->spin_retry_count());
  }

  // uint32 power_cycle_count = 4;
  if (this->power_cycle_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->power_cycle_count());
  }

  // uint32 temperature = 5;
  if (this->temperature() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->temperature());
  }

  // uint32 reallocation_event_count = 6;
  if (this->reallocation_event_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reallocation_event_count());
  }

  // uint32 current_pending_sector_count = 7;
  if (this->current_pending_sector_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->current_pending_sector_count());
  }

  // uint32 uncorrectable_sector_count = 8;
  if (this->uncorrectable_sector_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uncorrectable_sector_count());
  }

  // uint32 read_errors = 9;
  if (this->read_errors() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->read_errors());
  }

  // uint32 soft_read_errors = 10;
  if (this->soft_read_errors() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->soft_read_errors());
  }

  // uint32 write_errors = 11;
  if (this->write_errors() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->write_errors());
  }

  // uint32 spares_remaining = 12;
  if (this->spares_remaining() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->spares_remaining());
  }

  // int32 predicted_failure = 13;
  if (this->predicted_failure() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->predicted_failure());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageService_PhysicalMedium_SMART::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tr140.StorageService.PhysicalMedium.SMART)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageService_PhysicalMedium_SMART* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageService_PhysicalMedium_SMART>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tr140.StorageService.PhysicalMedium.SMART)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tr140.StorageService.PhysicalMedium.SMART)
    MergeFrom(*source);
  }
}

void StorageService_PhysicalMedium_SMART::MergeFrom(const StorageService_PhysicalMedium_SMART& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tr140.StorageService.PhysicalMedium.SMART)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reallocated_sectors_count() != 0) {
    set_reallocated_sectors_count(from.reallocated_sectors_count());
  }
  if (from.power_on_hours() != 0) {
    set_power_on_hours(from.power_on_hours());
  }
  if (from.spin_retry_count() != 0) {
    set_spin_retry_count(from.spin_retry_count());
  }
  if (from.power_cycle_count() != 0) {
    set_power_cycle_count(from.power_cycle_count());
  }
  if (from.temperature() != 0) {
    set_temperature(from.temperature());
  }
  if (from.reallocation_event_count() != 0) {
    set_reallocation_event_count(from.reallocation_event_count());
  }
  if (from.current_pending_sector_count() != 0) {
    set_current_pending_sector_count(from.current_pending_sector_count());
  }
  if (from.uncorrectable_sector_count() != 0) {
    set_uncorrectable_sector_count(from.uncorrectable_sector_count());
  }
  if (from.read_errors() != 0) {
    set_read_errors(from.read_errors());
  }
  if (from.soft_read_errors() != 0) {
    set_soft_read_errors(from.soft_read_errors());
  }
  if (from.write_errors() != 0) {
    set_write_errors(from.write_errors());
  }
  if (from.spares_remaining() != 0) {
    set_spares_remaining(from.spares_remaining());
  }
  if (from.predicted_failure() != 0) {
    set_predicted_failure(from.predicted_failure());
  }
}

void StorageService_PhysicalMedium_SMART::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tr140.StorageService.PhysicalMedium.SMART)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageService_PhysicalMedium_SMART::CopyFrom(const StorageService_PhysicalMedium_SMART& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tr140.StorageService.PhysicalMedium.SMART)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageService_PhysicalMedium_SMART::IsInitialized() const {
  return true;
}

void StorageService_PhysicalMedium_SMART::Swap(StorageService_PhysicalMedium_SMART* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageService_PhysicalMedium_SMART::InternalSwap(StorageService_PhysicalMedium_SMART* other) {
  std::swap(reallocated_sectors_count_, other->reallocated_sectors_count_);
  std::swap(power_on_hours_, other->power_on_hours_);
  std::swap(spin_retry_count_, other->spin_retry_count_);
  std::swap(power_cycle_count_, other->power_cycle_count_);
  std::swap(temperature_, other->temperature_);
  std::swap(reallocation_event_count_, other->reallocation_event_count_);
  std::swap(current_pending_sector_count_, other->current_pending_sector_count_);
  std::swap(uncorrectable_sector_count_, other->uncorrectable_sector_count_);
  std::swap(read_errors_, other->read_errors_);
  std::swap(soft_read_errors_, other->soft_read_errors_);
  std::swap(write_errors_, other->write_errors_);
  std::swap(spares_remaining_, other->spares_remaining_);
  std::swap(predicted_failure_, other->predicted_failure_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StorageService_PhysicalMedium_SMART::GetMetadata() const {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StorageService_PhysicalMedium_SMART

// uint32 reallocated_sectors_count = 1;
void StorageService_PhysicalMedium_SMART::clear_reallocated_sectors_count() {
  reallocated_sectors_count_ = 0u;
}
::google::protobuf::uint32 StorageService_PhysicalMedium_SMART::reallocated_sectors_count() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.SMART.reallocated_sectors_count)
  return reallocated_sectors_count_;
}
void StorageService_PhysicalMedium_SMART::set_reallocated_sectors_count(::google::protobuf::uint32 value) {
  
  reallocated_sectors_count_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.SMART.reallocated_sectors_count)
}

// uint32 power_on_hours = 2;
void StorageService_PhysicalMedium_SMART::clear_power_on_hours() {
  power_on_hours_ = 0u;
}
::google::protobuf::uint32 StorageService_PhysicalMedium_SMART::power_on_hours() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.SMART.power_on_hours)
  return power_on_hours_;
}
void StorageService_PhysicalMedium_SMART::set_power_on_hours(::google::protobuf::uint32 value) {
  
  power_on_hours_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.SMART.power_on_hours)
}

// uint32 spin_retry_count = 3;
void StorageService_PhysicalMedium_SMART::clear_spin_retry_count() {
  spin_retry_count_ = 0u;
}
::google::protobuf::uint32 StorageService_PhysicalMedium_SMART::spin_retry_count() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.SMART.spin_retry_count)
  return spin_retry_count_;
}
void StorageService_PhysicalMedium_SMART::set_spin_retry_count(::google::protobuf::uint32 value) {
  
  spin_retry_count_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.SMART.spin_retry_count)
}

// uint32 power_cycle_count = 4;
void StorageService_PhysicalMedium_SMART::clear_power_cycle_count() {
  power_cycle_count_ = 0u;
}
::google::protobuf::uint32 StorageService_PhysicalMedium_SMART::power_cycle_count() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.SMART.power_cycle_count)
  return power_cycle_count_;
}
void StorageService_PhysicalMedium_SMART::set_power_cycle_count(::google::protobuf::uint32 value) {
  
  power_cycle_count_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.SMART.power_cycle_count)
}

// uint32 temperature = 5;
void StorageService_PhysicalMedium_SMART::clear_temperature() {
  temperature_ = 0u;
}
::google::protobuf::uint32 StorageService_PhysicalMedium_SMART::temperature() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.SMART.temperature)
  return temperature_;
}
void StorageService_PhysicalMedium_SMART::set_temperature(::google::protobuf::uint32 value) {
  
  temperature_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.SMART.temperature)
}

// uint32 reallocation_event_count = 6;
void StorageService_PhysicalMedium_SMART::clear_reallocation_event_count() {
  reallocation_event_count_ = 0u;
}
::google::protobuf::uint32 StorageService_PhysicalMedium_SMART::reallocation_event_count() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.SMART.reallocation_event_count)
  return reallocation_event_count_;
}
void StorageService_PhysicalMedium_SMART::set_reallocation_event_count(::google::protobuf::uint32 value) {
  
  reallocation_event_count_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.SMART.reallocation_event_count)
}

// uint32 current_pending_sector_count = 7;
void StorageService_PhysicalMedium_SMART::clear_current_pending_sector_count() {
  current_pending_sector_count_ = 0u;
}
::google::protobuf::uint32 StorageService_PhysicalMedium_SMART::current_pending_sector_count() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.SMART.current_pending_sector_count)
  return current_pending_sector_count_;
}
void StorageService_PhysicalMedium_SMART::set_current_pending_sector_count(::google::protobuf::uint32 value) {
  
  current_pending_sector_count_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.SMART.current_pending_sector_count)
}

// uint32 uncorrectable_sector_count = 8;
void StorageService_PhysicalMedium_SMART::clear_uncorrectable_sector_count() {
  uncorrectable_sector_count_ = 0u;
}
::google::protobuf::uint32 StorageService_PhysicalMedium_SMART::uncorrectable_sector_count() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.SMART.uncorrectable_sector_count)
  return uncorrectable_sector_count_;
}
void StorageService_PhysicalMedium_SMART::set_uncorrectable_sector_count(::google::protobuf::uint32 value) {
  
  uncorrectable_sector_count_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.SMART.uncorrectable_sector_count)
}

// uint32 read_errors = 9;
void StorageService_PhysicalMedium_SMART::clear_read_errors() {
  read_errors_ = 0u;
}
::google::protobuf::uint32 StorageService_PhysicalMedium_SMART::read_errors() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.SMART.read_errors)
  return read_errors_;
}
void StorageService_PhysicalMedium_SMART::set_read_errors(::google::protobuf::uint32 value) {
  
  read_errors_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.SMART.read_errors)
}

// uint32 soft_read_errors = 10;
void StorageService_PhysicalMedium_SMART::clear_soft_read_errors() {
  soft_read_errors_ = 0u;
}
::google::protobuf::uint32 StorageService_PhysicalMedium_SMART::soft_read_errors() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.SMART.soft_read_errors)
  return soft_read_errors_;
}
void StorageService_PhysicalMedium_SMART::set_soft_read_errors(::google::protobuf::uint32 value) {
  
  soft_read_errors_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.SMART.soft_read_errors)
}

// uint32 write_errors = 11;
void StorageService_PhysicalMedium_SMART::clear_write_errors() {
  write_errors_ = 0u;
}
::google::protobuf::uint32 StorageService_PhysicalMedium_SMART::write_errors() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.SMART.write_errors)
  return write_errors_;
}
void StorageService_PhysicalMedium_SMART::set_write_errors(::google::protobuf::uint32 value) {
  
  write_errors_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.SMART.write_errors)
}

// uint32 spares_remaining = 12;
void StorageService_PhysicalMedium_SMART::clear_spares_remaining() {
  spares_remaining_ = 0u;
}
::google::protobuf::uint32 StorageService_PhysicalMedium_SMART::spares_remaining() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.SMART.spares_remaining)
  return spares_remaining_;
}
void StorageService_PhysicalMedium_SMART::set_spares_remaining(::google::protobuf::uint32 value) {
  
  spares_remaining_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.SMART.spares_remaining)
}

// int32 predicted_failure = 13;
void StorageService_PhysicalMedium_SMART::clear_predicted_failure() {
  predicted_failure_ = 0;
}
::google::protobuf::int32 StorageService_PhysicalMedium_SMART::predicted_failure() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.SMART.predicted_failure)
  return predicted_failure_;
}
void StorageService_PhysicalMedium_SMART::set_predicted_failure(::google::protobuf::int32 value) {
  
  predicted_failure_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.SMART.predicted_failure)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageService_PhysicalMedium::kAliasFieldNumber;
const int StorageService_PhysicalMedium::kNameFieldNumber;
const int StorageService_PhysicalMedium::kVendorFieldNumber;
const int StorageService_PhysicalMedium::kModelFieldNumber;
const int StorageService_PhysicalMedium::kSerialNumberFieldNumber;
const int StorageService_PhysicalMedium::kFirmwareVersionFieldNumber;
const int StorageService_PhysicalMedium::kConnectionTypeFieldNumber;
const int StorageService_PhysicalMedium::kTypeFieldNumber;
const int StorageService_PhysicalMedium::kRemovableFieldNumber;
const int StorageService_PhysicalMedium::kCapacityFieldNumber;
const int StorageService_PhysicalMedium::kStatusFieldNumber;
const int StorageService_PhysicalMedium::kUptimeFieldNumber;
const int StorageService_PhysicalMedium::kSmartcapableFieldNumber;
const int StorageService_PhysicalMedium::kHealthFieldNumber;
const int StorageService_PhysicalMedium::kHotSwappableFieldNumber;
const int StorageService_PhysicalMedium::kSmartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageService_PhysicalMedium::StorageService_PhysicalMedium()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tr_2d140_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tr140.StorageService.PhysicalMedium)
}
StorageService_PhysicalMedium::StorageService_PhysicalMedium(const StorageService_PhysicalMedium& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.alias().size() > 0) {
    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  vendor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vendor().size() > 0) {
    vendor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendor_);
  }
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model().size() > 0) {
    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  firmware_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.firmware_version().size() > 0) {
    firmware_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmware_version_);
  }
  connection_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.connection_type().size() > 0) {
    connection_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_type_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status().size() > 0) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  health_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.health().size() > 0) {
    health_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.health_);
  }
  if (from.has_smart()) {
    smart_ = new ::tr140::StorageService_PhysicalMedium_SMART(*from.smart_);
  } else {
    smart_ = NULL;
  }
  ::memcpy(&capacity_, &from.capacity_,
    reinterpret_cast<char*>(&hot_swappable_) -
    reinterpret_cast<char*>(&capacity_) + sizeof(hot_swappable_));
  // @@protoc_insertion_point(copy_constructor:tr140.StorageService.PhysicalMedium)
}

void StorageService_PhysicalMedium::SharedCtor() {
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connection_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  health_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&smart_, 0, reinterpret_cast<char*>(&hot_swappable_) -
    reinterpret_cast<char*>(&smart_) + sizeof(hot_swappable_));
  _cached_size_ = 0;
}

StorageService_PhysicalMedium::~StorageService_PhysicalMedium() {
  // @@protoc_insertion_point(destructor:tr140.StorageService.PhysicalMedium)
  SharedDtor();
}

void StorageService_PhysicalMedium::SharedDtor() {
  alias_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connection_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  health_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete smart_;
  }
}

void StorageService_PhysicalMedium::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageService_PhysicalMedium::descriptor() {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StorageService_PhysicalMedium& StorageService_PhysicalMedium::default_instance() {
  protobuf_tr_2d140_2eproto::InitDefaults();
  return *internal_default_instance();
}

StorageService_PhysicalMedium* StorageService_PhysicalMedium::New(::google::protobuf::Arena* arena) const {
  StorageService_PhysicalMedium* n = new StorageService_PhysicalMedium;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StorageService_PhysicalMedium::Clear() {
// @@protoc_insertion_point(message_clear_start:tr140.StorageService.PhysicalMedium)
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connection_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  health_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && smart_ != NULL) {
    delete smart_;
  }
  smart_ = NULL;
  ::memset(&capacity_, 0, reinterpret_cast<char*>(&hot_swappable_) -
    reinterpret_cast<char*>(&capacity_) + sizeof(hot_swappable_));
}

bool StorageService_PhysicalMedium::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tr140.StorageService.PhysicalMedium)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string alias = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.PhysicalMedium.alias"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.PhysicalMedium.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vendor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vendor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vendor().data(), this->vendor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.PhysicalMedium.vendor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.PhysicalMedium.model"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serial_number = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), this->serial_number().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.PhysicalMedium.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string firmware_version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firmware_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->firmware_version().data(), this->firmware_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.PhysicalMedium.firmware_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string connection_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connection_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->connection_type().data(), this->connection_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.PhysicalMedium.connection_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.PhysicalMedium.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool removable = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &removable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 capacity = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string status = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.PhysicalMedium.status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uptime = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uptime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool smartcapable = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &smartcapable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string health = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_health()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->health().data(), this->health().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.PhysicalMedium.health"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool hot_swappable = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hot_swappable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tr140.StorageService.PhysicalMedium.SMART smart = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smart()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tr140.StorageService.PhysicalMedium)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tr140.StorageService.PhysicalMedium)
  return false;
#undef DO_
}

void StorageService_PhysicalMedium::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tr140.StorageService.PhysicalMedium)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string alias = 1;
  if (this->alias().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.PhysicalMedium.alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->alias(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.PhysicalMedium.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string vendor = 3;
  if (this->vendor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vendor().data(), this->vendor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.PhysicalMedium.vendor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->vendor(), output);
  }

  // string model = 4;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.PhysicalMedium.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->model(), output);
  }

  // string serial_number = 5;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.PhysicalMedium.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->serial_number(), output);
  }

  // string firmware_version = 6;
  if (this->firmware_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firmware_version().data(), this->firmware_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.PhysicalMedium.firmware_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->firmware_version(), output);
  }

  // string connection_type = 7;
  if (this->connection_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->connection_type().data(), this->connection_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.PhysicalMedium.connection_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->connection_type(), output);
  }

  // string type = 8;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.PhysicalMedium.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->type(), output);
  }

  // bool removable = 9;
  if (this->removable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->removable(), output);
  }

  // uint32 capacity = 10;
  if (this->capacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->capacity(), output);
  }

  // string status = 11;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.PhysicalMedium.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->status(), output);
  }

  // uint32 uptime = 12;
  if (this->uptime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->uptime(), output);
  }

  // bool smartcapable = 13;
  if (this->smartcapable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->smartcapable(), output);
  }

  // string health = 14;
  if (this->health().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->health().data(), this->health().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.PhysicalMedium.health");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->health(), output);
  }

  // bool hot_swappable = 15;
  if (this->hot_swappable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->hot_swappable(), output);
  }

  // .tr140.StorageService.PhysicalMedium.SMART smart = 16;
  if (this->has_smart()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->smart_, output);
  }

  // @@protoc_insertion_point(serialize_end:tr140.StorageService.PhysicalMedium)
}

::google::protobuf::uint8* StorageService_PhysicalMedium::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tr140.StorageService.PhysicalMedium)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string alias = 1;
  if (this->alias().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.PhysicalMedium.alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->alias(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.PhysicalMedium.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string vendor = 3;
  if (this->vendor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vendor().data(), this->vendor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.PhysicalMedium.vendor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->vendor(), target);
  }

  // string model = 4;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.PhysicalMedium.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->model(), target);
  }

  // string serial_number = 5;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.PhysicalMedium.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->serial_number(), target);
  }

  // string firmware_version = 6;
  if (this->firmware_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firmware_version().data(), this->firmware_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.PhysicalMedium.firmware_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->firmware_version(), target);
  }

  // string connection_type = 7;
  if (this->connection_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->connection_type().data(), this->connection_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.PhysicalMedium.connection_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->connection_type(), target);
  }

  // string type = 8;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.PhysicalMedium.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->type(), target);
  }

  // bool removable = 9;
  if (this->removable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->removable(), target);
  }

  // uint32 capacity = 10;
  if (this->capacity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->capacity(), target);
  }

  // string status = 11;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.PhysicalMedium.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->status(), target);
  }

  // uint32 uptime = 12;
  if (this->uptime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->uptime(), target);
  }

  // bool smartcapable = 13;
  if (this->smartcapable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->smartcapable(), target);
  }

  // string health = 14;
  if (this->health().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->health().data(), this->health().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.PhysicalMedium.health");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->health(), target);
  }

  // bool hot_swappable = 15;
  if (this->hot_swappable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->hot_swappable(), target);
  }

  // .tr140.StorageService.PhysicalMedium.SMART smart = 16;
  if (this->has_smart()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->smart_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tr140.StorageService.PhysicalMedium)
  return target;
}

size_t StorageService_PhysicalMedium::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tr140.StorageService.PhysicalMedium)
  size_t total_size = 0;

  // string alias = 1;
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alias());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string vendor = 3;
  if (this->vendor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vendor());
  }

  // string model = 4;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  // string serial_number = 5;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // string firmware_version = 6;
  if (this->firmware_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->firmware_version());
  }

  // string connection_type = 7;
  if (this->connection_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->connection_type());
  }

  // string type = 8;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string status = 11;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  // string health = 14;
  if (this->health().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->health());
  }

  // .tr140.StorageService.PhysicalMedium.SMART smart = 16;
  if (this->has_smart()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->smart_);
  }

  // uint32 capacity = 10;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->capacity());
  }

  // uint32 uptime = 12;
  if (this->uptime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uptime());
  }

  // bool removable = 9;
  if (this->removable() != 0) {
    total_size += 1 + 1;
  }

  // bool smartcapable = 13;
  if (this->smartcapable() != 0) {
    total_size += 1 + 1;
  }

  // bool hot_swappable = 15;
  if (this->hot_swappable() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageService_PhysicalMedium::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tr140.StorageService.PhysicalMedium)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageService_PhysicalMedium* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageService_PhysicalMedium>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tr140.StorageService.PhysicalMedium)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tr140.StorageService.PhysicalMedium)
    MergeFrom(*source);
  }
}

void StorageService_PhysicalMedium::MergeFrom(const StorageService_PhysicalMedium& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tr140.StorageService.PhysicalMedium)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.alias().size() > 0) {

    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.vendor().size() > 0) {

    vendor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendor_);
  }
  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.firmware_version().size() > 0) {

    firmware_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmware_version_);
  }
  if (from.connection_type().size() > 0) {

    connection_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_type_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.health().size() > 0) {

    health_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.health_);
  }
  if (from.has_smart()) {
    mutable_smart()->::tr140::StorageService_PhysicalMedium_SMART::MergeFrom(from.smart());
  }
  if (from.capacity() != 0) {
    set_capacity(from.capacity());
  }
  if (from.uptime() != 0) {
    set_uptime(from.uptime());
  }
  if (from.removable() != 0) {
    set_removable(from.removable());
  }
  if (from.smartcapable() != 0) {
    set_smartcapable(from.smartcapable());
  }
  if (from.hot_swappable() != 0) {
    set_hot_swappable(from.hot_swappable());
  }
}

void StorageService_PhysicalMedium::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tr140.StorageService.PhysicalMedium)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageService_PhysicalMedium::CopyFrom(const StorageService_PhysicalMedium& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tr140.StorageService.PhysicalMedium)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageService_PhysicalMedium::IsInitialized() const {
  return true;
}

void StorageService_PhysicalMedium::Swap(StorageService_PhysicalMedium* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageService_PhysicalMedium::InternalSwap(StorageService_PhysicalMedium* other) {
  alias_.Swap(&other->alias_);
  name_.Swap(&other->name_);
  vendor_.Swap(&other->vendor_);
  model_.Swap(&other->model_);
  serial_number_.Swap(&other->serial_number_);
  firmware_version_.Swap(&other->firmware_version_);
  connection_type_.Swap(&other->connection_type_);
  type_.Swap(&other->type_);
  status_.Swap(&other->status_);
  health_.Swap(&other->health_);
  std::swap(smart_, other->smart_);
  std::swap(capacity_, other->capacity_);
  std::swap(uptime_, other->uptime_);
  std::swap(removable_, other->removable_);
  std::swap(smartcapable_, other->smartcapable_);
  std::swap(hot_swappable_, other->hot_swappable_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StorageService_PhysicalMedium::GetMetadata() const {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StorageService_PhysicalMedium

// string alias = 1;
void StorageService_PhysicalMedium::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_PhysicalMedium::alias() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.alias)
  return alias_.GetNoArena();
}
void StorageService_PhysicalMedium::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.alias)
}
#if LANG_CXX11
void StorageService_PhysicalMedium::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.PhysicalMedium.alias)
}
#endif
void StorageService_PhysicalMedium::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.PhysicalMedium.alias)
}
void StorageService_PhysicalMedium::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.PhysicalMedium.alias)
}
::std::string* StorageService_PhysicalMedium::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.PhysicalMedium.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_PhysicalMedium::release_alias() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.PhysicalMedium.alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_PhysicalMedium::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.PhysicalMedium.alias)
}

// string name = 2;
void StorageService_PhysicalMedium::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_PhysicalMedium::name() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.name)
  return name_.GetNoArena();
}
void StorageService_PhysicalMedium::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.name)
}
#if LANG_CXX11
void StorageService_PhysicalMedium::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.PhysicalMedium.name)
}
#endif
void StorageService_PhysicalMedium::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.PhysicalMedium.name)
}
void StorageService_PhysicalMedium::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.PhysicalMedium.name)
}
::std::string* StorageService_PhysicalMedium::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.PhysicalMedium.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_PhysicalMedium::release_name() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.PhysicalMedium.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_PhysicalMedium::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.PhysicalMedium.name)
}

// string vendor = 3;
void StorageService_PhysicalMedium::clear_vendor() {
  vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_PhysicalMedium::vendor() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.vendor)
  return vendor_.GetNoArena();
}
void StorageService_PhysicalMedium::set_vendor(const ::std::string& value) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.vendor)
}
#if LANG_CXX11
void StorageService_PhysicalMedium::set_vendor(::std::string&& value) {
  
  vendor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.PhysicalMedium.vendor)
}
#endif
void StorageService_PhysicalMedium::set_vendor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.PhysicalMedium.vendor)
}
void StorageService_PhysicalMedium::set_vendor(const char* value, size_t size) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.PhysicalMedium.vendor)
}
::std::string* StorageService_PhysicalMedium::mutable_vendor() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.PhysicalMedium.vendor)
  return vendor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_PhysicalMedium::release_vendor() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.PhysicalMedium.vendor)
  
  return vendor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_PhysicalMedium::set_allocated_vendor(::std::string* vendor) {
  if (vendor != NULL) {
    
  } else {
    
  }
  vendor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendor);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.PhysicalMedium.vendor)
}

// string model = 4;
void StorageService_PhysicalMedium::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_PhysicalMedium::model() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.model)
  return model_.GetNoArena();
}
void StorageService_PhysicalMedium::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.model)
}
#if LANG_CXX11
void StorageService_PhysicalMedium::set_model(::std::string&& value) {
  
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.PhysicalMedium.model)
}
#endif
void StorageService_PhysicalMedium::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.PhysicalMedium.model)
}
void StorageService_PhysicalMedium::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.PhysicalMedium.model)
}
::std::string* StorageService_PhysicalMedium::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.PhysicalMedium.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_PhysicalMedium::release_model() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.PhysicalMedium.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_PhysicalMedium::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.PhysicalMedium.model)
}

// string serial_number = 5;
void StorageService_PhysicalMedium::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_PhysicalMedium::serial_number() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.serial_number)
  return serial_number_.GetNoArena();
}
void StorageService_PhysicalMedium::set_serial_number(const ::std::string& value) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.serial_number)
}
#if LANG_CXX11
void StorageService_PhysicalMedium::set_serial_number(::std::string&& value) {
  
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.PhysicalMedium.serial_number)
}
#endif
void StorageService_PhysicalMedium::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.PhysicalMedium.serial_number)
}
void StorageService_PhysicalMedium::set_serial_number(const char* value, size_t size) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.PhysicalMedium.serial_number)
}
::std::string* StorageService_PhysicalMedium::mutable_serial_number() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.PhysicalMedium.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_PhysicalMedium::release_serial_number() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.PhysicalMedium.serial_number)
  
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_PhysicalMedium::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    
  } else {
    
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.PhysicalMedium.serial_number)
}

// string firmware_version = 6;
void StorageService_PhysicalMedium::clear_firmware_version() {
  firmware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_PhysicalMedium::firmware_version() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.firmware_version)
  return firmware_version_.GetNoArena();
}
void StorageService_PhysicalMedium::set_firmware_version(const ::std::string& value) {
  
  firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.firmware_version)
}
#if LANG_CXX11
void StorageService_PhysicalMedium::set_firmware_version(::std::string&& value) {
  
  firmware_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.PhysicalMedium.firmware_version)
}
#endif
void StorageService_PhysicalMedium::set_firmware_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.PhysicalMedium.firmware_version)
}
void StorageService_PhysicalMedium::set_firmware_version(const char* value, size_t size) {
  
  firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.PhysicalMedium.firmware_version)
}
::std::string* StorageService_PhysicalMedium::mutable_firmware_version() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.PhysicalMedium.firmware_version)
  return firmware_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_PhysicalMedium::release_firmware_version() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.PhysicalMedium.firmware_version)
  
  return firmware_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_PhysicalMedium::set_allocated_firmware_version(::std::string* firmware_version) {
  if (firmware_version != NULL) {
    
  } else {
    
  }
  firmware_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firmware_version);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.PhysicalMedium.firmware_version)
}

// string connection_type = 7;
void StorageService_PhysicalMedium::clear_connection_type() {
  connection_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_PhysicalMedium::connection_type() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.connection_type)
  return connection_type_.GetNoArena();
}
void StorageService_PhysicalMedium::set_connection_type(const ::std::string& value) {
  
  connection_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.connection_type)
}
#if LANG_CXX11
void StorageService_PhysicalMedium::set_connection_type(::std::string&& value) {
  
  connection_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.PhysicalMedium.connection_type)
}
#endif
void StorageService_PhysicalMedium::set_connection_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  connection_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.PhysicalMedium.connection_type)
}
void StorageService_PhysicalMedium::set_connection_type(const char* value, size_t size) {
  
  connection_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.PhysicalMedium.connection_type)
}
::std::string* StorageService_PhysicalMedium::mutable_connection_type() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.PhysicalMedium.connection_type)
  return connection_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_PhysicalMedium::release_connection_type() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.PhysicalMedium.connection_type)
  
  return connection_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_PhysicalMedium::set_allocated_connection_type(::std::string* connection_type) {
  if (connection_type != NULL) {
    
  } else {
    
  }
  connection_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connection_type);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.PhysicalMedium.connection_type)
}

// string type = 8;
void StorageService_PhysicalMedium::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_PhysicalMedium::type() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.type)
  return type_.GetNoArena();
}
void StorageService_PhysicalMedium::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.type)
}
#if LANG_CXX11
void StorageService_PhysicalMedium::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.PhysicalMedium.type)
}
#endif
void StorageService_PhysicalMedium::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.PhysicalMedium.type)
}
void StorageService_PhysicalMedium::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.PhysicalMedium.type)
}
::std::string* StorageService_PhysicalMedium::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.PhysicalMedium.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_PhysicalMedium::release_type() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.PhysicalMedium.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_PhysicalMedium::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.PhysicalMedium.type)
}

// bool removable = 9;
void StorageService_PhysicalMedium::clear_removable() {
  removable_ = false;
}
bool StorageService_PhysicalMedium::removable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.removable)
  return removable_;
}
void StorageService_PhysicalMedium::set_removable(bool value) {
  
  removable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.removable)
}

// uint32 capacity = 10;
void StorageService_PhysicalMedium::clear_capacity() {
  capacity_ = 0u;
}
::google::protobuf::uint32 StorageService_PhysicalMedium::capacity() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.capacity)
  return capacity_;
}
void StorageService_PhysicalMedium::set_capacity(::google::protobuf::uint32 value) {
  
  capacity_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.capacity)
}

// string status = 11;
void StorageService_PhysicalMedium::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_PhysicalMedium::status() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.status)
  return status_.GetNoArena();
}
void StorageService_PhysicalMedium::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.status)
}
#if LANG_CXX11
void StorageService_PhysicalMedium::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.PhysicalMedium.status)
}
#endif
void StorageService_PhysicalMedium::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.PhysicalMedium.status)
}
void StorageService_PhysicalMedium::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.PhysicalMedium.status)
}
::std::string* StorageService_PhysicalMedium::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.PhysicalMedium.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_PhysicalMedium::release_status() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.PhysicalMedium.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_PhysicalMedium::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.PhysicalMedium.status)
}

// uint32 uptime = 12;
void StorageService_PhysicalMedium::clear_uptime() {
  uptime_ = 0u;
}
::google::protobuf::uint32 StorageService_PhysicalMedium::uptime() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.uptime)
  return uptime_;
}
void StorageService_PhysicalMedium::set_uptime(::google::protobuf::uint32 value) {
  
  uptime_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.uptime)
}

// bool smartcapable = 13;
void StorageService_PhysicalMedium::clear_smartcapable() {
  smartcapable_ = false;
}
bool StorageService_PhysicalMedium::smartcapable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.smartcapable)
  return smartcapable_;
}
void StorageService_PhysicalMedium::set_smartcapable(bool value) {
  
  smartcapable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.smartcapable)
}

// string health = 14;
void StorageService_PhysicalMedium::clear_health() {
  health_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_PhysicalMedium::health() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.health)
  return health_.GetNoArena();
}
void StorageService_PhysicalMedium::set_health(const ::std::string& value) {
  
  health_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.health)
}
#if LANG_CXX11
void StorageService_PhysicalMedium::set_health(::std::string&& value) {
  
  health_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.PhysicalMedium.health)
}
#endif
void StorageService_PhysicalMedium::set_health(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  health_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.PhysicalMedium.health)
}
void StorageService_PhysicalMedium::set_health(const char* value, size_t size) {
  
  health_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.PhysicalMedium.health)
}
::std::string* StorageService_PhysicalMedium::mutable_health() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.PhysicalMedium.health)
  return health_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_PhysicalMedium::release_health() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.PhysicalMedium.health)
  
  return health_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_PhysicalMedium::set_allocated_health(::std::string* health) {
  if (health != NULL) {
    
  } else {
    
  }
  health_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), health);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.PhysicalMedium.health)
}

// bool hot_swappable = 15;
void StorageService_PhysicalMedium::clear_hot_swappable() {
  hot_swappable_ = false;
}
bool StorageService_PhysicalMedium::hot_swappable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.hot_swappable)
  return hot_swappable_;
}
void StorageService_PhysicalMedium::set_hot_swappable(bool value) {
  
  hot_swappable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.PhysicalMedium.hot_swappable)
}

// .tr140.StorageService.PhysicalMedium.SMART smart = 16;
bool StorageService_PhysicalMedium::has_smart() const {
  return this != internal_default_instance() && smart_ != NULL;
}
void StorageService_PhysicalMedium::clear_smart() {
  if (GetArenaNoVirtual() == NULL && smart_ != NULL) delete smart_;
  smart_ = NULL;
}
const ::tr140::StorageService_PhysicalMedium_SMART& StorageService_PhysicalMedium::smart() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.PhysicalMedium.smart)
  return smart_ != NULL ? *smart_
                         : *::tr140::StorageService_PhysicalMedium_SMART::internal_default_instance();
}
::tr140::StorageService_PhysicalMedium_SMART* StorageService_PhysicalMedium::mutable_smart() {
  
  if (smart_ == NULL) {
    smart_ = new ::tr140::StorageService_PhysicalMedium_SMART;
  }
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.PhysicalMedium.smart)
  return smart_;
}
::tr140::StorageService_PhysicalMedium_SMART* StorageService_PhysicalMedium::release_smart() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.PhysicalMedium.smart)
  
  ::tr140::StorageService_PhysicalMedium_SMART* temp = smart_;
  smart_ = NULL;
  return temp;
}
void StorageService_PhysicalMedium::set_allocated_smart(::tr140::StorageService_PhysicalMedium_SMART* smart) {
  delete smart_;
  smart_ = smart;
  if (smart) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.PhysicalMedium.smart)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageService_StorageArray::kAliasFieldNumber;
const int StorageService_StorageArray::kNameFieldNumber;
const int StorageService_StorageArray::kStatusFieldNumber;
const int StorageService_StorageArray::kEnableFieldNumber;
const int StorageService_StorageArray::kRaidTypeFieldNumber;
const int StorageService_StorageArray::kUsableCapacityFieldNumber;
const int StorageService_StorageArray::kPhysicalMediumReferenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageService_StorageArray::StorageService_StorageArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tr_2d140_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tr140.StorageService.StorageArray)
}
StorageService_StorageArray::StorageService_StorageArray(const StorageService_StorageArray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.alias().size() > 0) {
    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status().size() > 0) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  raid_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.raid_type().size() > 0) {
    raid_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raid_type_);
  }
  physical_medium_reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.physical_medium_reference().size() > 0) {
    physical_medium_reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.physical_medium_reference_);
  }
  ::memcpy(&enable_, &from.enable_,
    reinterpret_cast<char*>(&usable_capacity_) -
    reinterpret_cast<char*>(&enable_) + sizeof(usable_capacity_));
  // @@protoc_insertion_point(copy_constructor:tr140.StorageService.StorageArray)
}

void StorageService_StorageArray::SharedCtor() {
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raid_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  physical_medium_reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&enable_, 0, reinterpret_cast<char*>(&usable_capacity_) -
    reinterpret_cast<char*>(&enable_) + sizeof(usable_capacity_));
  _cached_size_ = 0;
}

StorageService_StorageArray::~StorageService_StorageArray() {
  // @@protoc_insertion_point(destructor:tr140.StorageService.StorageArray)
  SharedDtor();
}

void StorageService_StorageArray::SharedDtor() {
  alias_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raid_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  physical_medium_reference_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StorageService_StorageArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageService_StorageArray::descriptor() {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StorageService_StorageArray& StorageService_StorageArray::default_instance() {
  protobuf_tr_2d140_2eproto::InitDefaults();
  return *internal_default_instance();
}

StorageService_StorageArray* StorageService_StorageArray::New(::google::protobuf::Arena* arena) const {
  StorageService_StorageArray* n = new StorageService_StorageArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StorageService_StorageArray::Clear() {
// @@protoc_insertion_point(message_clear_start:tr140.StorageService.StorageArray)
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raid_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  physical_medium_reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&enable_, 0, reinterpret_cast<char*>(&usable_capacity_) -
    reinterpret_cast<char*>(&enable_) + sizeof(usable_capacity_));
}

bool StorageService_StorageArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tr140.StorageService.StorageArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string alias = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.StorageArray.alias"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.StorageArray.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.StorageArray.status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string raid_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raid_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->raid_type().data(), this->raid_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.StorageArray.raid_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 usable_capacity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usable_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string physical_medium_reference = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_physical_medium_reference()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->physical_medium_reference().data(), this->physical_medium_reference().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.StorageArray.physical_medium_reference"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tr140.StorageService.StorageArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tr140.StorageService.StorageArray)
  return false;
#undef DO_
}

void StorageService_StorageArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tr140.StorageService.StorageArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string alias = 1;
  if (this->alias().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.StorageArray.alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->alias(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.StorageArray.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string status = 3;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.StorageArray.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->status(), output);
  }

  // bool enable = 4;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->enable(), output);
  }

  // string raid_type = 5;
  if (this->raid_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->raid_type().data(), this->raid_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.StorageArray.raid_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->raid_type(), output);
  }

  // uint32 usable_capacity = 6;
  if (this->usable_capacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->usable_capacity(), output);
  }

  // string physical_medium_reference = 7;
  if (this->physical_medium_reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->physical_medium_reference().data(), this->physical_medium_reference().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.StorageArray.physical_medium_reference");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->physical_medium_reference(), output);
  }

  // @@protoc_insertion_point(serialize_end:tr140.StorageService.StorageArray)
}

::google::protobuf::uint8* StorageService_StorageArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tr140.StorageService.StorageArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string alias = 1;
  if (this->alias().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.StorageArray.alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->alias(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.StorageArray.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string status = 3;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.StorageArray.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->status(), target);
  }

  // bool enable = 4;
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->enable(), target);
  }

  // string raid_type = 5;
  if (this->raid_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->raid_type().data(), this->raid_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.StorageArray.raid_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->raid_type(), target);
  }

  // uint32 usable_capacity = 6;
  if (this->usable_capacity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->usable_capacity(), target);
  }

  // string physical_medium_reference = 7;
  if (this->physical_medium_reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->physical_medium_reference().data(), this->physical_medium_reference().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.StorageArray.physical_medium_reference");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->physical_medium_reference(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tr140.StorageService.StorageArray)
  return target;
}

size_t StorageService_StorageArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tr140.StorageService.StorageArray)
  size_t total_size = 0;

  // string alias = 1;
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alias());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string status = 3;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  // string raid_type = 5;
  if (this->raid_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->raid_type());
  }

  // string physical_medium_reference = 7;
  if (this->physical_medium_reference().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->physical_medium_reference());
  }

  // bool enable = 4;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // uint32 usable_capacity = 6;
  if (this->usable_capacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->usable_capacity());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageService_StorageArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tr140.StorageService.StorageArray)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageService_StorageArray* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageService_StorageArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tr140.StorageService.StorageArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tr140.StorageService.StorageArray)
    MergeFrom(*source);
  }
}

void StorageService_StorageArray::MergeFrom(const StorageService_StorageArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tr140.StorageService.StorageArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.alias().size() > 0) {

    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.raid_type().size() > 0) {

    raid_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raid_type_);
  }
  if (from.physical_medium_reference().size() > 0) {

    physical_medium_reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.physical_medium_reference_);
  }
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
  if (from.usable_capacity() != 0) {
    set_usable_capacity(from.usable_capacity());
  }
}

void StorageService_StorageArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tr140.StorageService.StorageArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageService_StorageArray::CopyFrom(const StorageService_StorageArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tr140.StorageService.StorageArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageService_StorageArray::IsInitialized() const {
  return true;
}

void StorageService_StorageArray::Swap(StorageService_StorageArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageService_StorageArray::InternalSwap(StorageService_StorageArray* other) {
  alias_.Swap(&other->alias_);
  name_.Swap(&other->name_);
  status_.Swap(&other->status_);
  raid_type_.Swap(&other->raid_type_);
  physical_medium_reference_.Swap(&other->physical_medium_reference_);
  std::swap(enable_, other->enable_);
  std::swap(usable_capacity_, other->usable_capacity_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StorageService_StorageArray::GetMetadata() const {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StorageService_StorageArray

// string alias = 1;
void StorageService_StorageArray::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_StorageArray::alias() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.StorageArray.alias)
  return alias_.GetNoArena();
}
void StorageService_StorageArray::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.StorageArray.alias)
}
#if LANG_CXX11
void StorageService_StorageArray::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.StorageArray.alias)
}
#endif
void StorageService_StorageArray::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.StorageArray.alias)
}
void StorageService_StorageArray::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.StorageArray.alias)
}
::std::string* StorageService_StorageArray::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.StorageArray.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_StorageArray::release_alias() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.StorageArray.alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_StorageArray::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.StorageArray.alias)
}

// string name = 2;
void StorageService_StorageArray::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_StorageArray::name() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.StorageArray.name)
  return name_.GetNoArena();
}
void StorageService_StorageArray::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.StorageArray.name)
}
#if LANG_CXX11
void StorageService_StorageArray::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.StorageArray.name)
}
#endif
void StorageService_StorageArray::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.StorageArray.name)
}
void StorageService_StorageArray::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.StorageArray.name)
}
::std::string* StorageService_StorageArray::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.StorageArray.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_StorageArray::release_name() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.StorageArray.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_StorageArray::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.StorageArray.name)
}

// string status = 3;
void StorageService_StorageArray::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_StorageArray::status() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.StorageArray.status)
  return status_.GetNoArena();
}
void StorageService_StorageArray::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.StorageArray.status)
}
#if LANG_CXX11
void StorageService_StorageArray::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.StorageArray.status)
}
#endif
void StorageService_StorageArray::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.StorageArray.status)
}
void StorageService_StorageArray::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.StorageArray.status)
}
::std::string* StorageService_StorageArray::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.StorageArray.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_StorageArray::release_status() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.StorageArray.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_StorageArray::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.StorageArray.status)
}

// bool enable = 4;
void StorageService_StorageArray::clear_enable() {
  enable_ = false;
}
bool StorageService_StorageArray::enable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.StorageArray.enable)
  return enable_;
}
void StorageService_StorageArray::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.StorageArray.enable)
}

// string raid_type = 5;
void StorageService_StorageArray::clear_raid_type() {
  raid_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_StorageArray::raid_type() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.StorageArray.raid_type)
  return raid_type_.GetNoArena();
}
void StorageService_StorageArray::set_raid_type(const ::std::string& value) {
  
  raid_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.StorageArray.raid_type)
}
#if LANG_CXX11
void StorageService_StorageArray::set_raid_type(::std::string&& value) {
  
  raid_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.StorageArray.raid_type)
}
#endif
void StorageService_StorageArray::set_raid_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  raid_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.StorageArray.raid_type)
}
void StorageService_StorageArray::set_raid_type(const char* value, size_t size) {
  
  raid_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.StorageArray.raid_type)
}
::std::string* StorageService_StorageArray::mutable_raid_type() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.StorageArray.raid_type)
  return raid_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_StorageArray::release_raid_type() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.StorageArray.raid_type)
  
  return raid_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_StorageArray::set_allocated_raid_type(::std::string* raid_type) {
  if (raid_type != NULL) {
    
  } else {
    
  }
  raid_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raid_type);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.StorageArray.raid_type)
}

// uint32 usable_capacity = 6;
void StorageService_StorageArray::clear_usable_capacity() {
  usable_capacity_ = 0u;
}
::google::protobuf::uint32 StorageService_StorageArray::usable_capacity() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.StorageArray.usable_capacity)
  return usable_capacity_;
}
void StorageService_StorageArray::set_usable_capacity(::google::protobuf::uint32 value) {
  
  usable_capacity_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.StorageArray.usable_capacity)
}

// string physical_medium_reference = 7;
void StorageService_StorageArray::clear_physical_medium_reference() {
  physical_medium_reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_StorageArray::physical_medium_reference() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.StorageArray.physical_medium_reference)
  return physical_medium_reference_.GetNoArena();
}
void StorageService_StorageArray::set_physical_medium_reference(const ::std::string& value) {
  
  physical_medium_reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.StorageArray.physical_medium_reference)
}
#if LANG_CXX11
void StorageService_StorageArray::set_physical_medium_reference(::std::string&& value) {
  
  physical_medium_reference_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.StorageArray.physical_medium_reference)
}
#endif
void StorageService_StorageArray::set_physical_medium_reference(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  physical_medium_reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.StorageArray.physical_medium_reference)
}
void StorageService_StorageArray::set_physical_medium_reference(const char* value, size_t size) {
  
  physical_medium_reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.StorageArray.physical_medium_reference)
}
::std::string* StorageService_StorageArray::mutable_physical_medium_reference() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.StorageArray.physical_medium_reference)
  return physical_medium_reference_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_StorageArray::release_physical_medium_reference() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.StorageArray.physical_medium_reference)
  
  return physical_medium_reference_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_StorageArray::set_allocated_physical_medium_reference(::std::string* physical_medium_reference) {
  if (physical_medium_reference != NULL) {
    
  } else {
    
  }
  physical_medium_reference_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), physical_medium_reference);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.StorageArray.physical_medium_reference)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageService_LogicalVolume_Folder_UserAccess::kAliasFieldNumber;
const int StorageService_LogicalVolume_Folder_UserAccess::kEnableFieldNumber;
const int StorageService_LogicalVolume_Folder_UserAccess::kUserReferenceFieldNumber;
const int StorageService_LogicalVolume_Folder_UserAccess::kPermissionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageService_LogicalVolume_Folder_UserAccess::StorageService_LogicalVolume_Folder_UserAccess()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tr_2d140_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tr140.StorageService.LogicalVolume.Folder.UserAccess)
}
StorageService_LogicalVolume_Folder_UserAccess::StorageService_LogicalVolume_Folder_UserAccess(const StorageService_LogicalVolume_Folder_UserAccess& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.alias().size() > 0) {
    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  user_reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_reference().size() > 0) {
    user_reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_reference_);
  }
  ::memcpy(&enable_, &from.enable_,
    reinterpret_cast<char*>(&permissions_) -
    reinterpret_cast<char*>(&enable_) + sizeof(permissions_));
  // @@protoc_insertion_point(copy_constructor:tr140.StorageService.LogicalVolume.Folder.UserAccess)
}

void StorageService_LogicalVolume_Folder_UserAccess::SharedCtor() {
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&enable_, 0, reinterpret_cast<char*>(&permissions_) -
    reinterpret_cast<char*>(&enable_) + sizeof(permissions_));
  _cached_size_ = 0;
}

StorageService_LogicalVolume_Folder_UserAccess::~StorageService_LogicalVolume_Folder_UserAccess() {
  // @@protoc_insertion_point(destructor:tr140.StorageService.LogicalVolume.Folder.UserAccess)
  SharedDtor();
}

void StorageService_LogicalVolume_Folder_UserAccess::SharedDtor() {
  alias_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_reference_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StorageService_LogicalVolume_Folder_UserAccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageService_LogicalVolume_Folder_UserAccess::descriptor() {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StorageService_LogicalVolume_Folder_UserAccess& StorageService_LogicalVolume_Folder_UserAccess::default_instance() {
  protobuf_tr_2d140_2eproto::InitDefaults();
  return *internal_default_instance();
}

StorageService_LogicalVolume_Folder_UserAccess* StorageService_LogicalVolume_Folder_UserAccess::New(::google::protobuf::Arena* arena) const {
  StorageService_LogicalVolume_Folder_UserAccess* n = new StorageService_LogicalVolume_Folder_UserAccess;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StorageService_LogicalVolume_Folder_UserAccess::Clear() {
// @@protoc_insertion_point(message_clear_start:tr140.StorageService.LogicalVolume.Folder.UserAccess)
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&enable_, 0, reinterpret_cast<char*>(&permissions_) -
    reinterpret_cast<char*>(&enable_) + sizeof(permissions_));
}

bool StorageService_LogicalVolume_Folder_UserAccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tr140.StorageService.LogicalVolume.Folder.UserAccess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string alias = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.LogicalVolume.Folder.UserAccess.alias"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_reference = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_reference()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_reference().data(), this->user_reference().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.LogicalVolume.Folder.UserAccess.user_reference"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 permissions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &permissions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tr140.StorageService.LogicalVolume.Folder.UserAccess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tr140.StorageService.LogicalVolume.Folder.UserAccess)
  return false;
#undef DO_
}

void StorageService_LogicalVolume_Folder_UserAccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tr140.StorageService.LogicalVolume.Folder.UserAccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string alias = 1;
  if (this->alias().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.LogicalVolume.Folder.UserAccess.alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->alias(), output);
  }

  // bool enable = 2;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enable(), output);
  }

  // string user_reference = 3;
  if (this->user_reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_reference().data(), this->user_reference().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.LogicalVolume.Folder.UserAccess.user_reference");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_reference(), output);
  }

  // uint32 permissions = 4;
  if (this->permissions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->permissions(), output);
  }

  // @@protoc_insertion_point(serialize_end:tr140.StorageService.LogicalVolume.Folder.UserAccess)
}

::google::protobuf::uint8* StorageService_LogicalVolume_Folder_UserAccess::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tr140.StorageService.LogicalVolume.Folder.UserAccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string alias = 1;
  if (this->alias().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.LogicalVolume.Folder.UserAccess.alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->alias(), target);
  }

  // bool enable = 2;
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enable(), target);
  }

  // string user_reference = 3;
  if (this->user_reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_reference().data(), this->user_reference().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.LogicalVolume.Folder.UserAccess.user_reference");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_reference(), target);
  }

  // uint32 permissions = 4;
  if (this->permissions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->permissions(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tr140.StorageService.LogicalVolume.Folder.UserAccess)
  return target;
}

size_t StorageService_LogicalVolume_Folder_UserAccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tr140.StorageService.LogicalVolume.Folder.UserAccess)
  size_t total_size = 0;

  // string alias = 1;
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alias());
  }

  // string user_reference = 3;
  if (this->user_reference().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_reference());
  }

  // bool enable = 2;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // uint32 permissions = 4;
  if (this->permissions() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->permissions());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageService_LogicalVolume_Folder_UserAccess::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tr140.StorageService.LogicalVolume.Folder.UserAccess)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageService_LogicalVolume_Folder_UserAccess* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageService_LogicalVolume_Folder_UserAccess>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tr140.StorageService.LogicalVolume.Folder.UserAccess)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tr140.StorageService.LogicalVolume.Folder.UserAccess)
    MergeFrom(*source);
  }
}

void StorageService_LogicalVolume_Folder_UserAccess::MergeFrom(const StorageService_LogicalVolume_Folder_UserAccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tr140.StorageService.LogicalVolume.Folder.UserAccess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.alias().size() > 0) {

    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  if (from.user_reference().size() > 0) {

    user_reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_reference_);
  }
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
  if (from.permissions() != 0) {
    set_permissions(from.permissions());
  }
}

void StorageService_LogicalVolume_Folder_UserAccess::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tr140.StorageService.LogicalVolume.Folder.UserAccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageService_LogicalVolume_Folder_UserAccess::CopyFrom(const StorageService_LogicalVolume_Folder_UserAccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tr140.StorageService.LogicalVolume.Folder.UserAccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageService_LogicalVolume_Folder_UserAccess::IsInitialized() const {
  return true;
}

void StorageService_LogicalVolume_Folder_UserAccess::Swap(StorageService_LogicalVolume_Folder_UserAccess* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageService_LogicalVolume_Folder_UserAccess::InternalSwap(StorageService_LogicalVolume_Folder_UserAccess* other) {
  alias_.Swap(&other->alias_);
  user_reference_.Swap(&other->user_reference_);
  std::swap(enable_, other->enable_);
  std::swap(permissions_, other->permissions_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StorageService_LogicalVolume_Folder_UserAccess::GetMetadata() const {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StorageService_LogicalVolume_Folder_UserAccess

// string alias = 1;
void StorageService_LogicalVolume_Folder_UserAccess::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_LogicalVolume_Folder_UserAccess::alias() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.UserAccess.alias)
  return alias_.GetNoArena();
}
void StorageService_LogicalVolume_Folder_UserAccess::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.UserAccess.alias)
}
#if LANG_CXX11
void StorageService_LogicalVolume_Folder_UserAccess::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.LogicalVolume.Folder.UserAccess.alias)
}
#endif
void StorageService_LogicalVolume_Folder_UserAccess::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.LogicalVolume.Folder.UserAccess.alias)
}
void StorageService_LogicalVolume_Folder_UserAccess::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.LogicalVolume.Folder.UserAccess.alias)
}
::std::string* StorageService_LogicalVolume_Folder_UserAccess::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.LogicalVolume.Folder.UserAccess.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_LogicalVolume_Folder_UserAccess::release_alias() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.LogicalVolume.Folder.UserAccess.alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_LogicalVolume_Folder_UserAccess::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.LogicalVolume.Folder.UserAccess.alias)
}

// bool enable = 2;
void StorageService_LogicalVolume_Folder_UserAccess::clear_enable() {
  enable_ = false;
}
bool StorageService_LogicalVolume_Folder_UserAccess::enable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.UserAccess.enable)
  return enable_;
}
void StorageService_LogicalVolume_Folder_UserAccess::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.UserAccess.enable)
}

// string user_reference = 3;
void StorageService_LogicalVolume_Folder_UserAccess::clear_user_reference() {
  user_reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_LogicalVolume_Folder_UserAccess::user_reference() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.UserAccess.user_reference)
  return user_reference_.GetNoArena();
}
void StorageService_LogicalVolume_Folder_UserAccess::set_user_reference(const ::std::string& value) {
  
  user_reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.UserAccess.user_reference)
}
#if LANG_CXX11
void StorageService_LogicalVolume_Folder_UserAccess::set_user_reference(::std::string&& value) {
  
  user_reference_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.LogicalVolume.Folder.UserAccess.user_reference)
}
#endif
void StorageService_LogicalVolume_Folder_UserAccess::set_user_reference(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.LogicalVolume.Folder.UserAccess.user_reference)
}
void StorageService_LogicalVolume_Folder_UserAccess::set_user_reference(const char* value, size_t size) {
  
  user_reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.LogicalVolume.Folder.UserAccess.user_reference)
}
::std::string* StorageService_LogicalVolume_Folder_UserAccess::mutable_user_reference() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.LogicalVolume.Folder.UserAccess.user_reference)
  return user_reference_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_LogicalVolume_Folder_UserAccess::release_user_reference() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.LogicalVolume.Folder.UserAccess.user_reference)
  
  return user_reference_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_LogicalVolume_Folder_UserAccess::set_allocated_user_reference(::std::string* user_reference) {
  if (user_reference != NULL) {
    
  } else {
    
  }
  user_reference_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_reference);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.LogicalVolume.Folder.UserAccess.user_reference)
}

// uint32 permissions = 4;
void StorageService_LogicalVolume_Folder_UserAccess::clear_permissions() {
  permissions_ = 0u;
}
::google::protobuf::uint32 StorageService_LogicalVolume_Folder_UserAccess::permissions() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.UserAccess.permissions)
  return permissions_;
}
void StorageService_LogicalVolume_Folder_UserAccess::set_permissions(::google::protobuf::uint32 value) {
  
  permissions_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.UserAccess.permissions)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageService_LogicalVolume_Folder_GroupAccess::kAliasFieldNumber;
const int StorageService_LogicalVolume_Folder_GroupAccess::kEnableFieldNumber;
const int StorageService_LogicalVolume_Folder_GroupAccess::kGroupReferenceFieldNumber;
const int StorageService_LogicalVolume_Folder_GroupAccess::kPermissionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageService_LogicalVolume_Folder_GroupAccess::StorageService_LogicalVolume_Folder_GroupAccess()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tr_2d140_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tr140.StorageService.LogicalVolume.Folder.GroupAccess)
}
StorageService_LogicalVolume_Folder_GroupAccess::StorageService_LogicalVolume_Folder_GroupAccess(const StorageService_LogicalVolume_Folder_GroupAccess& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.alias().size() > 0) {
    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  group_reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_reference().size() > 0) {
    group_reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_reference_);
  }
  ::memcpy(&enable_, &from.enable_,
    reinterpret_cast<char*>(&permissions_) -
    reinterpret_cast<char*>(&enable_) + sizeof(permissions_));
  // @@protoc_insertion_point(copy_constructor:tr140.StorageService.LogicalVolume.Folder.GroupAccess)
}

void StorageService_LogicalVolume_Folder_GroupAccess::SharedCtor() {
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&enable_, 0, reinterpret_cast<char*>(&permissions_) -
    reinterpret_cast<char*>(&enable_) + sizeof(permissions_));
  _cached_size_ = 0;
}

StorageService_LogicalVolume_Folder_GroupAccess::~StorageService_LogicalVolume_Folder_GroupAccess() {
  // @@protoc_insertion_point(destructor:tr140.StorageService.LogicalVolume.Folder.GroupAccess)
  SharedDtor();
}

void StorageService_LogicalVolume_Folder_GroupAccess::SharedDtor() {
  alias_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_reference_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StorageService_LogicalVolume_Folder_GroupAccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageService_LogicalVolume_Folder_GroupAccess::descriptor() {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StorageService_LogicalVolume_Folder_GroupAccess& StorageService_LogicalVolume_Folder_GroupAccess::default_instance() {
  protobuf_tr_2d140_2eproto::InitDefaults();
  return *internal_default_instance();
}

StorageService_LogicalVolume_Folder_GroupAccess* StorageService_LogicalVolume_Folder_GroupAccess::New(::google::protobuf::Arena* arena) const {
  StorageService_LogicalVolume_Folder_GroupAccess* n = new StorageService_LogicalVolume_Folder_GroupAccess;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StorageService_LogicalVolume_Folder_GroupAccess::Clear() {
// @@protoc_insertion_point(message_clear_start:tr140.StorageService.LogicalVolume.Folder.GroupAccess)
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&enable_, 0, reinterpret_cast<char*>(&permissions_) -
    reinterpret_cast<char*>(&enable_) + sizeof(permissions_));
}

bool StorageService_LogicalVolume_Folder_GroupAccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tr140.StorageService.LogicalVolume.Folder.GroupAccess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string alias = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.LogicalVolume.Folder.GroupAccess.alias"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string group_reference = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_reference()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_reference().data(), this->group_reference().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.LogicalVolume.Folder.GroupAccess.group_reference"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 permissions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &permissions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tr140.StorageService.LogicalVolume.Folder.GroupAccess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tr140.StorageService.LogicalVolume.Folder.GroupAccess)
  return false;
#undef DO_
}

void StorageService_LogicalVolume_Folder_GroupAccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tr140.StorageService.LogicalVolume.Folder.GroupAccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string alias = 1;
  if (this->alias().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.LogicalVolume.Folder.GroupAccess.alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->alias(), output);
  }

  // bool enable = 2;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enable(), output);
  }

  // string group_reference = 3;
  if (this->group_reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_reference().data(), this->group_reference().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.LogicalVolume.Folder.GroupAccess.group_reference");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->group_reference(), output);
  }

  // uint32 permissions = 4;
  if (this->permissions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->permissions(), output);
  }

  // @@protoc_insertion_point(serialize_end:tr140.StorageService.LogicalVolume.Folder.GroupAccess)
}

::google::protobuf::uint8* StorageService_LogicalVolume_Folder_GroupAccess::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tr140.StorageService.LogicalVolume.Folder.GroupAccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string alias = 1;
  if (this->alias().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.LogicalVolume.Folder.GroupAccess.alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->alias(), target);
  }

  // bool enable = 2;
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enable(), target);
  }

  // string group_reference = 3;
  if (this->group_reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_reference().data(), this->group_reference().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.LogicalVolume.Folder.GroupAccess.group_reference");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->group_reference(), target);
  }

  // uint32 permissions = 4;
  if (this->permissions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->permissions(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tr140.StorageService.LogicalVolume.Folder.GroupAccess)
  return target;
}

size_t StorageService_LogicalVolume_Folder_GroupAccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tr140.StorageService.LogicalVolume.Folder.GroupAccess)
  size_t total_size = 0;

  // string alias = 1;
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alias());
  }

  // string group_reference = 3;
  if (this->group_reference().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_reference());
  }

  // bool enable = 2;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // uint32 permissions = 4;
  if (this->permissions() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->permissions());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageService_LogicalVolume_Folder_GroupAccess::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tr140.StorageService.LogicalVolume.Folder.GroupAccess)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageService_LogicalVolume_Folder_GroupAccess* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageService_LogicalVolume_Folder_GroupAccess>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tr140.StorageService.LogicalVolume.Folder.GroupAccess)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tr140.StorageService.LogicalVolume.Folder.GroupAccess)
    MergeFrom(*source);
  }
}

void StorageService_LogicalVolume_Folder_GroupAccess::MergeFrom(const StorageService_LogicalVolume_Folder_GroupAccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tr140.StorageService.LogicalVolume.Folder.GroupAccess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.alias().size() > 0) {

    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  if (from.group_reference().size() > 0) {

    group_reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_reference_);
  }
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
  if (from.permissions() != 0) {
    set_permissions(from.permissions());
  }
}

void StorageService_LogicalVolume_Folder_GroupAccess::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tr140.StorageService.LogicalVolume.Folder.GroupAccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageService_LogicalVolume_Folder_GroupAccess::CopyFrom(const StorageService_LogicalVolume_Folder_GroupAccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tr140.StorageService.LogicalVolume.Folder.GroupAccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageService_LogicalVolume_Folder_GroupAccess::IsInitialized() const {
  return true;
}

void StorageService_LogicalVolume_Folder_GroupAccess::Swap(StorageService_LogicalVolume_Folder_GroupAccess* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageService_LogicalVolume_Folder_GroupAccess::InternalSwap(StorageService_LogicalVolume_Folder_GroupAccess* other) {
  alias_.Swap(&other->alias_);
  group_reference_.Swap(&other->group_reference_);
  std::swap(enable_, other->enable_);
  std::swap(permissions_, other->permissions_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StorageService_LogicalVolume_Folder_GroupAccess::GetMetadata() const {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StorageService_LogicalVolume_Folder_GroupAccess

// string alias = 1;
void StorageService_LogicalVolume_Folder_GroupAccess::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_LogicalVolume_Folder_GroupAccess::alias() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.GroupAccess.alias)
  return alias_.GetNoArena();
}
void StorageService_LogicalVolume_Folder_GroupAccess::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.GroupAccess.alias)
}
#if LANG_CXX11
void StorageService_LogicalVolume_Folder_GroupAccess::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.LogicalVolume.Folder.GroupAccess.alias)
}
#endif
void StorageService_LogicalVolume_Folder_GroupAccess::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.LogicalVolume.Folder.GroupAccess.alias)
}
void StorageService_LogicalVolume_Folder_GroupAccess::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.LogicalVolume.Folder.GroupAccess.alias)
}
::std::string* StorageService_LogicalVolume_Folder_GroupAccess::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.LogicalVolume.Folder.GroupAccess.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_LogicalVolume_Folder_GroupAccess::release_alias() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.LogicalVolume.Folder.GroupAccess.alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_LogicalVolume_Folder_GroupAccess::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.LogicalVolume.Folder.GroupAccess.alias)
}

// bool enable = 2;
void StorageService_LogicalVolume_Folder_GroupAccess::clear_enable() {
  enable_ = false;
}
bool StorageService_LogicalVolume_Folder_GroupAccess::enable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.GroupAccess.enable)
  return enable_;
}
void StorageService_LogicalVolume_Folder_GroupAccess::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.GroupAccess.enable)
}

// string group_reference = 3;
void StorageService_LogicalVolume_Folder_GroupAccess::clear_group_reference() {
  group_reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_LogicalVolume_Folder_GroupAccess::group_reference() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.GroupAccess.group_reference)
  return group_reference_.GetNoArena();
}
void StorageService_LogicalVolume_Folder_GroupAccess::set_group_reference(const ::std::string& value) {
  
  group_reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.GroupAccess.group_reference)
}
#if LANG_CXX11
void StorageService_LogicalVolume_Folder_GroupAccess::set_group_reference(::std::string&& value) {
  
  group_reference_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.LogicalVolume.Folder.GroupAccess.group_reference)
}
#endif
void StorageService_LogicalVolume_Folder_GroupAccess::set_group_reference(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.LogicalVolume.Folder.GroupAccess.group_reference)
}
void StorageService_LogicalVolume_Folder_GroupAccess::set_group_reference(const char* value, size_t size) {
  
  group_reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.LogicalVolume.Folder.GroupAccess.group_reference)
}
::std::string* StorageService_LogicalVolume_Folder_GroupAccess::mutable_group_reference() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.LogicalVolume.Folder.GroupAccess.group_reference)
  return group_reference_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_LogicalVolume_Folder_GroupAccess::release_group_reference() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.LogicalVolume.Folder.GroupAccess.group_reference)
  
  return group_reference_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_LogicalVolume_Folder_GroupAccess::set_allocated_group_reference(::std::string* group_reference) {
  if (group_reference != NULL) {
    
  } else {
    
  }
  group_reference_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_reference);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.LogicalVolume.Folder.GroupAccess.group_reference)
}

// uint32 permissions = 4;
void StorageService_LogicalVolume_Folder_GroupAccess::clear_permissions() {
  permissions_ = 0u;
}
::google::protobuf::uint32 StorageService_LogicalVolume_Folder_GroupAccess::permissions() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.GroupAccess.permissions)
  return permissions_;
}
void StorageService_LogicalVolume_Folder_GroupAccess::set_permissions(::google::protobuf::uint32 value) {
  
  permissions_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.GroupAccess.permissions)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageService_LogicalVolume_Folder_Quota::kEnableFieldNumber;
const int StorageService_LogicalVolume_Folder_Quota::kCapacityFieldNumber;
const int StorageService_LogicalVolume_Folder_Quota::kUsedSpaceFieldNumber;
const int StorageService_LogicalVolume_Folder_Quota::kThresholdLimitFieldNumber;
const int StorageService_LogicalVolume_Folder_Quota::kThresholdReachedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageService_LogicalVolume_Folder_Quota::StorageService_LogicalVolume_Folder_Quota()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tr_2d140_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tr140.StorageService.LogicalVolume.Folder.Quota)
}
StorageService_LogicalVolume_Folder_Quota::StorageService_LogicalVolume_Folder_Quota(const StorageService_LogicalVolume_Folder_Quota& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&capacity_, &from.capacity_,
    reinterpret_cast<char*>(&threshold_limit_) -
    reinterpret_cast<char*>(&capacity_) + sizeof(threshold_limit_));
  // @@protoc_insertion_point(copy_constructor:tr140.StorageService.LogicalVolume.Folder.Quota)
}

void StorageService_LogicalVolume_Folder_Quota::SharedCtor() {
  ::memset(&capacity_, 0, reinterpret_cast<char*>(&threshold_limit_) -
    reinterpret_cast<char*>(&capacity_) + sizeof(threshold_limit_));
  _cached_size_ = 0;
}

StorageService_LogicalVolume_Folder_Quota::~StorageService_LogicalVolume_Folder_Quota() {
  // @@protoc_insertion_point(destructor:tr140.StorageService.LogicalVolume.Folder.Quota)
  SharedDtor();
}

void StorageService_LogicalVolume_Folder_Quota::SharedDtor() {
}

void StorageService_LogicalVolume_Folder_Quota::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageService_LogicalVolume_Folder_Quota::descriptor() {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StorageService_LogicalVolume_Folder_Quota& StorageService_LogicalVolume_Folder_Quota::default_instance() {
  protobuf_tr_2d140_2eproto::InitDefaults();
  return *internal_default_instance();
}

StorageService_LogicalVolume_Folder_Quota* StorageService_LogicalVolume_Folder_Quota::New(::google::protobuf::Arena* arena) const {
  StorageService_LogicalVolume_Folder_Quota* n = new StorageService_LogicalVolume_Folder_Quota;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StorageService_LogicalVolume_Folder_Quota::Clear() {
// @@protoc_insertion_point(message_clear_start:tr140.StorageService.LogicalVolume.Folder.Quota)
  ::memset(&capacity_, 0, reinterpret_cast<char*>(&threshold_limit_) -
    reinterpret_cast<char*>(&capacity_) + sizeof(threshold_limit_));
}

bool StorageService_LogicalVolume_Folder_Quota::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tr140.StorageService.LogicalVolume.Folder.Quota)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 capacity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 used_space = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &used_space_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 threshold_limit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &threshold_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool threshold_reached = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &threshold_reached_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tr140.StorageService.LogicalVolume.Folder.Quota)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tr140.StorageService.LogicalVolume.Folder.Quota)
  return false;
#undef DO_
}

void StorageService_LogicalVolume_Folder_Quota::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tr140.StorageService.LogicalVolume.Folder.Quota)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // uint32 capacity = 2;
  if (this->capacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->capacity(), output);
  }

  // uint32 used_space = 3;
  if (this->used_space() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->used_space(), output);
  }

  // uint32 threshold_limit = 4;
  if (this->threshold_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->threshold_limit(), output);
  }

  // bool threshold_reached = 5;
  if (this->threshold_reached() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->threshold_reached(), output);
  }

  // @@protoc_insertion_point(serialize_end:tr140.StorageService.LogicalVolume.Folder.Quota)
}

::google::protobuf::uint8* StorageService_LogicalVolume_Folder_Quota::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tr140.StorageService.LogicalVolume.Folder.Quota)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }

  // uint32 capacity = 2;
  if (this->capacity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->capacity(), target);
  }

  // uint32 used_space = 3;
  if (this->used_space() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->used_space(), target);
  }

  // uint32 threshold_limit = 4;
  if (this->threshold_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->threshold_limit(), target);
  }

  // bool threshold_reached = 5;
  if (this->threshold_reached() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->threshold_reached(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tr140.StorageService.LogicalVolume.Folder.Quota)
  return target;
}

size_t StorageService_LogicalVolume_Folder_Quota::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tr140.StorageService.LogicalVolume.Folder.Quota)
  size_t total_size = 0;

  // uint32 capacity = 2;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->capacity());
  }

  // uint32 used_space = 3;
  if (this->used_space() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->used_space());
  }

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // bool threshold_reached = 5;
  if (this->threshold_reached() != 0) {
    total_size += 1 + 1;
  }

  // uint32 threshold_limit = 4;
  if (this->threshold_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->threshold_limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageService_LogicalVolume_Folder_Quota::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tr140.StorageService.LogicalVolume.Folder.Quota)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageService_LogicalVolume_Folder_Quota* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageService_LogicalVolume_Folder_Quota>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tr140.StorageService.LogicalVolume.Folder.Quota)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tr140.StorageService.LogicalVolume.Folder.Quota)
    MergeFrom(*source);
  }
}

void StorageService_LogicalVolume_Folder_Quota::MergeFrom(const StorageService_LogicalVolume_Folder_Quota& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tr140.StorageService.LogicalVolume.Folder.Quota)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.capacity() != 0) {
    set_capacity(from.capacity());
  }
  if (from.used_space() != 0) {
    set_used_space(from.used_space());
  }
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
  if (from.threshold_reached() != 0) {
    set_threshold_reached(from.threshold_reached());
  }
  if (from.threshold_limit() != 0) {
    set_threshold_limit(from.threshold_limit());
  }
}

void StorageService_LogicalVolume_Folder_Quota::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tr140.StorageService.LogicalVolume.Folder.Quota)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageService_LogicalVolume_Folder_Quota::CopyFrom(const StorageService_LogicalVolume_Folder_Quota& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tr140.StorageService.LogicalVolume.Folder.Quota)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageService_LogicalVolume_Folder_Quota::IsInitialized() const {
  return true;
}

void StorageService_LogicalVolume_Folder_Quota::Swap(StorageService_LogicalVolume_Folder_Quota* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageService_LogicalVolume_Folder_Quota::InternalSwap(StorageService_LogicalVolume_Folder_Quota* other) {
  std::swap(capacity_, other->capacity_);
  std::swap(used_space_, other->used_space_);
  std::swap(enable_, other->enable_);
  std::swap(threshold_reached_, other->threshold_reached_);
  std::swap(threshold_limit_, other->threshold_limit_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StorageService_LogicalVolume_Folder_Quota::GetMetadata() const {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StorageService_LogicalVolume_Folder_Quota

// bool enable = 1;
void StorageService_LogicalVolume_Folder_Quota::clear_enable() {
  enable_ = false;
}
bool StorageService_LogicalVolume_Folder_Quota::enable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.Quota.enable)
  return enable_;
}
void StorageService_LogicalVolume_Folder_Quota::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.Quota.enable)
}

// uint32 capacity = 2;
void StorageService_LogicalVolume_Folder_Quota::clear_capacity() {
  capacity_ = 0u;
}
::google::protobuf::uint32 StorageService_LogicalVolume_Folder_Quota::capacity() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.Quota.capacity)
  return capacity_;
}
void StorageService_LogicalVolume_Folder_Quota::set_capacity(::google::protobuf::uint32 value) {
  
  capacity_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.Quota.capacity)
}

// uint32 used_space = 3;
void StorageService_LogicalVolume_Folder_Quota::clear_used_space() {
  used_space_ = 0u;
}
::google::protobuf::uint32 StorageService_LogicalVolume_Folder_Quota::used_space() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.Quota.used_space)
  return used_space_;
}
void StorageService_LogicalVolume_Folder_Quota::set_used_space(::google::protobuf::uint32 value) {
  
  used_space_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.Quota.used_space)
}

// uint32 threshold_limit = 4;
void StorageService_LogicalVolume_Folder_Quota::clear_threshold_limit() {
  threshold_limit_ = 0u;
}
::google::protobuf::uint32 StorageService_LogicalVolume_Folder_Quota::threshold_limit() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.Quota.threshold_limit)
  return threshold_limit_;
}
void StorageService_LogicalVolume_Folder_Quota::set_threshold_limit(::google::protobuf::uint32 value) {
  
  threshold_limit_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.Quota.threshold_limit)
}

// bool threshold_reached = 5;
void StorageService_LogicalVolume_Folder_Quota::clear_threshold_reached() {
  threshold_reached_ = false;
}
bool StorageService_LogicalVolume_Folder_Quota::threshold_reached() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.Quota.threshold_reached)
  return threshold_reached_;
}
void StorageService_LogicalVolume_Folder_Quota::set_threshold_reached(bool value) {
  
  threshold_reached_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.Quota.threshold_reached)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageService_LogicalVolume_Folder::kAliasFieldNumber;
const int StorageService_LogicalVolume_Folder::kNameFieldNumber;
const int StorageService_LogicalVolume_Folder::kEnableFieldNumber;
const int StorageService_LogicalVolume_Folder::kUserAccountAccessFieldNumber;
const int StorageService_LogicalVolume_Folder::kUserAccessNumberOfEntriesFieldNumber;
const int StorageService_LogicalVolume_Folder::kGroupAccessNumberOfEntriesFieldNumber;
const int StorageService_LogicalVolume_Folder::kUserAccessFieldNumber;
const int StorageService_LogicalVolume_Folder::kGroupAccessFieldNumber;
const int StorageService_LogicalVolume_Folder::kQuotaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageService_LogicalVolume_Folder::StorageService_LogicalVolume_Folder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tr_2d140_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tr140.StorageService.LogicalVolume.Folder)
}
StorageService_LogicalVolume_Folder::StorageService_LogicalVolume_Folder(const StorageService_LogicalVolume_Folder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      user_access_(from.user_access_),
      group_access_(from.group_access_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.alias().size() > 0) {
    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_quota()) {
    quota_ = new ::tr140::StorageService_LogicalVolume_Folder_Quota(*from.quota_);
  } else {
    quota_ = NULL;
  }
  ::memcpy(&enable_, &from.enable_,
    reinterpret_cast<char*>(&group_access_number_of_entries_) -
    reinterpret_cast<char*>(&enable_) + sizeof(group_access_number_of_entries_));
  // @@protoc_insertion_point(copy_constructor:tr140.StorageService.LogicalVolume.Folder)
}

void StorageService_LogicalVolume_Folder::SharedCtor() {
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&quota_, 0, reinterpret_cast<char*>(&group_access_number_of_entries_) -
    reinterpret_cast<char*>(&quota_) + sizeof(group_access_number_of_entries_));
  _cached_size_ = 0;
}

StorageService_LogicalVolume_Folder::~StorageService_LogicalVolume_Folder() {
  // @@protoc_insertion_point(destructor:tr140.StorageService.LogicalVolume.Folder)
  SharedDtor();
}

void StorageService_LogicalVolume_Folder::SharedDtor() {
  alias_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete quota_;
  }
}

void StorageService_LogicalVolume_Folder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageService_LogicalVolume_Folder::descriptor() {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StorageService_LogicalVolume_Folder& StorageService_LogicalVolume_Folder::default_instance() {
  protobuf_tr_2d140_2eproto::InitDefaults();
  return *internal_default_instance();
}

StorageService_LogicalVolume_Folder* StorageService_LogicalVolume_Folder::New(::google::protobuf::Arena* arena) const {
  StorageService_LogicalVolume_Folder* n = new StorageService_LogicalVolume_Folder;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StorageService_LogicalVolume_Folder::Clear() {
// @@protoc_insertion_point(message_clear_start:tr140.StorageService.LogicalVolume.Folder)
  user_access_.Clear();
  group_access_.Clear();
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && quota_ != NULL) {
    delete quota_;
  }
  quota_ = NULL;
  ::memset(&enable_, 0, reinterpret_cast<char*>(&group_access_number_of_entries_) -
    reinterpret_cast<char*>(&enable_) + sizeof(group_access_number_of_entries_));
}

bool StorageService_LogicalVolume_Folder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tr140.StorageService.LogicalVolume.Folder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string alias = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.LogicalVolume.Folder.alias"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.LogicalVolume.Folder.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 user_account_access = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_account_access_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 user_access_number_of_entries = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_access_number_of_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 group_access_number_of_entries = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_access_number_of_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tr140.StorageService.LogicalVolume.Folder.UserAccess user_access = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_access()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tr140.StorageService.LogicalVolume.Folder.GroupAccess group_access = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_access()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tr140.StorageService.LogicalVolume.Folder.Quota quota = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quota()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tr140.StorageService.LogicalVolume.Folder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tr140.StorageService.LogicalVolume.Folder)
  return false;
#undef DO_
}

void StorageService_LogicalVolume_Folder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tr140.StorageService.LogicalVolume.Folder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string alias = 1;
  if (this->alias().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.LogicalVolume.Folder.alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->alias(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.LogicalVolume.Folder.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // bool enable = 3;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enable(), output);
  }

  // uint32 user_account_access = 4;
  if (this->user_account_access() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->user_account_access(), output);
  }

  // uint32 user_access_number_of_entries = 5;
  if (this->user_access_number_of_entries() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->user_access_number_of_entries(), output);
  }

  // uint32 group_access_number_of_entries = 6;
  if (this->group_access_number_of_entries() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->group_access_number_of_entries(), output);
  }

  // repeated .tr140.StorageService.LogicalVolume.Folder.UserAccess user_access = 7;
  for (unsigned int i = 0, n = this->user_access_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->user_access(i), output);
  }

  // repeated .tr140.StorageService.LogicalVolume.Folder.GroupAccess group_access = 8;
  for (unsigned int i = 0, n = this->group_access_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->group_access(i), output);
  }

  // .tr140.StorageService.LogicalVolume.Folder.Quota quota = 9;
  if (this->has_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->quota_, output);
  }

  // @@protoc_insertion_point(serialize_end:tr140.StorageService.LogicalVolume.Folder)
}

::google::protobuf::uint8* StorageService_LogicalVolume_Folder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tr140.StorageService.LogicalVolume.Folder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string alias = 1;
  if (this->alias().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.LogicalVolume.Folder.alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->alias(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.LogicalVolume.Folder.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // bool enable = 3;
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enable(), target);
  }

  // uint32 user_account_access = 4;
  if (this->user_account_access() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->user_account_access(), target);
  }

  // uint32 user_access_number_of_entries = 5;
  if (this->user_access_number_of_entries() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->user_access_number_of_entries(), target);
  }

  // uint32 group_access_number_of_entries = 6;
  if (this->group_access_number_of_entries() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->group_access_number_of_entries(), target);
  }

  // repeated .tr140.StorageService.LogicalVolume.Folder.UserAccess user_access = 7;
  for (unsigned int i = 0, n = this->user_access_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->user_access(i), deterministic, target);
  }

  // repeated .tr140.StorageService.LogicalVolume.Folder.GroupAccess group_access = 8;
  for (unsigned int i = 0, n = this->group_access_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->group_access(i), deterministic, target);
  }

  // .tr140.StorageService.LogicalVolume.Folder.Quota quota = 9;
  if (this->has_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->quota_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tr140.StorageService.LogicalVolume.Folder)
  return target;
}

size_t StorageService_LogicalVolume_Folder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tr140.StorageService.LogicalVolume.Folder)
  size_t total_size = 0;

  // repeated .tr140.StorageService.LogicalVolume.Folder.UserAccess user_access = 7;
  {
    unsigned int count = this->user_access_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_access(i));
    }
  }

  // repeated .tr140.StorageService.LogicalVolume.Folder.GroupAccess group_access = 8;
  {
    unsigned int count = this->group_access_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_access(i));
    }
  }

  // string alias = 1;
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alias());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .tr140.StorageService.LogicalVolume.Folder.Quota quota = 9;
  if (this->has_quota()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->quota_);
  }

  // bool enable = 3;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // uint32 user_account_access = 4;
  if (this->user_account_access() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_account_access());
  }

  // uint32 user_access_number_of_entries = 5;
  if (this->user_access_number_of_entries() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_access_number_of_entries());
  }

  // uint32 group_access_number_of_entries = 6;
  if (this->group_access_number_of_entries() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_access_number_of_entries());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageService_LogicalVolume_Folder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tr140.StorageService.LogicalVolume.Folder)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageService_LogicalVolume_Folder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageService_LogicalVolume_Folder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tr140.StorageService.LogicalVolume.Folder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tr140.StorageService.LogicalVolume.Folder)
    MergeFrom(*source);
  }
}

void StorageService_LogicalVolume_Folder::MergeFrom(const StorageService_LogicalVolume_Folder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tr140.StorageService.LogicalVolume.Folder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_access_.MergeFrom(from.user_access_);
  group_access_.MergeFrom(from.group_access_);
  if (from.alias().size() > 0) {

    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_quota()) {
    mutable_quota()->::tr140::StorageService_LogicalVolume_Folder_Quota::MergeFrom(from.quota());
  }
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
  if (from.user_account_access() != 0) {
    set_user_account_access(from.user_account_access());
  }
  if (from.user_access_number_of_entries() != 0) {
    set_user_access_number_of_entries(from.user_access_number_of_entries());
  }
  if (from.group_access_number_of_entries() != 0) {
    set_group_access_number_of_entries(from.group_access_number_of_entries());
  }
}

void StorageService_LogicalVolume_Folder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tr140.StorageService.LogicalVolume.Folder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageService_LogicalVolume_Folder::CopyFrom(const StorageService_LogicalVolume_Folder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tr140.StorageService.LogicalVolume.Folder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageService_LogicalVolume_Folder::IsInitialized() const {
  return true;
}

void StorageService_LogicalVolume_Folder::Swap(StorageService_LogicalVolume_Folder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageService_LogicalVolume_Folder::InternalSwap(StorageService_LogicalVolume_Folder* other) {
  user_access_.InternalSwap(&other->user_access_);
  group_access_.InternalSwap(&other->group_access_);
  alias_.Swap(&other->alias_);
  name_.Swap(&other->name_);
  std::swap(quota_, other->quota_);
  std::swap(enable_, other->enable_);
  std::swap(user_account_access_, other->user_account_access_);
  std::swap(user_access_number_of_entries_, other->user_access_number_of_entries_);
  std::swap(group_access_number_of_entries_, other->group_access_number_of_entries_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StorageService_LogicalVolume_Folder::GetMetadata() const {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StorageService_LogicalVolume_Folder

// string alias = 1;
void StorageService_LogicalVolume_Folder::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_LogicalVolume_Folder::alias() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.alias)
  return alias_.GetNoArena();
}
void StorageService_LogicalVolume_Folder::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.alias)
}
#if LANG_CXX11
void StorageService_LogicalVolume_Folder::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.LogicalVolume.Folder.alias)
}
#endif
void StorageService_LogicalVolume_Folder::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.LogicalVolume.Folder.alias)
}
void StorageService_LogicalVolume_Folder::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.LogicalVolume.Folder.alias)
}
::std::string* StorageService_LogicalVolume_Folder::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.LogicalVolume.Folder.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_LogicalVolume_Folder::release_alias() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.LogicalVolume.Folder.alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_LogicalVolume_Folder::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.LogicalVolume.Folder.alias)
}

// string name = 2;
void StorageService_LogicalVolume_Folder::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_LogicalVolume_Folder::name() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.name)
  return name_.GetNoArena();
}
void StorageService_LogicalVolume_Folder::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.name)
}
#if LANG_CXX11
void StorageService_LogicalVolume_Folder::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.LogicalVolume.Folder.name)
}
#endif
void StorageService_LogicalVolume_Folder::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.LogicalVolume.Folder.name)
}
void StorageService_LogicalVolume_Folder::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.LogicalVolume.Folder.name)
}
::std::string* StorageService_LogicalVolume_Folder::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.LogicalVolume.Folder.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_LogicalVolume_Folder::release_name() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.LogicalVolume.Folder.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_LogicalVolume_Folder::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.LogicalVolume.Folder.name)
}

// bool enable = 3;
void StorageService_LogicalVolume_Folder::clear_enable() {
  enable_ = false;
}
bool StorageService_LogicalVolume_Folder::enable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.enable)
  return enable_;
}
void StorageService_LogicalVolume_Folder::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.enable)
}

// uint32 user_account_access = 4;
void StorageService_LogicalVolume_Folder::clear_user_account_access() {
  user_account_access_ = 0u;
}
::google::protobuf::uint32 StorageService_LogicalVolume_Folder::user_account_access() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.user_account_access)
  return user_account_access_;
}
void StorageService_LogicalVolume_Folder::set_user_account_access(::google::protobuf::uint32 value) {
  
  user_account_access_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.user_account_access)
}

// uint32 user_access_number_of_entries = 5;
void StorageService_LogicalVolume_Folder::clear_user_access_number_of_entries() {
  user_access_number_of_entries_ = 0u;
}
::google::protobuf::uint32 StorageService_LogicalVolume_Folder::user_access_number_of_entries() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.user_access_number_of_entries)
  return user_access_number_of_entries_;
}
void StorageService_LogicalVolume_Folder::set_user_access_number_of_entries(::google::protobuf::uint32 value) {
  
  user_access_number_of_entries_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.user_access_number_of_entries)
}

// uint32 group_access_number_of_entries = 6;
void StorageService_LogicalVolume_Folder::clear_group_access_number_of_entries() {
  group_access_number_of_entries_ = 0u;
}
::google::protobuf::uint32 StorageService_LogicalVolume_Folder::group_access_number_of_entries() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.group_access_number_of_entries)
  return group_access_number_of_entries_;
}
void StorageService_LogicalVolume_Folder::set_group_access_number_of_entries(::google::protobuf::uint32 value) {
  
  group_access_number_of_entries_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.Folder.group_access_number_of_entries)
}

// repeated .tr140.StorageService.LogicalVolume.Folder.UserAccess user_access = 7;
int StorageService_LogicalVolume_Folder::user_access_size() const {
  return user_access_.size();
}
void StorageService_LogicalVolume_Folder::clear_user_access() {
  user_access_.Clear();
}
const ::tr140::StorageService_LogicalVolume_Folder_UserAccess& StorageService_LogicalVolume_Folder::user_access(int index) const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.user_access)
  return user_access_.Get(index);
}
::tr140::StorageService_LogicalVolume_Folder_UserAccess* StorageService_LogicalVolume_Folder::mutable_user_access(int index) {
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.LogicalVolume.Folder.user_access)
  return user_access_.Mutable(index);
}
::tr140::StorageService_LogicalVolume_Folder_UserAccess* StorageService_LogicalVolume_Folder::add_user_access() {
  // @@protoc_insertion_point(field_add:tr140.StorageService.LogicalVolume.Folder.user_access)
  return user_access_.Add();
}
::google::protobuf::RepeatedPtrField< ::tr140::StorageService_LogicalVolume_Folder_UserAccess >*
StorageService_LogicalVolume_Folder::mutable_user_access() {
  // @@protoc_insertion_point(field_mutable_list:tr140.StorageService.LogicalVolume.Folder.user_access)
  return &user_access_;
}
const ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_LogicalVolume_Folder_UserAccess >&
StorageService_LogicalVolume_Folder::user_access() const {
  // @@protoc_insertion_point(field_list:tr140.StorageService.LogicalVolume.Folder.user_access)
  return user_access_;
}

// repeated .tr140.StorageService.LogicalVolume.Folder.GroupAccess group_access = 8;
int StorageService_LogicalVolume_Folder::group_access_size() const {
  return group_access_.size();
}
void StorageService_LogicalVolume_Folder::clear_group_access() {
  group_access_.Clear();
}
const ::tr140::StorageService_LogicalVolume_Folder_GroupAccess& StorageService_LogicalVolume_Folder::group_access(int index) const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.group_access)
  return group_access_.Get(index);
}
::tr140::StorageService_LogicalVolume_Folder_GroupAccess* StorageService_LogicalVolume_Folder::mutable_group_access(int index) {
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.LogicalVolume.Folder.group_access)
  return group_access_.Mutable(index);
}
::tr140::StorageService_LogicalVolume_Folder_GroupAccess* StorageService_LogicalVolume_Folder::add_group_access() {
  // @@protoc_insertion_point(field_add:tr140.StorageService.LogicalVolume.Folder.group_access)
  return group_access_.Add();
}
::google::protobuf::RepeatedPtrField< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess >*
StorageService_LogicalVolume_Folder::mutable_group_access() {
  // @@protoc_insertion_point(field_mutable_list:tr140.StorageService.LogicalVolume.Folder.group_access)
  return &group_access_;
}
const ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_LogicalVolume_Folder_GroupAccess >&
StorageService_LogicalVolume_Folder::group_access() const {
  // @@protoc_insertion_point(field_list:tr140.StorageService.LogicalVolume.Folder.group_access)
  return group_access_;
}

// .tr140.StorageService.LogicalVolume.Folder.Quota quota = 9;
bool StorageService_LogicalVolume_Folder::has_quota() const {
  return this != internal_default_instance() && quota_ != NULL;
}
void StorageService_LogicalVolume_Folder::clear_quota() {
  if (GetArenaNoVirtual() == NULL && quota_ != NULL) delete quota_;
  quota_ = NULL;
}
const ::tr140::StorageService_LogicalVolume_Folder_Quota& StorageService_LogicalVolume_Folder::quota() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.Folder.quota)
  return quota_ != NULL ? *quota_
                         : *::tr140::StorageService_LogicalVolume_Folder_Quota::internal_default_instance();
}
::tr140::StorageService_LogicalVolume_Folder_Quota* StorageService_LogicalVolume_Folder::mutable_quota() {
  
  if (quota_ == NULL) {
    quota_ = new ::tr140::StorageService_LogicalVolume_Folder_Quota;
  }
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.LogicalVolume.Folder.quota)
  return quota_;
}
::tr140::StorageService_LogicalVolume_Folder_Quota* StorageService_LogicalVolume_Folder::release_quota() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.LogicalVolume.Folder.quota)
  
  ::tr140::StorageService_LogicalVolume_Folder_Quota* temp = quota_;
  quota_ = NULL;
  return temp;
}
void StorageService_LogicalVolume_Folder::set_allocated_quota(::tr140::StorageService_LogicalVolume_Folder_Quota* quota) {
  delete quota_;
  quota_ = quota;
  if (quota) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.LogicalVolume.Folder.quota)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageService_LogicalVolume::kAliasFieldNumber;
const int StorageService_LogicalVolume::kNameFieldNumber;
const int StorageService_LogicalVolume::kStatusFieldNumber;
const int StorageService_LogicalVolume::kEnableFieldNumber;
const int StorageService_LogicalVolume::kPhysicalReferenceFieldNumber;
const int StorageService_LogicalVolume::kFileSystemFieldNumber;
const int StorageService_LogicalVolume::kCapacityFieldNumber;
const int StorageService_LogicalVolume::kUsedSpaceFieldNumber;
const int StorageService_LogicalVolume::kThresholdLimitFieldNumber;
const int StorageService_LogicalVolume::kThresholdReachedFieldNumber;
const int StorageService_LogicalVolume::kEncryptedFieldNumber;
const int StorageService_LogicalVolume::kFolderNumberOfEntriesFieldNumber;
const int StorageService_LogicalVolume::kFolderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageService_LogicalVolume::StorageService_LogicalVolume()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tr_2d140_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tr140.StorageService.LogicalVolume)
}
StorageService_LogicalVolume::StorageService_LogicalVolume(const StorageService_LogicalVolume& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      folder_(from.folder_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.alias().size() > 0) {
    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status().size() > 0) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  physical_reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.physical_reference().size() > 0) {
    physical_reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.physical_reference_);
  }
  file_system_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_system().size() > 0) {
    file_system_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_system_);
  }
  ::memcpy(&capacity_, &from.capacity_,
    reinterpret_cast<char*>(&folder_number_of_entries_) -
    reinterpret_cast<char*>(&capacity_) + sizeof(folder_number_of_entries_));
  // @@protoc_insertion_point(copy_constructor:tr140.StorageService.LogicalVolume)
}

void StorageService_LogicalVolume::SharedCtor() {
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  physical_reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_system_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&capacity_, 0, reinterpret_cast<char*>(&folder_number_of_entries_) -
    reinterpret_cast<char*>(&capacity_) + sizeof(folder_number_of_entries_));
  _cached_size_ = 0;
}

StorageService_LogicalVolume::~StorageService_LogicalVolume() {
  // @@protoc_insertion_point(destructor:tr140.StorageService.LogicalVolume)
  SharedDtor();
}

void StorageService_LogicalVolume::SharedDtor() {
  alias_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  physical_reference_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_system_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StorageService_LogicalVolume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageService_LogicalVolume::descriptor() {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StorageService_LogicalVolume& StorageService_LogicalVolume::default_instance() {
  protobuf_tr_2d140_2eproto::InitDefaults();
  return *internal_default_instance();
}

StorageService_LogicalVolume* StorageService_LogicalVolume::New(::google::protobuf::Arena* arena) const {
  StorageService_LogicalVolume* n = new StorageService_LogicalVolume;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StorageService_LogicalVolume::Clear() {
// @@protoc_insertion_point(message_clear_start:tr140.StorageService.LogicalVolume)
  folder_.Clear();
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  physical_reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_system_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&capacity_, 0, reinterpret_cast<char*>(&folder_number_of_entries_) -
    reinterpret_cast<char*>(&capacity_) + sizeof(folder_number_of_entries_));
}

bool StorageService_LogicalVolume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tr140.StorageService.LogicalVolume)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string alias = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.LogicalVolume.alias"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.LogicalVolume.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.LogicalVolume.status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string physical_reference = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_physical_reference()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->physical_reference().data(), this->physical_reference().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.LogicalVolume.physical_reference"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string file_system = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_system()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_system().data(), this->file_system().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.LogicalVolume.file_system"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 capacity = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 used_space = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &used_space_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 threshold_limit = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &threshold_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool threshold_reached = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &threshold_reached_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool encrypted = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 folder_number_of_entries = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &folder_number_of_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tr140.StorageService.LogicalVolume.Folder folder = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_folder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tr140.StorageService.LogicalVolume)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tr140.StorageService.LogicalVolume)
  return false;
#undef DO_
}

void StorageService_LogicalVolume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tr140.StorageService.LogicalVolume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string alias = 1;
  if (this->alias().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.LogicalVolume.alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->alias(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.LogicalVolume.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string status = 3;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.LogicalVolume.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->status(), output);
  }

  // bool enable = 4;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->enable(), output);
  }

  // string physical_reference = 5;
  if (this->physical_reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->physical_reference().data(), this->physical_reference().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.LogicalVolume.physical_reference");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->physical_reference(), output);
  }

  // string file_system = 6;
  if (this->file_system().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_system().data(), this->file_system().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.LogicalVolume.file_system");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->file_system(), output);
  }

  // uint32 capacity = 7;
  if (this->capacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->capacity(), output);
  }

  // uint32 used_space = 8;
  if (this->used_space() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->used_space(), output);
  }

  // uint32 threshold_limit = 9;
  if (this->threshold_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->threshold_limit(), output);
  }

  // bool threshold_reached = 10;
  if (this->threshold_reached() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->threshold_reached(), output);
  }

  // bool encrypted = 11;
  if (this->encrypted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->encrypted(), output);
  }

  // uint32 folder_number_of_entries = 12;
  if (this->folder_number_of_entries() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->folder_number_of_entries(), output);
  }

  // repeated .tr140.StorageService.LogicalVolume.Folder folder = 13;
  for (unsigned int i = 0, n = this->folder_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->folder(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tr140.StorageService.LogicalVolume)
}

::google::protobuf::uint8* StorageService_LogicalVolume::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tr140.StorageService.LogicalVolume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string alias = 1;
  if (this->alias().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.LogicalVolume.alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->alias(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.LogicalVolume.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string status = 3;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.LogicalVolume.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->status(), target);
  }

  // bool enable = 4;
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->enable(), target);
  }

  // string physical_reference = 5;
  if (this->physical_reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->physical_reference().data(), this->physical_reference().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.LogicalVolume.physical_reference");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->physical_reference(), target);
  }

  // string file_system = 6;
  if (this->file_system().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_system().data(), this->file_system().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.LogicalVolume.file_system");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->file_system(), target);
  }

  // uint32 capacity = 7;
  if (this->capacity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->capacity(), target);
  }

  // uint32 used_space = 8;
  if (this->used_space() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->used_space(), target);
  }

  // uint32 threshold_limit = 9;
  if (this->threshold_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->threshold_limit(), target);
  }

  // bool threshold_reached = 10;
  if (this->threshold_reached() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->threshold_reached(), target);
  }

  // bool encrypted = 11;
  if (this->encrypted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->encrypted(), target);
  }

  // uint32 folder_number_of_entries = 12;
  if (this->folder_number_of_entries() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->folder_number_of_entries(), target);
  }

  // repeated .tr140.StorageService.LogicalVolume.Folder folder = 13;
  for (unsigned int i = 0, n = this->folder_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->folder(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tr140.StorageService.LogicalVolume)
  return target;
}

size_t StorageService_LogicalVolume::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tr140.StorageService.LogicalVolume)
  size_t total_size = 0;

  // repeated .tr140.StorageService.LogicalVolume.Folder folder = 13;
  {
    unsigned int count = this->folder_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->folder(i));
    }
  }

  // string alias = 1;
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alias());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string status = 3;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  // string physical_reference = 5;
  if (this->physical_reference().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->physical_reference());
  }

  // string file_system = 6;
  if (this->file_system().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_system());
  }

  // uint32 capacity = 7;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->capacity());
  }

  // uint32 used_space = 8;
  if (this->used_space() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->used_space());
  }

  // bool enable = 4;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // bool threshold_reached = 10;
  if (this->threshold_reached() != 0) {
    total_size += 1 + 1;
  }

  // bool encrypted = 11;
  if (this->encrypted() != 0) {
    total_size += 1 + 1;
  }

  // uint32 threshold_limit = 9;
  if (this->threshold_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->threshold_limit());
  }

  // uint32 folder_number_of_entries = 12;
  if (this->folder_number_of_entries() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->folder_number_of_entries());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageService_LogicalVolume::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tr140.StorageService.LogicalVolume)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageService_LogicalVolume* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageService_LogicalVolume>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tr140.StorageService.LogicalVolume)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tr140.StorageService.LogicalVolume)
    MergeFrom(*source);
  }
}

void StorageService_LogicalVolume::MergeFrom(const StorageService_LogicalVolume& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tr140.StorageService.LogicalVolume)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  folder_.MergeFrom(from.folder_);
  if (from.alias().size() > 0) {

    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.physical_reference().size() > 0) {

    physical_reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.physical_reference_);
  }
  if (from.file_system().size() > 0) {

    file_system_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_system_);
  }
  if (from.capacity() != 0) {
    set_capacity(from.capacity());
  }
  if (from.used_space() != 0) {
    set_used_space(from.used_space());
  }
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
  if (from.threshold_reached() != 0) {
    set_threshold_reached(from.threshold_reached());
  }
  if (from.encrypted() != 0) {
    set_encrypted(from.encrypted());
  }
  if (from.threshold_limit() != 0) {
    set_threshold_limit(from.threshold_limit());
  }
  if (from.folder_number_of_entries() != 0) {
    set_folder_number_of_entries(from.folder_number_of_entries());
  }
}

void StorageService_LogicalVolume::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tr140.StorageService.LogicalVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageService_LogicalVolume::CopyFrom(const StorageService_LogicalVolume& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tr140.StorageService.LogicalVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageService_LogicalVolume::IsInitialized() const {
  return true;
}

void StorageService_LogicalVolume::Swap(StorageService_LogicalVolume* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageService_LogicalVolume::InternalSwap(StorageService_LogicalVolume* other) {
  folder_.InternalSwap(&other->folder_);
  alias_.Swap(&other->alias_);
  name_.Swap(&other->name_);
  status_.Swap(&other->status_);
  physical_reference_.Swap(&other->physical_reference_);
  file_system_.Swap(&other->file_system_);
  std::swap(capacity_, other->capacity_);
  std::swap(used_space_, other->used_space_);
  std::swap(enable_, other->enable_);
  std::swap(threshold_reached_, other->threshold_reached_);
  std::swap(encrypted_, other->encrypted_);
  std::swap(threshold_limit_, other->threshold_limit_);
  std::swap(folder_number_of_entries_, other->folder_number_of_entries_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StorageService_LogicalVolume::GetMetadata() const {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StorageService_LogicalVolume

// string alias = 1;
void StorageService_LogicalVolume::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_LogicalVolume::alias() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.alias)
  return alias_.GetNoArena();
}
void StorageService_LogicalVolume::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.alias)
}
#if LANG_CXX11
void StorageService_LogicalVolume::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.LogicalVolume.alias)
}
#endif
void StorageService_LogicalVolume::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.LogicalVolume.alias)
}
void StorageService_LogicalVolume::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.LogicalVolume.alias)
}
::std::string* StorageService_LogicalVolume::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.LogicalVolume.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_LogicalVolume::release_alias() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.LogicalVolume.alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_LogicalVolume::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.LogicalVolume.alias)
}

// string name = 2;
void StorageService_LogicalVolume::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_LogicalVolume::name() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.name)
  return name_.GetNoArena();
}
void StorageService_LogicalVolume::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.name)
}
#if LANG_CXX11
void StorageService_LogicalVolume::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.LogicalVolume.name)
}
#endif
void StorageService_LogicalVolume::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.LogicalVolume.name)
}
void StorageService_LogicalVolume::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.LogicalVolume.name)
}
::std::string* StorageService_LogicalVolume::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.LogicalVolume.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_LogicalVolume::release_name() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.LogicalVolume.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_LogicalVolume::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.LogicalVolume.name)
}

// string status = 3;
void StorageService_LogicalVolume::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_LogicalVolume::status() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.status)
  return status_.GetNoArena();
}
void StorageService_LogicalVolume::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.status)
}
#if LANG_CXX11
void StorageService_LogicalVolume::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.LogicalVolume.status)
}
#endif
void StorageService_LogicalVolume::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.LogicalVolume.status)
}
void StorageService_LogicalVolume::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.LogicalVolume.status)
}
::std::string* StorageService_LogicalVolume::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.LogicalVolume.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_LogicalVolume::release_status() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.LogicalVolume.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_LogicalVolume::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.LogicalVolume.status)
}

// bool enable = 4;
void StorageService_LogicalVolume::clear_enable() {
  enable_ = false;
}
bool StorageService_LogicalVolume::enable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.enable)
  return enable_;
}
void StorageService_LogicalVolume::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.enable)
}

// string physical_reference = 5;
void StorageService_LogicalVolume::clear_physical_reference() {
  physical_reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_LogicalVolume::physical_reference() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.physical_reference)
  return physical_reference_.GetNoArena();
}
void StorageService_LogicalVolume::set_physical_reference(const ::std::string& value) {
  
  physical_reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.physical_reference)
}
#if LANG_CXX11
void StorageService_LogicalVolume::set_physical_reference(::std::string&& value) {
  
  physical_reference_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.LogicalVolume.physical_reference)
}
#endif
void StorageService_LogicalVolume::set_physical_reference(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  physical_reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.LogicalVolume.physical_reference)
}
void StorageService_LogicalVolume::set_physical_reference(const char* value, size_t size) {
  
  physical_reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.LogicalVolume.physical_reference)
}
::std::string* StorageService_LogicalVolume::mutable_physical_reference() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.LogicalVolume.physical_reference)
  return physical_reference_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_LogicalVolume::release_physical_reference() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.LogicalVolume.physical_reference)
  
  return physical_reference_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_LogicalVolume::set_allocated_physical_reference(::std::string* physical_reference) {
  if (physical_reference != NULL) {
    
  } else {
    
  }
  physical_reference_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), physical_reference);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.LogicalVolume.physical_reference)
}

// string file_system = 6;
void StorageService_LogicalVolume::clear_file_system() {
  file_system_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService_LogicalVolume::file_system() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.file_system)
  return file_system_.GetNoArena();
}
void StorageService_LogicalVolume::set_file_system(const ::std::string& value) {
  
  file_system_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.file_system)
}
#if LANG_CXX11
void StorageService_LogicalVolume::set_file_system(::std::string&& value) {
  
  file_system_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.LogicalVolume.file_system)
}
#endif
void StorageService_LogicalVolume::set_file_system(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_system_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.LogicalVolume.file_system)
}
void StorageService_LogicalVolume::set_file_system(const char* value, size_t size) {
  
  file_system_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.LogicalVolume.file_system)
}
::std::string* StorageService_LogicalVolume::mutable_file_system() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.LogicalVolume.file_system)
  return file_system_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService_LogicalVolume::release_file_system() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.LogicalVolume.file_system)
  
  return file_system_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService_LogicalVolume::set_allocated_file_system(::std::string* file_system) {
  if (file_system != NULL) {
    
  } else {
    
  }
  file_system_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_system);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.LogicalVolume.file_system)
}

// uint32 capacity = 7;
void StorageService_LogicalVolume::clear_capacity() {
  capacity_ = 0u;
}
::google::protobuf::uint32 StorageService_LogicalVolume::capacity() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.capacity)
  return capacity_;
}
void StorageService_LogicalVolume::set_capacity(::google::protobuf::uint32 value) {
  
  capacity_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.capacity)
}

// uint32 used_space = 8;
void StorageService_LogicalVolume::clear_used_space() {
  used_space_ = 0u;
}
::google::protobuf::uint32 StorageService_LogicalVolume::used_space() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.used_space)
  return used_space_;
}
void StorageService_LogicalVolume::set_used_space(::google::protobuf::uint32 value) {
  
  used_space_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.used_space)
}

// uint32 threshold_limit = 9;
void StorageService_LogicalVolume::clear_threshold_limit() {
  threshold_limit_ = 0u;
}
::google::protobuf::uint32 StorageService_LogicalVolume::threshold_limit() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.threshold_limit)
  return threshold_limit_;
}
void StorageService_LogicalVolume::set_threshold_limit(::google::protobuf::uint32 value) {
  
  threshold_limit_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.threshold_limit)
}

// bool threshold_reached = 10;
void StorageService_LogicalVolume::clear_threshold_reached() {
  threshold_reached_ = false;
}
bool StorageService_LogicalVolume::threshold_reached() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.threshold_reached)
  return threshold_reached_;
}
void StorageService_LogicalVolume::set_threshold_reached(bool value) {
  
  threshold_reached_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.threshold_reached)
}

// bool encrypted = 11;
void StorageService_LogicalVolume::clear_encrypted() {
  encrypted_ = false;
}
bool StorageService_LogicalVolume::encrypted() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.encrypted)
  return encrypted_;
}
void StorageService_LogicalVolume::set_encrypted(bool value) {
  
  encrypted_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.encrypted)
}

// uint32 folder_number_of_entries = 12;
void StorageService_LogicalVolume::clear_folder_number_of_entries() {
  folder_number_of_entries_ = 0u;
}
::google::protobuf::uint32 StorageService_LogicalVolume::folder_number_of_entries() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.folder_number_of_entries)
  return folder_number_of_entries_;
}
void StorageService_LogicalVolume::set_folder_number_of_entries(::google::protobuf::uint32 value) {
  
  folder_number_of_entries_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.LogicalVolume.folder_number_of_entries)
}

// repeated .tr140.StorageService.LogicalVolume.Folder folder = 13;
int StorageService_LogicalVolume::folder_size() const {
  return folder_.size();
}
void StorageService_LogicalVolume::clear_folder() {
  folder_.Clear();
}
const ::tr140::StorageService_LogicalVolume_Folder& StorageService_LogicalVolume::folder(int index) const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.LogicalVolume.folder)
  return folder_.Get(index);
}
::tr140::StorageService_LogicalVolume_Folder* StorageService_LogicalVolume::mutable_folder(int index) {
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.LogicalVolume.folder)
  return folder_.Mutable(index);
}
::tr140::StorageService_LogicalVolume_Folder* StorageService_LogicalVolume::add_folder() {
  // @@protoc_insertion_point(field_add:tr140.StorageService.LogicalVolume.folder)
  return folder_.Add();
}
::google::protobuf::RepeatedPtrField< ::tr140::StorageService_LogicalVolume_Folder >*
StorageService_LogicalVolume::mutable_folder() {
  // @@protoc_insertion_point(field_mutable_list:tr140.StorageService.LogicalVolume.folder)
  return &folder_;
}
const ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_LogicalVolume_Folder >&
StorageService_LogicalVolume::folder() const {
  // @@protoc_insertion_point(field_list:tr140.StorageService.LogicalVolume.folder)
  return folder_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageService::kEnableFieldNumber;
const int StorageService::kAliasFieldNumber;
const int StorageService::kPhysicalMediumNumberOfEntriesFieldNumber;
const int StorageService::kStorageArrayNumberOfEntriesFieldNumber;
const int StorageService::kLogicalVolumeNumberOfEntriesFieldNumber;
const int StorageService::kUserAccountNumberOfEntriesFieldNumber;
const int StorageService::kUserGroupNumberOfEntriesFieldNumber;
const int StorageService::kCapabilitiesFieldNumber;
const int StorageService::kNetInfoFieldNumber;
const int StorageService::kUserGroupFieldNumber;
const int StorageService::kUserAccountFieldNumber;
const int StorageService::kNetworkServerFieldNumber;
const int StorageService::kFtpserverFieldNumber;
const int StorageService::kSftpserverFieldNumber;
const int StorageService::kHttpserverFieldNumber;
const int StorageService::kHttpsserverFieldNumber;
const int StorageService::kPhysicalMediumFieldNumber;
const int StorageService::kStorageArrayFieldNumber;
const int StorageService::kLogicalVolumeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageService::StorageService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tr_2d140_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tr140.StorageService)
}
StorageService::StorageService(const StorageService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      user_group_(from.user_group_),
      user_account_(from.user_account_),
      physical_medium_(from.physical_medium_),
      storage_array_(from.storage_array_),
      logical_volume_(from.logical_volume_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.alias().size() > 0) {
    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  if (from.has_capabilities()) {
    capabilities_ = new ::tr140::StorageService_Capabilities(*from.capabilities_);
  } else {
    capabilities_ = NULL;
  }
  if (from.has_net_info()) {
    net_info_ = new ::tr140::StorageService_NetInfo(*from.net_info_);
  } else {
    net_info_ = NULL;
  }
  if (from.has_network_server()) {
    network_server_ = new ::tr140::StorageService_NetworkServer(*from.network_server_);
  } else {
    network_server_ = NULL;
  }
  if (from.has_ftpserver()) {
    ftpserver_ = new ::tr140::StorageService_FTPServer(*from.ftpserver_);
  } else {
    ftpserver_ = NULL;
  }
  if (from.has_sftpserver()) {
    sftpserver_ = new ::tr140::StorageService_SFTPServer(*from.sftpserver_);
  } else {
    sftpserver_ = NULL;
  }
  if (from.has_httpserver()) {
    httpserver_ = new ::tr140::StorageService_HTTPServer(*from.httpserver_);
  } else {
    httpserver_ = NULL;
  }
  if (from.has_httpsserver()) {
    httpsserver_ = new ::tr140::StorageService_HTTPSServer(*from.httpsserver_);
  } else {
    httpsserver_ = NULL;
  }
  ::memcpy(&enable_, &from.enable_,
    reinterpret_cast<char*>(&user_group_number_of_entries_) -
    reinterpret_cast<char*>(&enable_) + sizeof(user_group_number_of_entries_));
  // @@protoc_insertion_point(copy_constructor:tr140.StorageService)
}

void StorageService::SharedCtor() {
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&capabilities_, 0, reinterpret_cast<char*>(&user_group_number_of_entries_) -
    reinterpret_cast<char*>(&capabilities_) + sizeof(user_group_number_of_entries_));
  _cached_size_ = 0;
}

StorageService::~StorageService() {
  // @@protoc_insertion_point(destructor:tr140.StorageService)
  SharedDtor();
}

void StorageService::SharedDtor() {
  alias_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete capabilities_;
  }
  if (this != internal_default_instance()) {
    delete net_info_;
  }
  if (this != internal_default_instance()) {
    delete network_server_;
  }
  if (this != internal_default_instance()) {
    delete ftpserver_;
  }
  if (this != internal_default_instance()) {
    delete sftpserver_;
  }
  if (this != internal_default_instance()) {
    delete httpserver_;
  }
  if (this != internal_default_instance()) {
    delete httpsserver_;
  }
}

void StorageService::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageService::descriptor() {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StorageService& StorageService::default_instance() {
  protobuf_tr_2d140_2eproto::InitDefaults();
  return *internal_default_instance();
}

StorageService* StorageService::New(::google::protobuf::Arena* arena) const {
  StorageService* n = new StorageService;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StorageService::Clear() {
// @@protoc_insertion_point(message_clear_start:tr140.StorageService)
  user_group_.Clear();
  user_account_.Clear();
  physical_medium_.Clear();
  storage_array_.Clear();
  logical_volume_.Clear();
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && capabilities_ != NULL) {
    delete capabilities_;
  }
  capabilities_ = NULL;
  if (GetArenaNoVirtual() == NULL && net_info_ != NULL) {
    delete net_info_;
  }
  net_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && network_server_ != NULL) {
    delete network_server_;
  }
  network_server_ = NULL;
  if (GetArenaNoVirtual() == NULL && ftpserver_ != NULL) {
    delete ftpserver_;
  }
  ftpserver_ = NULL;
  if (GetArenaNoVirtual() == NULL && sftpserver_ != NULL) {
    delete sftpserver_;
  }
  sftpserver_ = NULL;
  if (GetArenaNoVirtual() == NULL && httpserver_ != NULL) {
    delete httpserver_;
  }
  httpserver_ = NULL;
  if (GetArenaNoVirtual() == NULL && httpsserver_ != NULL) {
    delete httpsserver_;
  }
  httpsserver_ = NULL;
  ::memset(&enable_, 0, reinterpret_cast<char*>(&user_group_number_of_entries_) -
    reinterpret_cast<char*>(&enable_) + sizeof(user_group_number_of_entries_));
}

bool StorageService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tr140.StorageService)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string alias = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tr140.StorageService.alias"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 physical_medium_number_of_entries = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &physical_medium_number_of_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 storage_array_number_of_entries = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &storage_array_number_of_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 logical_volume_number_of_entries = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logical_volume_number_of_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 user_account_number_of_entries = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_account_number_of_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 user_group_number_of_entries = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_group_number_of_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tr140.StorageService.Capabilities capabilities = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capabilities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tr140.StorageService.NetInfo net_info = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_net_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tr140.StorageService.UserGroup user_group = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tr140.StorageService.UserAccount user_account = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tr140.StorageService.NetworkServer network_server = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_network_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tr140.StorageService.FTPServer ftpserver = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ftpserver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tr140.StorageService.SFTPServer sftpserver = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sftpserver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tr140.StorageService.HTTPServer httpserver = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_httpserver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tr140.StorageService.HTTPSServer httpsserver = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_httpsserver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tr140.StorageService.PhysicalMedium physical_medium = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_physical_medium()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tr140.StorageService.StorageArray storage_array = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_storage_array()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tr140.StorageService.LogicalVolume logical_volume = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logical_volume()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tr140.StorageService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tr140.StorageService)
  return false;
#undef DO_
}

void StorageService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tr140.StorageService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // string alias = 2;
  if (this->alias().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->alias(), output);
  }

  // uint32 physical_medium_number_of_entries = 3;
  if (this->physical_medium_number_of_entries() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->physical_medium_number_of_entries(), output);
  }

  // uint32 storage_array_number_of_entries = 4;
  if (this->storage_array_number_of_entries() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->storage_array_number_of_entries(), output);
  }

  // uint32 logical_volume_number_of_entries = 5;
  if (this->logical_volume_number_of_entries() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->logical_volume_number_of_entries(), output);
  }

  // uint32 user_account_number_of_entries = 6;
  if (this->user_account_number_of_entries() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->user_account_number_of_entries(), output);
  }

  // uint32 user_group_number_of_entries = 7;
  if (this->user_group_number_of_entries() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->user_group_number_of_entries(), output);
  }

  // .tr140.StorageService.Capabilities capabilities = 8;
  if (this->has_capabilities()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->capabilities_, output);
  }

  // .tr140.StorageService.NetInfo net_info = 9;
  if (this->has_net_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->net_info_, output);
  }

  // repeated .tr140.StorageService.UserGroup user_group = 10;
  for (unsigned int i = 0, n = this->user_group_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->user_group(i), output);
  }

  // repeated .tr140.StorageService.UserAccount user_account = 11;
  for (unsigned int i = 0, n = this->user_account_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->user_account(i), output);
  }

  // .tr140.StorageService.NetworkServer network_server = 12;
  if (this->has_network_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->network_server_, output);
  }

  // .tr140.StorageService.FTPServer ftpserver = 13;
  if (this->has_ftpserver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->ftpserver_, output);
  }

  // .tr140.StorageService.SFTPServer sftpserver = 14;
  if (this->has_sftpserver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->sftpserver_, output);
  }

  // .tr140.StorageService.HTTPServer httpserver = 15;
  if (this->has_httpserver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->httpserver_, output);
  }

  // .tr140.StorageService.HTTPSServer httpsserver = 16;
  if (this->has_httpsserver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->httpsserver_, output);
  }

  // repeated .tr140.StorageService.PhysicalMedium physical_medium = 17;
  for (unsigned int i = 0, n = this->physical_medium_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->physical_medium(i), output);
  }

  // repeated .tr140.StorageService.StorageArray storage_array = 18;
  for (unsigned int i = 0, n = this->storage_array_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->storage_array(i), output);
  }

  // repeated .tr140.StorageService.LogicalVolume logical_volume = 19;
  for (unsigned int i = 0, n = this->logical_volume_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->logical_volume(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tr140.StorageService)
}

::google::protobuf::uint8* StorageService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tr140.StorageService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }

  // string alias = 2;
  if (this->alias().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tr140.StorageService.alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->alias(), target);
  }

  // uint32 physical_medium_number_of_entries = 3;
  if (this->physical_medium_number_of_entries() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->physical_medium_number_of_entries(), target);
  }

  // uint32 storage_array_number_of_entries = 4;
  if (this->storage_array_number_of_entries() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->storage_array_number_of_entries(), target);
  }

  // uint32 logical_volume_number_of_entries = 5;
  if (this->logical_volume_number_of_entries() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->logical_volume_number_of_entries(), target);
  }

  // uint32 user_account_number_of_entries = 6;
  if (this->user_account_number_of_entries() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->user_account_number_of_entries(), target);
  }

  // uint32 user_group_number_of_entries = 7;
  if (this->user_group_number_of_entries() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->user_group_number_of_entries(), target);
  }

  // .tr140.StorageService.Capabilities capabilities = 8;
  if (this->has_capabilities()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->capabilities_, deterministic, target);
  }

  // .tr140.StorageService.NetInfo net_info = 9;
  if (this->has_net_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->net_info_, deterministic, target);
  }

  // repeated .tr140.StorageService.UserGroup user_group = 10;
  for (unsigned int i = 0, n = this->user_group_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->user_group(i), deterministic, target);
  }

  // repeated .tr140.StorageService.UserAccount user_account = 11;
  for (unsigned int i = 0, n = this->user_account_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->user_account(i), deterministic, target);
  }

  // .tr140.StorageService.NetworkServer network_server = 12;
  if (this->has_network_server()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->network_server_, deterministic, target);
  }

  // .tr140.StorageService.FTPServer ftpserver = 13;
  if (this->has_ftpserver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->ftpserver_, deterministic, target);
  }

  // .tr140.StorageService.SFTPServer sftpserver = 14;
  if (this->has_sftpserver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->sftpserver_, deterministic, target);
  }

  // .tr140.StorageService.HTTPServer httpserver = 15;
  if (this->has_httpserver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->httpserver_, deterministic, target);
  }

  // .tr140.StorageService.HTTPSServer httpsserver = 16;
  if (this->has_httpsserver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->httpsserver_, deterministic, target);
  }

  // repeated .tr140.StorageService.PhysicalMedium physical_medium = 17;
  for (unsigned int i = 0, n = this->physical_medium_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, this->physical_medium(i), deterministic, target);
  }

  // repeated .tr140.StorageService.StorageArray storage_array = 18;
  for (unsigned int i = 0, n = this->storage_array_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, this->storage_array(i), deterministic, target);
  }

  // repeated .tr140.StorageService.LogicalVolume logical_volume = 19;
  for (unsigned int i = 0, n = this->logical_volume_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, this->logical_volume(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tr140.StorageService)
  return target;
}

size_t StorageService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tr140.StorageService)
  size_t total_size = 0;

  // repeated .tr140.StorageService.UserGroup user_group = 10;
  {
    unsigned int count = this->user_group_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_group(i));
    }
  }

  // repeated .tr140.StorageService.UserAccount user_account = 11;
  {
    unsigned int count = this->user_account_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_account(i));
    }
  }

  // repeated .tr140.StorageService.PhysicalMedium physical_medium = 17;
  {
    unsigned int count = this->physical_medium_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->physical_medium(i));
    }
  }

  // repeated .tr140.StorageService.StorageArray storage_array = 18;
  {
    unsigned int count = this->storage_array_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage_array(i));
    }
  }

  // repeated .tr140.StorageService.LogicalVolume logical_volume = 19;
  {
    unsigned int count = this->logical_volume_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logical_volume(i));
    }
  }

  // string alias = 2;
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alias());
  }

  // .tr140.StorageService.Capabilities capabilities = 8;
  if (this->has_capabilities()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->capabilities_);
  }

  // .tr140.StorageService.NetInfo net_info = 9;
  if (this->has_net_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->net_info_);
  }

  // .tr140.StorageService.NetworkServer network_server = 12;
  if (this->has_network_server()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->network_server_);
  }

  // .tr140.StorageService.FTPServer ftpserver = 13;
  if (this->has_ftpserver()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ftpserver_);
  }

  // .tr140.StorageService.SFTPServer sftpserver = 14;
  if (this->has_sftpserver()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sftpserver_);
  }

  // .tr140.StorageService.HTTPServer httpserver = 15;
  if (this->has_httpserver()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->httpserver_);
  }

  // .tr140.StorageService.HTTPSServer httpsserver = 16;
  if (this->has_httpsserver()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->httpsserver_);
  }

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // uint32 physical_medium_number_of_entries = 3;
  if (this->physical_medium_number_of_entries() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->physical_medium_number_of_entries());
  }

  // uint32 storage_array_number_of_entries = 4;
  if (this->storage_array_number_of_entries() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->storage_array_number_of_entries());
  }

  // uint32 logical_volume_number_of_entries = 5;
  if (this->logical_volume_number_of_entries() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->logical_volume_number_of_entries());
  }

  // uint32 user_account_number_of_entries = 6;
  if (this->user_account_number_of_entries() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_account_number_of_entries());
  }

  // uint32 user_group_number_of_entries = 7;
  if (this->user_group_number_of_entries() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_group_number_of_entries());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tr140.StorageService)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tr140.StorageService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tr140.StorageService)
    MergeFrom(*source);
  }
}

void StorageService::MergeFrom(const StorageService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tr140.StorageService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_group_.MergeFrom(from.user_group_);
  user_account_.MergeFrom(from.user_account_);
  physical_medium_.MergeFrom(from.physical_medium_);
  storage_array_.MergeFrom(from.storage_array_);
  logical_volume_.MergeFrom(from.logical_volume_);
  if (from.alias().size() > 0) {

    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  if (from.has_capabilities()) {
    mutable_capabilities()->::tr140::StorageService_Capabilities::MergeFrom(from.capabilities());
  }
  if (from.has_net_info()) {
    mutable_net_info()->::tr140::StorageService_NetInfo::MergeFrom(from.net_info());
  }
  if (from.has_network_server()) {
    mutable_network_server()->::tr140::StorageService_NetworkServer::MergeFrom(from.network_server());
  }
  if (from.has_ftpserver()) {
    mutable_ftpserver()->::tr140::StorageService_FTPServer::MergeFrom(from.ftpserver());
  }
  if (from.has_sftpserver()) {
    mutable_sftpserver()->::tr140::StorageService_SFTPServer::MergeFrom(from.sftpserver());
  }
  if (from.has_httpserver()) {
    mutable_httpserver()->::tr140::StorageService_HTTPServer::MergeFrom(from.httpserver());
  }
  if (from.has_httpsserver()) {
    mutable_httpsserver()->::tr140::StorageService_HTTPSServer::MergeFrom(from.httpsserver());
  }
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
  if (from.physical_medium_number_of_entries() != 0) {
    set_physical_medium_number_of_entries(from.physical_medium_number_of_entries());
  }
  if (from.storage_array_number_of_entries() != 0) {
    set_storage_array_number_of_entries(from.storage_array_number_of_entries());
  }
  if (from.logical_volume_number_of_entries() != 0) {
    set_logical_volume_number_of_entries(from.logical_volume_number_of_entries());
  }
  if (from.user_account_number_of_entries() != 0) {
    set_user_account_number_of_entries(from.user_account_number_of_entries());
  }
  if (from.user_group_number_of_entries() != 0) {
    set_user_group_number_of_entries(from.user_group_number_of_entries());
  }
}

void StorageService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tr140.StorageService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageService::CopyFrom(const StorageService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tr140.StorageService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageService::IsInitialized() const {
  return true;
}

void StorageService::Swap(StorageService* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageService::InternalSwap(StorageService* other) {
  user_group_.InternalSwap(&other->user_group_);
  user_account_.InternalSwap(&other->user_account_);
  physical_medium_.InternalSwap(&other->physical_medium_);
  storage_array_.InternalSwap(&other->storage_array_);
  logical_volume_.InternalSwap(&other->logical_volume_);
  alias_.Swap(&other->alias_);
  std::swap(capabilities_, other->capabilities_);
  std::swap(net_info_, other->net_info_);
  std::swap(network_server_, other->network_server_);
  std::swap(ftpserver_, other->ftpserver_);
  std::swap(sftpserver_, other->sftpserver_);
  std::swap(httpserver_, other->httpserver_);
  std::swap(httpsserver_, other->httpsserver_);
  std::swap(enable_, other->enable_);
  std::swap(physical_medium_number_of_entries_, other->physical_medium_number_of_entries_);
  std::swap(storage_array_number_of_entries_, other->storage_array_number_of_entries_);
  std::swap(logical_volume_number_of_entries_, other->logical_volume_number_of_entries_);
  std::swap(user_account_number_of_entries_, other->user_account_number_of_entries_);
  std::swap(user_group_number_of_entries_, other->user_group_number_of_entries_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StorageService::GetMetadata() const {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StorageService

// bool enable = 1;
void StorageService::clear_enable() {
  enable_ = false;
}
bool StorageService::enable() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.enable)
  return enable_;
}
void StorageService::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.enable)
}

// string alias = 2;
void StorageService::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StorageService::alias() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.alias)
  return alias_.GetNoArena();
}
void StorageService::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tr140.StorageService.alias)
}
#if LANG_CXX11
void StorageService::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tr140.StorageService.alias)
}
#endif
void StorageService::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tr140.StorageService.alias)
}
void StorageService::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tr140.StorageService.alias)
}
::std::string* StorageService::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StorageService::release_alias() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StorageService::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.alias)
}

// uint32 physical_medium_number_of_entries = 3;
void StorageService::clear_physical_medium_number_of_entries() {
  physical_medium_number_of_entries_ = 0u;
}
::google::protobuf::uint32 StorageService::physical_medium_number_of_entries() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.physical_medium_number_of_entries)
  return physical_medium_number_of_entries_;
}
void StorageService::set_physical_medium_number_of_entries(::google::protobuf::uint32 value) {
  
  physical_medium_number_of_entries_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.physical_medium_number_of_entries)
}

// uint32 storage_array_number_of_entries = 4;
void StorageService::clear_storage_array_number_of_entries() {
  storage_array_number_of_entries_ = 0u;
}
::google::protobuf::uint32 StorageService::storage_array_number_of_entries() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.storage_array_number_of_entries)
  return storage_array_number_of_entries_;
}
void StorageService::set_storage_array_number_of_entries(::google::protobuf::uint32 value) {
  
  storage_array_number_of_entries_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.storage_array_number_of_entries)
}

// uint32 logical_volume_number_of_entries = 5;
void StorageService::clear_logical_volume_number_of_entries() {
  logical_volume_number_of_entries_ = 0u;
}
::google::protobuf::uint32 StorageService::logical_volume_number_of_entries() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.logical_volume_number_of_entries)
  return logical_volume_number_of_entries_;
}
void StorageService::set_logical_volume_number_of_entries(::google::protobuf::uint32 value) {
  
  logical_volume_number_of_entries_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.logical_volume_number_of_entries)
}

// uint32 user_account_number_of_entries = 6;
void StorageService::clear_user_account_number_of_entries() {
  user_account_number_of_entries_ = 0u;
}
::google::protobuf::uint32 StorageService::user_account_number_of_entries() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.user_account_number_of_entries)
  return user_account_number_of_entries_;
}
void StorageService::set_user_account_number_of_entries(::google::protobuf::uint32 value) {
  
  user_account_number_of_entries_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.user_account_number_of_entries)
}

// uint32 user_group_number_of_entries = 7;
void StorageService::clear_user_group_number_of_entries() {
  user_group_number_of_entries_ = 0u;
}
::google::protobuf::uint32 StorageService::user_group_number_of_entries() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.user_group_number_of_entries)
  return user_group_number_of_entries_;
}
void StorageService::set_user_group_number_of_entries(::google::protobuf::uint32 value) {
  
  user_group_number_of_entries_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageService.user_group_number_of_entries)
}

// .tr140.StorageService.Capabilities capabilities = 8;
bool StorageService::has_capabilities() const {
  return this != internal_default_instance() && capabilities_ != NULL;
}
void StorageService::clear_capabilities() {
  if (GetArenaNoVirtual() == NULL && capabilities_ != NULL) delete capabilities_;
  capabilities_ = NULL;
}
const ::tr140::StorageService_Capabilities& StorageService::capabilities() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.capabilities)
  return capabilities_ != NULL ? *capabilities_
                         : *::tr140::StorageService_Capabilities::internal_default_instance();
}
::tr140::StorageService_Capabilities* StorageService::mutable_capabilities() {
  
  if (capabilities_ == NULL) {
    capabilities_ = new ::tr140::StorageService_Capabilities;
  }
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.capabilities)
  return capabilities_;
}
::tr140::StorageService_Capabilities* StorageService::release_capabilities() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.capabilities)
  
  ::tr140::StorageService_Capabilities* temp = capabilities_;
  capabilities_ = NULL;
  return temp;
}
void StorageService::set_allocated_capabilities(::tr140::StorageService_Capabilities* capabilities) {
  delete capabilities_;
  capabilities_ = capabilities;
  if (capabilities) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.capabilities)
}

// .tr140.StorageService.NetInfo net_info = 9;
bool StorageService::has_net_info() const {
  return this != internal_default_instance() && net_info_ != NULL;
}
void StorageService::clear_net_info() {
  if (GetArenaNoVirtual() == NULL && net_info_ != NULL) delete net_info_;
  net_info_ = NULL;
}
const ::tr140::StorageService_NetInfo& StorageService::net_info() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.net_info)
  return net_info_ != NULL ? *net_info_
                         : *::tr140::StorageService_NetInfo::internal_default_instance();
}
::tr140::StorageService_NetInfo* StorageService::mutable_net_info() {
  
  if (net_info_ == NULL) {
    net_info_ = new ::tr140::StorageService_NetInfo;
  }
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.net_info)
  return net_info_;
}
::tr140::StorageService_NetInfo* StorageService::release_net_info() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.net_info)
  
  ::tr140::StorageService_NetInfo* temp = net_info_;
  net_info_ = NULL;
  return temp;
}
void StorageService::set_allocated_net_info(::tr140::StorageService_NetInfo* net_info) {
  delete net_info_;
  net_info_ = net_info;
  if (net_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.net_info)
}

// repeated .tr140.StorageService.UserGroup user_group = 10;
int StorageService::user_group_size() const {
  return user_group_.size();
}
void StorageService::clear_user_group() {
  user_group_.Clear();
}
const ::tr140::StorageService_UserGroup& StorageService::user_group(int index) const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.user_group)
  return user_group_.Get(index);
}
::tr140::StorageService_UserGroup* StorageService::mutable_user_group(int index) {
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.user_group)
  return user_group_.Mutable(index);
}
::tr140::StorageService_UserGroup* StorageService::add_user_group() {
  // @@protoc_insertion_point(field_add:tr140.StorageService.user_group)
  return user_group_.Add();
}
::google::protobuf::RepeatedPtrField< ::tr140::StorageService_UserGroup >*
StorageService::mutable_user_group() {
  // @@protoc_insertion_point(field_mutable_list:tr140.StorageService.user_group)
  return &user_group_;
}
const ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_UserGroup >&
StorageService::user_group() const {
  // @@protoc_insertion_point(field_list:tr140.StorageService.user_group)
  return user_group_;
}

// repeated .tr140.StorageService.UserAccount user_account = 11;
int StorageService::user_account_size() const {
  return user_account_.size();
}
void StorageService::clear_user_account() {
  user_account_.Clear();
}
const ::tr140::StorageService_UserAccount& StorageService::user_account(int index) const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.user_account)
  return user_account_.Get(index);
}
::tr140::StorageService_UserAccount* StorageService::mutable_user_account(int index) {
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.user_account)
  return user_account_.Mutable(index);
}
::tr140::StorageService_UserAccount* StorageService::add_user_account() {
  // @@protoc_insertion_point(field_add:tr140.StorageService.user_account)
  return user_account_.Add();
}
::google::protobuf::RepeatedPtrField< ::tr140::StorageService_UserAccount >*
StorageService::mutable_user_account() {
  // @@protoc_insertion_point(field_mutable_list:tr140.StorageService.user_account)
  return &user_account_;
}
const ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_UserAccount >&
StorageService::user_account() const {
  // @@protoc_insertion_point(field_list:tr140.StorageService.user_account)
  return user_account_;
}

// .tr140.StorageService.NetworkServer network_server = 12;
bool StorageService::has_network_server() const {
  return this != internal_default_instance() && network_server_ != NULL;
}
void StorageService::clear_network_server() {
  if (GetArenaNoVirtual() == NULL && network_server_ != NULL) delete network_server_;
  network_server_ = NULL;
}
const ::tr140::StorageService_NetworkServer& StorageService::network_server() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.network_server)
  return network_server_ != NULL ? *network_server_
                         : *::tr140::StorageService_NetworkServer::internal_default_instance();
}
::tr140::StorageService_NetworkServer* StorageService::mutable_network_server() {
  
  if (network_server_ == NULL) {
    network_server_ = new ::tr140::StorageService_NetworkServer;
  }
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.network_server)
  return network_server_;
}
::tr140::StorageService_NetworkServer* StorageService::release_network_server() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.network_server)
  
  ::tr140::StorageService_NetworkServer* temp = network_server_;
  network_server_ = NULL;
  return temp;
}
void StorageService::set_allocated_network_server(::tr140::StorageService_NetworkServer* network_server) {
  delete network_server_;
  network_server_ = network_server;
  if (network_server) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.network_server)
}

// .tr140.StorageService.FTPServer ftpserver = 13;
bool StorageService::has_ftpserver() const {
  return this != internal_default_instance() && ftpserver_ != NULL;
}
void StorageService::clear_ftpserver() {
  if (GetArenaNoVirtual() == NULL && ftpserver_ != NULL) delete ftpserver_;
  ftpserver_ = NULL;
}
const ::tr140::StorageService_FTPServer& StorageService::ftpserver() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.ftpserver)
  return ftpserver_ != NULL ? *ftpserver_
                         : *::tr140::StorageService_FTPServer::internal_default_instance();
}
::tr140::StorageService_FTPServer* StorageService::mutable_ftpserver() {
  
  if (ftpserver_ == NULL) {
    ftpserver_ = new ::tr140::StorageService_FTPServer;
  }
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.ftpserver)
  return ftpserver_;
}
::tr140::StorageService_FTPServer* StorageService::release_ftpserver() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.ftpserver)
  
  ::tr140::StorageService_FTPServer* temp = ftpserver_;
  ftpserver_ = NULL;
  return temp;
}
void StorageService::set_allocated_ftpserver(::tr140::StorageService_FTPServer* ftpserver) {
  delete ftpserver_;
  ftpserver_ = ftpserver;
  if (ftpserver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.ftpserver)
}

// .tr140.StorageService.SFTPServer sftpserver = 14;
bool StorageService::has_sftpserver() const {
  return this != internal_default_instance() && sftpserver_ != NULL;
}
void StorageService::clear_sftpserver() {
  if (GetArenaNoVirtual() == NULL && sftpserver_ != NULL) delete sftpserver_;
  sftpserver_ = NULL;
}
const ::tr140::StorageService_SFTPServer& StorageService::sftpserver() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.sftpserver)
  return sftpserver_ != NULL ? *sftpserver_
                         : *::tr140::StorageService_SFTPServer::internal_default_instance();
}
::tr140::StorageService_SFTPServer* StorageService::mutable_sftpserver() {
  
  if (sftpserver_ == NULL) {
    sftpserver_ = new ::tr140::StorageService_SFTPServer;
  }
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.sftpserver)
  return sftpserver_;
}
::tr140::StorageService_SFTPServer* StorageService::release_sftpserver() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.sftpserver)
  
  ::tr140::StorageService_SFTPServer* temp = sftpserver_;
  sftpserver_ = NULL;
  return temp;
}
void StorageService::set_allocated_sftpserver(::tr140::StorageService_SFTPServer* sftpserver) {
  delete sftpserver_;
  sftpserver_ = sftpserver;
  if (sftpserver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.sftpserver)
}

// .tr140.StorageService.HTTPServer httpserver = 15;
bool StorageService::has_httpserver() const {
  return this != internal_default_instance() && httpserver_ != NULL;
}
void StorageService::clear_httpserver() {
  if (GetArenaNoVirtual() == NULL && httpserver_ != NULL) delete httpserver_;
  httpserver_ = NULL;
}
const ::tr140::StorageService_HTTPServer& StorageService::httpserver() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.httpserver)
  return httpserver_ != NULL ? *httpserver_
                         : *::tr140::StorageService_HTTPServer::internal_default_instance();
}
::tr140::StorageService_HTTPServer* StorageService::mutable_httpserver() {
  
  if (httpserver_ == NULL) {
    httpserver_ = new ::tr140::StorageService_HTTPServer;
  }
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.httpserver)
  return httpserver_;
}
::tr140::StorageService_HTTPServer* StorageService::release_httpserver() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.httpserver)
  
  ::tr140::StorageService_HTTPServer* temp = httpserver_;
  httpserver_ = NULL;
  return temp;
}
void StorageService::set_allocated_httpserver(::tr140::StorageService_HTTPServer* httpserver) {
  delete httpserver_;
  httpserver_ = httpserver;
  if (httpserver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.httpserver)
}

// .tr140.StorageService.HTTPSServer httpsserver = 16;
bool StorageService::has_httpsserver() const {
  return this != internal_default_instance() && httpsserver_ != NULL;
}
void StorageService::clear_httpsserver() {
  if (GetArenaNoVirtual() == NULL && httpsserver_ != NULL) delete httpsserver_;
  httpsserver_ = NULL;
}
const ::tr140::StorageService_HTTPSServer& StorageService::httpsserver() const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.httpsserver)
  return httpsserver_ != NULL ? *httpsserver_
                         : *::tr140::StorageService_HTTPSServer::internal_default_instance();
}
::tr140::StorageService_HTTPSServer* StorageService::mutable_httpsserver() {
  
  if (httpsserver_ == NULL) {
    httpsserver_ = new ::tr140::StorageService_HTTPSServer;
  }
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.httpsserver)
  return httpsserver_;
}
::tr140::StorageService_HTTPSServer* StorageService::release_httpsserver() {
  // @@protoc_insertion_point(field_release:tr140.StorageService.httpsserver)
  
  ::tr140::StorageService_HTTPSServer* temp = httpsserver_;
  httpsserver_ = NULL;
  return temp;
}
void StorageService::set_allocated_httpsserver(::tr140::StorageService_HTTPSServer* httpsserver) {
  delete httpsserver_;
  httpsserver_ = httpsserver;
  if (httpsserver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tr140.StorageService.httpsserver)
}

// repeated .tr140.StorageService.PhysicalMedium physical_medium = 17;
int StorageService::physical_medium_size() const {
  return physical_medium_.size();
}
void StorageService::clear_physical_medium() {
  physical_medium_.Clear();
}
const ::tr140::StorageService_PhysicalMedium& StorageService::physical_medium(int index) const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.physical_medium)
  return physical_medium_.Get(index);
}
::tr140::StorageService_PhysicalMedium* StorageService::mutable_physical_medium(int index) {
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.physical_medium)
  return physical_medium_.Mutable(index);
}
::tr140::StorageService_PhysicalMedium* StorageService::add_physical_medium() {
  // @@protoc_insertion_point(field_add:tr140.StorageService.physical_medium)
  return physical_medium_.Add();
}
::google::protobuf::RepeatedPtrField< ::tr140::StorageService_PhysicalMedium >*
StorageService::mutable_physical_medium() {
  // @@protoc_insertion_point(field_mutable_list:tr140.StorageService.physical_medium)
  return &physical_medium_;
}
const ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_PhysicalMedium >&
StorageService::physical_medium() const {
  // @@protoc_insertion_point(field_list:tr140.StorageService.physical_medium)
  return physical_medium_;
}

// repeated .tr140.StorageService.StorageArray storage_array = 18;
int StorageService::storage_array_size() const {
  return storage_array_.size();
}
void StorageService::clear_storage_array() {
  storage_array_.Clear();
}
const ::tr140::StorageService_StorageArray& StorageService::storage_array(int index) const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.storage_array)
  return storage_array_.Get(index);
}
::tr140::StorageService_StorageArray* StorageService::mutable_storage_array(int index) {
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.storage_array)
  return storage_array_.Mutable(index);
}
::tr140::StorageService_StorageArray* StorageService::add_storage_array() {
  // @@protoc_insertion_point(field_add:tr140.StorageService.storage_array)
  return storage_array_.Add();
}
::google::protobuf::RepeatedPtrField< ::tr140::StorageService_StorageArray >*
StorageService::mutable_storage_array() {
  // @@protoc_insertion_point(field_mutable_list:tr140.StorageService.storage_array)
  return &storage_array_;
}
const ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_StorageArray >&
StorageService::storage_array() const {
  // @@protoc_insertion_point(field_list:tr140.StorageService.storage_array)
  return storage_array_;
}

// repeated .tr140.StorageService.LogicalVolume logical_volume = 19;
int StorageService::logical_volume_size() const {
  return logical_volume_.size();
}
void StorageService::clear_logical_volume() {
  logical_volume_.Clear();
}
const ::tr140::StorageService_LogicalVolume& StorageService::logical_volume(int index) const {
  // @@protoc_insertion_point(field_get:tr140.StorageService.logical_volume)
  return logical_volume_.Get(index);
}
::tr140::StorageService_LogicalVolume* StorageService::mutable_logical_volume(int index) {
  // @@protoc_insertion_point(field_mutable:tr140.StorageService.logical_volume)
  return logical_volume_.Mutable(index);
}
::tr140::StorageService_LogicalVolume* StorageService::add_logical_volume() {
  // @@protoc_insertion_point(field_add:tr140.StorageService.logical_volume)
  return logical_volume_.Add();
}
::google::protobuf::RepeatedPtrField< ::tr140::StorageService_LogicalVolume >*
StorageService::mutable_logical_volume() {
  // @@protoc_insertion_point(field_mutable_list:tr140.StorageService.logical_volume)
  return &logical_volume_;
}
const ::google::protobuf::RepeatedPtrField< ::tr140::StorageService_LogicalVolume >&
StorageService::logical_volume() const {
  // @@protoc_insertion_point(field_list:tr140.StorageService.logical_volume)
  return logical_volume_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageRequest::kUnusedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageRequest::StorageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tr_2d140_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tr140.StorageRequest)
}
StorageRequest::StorageRequest(const StorageRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unused_ = from.unused_;
  // @@protoc_insertion_point(copy_constructor:tr140.StorageRequest)
}

void StorageRequest::SharedCtor() {
  unused_ = 0;
  _cached_size_ = 0;
}

StorageRequest::~StorageRequest() {
  // @@protoc_insertion_point(destructor:tr140.StorageRequest)
  SharedDtor();
}

void StorageRequest::SharedDtor() {
}

void StorageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageRequest::descriptor() {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StorageRequest& StorageRequest::default_instance() {
  protobuf_tr_2d140_2eproto::InitDefaults();
  return *internal_default_instance();
}

StorageRequest* StorageRequest::New(::google::protobuf::Arena* arena) const {
  StorageRequest* n = new StorageRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StorageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tr140.StorageRequest)
  unused_ = 0;
}

bool StorageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tr140.StorageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 unused = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unused_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tr140.StorageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tr140.StorageRequest)
  return false;
#undef DO_
}

void StorageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tr140.StorageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 unused = 1;
  if (this->unused() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->unused(), output);
  }

  // @@protoc_insertion_point(serialize_end:tr140.StorageRequest)
}

::google::protobuf::uint8* StorageRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tr140.StorageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 unused = 1;
  if (this->unused() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->unused(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tr140.StorageRequest)
  return target;
}

size_t StorageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tr140.StorageRequest)
  size_t total_size = 0;

  // int32 unused = 1;
  if (this->unused() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unused());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tr140.StorageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tr140.StorageRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tr140.StorageRequest)
    MergeFrom(*source);
  }
}

void StorageRequest::MergeFrom(const StorageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tr140.StorageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.unused() != 0) {
    set_unused(from.unused());
  }
}

void StorageRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tr140.StorageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageRequest::CopyFrom(const StorageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tr140.StorageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageRequest::IsInitialized() const {
  return true;
}

void StorageRequest::Swap(StorageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageRequest::InternalSwap(StorageRequest* other) {
  std::swap(unused_, other->unused_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StorageRequest::GetMetadata() const {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StorageRequest

// int32 unused = 1;
void StorageRequest::clear_unused() {
  unused_ = 0;
}
::google::protobuf::int32 StorageRequest::unused() const {
  // @@protoc_insertion_point(field_get:tr140.StorageRequest.unused)
  return unused_;
}
void StorageRequest::set_unused(::google::protobuf::int32 value) {
  
  unused_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageRequest.unused)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageReply::kUnusedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageReply::StorageReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tr_2d140_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tr140.StorageReply)
}
StorageReply::StorageReply(const StorageReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unused_ = from.unused_;
  // @@protoc_insertion_point(copy_constructor:tr140.StorageReply)
}

void StorageReply::SharedCtor() {
  unused_ = 0;
  _cached_size_ = 0;
}

StorageReply::~StorageReply() {
  // @@protoc_insertion_point(destructor:tr140.StorageReply)
  SharedDtor();
}

void StorageReply::SharedDtor() {
}

void StorageReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageReply::descriptor() {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StorageReply& StorageReply::default_instance() {
  protobuf_tr_2d140_2eproto::InitDefaults();
  return *internal_default_instance();
}

StorageReply* StorageReply::New(::google::protobuf::Arena* arena) const {
  StorageReply* n = new StorageReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StorageReply::Clear() {
// @@protoc_insertion_point(message_clear_start:tr140.StorageReply)
  unused_ = 0;
}

bool StorageReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tr140.StorageReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 unused = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unused_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tr140.StorageReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tr140.StorageReply)
  return false;
#undef DO_
}

void StorageReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tr140.StorageReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 unused = 1;
  if (this->unused() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->unused(), output);
  }

  // @@protoc_insertion_point(serialize_end:tr140.StorageReply)
}

::google::protobuf::uint8* StorageReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tr140.StorageReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 unused = 1;
  if (this->unused() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->unused(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tr140.StorageReply)
  return target;
}

size_t StorageReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tr140.StorageReply)
  size_t total_size = 0;

  // int32 unused = 1;
  if (this->unused() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unused());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tr140.StorageReply)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tr140.StorageReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tr140.StorageReply)
    MergeFrom(*source);
  }
}

void StorageReply::MergeFrom(const StorageReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tr140.StorageReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.unused() != 0) {
    set_unused(from.unused());
  }
}

void StorageReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tr140.StorageReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageReply::CopyFrom(const StorageReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tr140.StorageReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageReply::IsInitialized() const {
  return true;
}

void StorageReply::Swap(StorageReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageReply::InternalSwap(StorageReply* other) {
  std::swap(unused_, other->unused_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StorageReply::GetMetadata() const {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StorageReply

// int32 unused = 1;
void StorageReply::clear_unused() {
  unused_ = 0;
}
::google::protobuf::int32 StorageReply::unused() const {
  // @@protoc_insertion_point(field_get:tr140.StorageReply.unused)
  return unused_;
}
void StorageReply::set_unused(::google::protobuf::int32 value) {
  
  unused_ = value;
  // @@protoc_insertion_point(field_set:tr140.StorageReply.unused)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int X_012345_Message::kUnusedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

X_012345_Message::X_012345_Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tr_2d140_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tr140.X_012345_Message)
}
X_012345_Message::X_012345_Message(const X_012345_Message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unused_ = from.unused_;
  // @@protoc_insertion_point(copy_constructor:tr140.X_012345_Message)
}

void X_012345_Message::SharedCtor() {
  unused_ = 0;
  _cached_size_ = 0;
}

X_012345_Message::~X_012345_Message() {
  // @@protoc_insertion_point(destructor:tr140.X_012345_Message)
  SharedDtor();
}

void X_012345_Message::SharedDtor() {
}

void X_012345_Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* X_012345_Message::descriptor() {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const X_012345_Message& X_012345_Message::default_instance() {
  protobuf_tr_2d140_2eproto::InitDefaults();
  return *internal_default_instance();
}

X_012345_Message* X_012345_Message::New(::google::protobuf::Arena* arena) const {
  X_012345_Message* n = new X_012345_Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void X_012345_Message::Clear() {
// @@protoc_insertion_point(message_clear_start:tr140.X_012345_Message)
  unused_ = 0;
}

bool X_012345_Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tr140.X_012345_Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 unused = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unused_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tr140.X_012345_Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tr140.X_012345_Message)
  return false;
#undef DO_
}

void X_012345_Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tr140.X_012345_Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 unused = 1;
  if (this->unused() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->unused(), output);
  }

  // @@protoc_insertion_point(serialize_end:tr140.X_012345_Message)
}

::google::protobuf::uint8* X_012345_Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tr140.X_012345_Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 unused = 1;
  if (this->unused() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->unused(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tr140.X_012345_Message)
  return target;
}

size_t X_012345_Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tr140.X_012345_Message)
  size_t total_size = 0;

  // int32 unused = 1;
  if (this->unused() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unused());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void X_012345_Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tr140.X_012345_Message)
  GOOGLE_DCHECK_NE(&from, this);
  const X_012345_Message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const X_012345_Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tr140.X_012345_Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tr140.X_012345_Message)
    MergeFrom(*source);
  }
}

void X_012345_Message::MergeFrom(const X_012345_Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tr140.X_012345_Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.unused() != 0) {
    set_unused(from.unused());
  }
}

void X_012345_Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tr140.X_012345_Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X_012345_Message::CopyFrom(const X_012345_Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tr140.X_012345_Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X_012345_Message::IsInitialized() const {
  return true;
}

void X_012345_Message::Swap(X_012345_Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void X_012345_Message::InternalSwap(X_012345_Message* other) {
  std::swap(unused_, other->unused_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata X_012345_Message::GetMetadata() const {
  protobuf_tr_2d140_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tr_2d140_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// X_012345_Message

// int32 unused = 1;
void X_012345_Message::clear_unused() {
  unused_ = 0;
}
::google::protobuf::int32 X_012345_Message::unused() const {
  // @@protoc_insertion_point(field_get:tr140.X_012345_Message.unused)
  return unused_;
}
void X_012345_Message::set_unused(::google::protobuf::int32 value) {
  
  unused_ = value;
  // @@protoc_insertion_point(field_set:tr140.X_012345_Message.unused)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tr140

// @@protoc_insertion_point(global_scope)
