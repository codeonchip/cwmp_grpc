// Generated by cwmp_proto_to_grpc.cc
// source: tr-104-2-0-0-full.proto
// 1st top-level message: VoiceService
// Added service 

// tr-104-2-0-0-full.proto
// Generated by cwmp_xml_to_proto.cc
// source: tr-104-2-0-0-full.xml

syntax = "proto3";

package tr104; //!! renamed

//  uint32    voice_service_number_of_entries          = 0  ; //  numentries}}      s}}      !
message VoiceService { // VoiceService.{i}.
  string    alias                                    = 1  ; //  {{datatype|expand}}        }        
  uint32    vo_ipprofile_number_of_entries           = 2  ; //  {{numentries}}        }           
  uint32    codec_profile_number_of_entries          = 3  ; //  {{numentries}}        }           
  uint32    interwork_number_of_entries              = 4  ; //  {{numentries}}        }           
  uint32    trunk_number_of_entries                  = 5  ; //  {{numentries}}        }           
  uint32    call_log_number_of_entries               = 6  ; //  {{numentries}}          The value MUST 
  uint32    terminal_number_of_entries               = 7  ; //  {{numentries}}        }           
  message Capabilities { // VoiceService.{i}.Capabilities.
    int32     max_line_count                           = 1  ; //  Maximum total number of {{object|.CallCo
    int32     max_extension_count                      = 2  ; //  Maximum total number of {{object|.CallCo
    int32     max_call_log_count                       = 3  ; //  Maximum total number of {{object|.CallLo
    int32     max_sessions_per_line                    = 4  ; //  Maximum number of voice sessions support
    int32     max_sessions_per_extension               = 5  ; //  Maximum number of voice sessions support
    int32     max_session_count                        = 6  ; //  Maximum total number of voice sessions s
    string    network_connection_modes                 = 7  ; //  {{list}}  Each item is a supported netwo
    string    user_connection_modes                    = 8  ; //  {{list}}  Each item is a supported user 
    string    tone_file_formats                        = 9  ; //  {{list}} Each item is a supported tone f
    string    ring_file_formats                        = 10 ; //  {{list}} Each item is a supported ring f
    string    facility_actions                         = 11 ; //  The facility actions supported by this V
    uint32    codec_number_of_entries                  = 12 ; //  {{numentries}}        }           
    message SIP { // VoiceService.{i}.Capabilities.SIP.
      message Client { // VoiceService.{i}.Capabilities.SIP.Client.
        string    extensions                               = 1  ; //  {{list}}  Each item is a supported SIP e
        string    urischemes                               = 2  ; //  {{list}} Each item is a supported URI sc
        string    event_types                              = 3  ; //  {{list}} Each item is a supported event 
        string    tlsauthentication_protocols              = 4  ; //  {{list}} Each item is a supported authen
        string    tlsauthentication_key_sizes              = 5  ; //  {{list}} Each item represents a supporte
        string    tlsencryption_protocols                  = 6  ; //  {{list}} Each item is a supported encryp
        string    tlsencryption_key_sizes                  = 7  ; //  {{list}}  Each item is a supported TLS e
        string    tlskey_exchange_protocols                = 8  ; //  {{list}} Each item is a supported key ex
      }
      Client client = 1; // VoiceService.{i}.Capabilities.SIP.Client.
      message Registrar { // VoiceService.{i}.Capabilities.SIP.Registrar.
        string    extensions                               = 1  ; //  {{list}}  Each item is a supported SIP e
        string    urischemes                               = 2  ; //  {{list}} Each item is a supported URI sc
        string    event_types                              = 3  ; //  {{list}} Each item is a supported event 
        string    tlsauthentication_protocols              = 4  ; //  {{list}} Each item is a supported authen
        string    tlsauthentication_key_sizes              = 5  ; //  {{list}} Each item represents a supporte
        string    tlsencryption_protocols                  = 6  ; //  {{list}} Each item is a supported encryp
        string    tlsencryption_key_sizes                  = 7  ; //  {{list}}  Each item is a supported TLS e
        string    tlskey_exchange_protocols                = 8  ; //  {{list}} Each item is a supported key ex
      }
      Registrar registrar = 2; // VoiceService.{i}.Capabilities.SIP.Registrar.
    }
    SIP sip = 13; // VoiceService.{i}.Capabilities.SIP.
    message MGCP { // VoiceService.{i}.Capabilities.MGCP.
      string    extensions                               = 1  ; //  {{list}}  Each item is a supported optio
    }
    MGCP mgcp = 14; // VoiceService.{i}.Capabilities.MGCP.
    message H323 { // VoiceService.{i}.Capabilities.H323.
      bool      fast_start                               = 1  ; //  Support for H.323 fast start.  If {{true
      string    h235authentication_methods               = 2  ; //  {{list}} Each item is a supported authen
    }
    H323 h323 = 15; // VoiceService.{i}.Capabilities.H323.
    message ISDN { // VoiceService.{i}.Capabilities.ISDN.
      bool      msn                                      = 1  ; //  The external ISDN ports support {{bibref
      bool      ddi                                      = 2  ; //  The external ISDN ports support {{bibref
      bool      mcid                                     = 3  ; //  The external ISDN ports support {{bibref
      bool      mwi                                      = 4  ; //  The external ISDN ports support Message 
      bool      ao_c                                     = 5  ; //  The external ISDN ports support one or m
      bool      ect                                      = 6  ; //  The external ISDN ports support {{bibref
    }
    ISDN isdn = 16; // VoiceService.{i}.Capabilities.ISDN.
    message POTS { // VoiceService.{i}.Capabilities.POTS.
      string    dial_type                                = 1  ; //  The supported supported dial type.     
      bool      clip_generation                          = 2  ; //  The external POTS ports support Calling 
      bool      charging_pulse                           = 3  ; //  The external POTS ports support transmit
    }
    POTS pots = 17; // VoiceService.{i}.Capabilities.POTS.
    message Codec { // VoiceService.{i}.Capabilities.Codec.{i}.
      string    alias                                    = 1  ; //  {{datatype|expand}}        }        
      string    codec                                    = 2  ; //  Identifier of the type of codec. {{enum}
      uint32    bit_rate                                 = 3  ; //  Bit rate, specified in {{units}}.  The v
      string    packetization_period                     = 4  ; //  {{list}} Each item is a supported packet
      bool      silence_suppression                      = 5  ; //  If {{true}} indicates support for silenc
    }
    repeated Codec codec = 18; // VoiceService.{i}.Capabilities.Codec.{i}.
    message QualityIndicator { // VoiceService.{i}.Capabilities.QualityIndicator.
      string    qimodels_supported                       = 1  ; //  Comma-separated list of supported models
      uint32    max_qivalues                             = 2  ; //  Specifies the maximum number of QI value
      uint32    max_worst_qivalues                       = 3  ; //  Maximum number of worst QI values which 
    }
    QualityIndicator quality_indicator = 19; // VoiceService.{i}.Capabilities.QualityIndicator.
  }
  Capabilities capabilities = 8; // VoiceService.{i}.Capabilities.
  message ReservedPorts { // VoiceService.{i}.ReservedPorts.
    string    wanport_range                            = 1  ; //  Range of ports reserved for use by the C
    string    lanport_range                            = 2  ; //  Range of ports reserved for use by the C
  }
  ReservedPorts reserved_ports = 9; // VoiceService.{i}.ReservedPorts.
  message ISDN { // VoiceService.{i}.ISDN.
    uint32    brinumber_of_entries                     = 1  ; //  {{numentries}}        }        yInd
    uint32    prinumber_of_entries                     = 2  ; //  {{numentries}}        }        yInd
    message BRI { // VoiceService.{i}.ISDN.BRI.{i}.
      bool      enable                                   = 1  ; //  Enables or disables this ISDN BRI interf
      string    status                                   = 2  ; //  Indicates the status of this physical in
      string    alias                                    = 3  ; //  {{datatype|expand}}        }        
      string    name                                     = 4  ; //  The textual name of the interface as ass
      string    tone_event_profile                       = 5  ; //  Reference to the {{object|.Tone.EventPro
      string    application_interface                    = 6  ; //  Specify the type of application that use
      string    protocol                                 = 7  ; //  Specifies the protocol variant used for 
      string    protocol_emulation                       = 8  ; //  Protocol emulation for the interface.  
      bool      permanent_layer2                         = 9  ; //  If {{true}}, avoid the disconnection of 
      bool      permanent_layer1                         = 10 ; //  Maintain the ISDN layer 1 up; it is usef
      bool      lapd_disconnection_timeout               = 11 ; //  Avoid the disconnection of the ISDN laye
      string    teinegotiation                           = 12 ; //  TEI management mode. It MUST be set to {
      uint32    static_tei                               = 13 ; //  TEI value in static mode.        .   
      bool      life_line_hold                           = 14 ; //  Enable or disable the lifeline bypass on
      bool      power_source_one                         = 15 ; //  To enable (disable) the power source one
      uint32    max_num_bchannels                        = 16 ; //  Maximum number of simultaneous B channel
      string    outbound_only_bchannels                  = 17 ; //  {{list|reserved B-channels which can be 
      string    inbound_only_bchannels                   = 18 ; //  {{list|reserved B-channels which can be 
      string    bidirectional_bchannels                  = 19 ; //  {{list|reserved B-channels which can be 
    }
    repeated BRI bri = 3; // VoiceService.{i}.ISDN.BRI.{i}.
    message PRI { // VoiceService.{i}.ISDN.PRI.{i}.
      bool      enable                                   = 1  ; //  Enables or disables this ISDN PRI interf
      string    status                                   = 2  ; //  Indicates the status of this physical in
      string    alias                                    = 3  ; //  {{datatype|expand}}        }        
      string    name                                     = 4  ; //  The textual name of the interface as ass
      string    tone_event_profile                       = 5  ; //  Reference to the {{object|.Tone.EventPro
      string    application_interface                    = 6  ; //  Specify the type of application that use
      string    protocol                                 = 7  ; //  Specifies the protocol variant used for 
      string    protocol_emulation                       = 8  ; //  Specify the protocol emulation for this 
      bool      permanent_layer2                         = 9  ; //  If {{true}}, avoid the disconnection of 
      string    linecode                                 = 10 ; //  Specify the physical line coding to be u
      string    esf                                      = 11 ; //  Specify the framing type.        .   
      string    physical_interface_type                  = 12 ; //  {{enum}}        }        .A
      uint32    max_num_bchannels                        = 13 ; //  Maximum number of simultaneous B channel
      string    outbound_only_bchannels                  = 14 ; //  {{list|reserved B-channels which can be 
      string    inbound_only_bchannels                   = 15 ; //  {{list|reserved B-channels which can be 
      string    bidirectional_bchannels                  = 16 ; //  {{list|reserved B-channels which can be 
      string    clock_mode                               = 17 ; //  Determines the role of the CPE for the p
    }
    repeated PRI pri = 4; // VoiceService.{i}.ISDN.PRI.{i}.
  }
  ISDN isdn = 10; // VoiceService.{i}.ISDN.
  message POTS { // VoiceService.{i}.POTS.
    uint32    fxonumber_of_entries                     = 1  ; //  {{numentries}}        }           
    uint32    fxsnumber_of_entries                     = 2  ; //  {{numentries}}        }           
    string    region                                   = 3  ; //  The geographic region associated to POTS
    message FXO { // VoiceService.{i}.POTS.FXO.{i}.
      bool      enable                                   = 1  ; //  Enables or disables this FXO interface.
      string    status                                   = 2  ; //  Indicates the status of this physical in
      string    alias                                    = 3  ; //  {{datatype|expand}}        }        
      string    name                                     = 4  ; //  The textual name of the interface as ass
      string    tone_event_profile                       = 5  ; //  Reference to the {{object|.Tone.EventPro
      bool      second_step_dialing                      = 6  ; //  Enables the second step dialing mode.  
      uint32    timeout_before_dialing                   = 7  ; //  Specifies the time in {{units}} between 
      uint32    ringing_timeout                          = 8  ; //  Defines the timeout in {{units}} for inc
      uint32    ring_number                              = 9  ; //  Defines the number of pulses for ringing
      uint32    on_hook_min_duration                     = 10 ; //  Specify the minimum duration in {{units}
      string    signaling_mode                           = 11 ; //  Signaling mode used for line seizure by 
      uint32    dtmfdialout_interval                     = 12 ; //  The time interval in {{units}} between d
      bool      caller_id_detection_enable               = 13 ; //  Enables the detection of CallerId for in
      bool      active                                   = 14 ; //  Determines if this physical interface is
      message DiagTests { // VoiceService.{i}.POTS.FXO.{i}.DiagTests.
        string    diagnostics_state                        = 1  ; //  Indicates availability of diagnostic dat
        string    test_selector                            = 2  ; //  Indicates which test to perform.  {{enum
        string    test_result                              = 3  ; //  Result of the selected test.  {{enum}} 
      }
      DiagTests diag_tests = 15; // VoiceService.{i}.POTS.FXO.{i}.DiagTests.
    }
    repeated FXO fxo = 4; // VoiceService.{i}.POTS.FXO.{i}.
    message FXS { // VoiceService.{i}.POTS.FXS.{i}.
      bool      enable                                   = 1  ; //  Enables or disables this FXS interface.
      string    status                                   = 2  ; //  Indicates the status of this physical in
      string    alias                                    = 3  ; //  {{datatype|expand}}        }        
      string    name                                     = 4  ; //  The textual name of the interface as ass
      string    tone_event_profile                       = 5  ; //  Reference to the {{object|.Tone.EventPro
      string    fax_pass_through                         = 6  ; //  Indicates the support for pass-through o
      string    modem_pass_through                       = 7  ; //  Indicates the support for pass-through o
      string    dial_type                                = 8  ; //  Dial type used on the line.        . 
      bool      clip_generation                          = 9  ; //  Whether the Calling Line identification 
      bool      charging_pulse                           = 10 ; //  Whether a charging pulse is transmitted 
      bool      active                                   = 11 ; //  Indicates whether a terminal is plugged 
      string    terminal_type                            = 12 ; //  Defines the terminal type plugged on thi
      message VoiceProcessing { // VoiceService.{i}.POTS.FXS.{i}.VoiceProcessing.
        int32     transmit_gain                            = 1  ; //  Gain in {{units}} to apply to the transm
        int32     receive_gain                             = 2  ; //  Gain in {{units}} to apply to the receiv
        bool      echo_cancellation_enable                 = 3  ; //  Enable or disable echo cancellation for 
        bool      echo_cancellation_in_use                 = 4  ; //  Indication of whether or not echo cancel
        uint32    echo_cancellation_tail                   = 5  ; //  Tail length in {{units}} of the echo can
      }
      VoiceProcessing voice_processing = 13; // VoiceService.{i}.POTS.FXS.{i}.VoiceProcessing.
      message DiagTests { // VoiceService.{i}.POTS.FXS.{i}.DiagTests.
        string    diagnostics_state                        = 1  ; //  Indicates availability of diagnostic dat
        string    test_selector                            = 2  ; //  Indicates which GR-909 test to perform.
        string    test_result                              = 3  ; //  Result of the selected test.        .
      }
      DiagTests diag_tests = 14; // VoiceService.{i}.POTS.FXS.{i}.DiagTests.
    }
    repeated FXS fxs = 5; // VoiceService.{i}.POTS.FXS.{i}.
    message Ringer { // VoiceService.{i}.POTS.Ringer.
      uint32    event_number_of_entries                  = 1  ; //  {{numentries}}        }        sts.
      message Event { // VoiceService.{i}.POTS.Ringer.Event.{i}.
        string    alias                                    = 1  ; //  {{datatype|expand}}        }        
        string    function                                 = 2  ; //  The event for which the ring pattern is 
        string    cadence                                  = 3  ; //  {{list}} The values represent an alterna
      }
      repeated Event event = 2; // VoiceService.{i}.POTS.Ringer.Event.{i}.
    }
    Ringer ringer = 6; // VoiceService.{i}.POTS.Ringer.
  }
  POTS pots = 11; // VoiceService.{i}.POTS.
  message DECT { // VoiceService.{i}.DECT.
    uint32    base_number_of_entries                   = 1  ; //  {{numentries}}        }        i}.
    uint32    portable_number_of_entries               = 2  ; //  {{numentries}}        }        i}.
    message Base { // VoiceService.{i}.DECT.Base.{i}.
      bool      enable                                   = 1  ; //  Enables or disables this base.        
      string    status                                   = 2  ; //  Indicates the status of this base.     
      string    alias                                    = 3  ; //  {{datatype|expand}}        }        
      string    name                                     = 4  ; //  The textual name of the interface as ass
      string    tone_event_profile                       = 5  ; //  Reference to the {{object|.Tone.EventPro
      string    standard                                 = 6  ; //  The highest DECT protocol version suppor
      bytes     rfpi                                     = 7  ; //  The Radio Fixed Part Identity which uniq
      uint32    max_supported_pp                         = 8  ; //  The maximum number of Portable Parts (PP
      bytes     pin                                      = 9  ; //  The PIN is an hexbinary string of 32 bit
      bool      repeater_support_enabled                 = 10 ; //  If {{true}}, the DECT system supports th
      bool      nemoenable                               = 11 ; //  Enable or disable NEMO (No Emission Mode
      bool      subscription_enable                      = 12 ; //  Enables the subscription mode of the DEC
      bool      ciphering_enable                         = 13 ; //  Enable or disable ciphering for the call
      string    encryption_type                          = 14 ; //  Algorithm used in the encryption process
      string    rfpower_control                          = 15 ; //  This parameter is used to control the se
      string    firmware_version                         = 16 ; //  Firmware version of the base as defined 
      string    eeprom_version                           = 17 ; //  EEPROM version of the base as defined in
      string    hardware_version                         = 18 ; //  Hardware version of the base as defined 
      message Stats { // VoiceService.{i}.DECT.Base.{i}.Stats.
        uint32    handovers                                = 1  ; //  The count of all successful handovers. 
        uint32    handover_failures                        = 2  ; //  The count of all failed handovers.     
        uint32    control_field_errors                     = 3  ; //  The count of all bad A-field packets.  
        uint32    payload_field_errors                     = 4  ; //  The count of all bad B-field packets.  
        uint32    sync_failures                            = 5  ; //  The count of all synchronization failure
      }
      Stats stats = 19; // VoiceService.{i}.DECT.Base.{i}.Stats.
    }
    repeated Base base = 3; // VoiceService.{i}.DECT.Base.{i}.
    message Portable { // VoiceService.{i}.DECT.Portable.{i}.
      bool      enable                                   = 1  ; //  Enables or disables this DECT portable.
      string    status                                   = 2  ; //  Indicates the status of this DECT portab
      string    alias                                    = 3  ; //  {{datatype|expand}}        }        
      string    codec_list                               = 4  ; //  {{list}} {{reference}}          The CPE
      string    registration_status                      = 5  ; //  The current registration status of the D
      bytes     ipui                                     = 6  ; //  The International Portable User Identity
      uint32    ipuilength                               = 7  ; //  The length of {{param|IPUI}}, in {{units
      bytes     ipei                                     = 8  ; //  The International Portable Equipment Ide
      bytes     park                                     = 9  ; //  The Portable Access Rights Key of this p
      string    base_attached_to                         = 10 ; //  Refers to the {{object|#.Base}} where th
      string    portable_type                            = 11 ; //  {{list}} Protocols used for connection.
      string    subscription_time                        = 12 ; //  The date and time in which the DECT port
      string    control                                  = 13 ; //  This parameter MAY be used by the ACS to
      string    hardware_version                         = 14 ; //  Indicates the Hardware Version of a DECT
      string    software_version                         = 15 ; //  Indicates the Software Version used by a
      bool      software_upgrade                         = 16 ; //  This parameter indicates support for SUO
      string    last_update_date_time                    = 17 ; //  Indicates the last successful SW update 
      string    operator_name                            = 18 ; //  The name of the operator that will be di
    }
    repeated Portable portable = 4; // VoiceService.{i}.DECT.Portable.{i}.
  }
  DECT dect = 12; // VoiceService.{i}.DECT.
  message SIP { // VoiceService.{i}.SIP.
    uint32    network_number_of_entries                = 1  ; //  {{numentries}}        }        .
    uint32    client_number_of_entries                 = 2  ; //  {{numentries}}        }        .
    uint32    proxy_number_of_entries                  = 3  ; //  {{numentries}}        }        .
    uint32    registrar_number_of_entries              = 4  ; //  {{numentries}}        }        .
    message Client { // VoiceService.{i}.SIP.Client.{i}.
      bool      enable                                   = 1  ; //  Enable or disable this client.        
      bool      quiescent_mode                           = 2  ; //  If {{true}}, when {{param|Enable}} is se
      string    status                                   = 3  ; //  Indicates the status of this client. Unl
      string    alias                                    = 4  ; //  {{datatype|expand}}        }        
      string    origin                                   = 5  ; //  Mechanism via which this instance was as
      string    register_mode                            = 6  ; //  The registration procedures to apply. Fo
      string    auth_user_name                           = 7  ; //  Username used to authenticate the connec
      string    auth_password                            = 8  ; //  Password used to authenticate the connec
      string    network                                  = 9  ; //  SIP network with which this SIP client i
      uint32    max_sessions                             = 10 ; //  Limit on the number of simultaneous voic
      string    register_uri                             = 11 ; //  The SIP URI that represents the identity
      bool      e164format                               = 12 ; //  When {{true}} and using a {{object|.Trun
      bool      t38enable                                = 13 ; //  Enable or disable the use of T.38.     
      uint32    sipevent_subscribe_number_of_entries     = 14 ; //  {{numentries}}        }           
      uint32    contact_number_of_entries                = 15 ; //  {{numentries}}        }           
      message Contact { // VoiceService.{i}.SIP.Client.{i}.Contact.{i}.
        bool      enable                                   = 1  ; //  Enable or disable this {{object}}.     
        string    status                                   = 2  ; //  Indicates the status of this {{object}}.
        string    alias                                    = 3  ; //  {{datatype|expand}}        }        
        string    origin                                   = 4  ; //  Mechanism via which this {{object}} was 
        string    ipaddress                                = 5  ; //  This is the IP address where the {{objec
        uint32    port                                     = 6  ; //  This is the port where the {{object|#}} 
        string    contact_uri                              = 7  ; //  The current Contact URI of the {{object|
        string    expire_time                              = 8  ; //  Time when this registration will expire.
        uint32    ping_interval                            = 9  ; //  The interval in {{units}} between sendin
        string    user_agent                               = 10 ; //  This is the User-Agent field reported in
      }
      repeated Contact contact = 16; // VoiceService.{i}.SIP.Client.{i}.Contact.{i}.
      message EventSubscribe { // VoiceService.{i}.SIP.Client.{i}.EventSubscribe.{i}.
        bool      enable                                   = 1  ; //  Enables or disables this entry.        
        string    alias                                    = 2  ; //  {{datatype|expand}}        }        
        string    event                                    = 3  ; //  SIP event name corresponding to the valu
        string    auth_user_name                           = 4  ; //  Username used to authenticate the connec
        string    auth_password                            = 5  ; //  Password used to authenticate the connec
      }
      repeated EventSubscribe event_subscribe = 17; // VoiceService.{i}.SIP.Client.{i}.EventSubscribe.{i}.
    }
    repeated Client client = 5; // VoiceService.{i}.SIP.Client.{i}.
    message Network { // VoiceService.{i}.SIP.Network.{i}.
      bool      enable                                   = 1  ; //  Enable or disable this {{object}}. Start
      bool      quiescent_mode                           = 2  ; //  If {{true}}, when {{param|Enable}} is se
      string    status                                   = 3  ; //  Indicates the status of this network.  
      string    alias                                    = 4  ; //  {{datatype|expand}}        }        
      string    proxy_server                             = 5  ; //  Host name or IP address of the SIP proxy
      uint32    proxy_server_port                        = 6  ; //  Destination port to be used in connectin
      string    proxy_server_transport                   = 7  ; //  Transport protocol to be used in connect
      string    registrar_server                         = 8  ; //  Host name or IP address of the SIP regis
      uint32    registrar_server_port                    = 9  ; //  Destination port to be used in connectin
      string    registrar_server_transport               = 10 ; //  Transport protocol to be used in connect
      string    server_domain                            = 11 ; //  If non-empty this {{param}} is used by t
      string    chosen_domain                            = 12 ; //  Domain used by {{object|#.Client}} objec
      string    chosen_ipaddress                         = 13 ; //  IP address used to reach the {{param|Cho
      uint32    chosen_port                              = 14 ; //  Port used to reach the {{param|ChosenDom
      string    user_agent_domain                        = 15 ; //  CPE domain string. If {{empty}}, the CPE
      uint32    user_agent_port                          = 16 ; //  Port used for incoming call control sign
      string    user_agent_transport                     = 17 ; //  Transport protocol to be used for incomi
      string    outbound_proxy                           = 18 ; //  The Fully Qualified Domain Name (FQDN) o
      string    outbound_proxy_resolved_address          = 19 ; //  The IP address of the outbound proxy.  
      string    outbound_proxy_precedence                = 20 ; //  Indicates whether it is the static confi
      uint32    outbound_proxy_port                      = 21 ; //  Destination port to be used in connectin
      bool      stunenable                               = 22 ; //  Enable or disable use of STUN to allow o
      string    stunserver                               = 23 ; //  Domain name or IP address of the STUN se
      uint32    non_voice_bandwidth_reserved_upstream    = 24 ; //  For bandwidth-based admission control, a
      uint32    non_voice_bandwidth_reserved_downstream  = 25 ; //  For bandwidth-based admission control, a
      string    organization                             = 26 ; //  Text string to be used in the Organizati
      uint32    registration_period                      = 27 ; //  Duration, in {{units}}, after which the 
      string    realm                                    = 28 ; //  Realm for authentication with the specif
      uint32    timer_t1                                 = 29 ; //  Value of SIP timer T1, in {{units}}, as 
      uint32    timer_t2                                 = 30 ; //  Value of SIP timer T2, in {{units}}, as 
      uint32    timer_t4                                 = 31 ; //  Value of SIP timer T4, in {{units}}, as 
      uint32    timer_a                                  = 32 ; //  Value of SIP timer A, in {{units}}, as d
      uint32    timer_b                                  = 33 ; //  Value of SIP timer B, in {{units}}, as d
      uint32    timer_c                                  = 34 ; //  Value of SIP timer C, in {{units}}, as d
      uint32    timer_d                                  = 35 ; //  Value of SIP timer D, in {{units}}, as d
      uint32    timer_e                                  = 36 ; //  Value of SIP timer E, in {{units}}, as d
      uint32    timer_f                                  = 37 ; //  Value of SIP timer F, in {{units}}, as d
      uint32    timer_g                                  = 38 ; //  Value of SIP timer G, in {{units}}, as d
      uint32    timer_h                                  = 39 ; //  Value of SIP timer H, in {{units}}, as d
      uint32    timer_i                                  = 40 ; //  Value of SIP timer I, in {{units}}, as d
      uint32    timer_j                                  = 41 ; //  Value of SIP timer J, in {{units}}, as d
      uint32    timer_k                                  = 42 ; //  Value of SIP timer K, in {{units}}, as d
      uint32    invite_expires                           = 43 ; //  Invite request Expires header value, in 
      uint32    re_invite_expires                        = 44 ; //  Re-invite request Expires header value, 
      uint32    register_expires                         = 45 ; //  Register request Expires header value, i
      uint32    register_retry_interval                  = 46 ; //  Register retry interval, in {{units}}. 
      string    inbound_auth                             = 47 ; //  Applicable inbound authentication method
      string    inbound_auth_username                    = 48 ; //  If inbound authentication is used, the u
      string    inbound_auth_password                    = 49 ; //  If inbound authentication is used, the p
      bool      use_codec_priority_in_sdpresponse        = 50 ; //  When {{true}}, in the SDP included in an
      uint32    dscpmark                                 = 51 ; //  Diffserv code point to be used for outgo
      int32     vlanidmark                               = 52 ; //  VLAN ID (as defined in {{bibref|802.1Q-2
      int32     ethernet_priority_mark                   = 53 ; //  Ethernet priority code (as defined in {{
      string    conference_call_domain_uri               = 54 ; //  URI of the network conference bridge for
      uint32    timer_login_rejected                     = 55 ; //  In case of a 401 (Unauthorized) or a 407
      bool      no_login_retry                           = 56 ; //  If {{true}}, no retry after a 401 (Unaut
      uint32    timer_registration_failed                = 57 ; //  In case of no response to a REGISTER req
      uint32    timer_subscription_failed                = 58 ; //  When starting a MWI subscription, on res
      uint32    unanswered_registration_attempts         = 59 ; //  The number of registration timeouts when
      string    vo_ipprofile                             = 60 ; //  VoIP profile to use with this {{object}}
      string    codec_list                               = 61 ; //  {{list}} {{reference}}          The CPE
      uint32    max_sessions                             = 62 ; //  Limit on the number of simultaneous voic
      uint32    fqdnserver_number_of_entries             = 63 ; //  {{numentries}}        }        
      uint32    event_subscribe_number_of_entries        = 64 ; //  {{numentries}}        }        
      uint32    response_map_number_of_entries           = 65 ; //  {{numentries}}        }        
      message FQDNServer { // VoiceService.{i}.SIP.Network.{i}.FQDNServer.{i}.
        bool      enable                                   = 1  ; //  Enables or disables this FQDN server.  
        string    alias                                    = 2  ; //  {{datatype|expand}}        }        
        string    origin                                   = 3  ; //  Mechanism via which the FQDN server was 
        string    domain                                   = 4  ; //  The domain name of the target host.  Thi
        uint32    weight                                   = 5  ; //  A server selection mechanism. The weight
        uint32    priority                                 = 6  ; //  The priority of this target host.  A cli
        uint32    port                                     = 7  ; //  The port on this target host of this ser
        string    ipaddresses                              = 8  ; //  {{list|the IP Addresses that the FQDN re
      }
      repeated FQDNServer fqdnserver = 66; // VoiceService.{i}.SIP.Network.{i}.FQDNServer.{i}.
      message EventSubscribe { // VoiceService.{i}.SIP.Network.{i}.EventSubscribe.{i}.
        bool      enable                                   = 1  ; //  Enables or disables this entry.        
        string    alias                                    = 2  ; //  {{datatype|expand}}        }        
        string    event                                    = 3  ; //  SIP event name to appear in the EVENT he
        string    notifier                                 = 4  ; //  Host name or IP address of the event not
        uint32    notifier_port                            = 5  ; //  Destination port to be used in connectin
        string    notifier_transport                       = 6  ; //  Transport protocol to be used in connect
        uint32    expire_time                              = 7  ; //  Subscription refresh timer, in {{units}}
      }
      repeated EventSubscribe event_subscribe = 67; // VoiceService.{i}.SIP.Network.{i}.EventSubscribe.{i}.
      message ResponseMap { // VoiceService.{i}.SIP.Network.{i}.ResponseMap.{i}.
        string    alias                                    = 1  ; //  {{datatype|expand}}        }        
        uint32    sipresponse_number                       = 2  ; //  The SIP response code number.        .
        bool      enable                                   = 3  ; //  Enables or disables this entry.        
        string    text_message                             = 4  ; //  The message to be provided on the screen
        string    tone                                     = 5  ; //  The tone to be played to the user when t
      }
      repeated ResponseMap response_map = 68; // VoiceService.{i}.SIP.Network.{i}.ResponseMap.{i}.
    }
    repeated Network network = 6; // VoiceService.{i}.SIP.Network.{i}.
    message Proxy { // VoiceService.{i}.SIP.Proxy.{i}.
      bool      enable                                   = 1  ; //  Enable or disable the proxy.        .
      string    status                                   = 2  ; //  Indicates the status of this proxy.    
      string    alias                                    = 3  ; //  {{datatype|expand}}        }        
      string    origin                                   = 4  ; //  Mechanism via which the IP address was a
      string    proxy_ipaddress                          = 5  ; //  The IP address the proxy listens on.   
      uint32    proxy_port                               = 6  ; //  The port the proxy listens on.        
      string    contact_uri                              = 7  ; //  Built by the CPE using {{param|ProxyIPAd
      string    vo_ipprofile                             = 8  ; //  VoIP profile to use with this proxy.   
    }
    repeated Proxy proxy = 7; // VoiceService.{i}.SIP.Proxy.{i}.
    message Registrar { // VoiceService.{i}.SIP.Registrar.{i}.
      bool      enable                                   = 1  ; //  Enable or disable the registrar.       
      bool      quiescent_mode                           = 2  ; //  If {{true}}, when {{param|Enable}} is se
      string    status                                   = 3  ; //  Indicates the status of this registrar.
      string    alias                                    = 4  ; //  {{datatype|expand}}        }        
      string    origin                                   = 5  ; //  Mechanism via which the IP address was a
      string    registrar_ipaddress                      = 6  ; //  The IP address the registrar listens on 
      uint32    registrar_port                           = 7  ; //  The port the registrar listens on.     
      uint32    register_expires                         = 8  ; //  The minimum register expire time in {{un
      uint32    ping_interval                            = 9  ; //  The interval in {{units}} between sendin
      string    organization                             = 10 ; //  Text string to be used in the Organizati
      string    realm                                    = 11 ; //  Realm for authentication with the specif
      string    vo_ipprofile                             = 12 ; //  VoIP profile to use with this registrar.
      string    contact_uri                              = 13 ; //  Built by the CPE using {{param|Registrar
      uint32    account_number_of_entries                = 14 ; //  {{numentries}}        }           
      message Account { // VoiceService.{i}.SIP.Registrar.{i}.Account.{i}.
        string    enable                                   = 1  ; //  Enables or disables this account, or pla
        bool      quiescent_mode                           = 2  ; //  If {{true}}, when {{param|Enable}} is se
        string    status                                   = 3  ; //  Indicates the status of this account. Un
        string    alias                                    = 4  ; //  {{datatype|expand}}        }        
        string    origin                                   = 5  ; //  Mechanism via which the {{object}} was c
        string    call_status                              = 6  ; //  Indicates the call status for this accou
        string    auth_user_name                           = 7  ; //  Username used to authenticate the connec
        string    auth_password                            = 8  ; //  Password used to authenticate the connec
        string    registration_status                      = 9  ; //  The current registration status of the e
        string    uri                                      = 10 ; //  The URI (AoR) of the externally connecte
        string    domain                                   = 11 ; //  The domain name used when the SIP user a
        string    codec_list                               = 12 ; //  {{list}} {{reference}}          The CPE
        string    vo_ipprofile                             = 13 ; //  Voice profile to use with this {{object}
        uint32    contact_number_of_entries                = 14 ; //  {{numentries}}        }        ccou
        message Contact { // VoiceService.{i}.SIP.Registrar.{i}.Account.{i}.Contact.{i}.
          bool      enable                                   = 1  ; //  Enable or disable this entry.        .
          string    status                                   = 2  ; //  Indicates the status of this entry.    
          string    alias                                    = 3  ; //  {{datatype|expand}}        }        
          string    origin                                   = 4  ; //  Mechanism via which the {{object}} was a
          string    ipaddress                                = 5  ; //  IP Address of the externally connected S
          uint32    port                                     = 6  ; //  The port of the externally connected SIP
          string    contact_uri                              = 7  ; //  This is the SIP signaling address of the
          string    expire_time                              = 8  ; //  Time when this registration will expire.
          string    user_agent                               = 9  ; //  This parameter defines the User-Agent he
        }
        repeated Contact contact = 15; // VoiceService.{i}.SIP.Registrar.{i}.Account.{i}.Contact.{i}.
      }
      repeated Account account = 15; // VoiceService.{i}.SIP.Registrar.{i}.Account.{i}.
    }
    repeated Registrar registrar = 8; // VoiceService.{i}.SIP.Registrar.{i}.
  }
  SIP sip = 13; // VoiceService.{i}.SIP.
  message MGCP { // VoiceService.{i}.MGCP.
    uint32    client_number_of_entries                 = 1  ; //  {{numentries}}        }        ccou
    uint32    network_number_of_entries                = 2  ; //  {{numentries}}        }        ccou
    message Client { // VoiceService.{i}.MGCP.Client.{i}.
      bool      enable                                   = 1  ; //  Enable or disable this client.        
      bool      quiescent_mode                           = 2  ; //  If {{true}}, when {{param|Enable}} is se
      string    status                                   = 3  ; //  Indicates the status of this client.   
      string    alias                                    = 4  ; //  {{datatype|expand}}        }        
      string    register_mode                            = 5  ; //  Register mode.        .           
      uint32    local_port                               = 6  ; //  Port listening for incoming call control
      string    domain                                   = 7  ; //  CPE domain string.  If {{empty}}, the CP
      string    user                                     = 8  ; //  User string used in accessing the call a
      string    network                                  = 9  ; //  MGCP network with which this MGCP client
      uint32    max_sessions                             = 10 ; //  Limit on the number of simultaneous voic
    }
    repeated Client client = 3; // VoiceService.{i}.MGCP.Client.{i}.
    message Network { // VoiceService.{i}.MGCP.Network.{i}.
      bool      enable                                   = 1  ; //  Enable or disable the {{object}}. Starts
      bool      quiescent_mode                           = 2  ; //  If {{true}}, when {{param|Enable}} is se
      string    status                                   = 3  ; //  Indicates the status of this {{object}}.
      string    alias                                    = 4  ; //  {{datatype|expand}}        }        
      string    call_agent1                              = 5  ; //  Host name or IP address of the main MGCP
      uint32    call_agent_port1                         = 6  ; //  Destination port to be used in connectin
      string    call_agent2                              = 7  ; //  Host name or IP address of the backup MG
      uint32    call_agent_port2                         = 8  ; //  Destination port to be used in connectin
      uint32    retran_interval_timer                    = 9  ; //  Message retransfer interval, in {{units}
      uint32    max_retran_count                         = 10 ; //  Max number of message retransfers.     
      uint32    dscpmark                                 = 11 ; //  Diffserv code point to be used for outgo
      int32     vlanidmark                               = 12 ; //  VLAN ID (as defined in {{bibref|802.1Q-2
      int32     ethernet_priority_mark                   = 13 ; //  Ethernet priority code (as defined in {{
      bool      allow_piggyback_events                   = 14 ; //  Indicates whether or not piggyback event
      bool      send_rsipimmediately                     = 15 ; //  Indicates whether or not to send RSIP im
      bool      stunenable                               = 16 ; //  Enable or disable use of STUN to allow o
      string    stunserver                               = 17 ; //  Domain name or IP address of the STUN se
      uint32    non_voice_bandwidth_reserved_upstream    = 18 ; //  For bandwidth-based admission control, a
      uint32    non_voice_bandwidth_reserved_downstream  = 19 ; //  For bandwidth-based admission control, a
      uint32    max_sessions                             = 20 ; //  Limit on the number of simultaneous voic
      string    vo_ipprofile                             = 21 ; //  VoIP profile to use with this network. 
      string    codec_list                               = 22 ; //  {{list}} {{reference}}          The CPE
    }
    repeated Network network = 4; // VoiceService.{i}.MGCP.Network.{i}.
  }
  MGCP mgcp = 14; // VoiceService.{i}.MGCP.
  message H323 { // VoiceService.{i}.H323.
    uint32    client_number_of_entries                 = 1  ; //  {{numentries}}        }           
    uint32    network_number_of_entries                = 2  ; //  {{numentries}}        }           
    message Client { // VoiceService.{i}.H323.Client.{i}.
      bool      enable                                   = 1  ; //  Enable or disable this client.        
      bool      quiescent_mode                           = 2  ; //  If {{true}}, when {{param|Enable}} is se
      string    status                                   = 3  ; //  Indicates the status of this client.   
      string    alias                                    = 4  ; //  {{datatype|expand}}        }        
      bool      h235authentication                       = 5  ; //  Enables or disables usage of H.235 secur
      string    auth_password                            = 6  ; //  Password to be used when H.235 is enable
      string    senders_id                               = 7  ; //  In ITU-T based H.235 authentication, the
      string    network                                  = 8  ; //  H.323 network with which this H.323 clie
      string    h323id                                   = 9  ; //  The H.323 ID assigned to the client.   
      uint32    max_sessions                             = 10 ; //  Limit on the number of simultaneous voic
    }
    repeated Client client = 3; // VoiceService.{i}.H323.Client.{i}.
    message Network { // VoiceService.{i}.H323.Network.{i}.
      bool      enable                                   = 1  ; //  Enable or disable this {{object}}. Start
      bool      quiescent_mode                           = 2  ; //  If {{true}}, when {{param|Enable}} is se
      string    status                                   = 3  ; //  Indicates the status of this network.  
      string    alias                                    = 4  ; //  {{datatype|expand}}        }        
      string    gatekeeper                               = 5  ; //  Host name or IP address of H.323 Gatekee
      uint32    gatekeeper_port                          = 6  ; //  Destination port to be used in connectin
      string    gatekeeper_id                            = 7  ; //  Gatekeeper ID.        .           
      uint32    time_to_live                             = 8  ; //  Defines the TimeToLive specification in 
      uint32    dscpmark                                 = 9  ; //  Diffserv code point to be used for outgo
      int32     vlanidmark                               = 10 ; //  VLAN ID (as defined in {{bibref|802.1Q-2
      int32     ethernet_priority_mark                   = 11 ; //  Ethernet priority code (as defined in {{
      bool      stunenable                               = 12 ; //  Enable or disable use of STUN to allow o
      string    stunserver                               = 13 ; //  Domain name or IP address of the STUN se
      uint32    non_voice_bandwidth_reserved_upstream    = 14 ; //  For bandwidth-based admission control, a
      uint32    non_voice_bandwidth_reserved_downstream  = 15 ; //  For bandwidth-based admission control, a
      uint32    max_sessions                             = 16 ; //  Limit on the number of simultaneous voic
      string    vo_ipprofile                             = 17 ; //  VoIP profile to use with this network. 
      string    codec_list                               = 18 ; //  {{list}} {{reference}}          The CPE
    }
    repeated Network network = 4; // VoiceService.{i}.H323.Network.{i}.
  }
  H323 h323 = 15; // VoiceService.{i}.H323.
  message Trunk { // VoiceService.{i}.Trunk.{i}.
    bool      enable                                   = 1  ; //  Enables or disables this trunk.        
    bool      quiescent_mode                           = 2  ; //  If {{true}}, when {{param|Enable}} is se
    string    status                                   = 3  ; //  Indicates the status of this trunk.    
    string    alias                                    = 4  ; //  {{datatype|expand}}        }        
    string    origin                                   = 5  ; //  Mechanism via which the {{object}} was a
    string    name                                     = 6  ; //  Name of the trunk.        .        
    string    ddirange                                 = 7  ; //  {{list}} Each range consists of a ''Star
    bool      line_object_creation                     = 8  ; //  When {{true}}, a {{object|.CallControl.L
    uint32    max_channels                             = 9  ; //  Defines the maximum number of simultaneo
    int32     max_outbound_channel_count               = 10 ; //  Maximal number of simultaneous communica
    int32     max_inbound_channel_count                = 11 ; //  Maximal number of simultaneous communica
    string    codec_priority                           = 12 ; //  The {{param}} option controls which end 
    string    provider                                 = 13 ; //  SIP client or ISDN interface associated 
  }
  repeated Trunk trunk = 16; // VoiceService.{i}.Trunk.{i}.
  message CallControl { // VoiceService.{i}.CallControl.
    uint32    max_number_of_lines                      = 1  ; //  Maximum number of {{object|Line.{i}.}} i
    uint32    max_number_of_extensions                 = 2  ; //  Maximum number of {{object|Extension.{i}
    uint32    line_number_of_entries                   = 3  ; //  {{numentries}}        }          
    uint32    extension_number_of_entries              = 4  ; //  {{numentries}}        }          
    uint32    mailbox_number_of_entries                = 5  ; //  {{numentries}}        }          
    uint32    incoming_map_number_of_entries           = 6  ; //  {{numentries}}        }          
    uint32    outgoing_map_number_of_entries           = 7  ; //  {{numentries}}        }          
    uint32    numbering_plan_number_of_entries         = 8  ; //  {{numentries}}        }          
    uint32    group_number_of_entries                  = 9  ; //  {{numentries}}        }          
    message Line { // VoiceService.{i}.CallControl.Line.{i}.
      bool      enable                                   = 1  ; //  Enable or disable this line.        .
      bool      quiescent_mode                           = 2  ; //  If {{true}}, when {{param|Enable}} is se
      string    status                                   = 3  ; //  Indicates the status of this line.     
      string    alias                                    = 4  ; //  {{datatype|expand}}        }        
      string    call_status                              = 5  ; //  Indicates the call status for this line.
      string    origin                                   = 6  ; //  Mechanism via which the {{object}} insta
      string    directory_number                         = 7  ; //  Directory number associated with this li
      string    provider                                 = 8  ; //  Provider for the line. The value MUST be
      string    calling_features                         = 9  ; //  Set of calling features to apply to this
      message Stats { // VoiceService.{i}.CallControl.Line.{i}.Stats.
        message IncomingCalls { // VoiceService.{i}.CallControl.Line.{i}.Stats.IncomingCalls.
          uint32    calls_received                           = 1  ; //  Total number of received calls to the li
          uint32    calls_connected                          = 2  ; //  Total number of calls that successfully 
          uint32    calls_failed                             = 3  ; //  Total number of calls that failed to suc
          uint32    calls_dropped                            = 4  ; //  Total calls that were successfully conne
          uint32    total_call_time                          = 5  ; //  Cumulative call duration in {{units}}. 
        }
        IncomingCalls incoming_calls = 1; // VoiceService.{i}.CallControl.Line.{i}.Stats.IncomingCalls.
        message OutgoingCalls { // VoiceService.{i}.CallControl.Line.{i}.Stats.OutgoingCalls.
          uint32    calls_attempted                          = 1  ; //  Total number of outgoing calls attempted
          uint32    calls_connected                          = 2  ; //  Total number of calls that successfully 
          uint32    calls_failed                             = 3  ; //  Total number of calls that failed to suc
          uint32    calls_dropped                            = 4  ; //  Total calls that were successfully conne
          uint32    total_call_time                          = 5  ; //  Cumulative call duration in {{units}}. 
        }
        OutgoingCalls outgoing_calls = 2; // VoiceService.{i}.CallControl.Line.{i}.Stats.OutgoingCalls.
        message RTP { // VoiceService.{i}.CallControl.Line.{i}.Stats.RTP.
          uint32    packets_received                         = 1  ; //  Total number of RTP packets received.  
          uint32    packets_sent                             = 2  ; //  Total number of RTP packets sent.      
          uint32    packets_lost                             = 3  ; //  Total number of RTP packets that have be
          uint32    bytes_sent                               = 4  ; //  Total number of bytes sent.        . 
          uint32    bytes_received                           = 5  ; //  Total number of bytes received.        
        }
        RTP rtp = 3; // VoiceService.{i}.CallControl.Line.{i}.Stats.RTP.
        message DSP { // VoiceService.{i}.CallControl.Line.{i}.Stats.DSP.
          uint32    overruns                                 = 1  ; //  Total number of times the receive jitter
          uint32    underruns                                = 2  ; //  Total number of times the receive jitter
        }
        DSP dsp = 4; // VoiceService.{i}.CallControl.Line.{i}.Stats.DSP.
      }
      Stats stats = 10; // VoiceService.{i}.CallControl.Line.{i}.Stats.
    }
    repeated Line line = 10; // VoiceService.{i}.CallControl.Line.{i}.
    message Extension { // VoiceService.{i}.CallControl.Extension.{i}.
      bool      enable                                   = 1  ; //  Enable or disable this extension.      
      bool      quiescent_mode                           = 2  ; //  If {{true}}, when {{param|Enable}} is se
      string    status                                   = 3  ; //  Indicates the status of this extension.
      string    alias                                    = 4  ; //  {{datatype|expand}}        }        
      string    call_status                              = 5  ; //  Indicates the call status for this exten
      string    origin                                   = 6  ; //  Mechanism via which the {{object}} objec
      string    name                                     = 7  ; //  The name of this extension.          Th
      string    extension_number                         = 8  ; //  The number assigned to this extension fo
      string    provider                                 = 9  ; //  Provider for the extension. The value MU
      string    numbering_plan                           = 10 ; //  Numbering plan to be used for outgoing c
      string    calling_features                         = 11 ; //  Set of calling features to apply to this
      string    call_waiting_status                      = 12 ; //  Status of endpoint managed call waiting,
      string    conference_calling_status                = 13 ; //  Status of endpoint managed conference ca
      uint32    conference_calling_session_count         = 14 ; //  Number of active sessions on this extens
      string    voice_mail                               = 15 ; //  Voice mail to use when the {{object}} is
      message Stats { // VoiceService.{i}.CallControl.Extension.{i}.Stats.
        message IncomingCalls { // VoiceService.{i}.CallControl.Extension.{i}.Stats.IncomingCalls.
          uint32    calls_received                           = 1  ; //  Total number of received calls to the ex
          uint32    calls_connected                          = 2  ; //  Total number of calls that successfully 
          uint32    calls_failed                             = 3  ; //  Total number of calls that failed to suc
          uint32    calls_dropped                            = 4  ; //  Total calls that were successfully conne
          uint32    total_call_time                          = 5  ; //  Cumulative call duration in {{units}}. 
        }
        IncomingCalls incoming_calls = 1; // VoiceService.{i}.CallControl.Extension.{i}.Stats.IncomingCalls.
        message OutgoingCalls { // VoiceService.{i}.CallControl.Extension.{i}.Stats.OutgoingCalls.
          uint32    calls_attempted                          = 1  ; //  Total number of outgoing calls attempted
          uint32    calls_connected                          = 2  ; //  Total number of calls that successfully 
          uint32    calls_failed                             = 3  ; //  Total number of calls that failed to suc
          uint32    calls_dropped                            = 4  ; //  Total calls that were successfully conne
          uint32    total_call_time                          = 5  ; //  Cumulative call duration in {{units}}. 
        }
        OutgoingCalls outgoing_calls = 2; // VoiceService.{i}.CallControl.Extension.{i}.Stats.OutgoingCalls.
        message RTP { // VoiceService.{i}.CallControl.Extension.{i}.Stats.RTP.
          uint32    packets_received                         = 1  ; //  Total number of RTP packets received.  
          uint32    packets_sent                             = 2  ; //  Total number of RTP packets sent.      
          uint32    packets_lost                             = 3  ; //  Total number of RTP packets that have be
          uint32    bytes_sent                               = 4  ; //  Total number of bytes sent.        . 
          uint32    bytes_received                           = 5  ; //  Total number of bytes received.        
        }
        RTP rtp = 3; // VoiceService.{i}.CallControl.Extension.{i}.Stats.RTP.
        message DSP { // VoiceService.{i}.CallControl.Extension.{i}.Stats.DSP.
          uint32    overruns                                 = 1  ; //  Total number of times the receive jitter
          uint32    underruns                                = 2  ; //  Total number of times the receive jitter
        }
        DSP dsp = 4; // VoiceService.{i}.CallControl.Extension.{i}.Stats.DSP.
      }
      Stats stats = 16; // VoiceService.{i}.CallControl.Extension.{i}.Stats.
    }
    repeated Extension extension = 11; // VoiceService.{i}.CallControl.Extension.{i}.
    message Group { // VoiceService.{i}.CallControl.Group.{i}.
      string    alias                                    = 1  ; //  {{datatype|expand}}        }        
      string    extensions                               = 2  ; //  {{list}} If this parameter is null the g
      string    ring_type                                = 3  ; //  Defines the way of ringing for the exten
      uint32    ring_timeout                             = 4  ; //  The time (in {{units}}) to wait for exte
    }
    repeated Group group = 12; // VoiceService.{i}.CallControl.Group.{i}.
    message Mailbox { // VoiceService.{i}.CallControl.Mailbox.{i}.
      bool      enable                                   = 1  ; //  Enables or disables this entry.        
      string    alias                                    = 2  ; //  {{datatype|expand}}        }        
      uint32    max_msg                                  = 3  ; //  This limits the number of messages in a 
      uint32    max_message_time                         = 4  ; //  Defines the maximum amount of time in {{
      uint32    min_size                                 = 5  ; //  Minimal size in {{units}} of the voicema
      string    smtpserver_address                       = 6  ; //  SMTP server FQDN or IP Address used for 
      uint32    smtpserver_port                          = 7  ; //  SMTP server port for voicemail notificat
      string    smtpuser                                 = 8  ; //  SMTP user name.        .        .{i}
      string    smtppassword                             = 9  ; //  SMTP password.        .        .{i}
      string    smtpauthentication_type                  = 10 ; //  Type of authentication used to connect t
      string    smtpfrom                                 = 11 ; //  Sender's email address.        .     
    }
    repeated Mailbox mailbox = 13; // VoiceService.{i}.CallControl.Mailbox.{i}.
    message IncomingMap { // VoiceService.{i}.CallControl.IncomingMap.{i}.
      bool      enable                                   = 1  ; //  Enables or disables this entry.        
      string    alias                                    = 2  ; //  {{datatype|expand}}        }        
      string    line                                     = 3  ; //  {{object|#.Line}} used by the call.    
      string    extension                                = 4  ; //  {{object|#.Extension}} that rings on inc
      uint32    order                                    = 5  ; //  Indicates the order in which extensions 
      uint32    timeout                                  = 6  ; //  The time in {{units}} the extension will
    }
    repeated IncomingMap incoming_map = 14; // VoiceService.{i}.CallControl.IncomingMap.{i}.
    message OutgoingMap { // VoiceService.{i}.CallControl.OutgoingMap.{i}.
      bool      enable                                   = 1  ; //  Enables or disables this entry.        
      string    alias                                    = 2  ; //  {{datatype|expand}}        }        
      string    clipno_screening_number                  = 3  ; //  Public number to be presented outgoing c
      string    extension                                = 4  ; //  {{object|#.Extension}} which makes the o
      string    line                                     = 5  ; //  Identifies the {{object|#.Line}} to be u
      uint32    order                                    = 6  ; //  The order in which using the lines is at
    }
    repeated OutgoingMap outgoing_map = 15; // VoiceService.{i}.CallControl.OutgoingMap.{i}.
    message NumberingPlan { // VoiceService.{i}.CallControl.NumberingPlan.{i}.
      string    alias                                    = 1  ; //  {{datatype|expand}}        }        
      uint32    minimum_number_of_digits                 = 2  ; //  This is the minimum number of digits to 
      uint32    maximum_number_of_digits                 = 3  ; //  When this number of digits has been coll
      uint32    inter_digit_timer_std                    = 4  ; //  This timer is the maximum allowable time
      uint32    inter_digit_timer_open                   = 5  ; //  This timer is the maximum allowable time
      string    termination_digit                        = 6  ; //  Digit that can be used by the subscriber
      string    invalid_number_tone                      = 7  ; //  The tone that tells the user when the nu
      uint32    prefix_info_max_entries                  = 8  ; //  This is the maximum number of instances 
      uint32    prefix_info_number_of_entries            = 9  ; //  Indicates the number of instances of {{o
      message PrefixInfo { // VoiceService.{i}.CallControl.NumberingPlan.{i}.PrefixInfo.{i}.
        string    alias                                    = 1  ; //  {{datatype|expand}}        }        
        bool      enable                                   = 2  ; //  Enables or disables this entry.        
        string    prefix_range                             = 3  ; //  This is a string representation of a ran
        uint32    prefix_min_number_of_digits              = 4  ; //  This is the minimum number of allowable 
        uint32    prefix_max_number_of_digits              = 5  ; //  This is the maximum number of allowable 
        uint32    number_of_digits_to_remove               = 6  ; //  If this parameter has a non-zero value, 
        uint32    pos_of_digits_to_remove                  = 7  ; //  This parameter is used in conjunction wi
        string    dial_tone                                = 8  ; //  The tone to be played by the VoIP device
        string    facility_action                          = 9  ; //  This is a string representing a Facility
        string    facility_action_argument                 = 10 ; //  Optional argument associated with {{para
      }
      repeated PrefixInfo prefix_info = 10; // VoiceService.{i}.CallControl.NumberingPlan.{i}.PrefixInfo.{i}.
    }
    repeated NumberingPlan numbering_plan = 16; // VoiceService.{i}.CallControl.NumberingPlan.{i}.
    message CallingFeatures { // VoiceService.{i}.CallControl.CallingFeatures.
      uint32    set_number_of_entries                    = 1  ; //  {{numentries}}        }        ngPl
      message Set { // VoiceService.{i}.CallControl.CallingFeatures.Set.{i}.
        string    alias                                    = 1  ; //  {{datatype|expand}}        }        
        bool      caller_idenable                          = 2  ; //  Enable or disable the transmission of ca
        bool      caller_idname_enable                     = 3  ; //  Enable or disable the transmission of ca
        bool      call_waiting_enable                      = 4  ; //  Enables or disables call waiting in the 
        bool      call_forward_unconditional_enable        = 5  ; //  Enables or disables unconditional call f
        string    call_forward_unconditional_number        = 6  ; //  Directory number to which all incoming c
        bool      call_forward_on_busy_enable              = 7  ; //  Enables or disables call forwarding-on-b
        string    call_forward_on_busy_number              = 8  ; //  Directory number to which all incoming c
        uint32    call_forward_on_busy_ring_timeout        = 9  ; //  Delay in {{units}} before considering th
        bool      call_forward_on_no_answer_enable         = 10 ; //  Enables or disables call forwarding-on-n
        string    call_forward_on_no_answer_number         = 11 ; //  Directory number to which all incoming c
        uint32    call_forward_on_no_answer_ring_timeout   = 12 ; //  Delay in {{units}} before considering th
        bool      call_transfer_enable                     = 13 ; //  Enables or disables call transfer by the
        bool      mwienable                                = 14 ; //  Enables or disables Message Waiting Indi
        bool      vmwienable                               = 15 ; //  Enables or disables Visual Message Waiti
        uint32    line_messages_waiting                    = 16 ; //  Indicates the number of messages which a
        bool      anonymous_call_rejection_enable          = 17 ; //  Enable or disable Anonymous Call Block c
        bool      anonymous_call_enable                    = 18 ; //  Enable or disable Anonymous Call capabil
        bool      do_not_disturb_enable                    = 19 ; //  Enable or disable Do Not Disturb capabil
        bool      repeat_dial_enable                       = 20 ; //  Enable or disable Repeat Dial capability
        bool      voice_mail_enable                        = 21 ; //  Enable or disable Voice Mail capability 
        bool      call_pick_up_enable                      = 22 ; //  Enable or disable Call Interception capa
        bool      ccbsenable                               = 23 ; //  Enable or disable automatic recall on bu
        bool      iifcenable                               = 24 ; //  Enable or disable successive forwarding 
        bool      block_forward_enable                     = 25 ; //  Allow or block any internal forward to t
        bool      secret_forwarder_enable                  = 26 ; //  Enable or disable secret identity of thi
        bool      follow_me_enable                         = 27 ; //  Enable or disable FollowMe capability in
        uint32    cftnumber_of_entries                     = 28 ; //  {{numentries}}        }        f ca
        uint32    scfnumber_of_entries                     = 29 ; //  {{numentries}}        }        f ca
        uint32    screjnumber_of_entries                   = 30 ; //  {{numentries}}        }        f ca
        uint32    follow_me_number_of_entries              = 31 ; //  {{numentries}}        }        f ca
        message CFT { // VoiceService.{i}.CallControl.CallingFeatures.Set.{i}.CFT.{i}.
          bool      enable                                   = 1  ; //  Whether this schedule is currently enabl
          string    alias                                    = 2  ; //  {{datatype|expand}}        }        
          string    day                                      = 3  ; //  Day where the schedule active.        
          string    start_time                               = 4  ; //  Start time of the schedule in the form :
          string    end_time                                 = 5  ; //  End time of the schedule in the form : h
          string    forwarded_to_number                      = 6  ; //  Number to forward the call to.        
        }
        repeated CFT cft = 32; // VoiceService.{i}.CallControl.CallingFeatures.Set.{i}.CFT.{i}.
        message SCF { // VoiceService.{i}.CallControl.CallingFeatures.Set.{i}.SCF.{i}.
          bool      enable                                   = 1  ; //  Enables or disables this Selective Call 
          string    alias                                    = 2  ; //  {{datatype|expand}}        }        
          string    calling_number                           = 3  ; //  Calling number concerned by the forward.
          string    forwarded_to_number                      = 4  ; //  Number to forward the call to.        
        }
        repeated SCF scf = 33; // VoiceService.{i}.CallControl.CallingFeatures.Set.{i}.SCF.{i}.
        message SCREJ { // VoiceService.{i}.CallControl.CallingFeatures.Set.{i}.SCREJ.{i}.
          bool      enable                                   = 1  ; //  Enables or disables this Selective Call 
          string    alias                                    = 2  ; //  {{datatype|expand}}        }        
          string    calling_number                           = 3  ; //  Calling number concerned by the reject.
        }
        repeated SCREJ screj = 34; // VoiceService.{i}.CallControl.CallingFeatures.Set.{i}.SCREJ.{i}.
        message FollowMe { // VoiceService.{i}.CallControl.CallingFeatures.Set.{i}.FollowMe.{i}.
          bool      enable                                   = 1  ; //  Enables or disables this FollowMe sequen
          string    alias                                    = 2  ; //  {{datatype|expand}}        }        
          uint32    delay                                    = 3  ; //  Delay in {{units}} before next FollowMe 
          string    number                                   = 4  ; //  Directory number to which all incoming c
          uint32    order                                    = 5  ; //  For a given {{param|Number}}, defines th
        }
        repeated FollowMe follow_me = 35; // VoiceService.{i}.CallControl.CallingFeatures.Set.{i}.FollowMe.{i}.
        message Voice2Mail { // VoiceService.{i}.CallControl.CallingFeatures.Set.{i}.Voice2Mail.
          bool      enable                                   = 1  ; //  Enable or disable voice mail notificatio
          uint32    max_message_length                       = 2  ; //  Defines the maximum amount of time in {{
          bool      attach                                   = 3  ; //  Indicates if the message is sent as an a
          bool      keep_local                               = 4  ; //  Whether the voice to mail message is kep
          string    email_address                            = 5  ; //  E-mail for voice to mail notification me
        }
        Voice2Mail voice2mail = 36; // VoiceService.{i}.CallControl.CallingFeatures.Set.{i}.Voice2Mail.
      }
      repeated Set set = 2; // VoiceService.{i}.CallControl.CallingFeatures.Set.{i}.
    }
    CallingFeatures calling_features = 17; // VoiceService.{i}.CallControl.CallingFeatures.
  }
  CallControl call_control = 17; // VoiceService.{i}.CallControl.
  message Interwork { // VoiceService.{i}.Interwork.{i}.
    bool      enable                                   = 1  ; //  Enable or disable this {{object}} instan
    bool      quiescent_mode                           = 2  ; //  If {{true}}, when {{param|Enable}} is se
    string    status                                   = 3  ; //  Indicates the status of this {{object}} 
    string    alias                                    = 4  ; //  {{datatype|expand}}        }        
    string    operational_status                       = 5  ; //  Indicates the operational status of the 
    string    operational_status_reason                = 6  ; //  Human-readable string identifying the re
    string    network_connection_mode                  = 7  ; //  This parameter indicates whether or not 
    string    user_connection_mode                     = 8  ; //  This parameter indicates whether or not 
    bool      e164mode                                 = 9  ; //  This attribute indicates whether or not 
    string    network_authentication_challenge_mode    = 10 ; //  This parameter indicates how the CPE tre
    string    network_ipaddress                        = 11 ; //  The network IP Address of the CPE. The C
    string    interworking_rule_set_uri                = 12 ; //  URI of the Interworking Rule Set for thi
    uint32    interworking_rule_set_interval           = 13 ; //  The duration in {{units}} of the interva
    string    interworking_rule_set_time               = 14 ; //  An absolute time reference in UTC to det
    string    firewall_rule_set_uri                    = 15 ; //  URI of the Firewall Rule Set for this {{
    uint32    firewall_rule_set_interval               = 16 ; //  The duration in {{units}} of the interva
    string    firewall_rule_set_time                   = 17 ; //  An absolute time reference in UTC to det
    string    interwork_name                           = 18 ; //  Human-readable string identifying the na
    string    proxy_server                             = 19 ; //  Reference to the {{object|.SIP.Proxy}} a
    string    networks                                 = 20 ; //  {{list}} {{reference}}          List of
    string    e164client                               = 21 ; //  This parameter is MUST contain the {{obj
    uint32    user_interface_number_of_entries         = 22 ; //  {{numentries}}        }         
    uint32    map_number_of_entries                    = 23 ; //  {{numentries}}        }         
    message UserInterface { // VoiceService.{i}.Interwork.{i}.UserInterface.{i}.
      bool      enable                                   = 1  ; //  Enable ({{true}}) or disable ({{false}})
      string    alias                                    = 2  ; //  {{datatype|expand}}        }        
      string    registrar                                = 3  ; //  The {{object|.SIP.Registrar}} to use wit
      string    network                                  = 4  ; //  If not null this provides the appropriat
    }
    repeated UserInterface user_interface = 24; // VoiceService.{i}.Interwork.{i}.UserInterface.{i}.
    message Map { // VoiceService.{i}.Interwork.{i}.Map.{i}.
      bool      enable                                   = 1  ; //  Enable ({{true}}) or disable ({{false}})
      string    status                                   = 2  ; //  Indicates the status of this connection 
      string    alias                                    = 3  ; //  {{datatype|expand}}        }        
      string    status_description                       = 4  ; //  Human-readable string identifying the re
      string    last_time                                = 5  ; //  The last time the Status was updated.  
      string    origin                                   = 6  ; //  Mechanism via which this connection mapp
      string    network_connection                       = 7  ; //  {{reference}}. This parameter can only b
      string    user_connection                          = 8  ; //  {{reference}}. This parameter can only b
      string    digit_map                                = 9  ; //  Digit map controlling digit collection o
      bool      digit_map_enable                         = 10 ; //  Enables use of {{param|DigitMap}}.     
      uint32    priority                                 = 11 ; //  Indicates the priority for this combinat
    }
    repeated Map map = 25; // VoiceService.{i}.Interwork.{i}.Map.{i}.
  }
  repeated Interwork interwork = 18; // VoiceService.{i}.Interwork.{i}.
  message CallLog { // VoiceService.{i}.CallLog.{i}.
    string    alias                                    = 1  ; //  {{datatype|expand}}        }        
    string    calling_party_number                     = 2  ; //  Number of the party originating the call
    string    called_party_number                      = 3  ; //  Number of destination party of the call.
    string    source                                   = 4  ; //  Party originating the call.          {{
    string    destination                              = 5  ; //  Destination party of the call.         
    string    remote_party                             = 6  ; //  The phone number of the remote party aft
    string    used_line                                = 7  ; //  The {{object|.CallControl.Line}} used to
    string    used_extensions                          = 8  ; //  {{list}} {{reference}}          For an 
    string    direction                                = 9  ; //  Direction of the call.        .      
    string    start                                    = 10 ; //  Start of the call.        .         
    uint32    duration                                 = 11 ; //  Length of the call in {{units}}.       
    string    call_termination_cause                   = 12 ; //  The call termination cause.          Th
    uint32    session_number_of_entries                = 13 ; //  Indicates the number of entries in {{obj
    uint32    signaling_performance_number_of_entries  = 14 ; //  {{numentries}}        }           
    message SignalingPerformance { // VoiceService.{i}.CallLog.{i}.SignalingPerformance.{i}.
      string    protocol                                 = 1  ; //  Protocol for which this signaling perfor
      uint32    call_setup_delay                         = 2  ; //  The time between the instant a system re
      int32     outgoing_media_establish_delay           = 3  ; //  The time in {{units}} between :        
      int32     incoming_media_establish_delay           = 4  ; //  The time in {{units}} between :        
    }
    repeated SignalingPerformance signaling_performance = 15; // VoiceService.{i}.CallLog.{i}.SignalingPerformance.{i}.
    message Session { // VoiceService.{i}.CallLog.{i}.Session.{i}.
      string    stream_type                              = 1  ; //  The type of media stream used in this se
      string    start                                    = 2  ; //  The time that the session started, in UT
      uint32    duration                                 = 3  ; //  Length of the session in {{units}}.    
      string    session_id                               = 4  ; //  Session identifier.        .        
      message Source { // VoiceService.{i}.CallLog.{i}.Session.{i}.Source.
        message RTP { // VoiceService.{i}.CallLog.{i}.Session.{i}.Source.RTP.
          string    far_end_ipaddress                        = 1  ; //  The IP address of far end VoIP device. 
          uint32    far_end_udpport                          = 2  ; //  The UDP port used for current session in
          uint32    local_udpport                            = 3  ; //  The local UDP port used for current sess
          int32     min_jitter                               = 4  ; //  The minimum relative transit time in {{u
          int32     max_jitter                               = 5  ; //  The maximum relative transit time in {{u
          int32     mean_jitter                              = 6  ; //  The mean relative transit time in {{unit
          int32     packet_delay_variation                   = 7  ; //  1-Point Packet Delay Variation according
          int32     buffer_delay                             = 8  ; //  Average delay in {{units}} added by buff
          string    burst_count                              = 9  ; //  The number of bursts (as defined in {{bi
          string    packets_received                         = 10 ; //  Total number of RTP packets received for
          string    packets_sent                             = 11 ; //  Total number of RTP packets sent for thi
          string    packets_lost                             = 12 ; //  Total number of RTP packets that have be
          string    packets_discarded                        = 13 ; //  Total number of RTP packets that have be
          string    bytes_received                           = 14 ; //  Total number of bytes received for this 
          string    bytes_sent                               = 15 ; //  Total number of bytes sent for this sess
          uint32    receive_packet_loss_rate                 = 16 ; //  Current receive packet loss rate in perc
          uint32    far_end_packet_loss_rate                 = 17 ; //  Current far end receive packet lost rate
          int32     receive_interarrival_jitter              = 18 ; //  Current receive interarrival jitter in t
          int32     far_end_interarrival_jitter              = 19 ; //  Current Interarrival jitter in timestamp
          int32     average_receive_interarrival_jitter      = 20 ; //  Average receive interarrival jitter in t
          int32     average_far_end_interarrival_jitter      = 21 ; //  Average far-end interarrival jitter in t
          int32     round_trip_delay                         = 22 ; //  Current round trip delay in {{units}} ca
          int32     average_round_trip_delay                 = 23 ; //  Average round trip delay in {{units}} si
          uint32    sampling_frequency                       = 24 ; //  Sample frequency in {{units}} used by th
        }
        RTP rtp = 1; // VoiceService.{i}.CallLog.{i}.Session.{i}.Source.RTP.
        message DSP { // VoiceService.{i}.CallLog.{i}.Session.{i}.Source.DSP.
          message ReceiveCodec { // VoiceService.{i}.CallLog.{i}.Session.{i}.Source.DSP.ReceiveCodec.
            string    codec                                    = 1  ; //  The codec in use for the incoming voice 
            bool      silence_suppression                      = 2  ; //  Whether or not silence suppression is in
            uint32    overruns                                 = 3  ; //  Total number of times the receive jitter
            uint32    underruns                                = 4  ; //  Total number of times the receive jitter
          }
          ReceiveCodec receive_codec = 1; // VoiceService.{i}.CallLog.{i}.Session.{i}.Source.DSP.ReceiveCodec.
          message TransmitCodec { // VoiceService.{i}.CallLog.{i}.Session.{i}.Source.DSP.TransmitCodec.
            string    codec                                    = 1  ; //  The codec in use for the outgoing voice 
            bool      silence_suppression                      = 2  ; //  Whether or not silence suppression is in
            uint32    packetization_period                     = 3  ; //  Current outgoing packetization period in
            uint32    overruns                                 = 4  ; //  Total number of times the transmit jitte
            uint32    underruns                                = 5  ; //  Total number of times the transmit jitte
          }
          TransmitCodec transmit_codec = 2; // VoiceService.{i}.CallLog.{i}.Session.{i}.Source.DSP.TransmitCodec.
        }
        DSP dsp = 2; // VoiceService.{i}.CallLog.{i}.Session.{i}.Source.DSP.
        message VoiceQuality { // VoiceService.{i}.CallLog.{i}.Session.{i}.Source.VoiceQuality.
          string    vo_ipquality_indicator                   = 1  ; //  {{list|representing the VoIP quality cal
          string    worst_vo_ipquality_indicators_values     = 2  ; //  {{list|representing the worst VoIP quali
          string    worst_vo_ipquality_indicator_timestamps  = 3  ; //  {{list}} Each value represents the times
        }
        VoiceQuality voice_quality = 3; // VoiceService.{i}.CallLog.{i}.Session.{i}.Source.VoiceQuality.
      }
      Source source = 5; // VoiceService.{i}.CallLog.{i}.Session.{i}.Source.
      message Destination { // VoiceService.{i}.CallLog.{i}.Session.{i}.Destination.
        message RTP { // VoiceService.{i}.CallLog.{i}.Session.{i}.Destination.RTP.
          string    far_end_ipaddress                        = 1  ; //  The IP address of far end VoIP device. 
          uint32    far_end_udpport                          = 2  ; //  The UDP port used for current session in
          uint32    local_udpport                            = 3  ; //  The local UDP port used for current sess
          int32     min_jitter                               = 4  ; //  The minimum relative transit time in {{u
          int32     max_jitter                               = 5  ; //  The maximum relative transit time in {{u
          int32     mean_jitter                              = 6  ; //  The mean relative transit time in {{unit
          int32     packet_delay_variation                   = 7  ; //  1-Point Packet Delay Variation according
          int32     buffer_delay                             = 8  ; //  Average delay in {{units}} added by buff
          string    burst_count                              = 9  ; //  The number of bursts (as defined in {{bi
          string    packets_received                         = 10 ; //  Total number of RTP packets received for
          string    packets_sent                             = 11 ; //  Total number of RTP packets sent for thi
          string    packets_lost                             = 12 ; //  Total number of RTP packets that have be
          string    packets_discarded                        = 13 ; //  Total number of RTP packets that have be
          string    bytes_received                           = 14 ; //  Total number of bytes received for this 
          string    bytes_sent                               = 15 ; //  Total number of bytes sent for this sess
          uint32    receive_packet_loss_rate                 = 16 ; //  Current receive packet loss rate in perc
          uint32    far_end_packet_loss_rate                 = 17 ; //  Current far end receive packet lost rate
          int32     receive_interarrival_jitter              = 18 ; //  Current receive interarrival jitter in t
          int32     far_end_interarrival_jitter              = 19 ; //  Current Interarrival jitter in timestamp
          int32     average_receive_interarrival_jitter      = 20 ; //  Average receive interarrival jitter in t
          int32     average_far_end_interarrival_jitter      = 21 ; //  Average far-end interarrival jitter in t
          int32     round_trip_delay                         = 22 ; //  Current round trip delay in {{units}} ca
          int32     average_round_trip_delay                 = 23 ; //  Average round trip delay in {{units}} si
          uint32    sampling_frequency                       = 24 ; //  Sample frequency in {{units}} used by th
        }
        RTP rtp = 1; // VoiceService.{i}.CallLog.{i}.Session.{i}.Destination.RTP.
        message DSP { // VoiceService.{i}.CallLog.{i}.Session.{i}.Destination.DSP.
          message ReceiveCodec { // VoiceService.{i}.CallLog.{i}.Session.{i}.Destination.DSP.ReceiveCodec.
            string    codec                                    = 1  ; //  The codec in use for the incoming voice 
            bool      silence_suppression                      = 2  ; //  Whether or not silence suppression is in
            uint32    overruns                                 = 3  ; //  Total number of times the receive jitter
            uint32    underruns                                = 4  ; //  Total number of times the receive jitter
          }
          ReceiveCodec receive_codec = 1; // VoiceService.{i}.CallLog.{i}.Session.{i}.Destination.DSP.ReceiveCodec.
          message TransmitCodec { // VoiceService.{i}.CallLog.{i}.Session.{i}.Destination.DSP.TransmitCodec.
            string    codec                                    = 1  ; //  The codec in use for the outgoing voice 
            bool      silence_suppression                      = 2  ; //  Whether or not silence suppression is in
            uint32    packetization_period                     = 3  ; //  Current outgoing packetization period in
            uint32    overruns                                 = 4  ; //  Total number of times the transmit jitte
            uint32    underruns                                = 5  ; //  Total number of times the transmit jitte
          }
          TransmitCodec transmit_codec = 2; // VoiceService.{i}.CallLog.{i}.Session.{i}.Destination.DSP.TransmitCodec.
        }
        DSP dsp = 2; // VoiceService.{i}.CallLog.{i}.Session.{i}.Destination.DSP.
        message VoiceQuality { // VoiceService.{i}.CallLog.{i}.Session.{i}.Destination.VoiceQuality.
          string    vo_ipquality_indicator                   = 1  ; //  {{list|representing the VoIP quality cal
          string    worst_vo_ipquality_indicators_values     = 2  ; //  {{list|representing the worst VoIP quali
          string    worst_vo_ipquality_indicator_timestamps  = 3  ; //  {{list}} Each value represents the times
        }
        VoiceQuality voice_quality = 3; // VoiceService.{i}.CallLog.{i}.Session.{i}.Destination.VoiceQuality.
      }
      Destination destination = 6; // VoiceService.{i}.CallLog.{i}.Session.{i}.Destination.
    }
    repeated Session session = 16; // VoiceService.{i}.CallLog.{i}.Session.{i}.
  }
  repeated CallLog call_log = 19; // VoiceService.{i}.CallLog.{i}.
  message VoIPProfile { // VoiceService.{i}.VoIPProfile.{i}.
    bool      enable                                   = 1  ; //  Enables or disables this VoIP profile. I
    bool      quiescent_mode                           = 2  ; //  If {{true}}, when {{param|Enable}} is se
    string    name                                     = 3  ; //  Human-readable string to identify the pr
    string    alias                                    = 4  ; //  {{datatype|expand}}        }        
    string    dtmfmethod                               = 5  ; //  {{list}}  Method by which DTMF digits MU
    string    dtmfmethod_g711                          = 6  ; //  Method by which DTMF digits MUST be pass
    string    qimodel_used                             = 7  ; //  Quality model which the CPE shall use to
    uint32    qicalculation_interval                   = 8  ; //  The interval between successive calculat
    uint32    number_of_worst_qivalues                 = 9  ; //  The maximum number of worst quality indi
    message RTP { // VoiceService.{i}.VoIPProfile.{i}.RTP.
      uint32    local_port_min                           = 1  ; //  Base of port range to be used for incomi
      uint32    local_port_max                           = 2  ; //  Top of port range to be used for incomin
      uint32    gmin                                     = 3  ; //  Minimum number of consecutive received p
      uint32    dscpmark                                 = 4  ; //  Diffserv code point to be used for outgo
      int32     vlanidmark                               = 5  ; //  VLAN ID (as defined in {{bibref|802.1Q-2
      int32     ethernet_priority_mark                   = 6  ; //  Ethernet priority code (as defined in {{
      uint32    telephone_event_payload_type             = 7  ; //  Payload type to be used for RTP telephon
      string    jitter_buffer_type                       = 8  ; //  The indicates if the jitte buffer is sta
      uint32    jitter_buffer_max_size                   = 9  ; //  Maximal (or static) jitter buffer size i
      uint32    jitter_buffer_min_size                   = 10 ; //  Minimal jitter buffer size in {{units}},
      uint32    jitter_buffer_actual_size                = 11 ; //  Actual jitter buffer size in {{units}}, 
      message RTCP { // VoiceService.{i}.VoIPProfile.{i}.RTP.RTCP.
        bool      enable                                   = 1  ; //  Enable or disable RTCP.        .     
        uint32    tx_repeat_interval                       = 2  ; //  Transmission repeat interval, in {{units
        string    local_cname                              = 3  ; //  Local Cname (canonical name).        .
      }
      RTCP rtcp = 12; // VoiceService.{i}.VoIPProfile.{i}.RTP.RTCP.
      message SRTP { // VoiceService.{i}.VoIPProfile.{i}.RTP.SRTP.
        bool      enable                                   = 1  ; //  Enable or disable the use of SRTP.     
        string    keying_methods                           = 2  ; //  {{list|available keying methods}} {{enum
        string    encryption_key_sizes                     = 3  ; //  {{list|available encryption key sizes}}
      }
      SRTP srtp = 13; // VoiceService.{i}.VoIPProfile.{i}.RTP.SRTP.
      message Redundancy { // VoiceService.{i}.VoIPProfile.{i}.RTP.Redundancy.
        bool      enable                                   = 1  ; //  Enable or disable the use of RTP payload
        uint32    payload_type                             = 2  ; //  The Payload Type of RTP packet as define
        uint32    block_payload_type                       = 3  ; //  Block Payload Type of redundancy packet.
        int32     fax_and_modem_redundancy                 = 4  ; //  Specifies the redundancy number for fax 
        int32     modem_redundancy                         = 5  ; //  Specifies the redundancy number for mode
        int32     dtmfredundancy                           = 6  ; //  Specifies the redundancy number for DTMF
        int32     voice_redundancy                         = 7  ; //  Specifies the redundancy number for gene
        uint32    max_sessions_using_redundancy            = 8  ; //  The maximum number of sessions using {{b
      }
      Redundancy redundancy = 14; // VoiceService.{i}.VoIPProfile.{i}.RTP.Redundancy.
    }
    RTP rtp = 10; // VoiceService.{i}.VoIPProfile.{i}.RTP.
    message FaxT38 { // VoiceService.{i}.VoIPProfile.{i}.FaxT38.
      uint32    max_bit_rate                             = 1  ; //  Maximum data rate in {{units}} for fax a
      uint32    high_speed_redundancy                    = 2  ; //  Specifies the packet-level redundancy fo
      uint32    low_speed_redundancy                     = 3  ; //  Specifies the packet-level redundancy fo
      string    tcfmethod                                = 4  ; //  The method with which data is handled ov
    }
    FaxT38 fax_t38 = 11; // VoiceService.{i}.VoIPProfile.{i}.FaxT38.
  }
  repeated VoIPProfile vo_ipprofile = 20; // VoiceService.{i}.VoIPProfile.{i}.
  message CodecProfile { // VoiceService.{i}.CodecProfile.{i}.
    bool      enable                                   = 1  ; //  Enable or disable the use of this combin
    string    alias                                    = 2  ; //  {{datatype|expand}}        }        
    string    codec                                    = 3  ; //  {{reference}}        }           
    string    packetization_period                     = 4  ; //  {{list}} Each item is a supported packet
    bool      silence_suppression                      = 5  ; //  Indicates support for silence suppressio
  }
  repeated CodecProfile codec_profile = 21; // VoiceService.{i}.CodecProfile.{i}.
  message Tone { // VoiceService.{i}.Tone.
    uint32    description_number_of_entries            = 1  ; //  {{numentries}}        }        T38.
    uint32    pattern_number_of_entries                = 2  ; //  {{numentries}}        }        T38.
    uint32    event_profile_number_of_entries          = 3  ; //  {{numentries}}        }        T38.
    string    defaut_event_profile                     = 4  ; //  Reference to the default tone event prof
    message Description { // VoiceService.{i}.Tone.Description.{i}.
      bool      tone_enable                              = 1  ; //  Enables or disables the tone entry.  If 
      string    alias                                    = 2  ; //  {{datatype|expand}}        }        
      string    tone_name                                = 3  ; //  Name of the tone.        .        
      string    tone_pattern                             = 4  ; //  This is the {{object|#.Pattern.{i}.}} ob
      string    tone_file                                = 5  ; //  The file name of a tone file locally pre
      uint32    tone_repetitions                         = 6  ; //  The default number of times the data in 
      string    tone_text                                = 7  ; //  The text to be displayed by on the scree
    }
    repeated Description description = 5; // VoiceService.{i}.Tone.Description.{i}.
    message Pattern { // VoiceService.{i}.Tone.Pattern.{i}.
      bool      enable                                   = 1  ; //  Enables or disables this entry.        
      string    alias                                    = 2  ; //  {{datatype|expand}}        }        
      bool      tone_on                                  = 3  ; //  Whether or not a tone is on during this 
      uint32    frequency1                               = 4  ; //  First tone frequency in {{units}}.     
      int32     power1                                   = 5  ; //  First tone power level in units of 0.1 {
      uint32    frequency2                               = 6  ; //  Second tone frequency in {{units}}.    
      int32     power2                                   = 7  ; //  Second tone power level in units of 0.1 
      uint32    frequency3                               = 8  ; //  Third tone frequency in {{units}}.     
      int32     power3                                   = 9  ; //  Third tone power level in units of 0.1 {
      uint32    frequency4                               = 10 ; //  Fourth tone frequency in {{units}}.    
      int32     power4                                   = 11 ; //  Fourth tone power level in units of 0.1 
      uint32    modulation_frequency                     = 12 ; //  Modulation frequency in {{units}}.     
      int32     modulation_power                         = 13 ; //  Modulation power level in units of 0.1 {
      uint32    duration                                 = 14 ; //  The duration of this phase of the tone p
      string    next_pattern                             = 15 ; //  The {{object}} for the next phase of the
    }
    repeated Pattern pattern = 6; // VoiceService.{i}.Tone.Pattern.{i}.
    message EventProfile { // VoiceService.{i}.Tone.EventProfile.{i}.
      string    alias                                    = 1  ; //  {{datatype|expand}}        }        
      uint32    event_number_of_entries                  = 2  ; //  {{numentries}}        }        i}.
      message Event { // VoiceService.{i}.Tone.EventProfile.{i}.Event.{i}.
        string    alias                                    = 1  ; //  {{datatype|expand}}        }        
        string    function                                 = 2  ; //  The event for which the tone is to apply
        string    tone                                     = 3  ; //  The description for the tone to be assoc
      }
      repeated Event event = 3; // VoiceService.{i}.Tone.EventProfile.{i}.Event.{i}.
    }
    repeated EventProfile event_profile = 7; // VoiceService.{i}.Tone.EventProfile.{i}.
  }
  Tone tone = 22; // VoiceService.{i}.Tone.
  message Terminal { // VoiceService.{i}.Terminal.{i}.
    bool      enable                                   = 1  ; //  Enables or disables this terminal.     
    bool      quiescent_mode                           = 2  ; //  If {{true}}, when {{param|Enable}} is se
    string    status                                   = 3  ; //  Indicates the status of this terminal. 
    string    alias                                    = 4  ; //  {{datatype|expand}}        }        
    string    tone_event_profile                       = 5  ; //  Reference to the {{object|.Tone.EventPro
    uint32    audio_number_of_entries                  = 6  ; //  {{numentries}}        }           
    message Audio { // VoiceService.{i}.Terminal.{i}.Audio.{i}.
      string    alias                                    = 1  ; //  {{datatype|expand}}        }        
      string    name                                     = 2  ; //  The internal name of this audio.       
      message VoiceProcessing { // VoiceService.{i}.Terminal.{i}.Audio.{i}.VoiceProcessing.
        int32     transmit_gain                            = 1  ; //  Gain in {{units}} to apply to the transm
        int32     receive_gain                             = 2  ; //  Gain in {{units}} to apply to the receiv
        bool      echo_cancellation_enable                 = 3  ; //  Enable or disable echo cancellation for 
        bool      echo_cancellation_in_use                 = 4  ; //  Indication of whether or not echo cancel
        uint32    echo_cancellation_tail                   = 5  ; //  Tail length in {{units}} of the echo can
      }
      VoiceProcessing voice_processing = 3; // VoiceService.{i}.Terminal.{i}.Audio.{i}.VoiceProcessing.
    }
    repeated Audio audio = 7; // VoiceService.{i}.Terminal.{i}.Audio.{i}.
    message ButtonMap { // VoiceService.{i}.Terminal.{i}.ButtonMap.
      uint32    button_number_of_entries                 = 1  ; //  {{numentries}}        }        {i}.
      message Button { // VoiceService.{i}.Terminal.{i}.ButtonMap.Button.{i}.
        string    alias                                    = 1  ; //  {{datatype|expand}}        }        
        string    button_name                              = 2  ; //  Name of the button.        .        
        string    facility_action                          = 3  ; //  The value MUST be a member of the list r
        string    facility_action_argument                 = 4  ; //  Optional argument associated with the sp
        string    quick_dial_number                        = 5  ; //  This is a string representing a quick di
        string    button_message                           = 6  ; //  This string represents the message to be
        bool      user_access                              = 7  ; //  This parameter indicates whether the use
      }
      repeated Button button = 2; // VoiceService.{i}.Terminal.{i}.ButtonMap.Button.{i}.
    }
    ButtonMap button_map = 8; // VoiceService.{i}.Terminal.{i}.ButtonMap.
    message Ringer { // VoiceService.{i}.Terminal.{i}.Ringer.
      uint32    description_number_of_entries            = 1  ; //  {{numentries}}        }        Map.
      uint32    pattern_number_of_entries                = 2  ; //  {{numentries}}        }        .p.
      message Description { // VoiceService.{i}.Terminal.{i}.Ringer.Description.{i}.
        bool      ring_enable                              = 1  ; //  Enables or disables the ring description
        string    alias                                    = 2  ; //  {{datatype|expand}}        }        
        string    ring_name                                = 3  ; //  Name of the ring.        .         
        string    ring_pattern                             = 4  ; //  This is the {{object|#.Pattern.{i}.}} ob
        string    ring_file                                = 5  ; //  The file name of a ring file file locall
      }
      repeated Description description = 3; // VoiceService.{i}.Terminal.{i}.Ringer.Description.{i}.
      message Pattern { // VoiceService.{i}.Terminal.{i}.Ringer.Pattern.{i}.
        bool      enable                                   = 1  ; //  Enables or disables this entry.        
        string    alias                                    = 2  ; //  {{datatype|expand}}        }        
        bool      ringer_on                                = 3  ; //  Whether or not a ringer is on during thi
        uint32    duration                                 = 4  ; //  The duration of this phase of the ring p
        string    next_pattern                             = 5  ; //  The {{object}} for the next phase of the
      }
      repeated Pattern pattern = 4; // VoiceService.{i}.Terminal.{i}.Ringer.Pattern.{i}.
    }
    Ringer ringer = 9; // VoiceService.{i}.Terminal.{i}.Ringer.
    message DiagTests { // VoiceService.{i}.Terminal.{i}.DiagTests.
      string    diagnostics_state                        = 1  ; //  Indicates availability of diagnostic dat
      string    test_selector                            = 2  ; //  Indicates which test to perform.       
      bool      phone_ringing                            = 3  ; //  Indicates whether or not the phone assoc
    }
    DiagTests diag_tests = 10; // VoiceService.{i}.Terminal.{i}.DiagTests.
  }
  repeated Terminal terminal = 23; // VoiceService.{i}.Terminal.{i}.
  message ClockSynchronization { // VoiceService.{i}.ClockSynchronization.
    uint32    clock_source_number_of_entries           = 1  ; //  {{numentries}}        }        sts.
    string    current_source                           = 2  ; //  The currently selected external clock so
    string    description                              = 3  ; //  Human readable description of the curren
    bool      auto_revert                              = 4  ; //  If set to {{true}} the CPE automatically
    message ClockSource { // VoiceService.{i}.ClockSynchronization.ClockSource.{i}.
      bool      enable                                   = 1  ; //  Enables or disables this entry.        
      string    alias                                    = 2  ; //  {{datatype|expand}}        }        
      uint32    order                                    = 3  ; //  Position of the {{object}} entry in the 
      string    interface                                = 4  ; //  A reference to a physical interface from
    }
    repeated ClockSource clock_source = 5; // VoiceService.{i}.ClockSynchronization.ClockSource.{i}.
  }
  ClockSynchronization clock_synchronization = 24; // VoiceService.{i}.ClockSynchronization.
}

message VoisRequest { int32 unused = 1; }

message VoisReply { int32 unused = 1; }

message X_012345_Message { int32 unused = 1;  } // Vendor extensions X_{OUI}_{NameOfNewThing}

service Vois {
  rpc GetVoiceService(VoisRequest) returns (tr104.VoiceService) {}
  rpc SetVoiceService(tr104.VoiceService) returns (VoisReply) {}

  rpc GetCapabilities(VoisRequest) returns (tr104.VoiceService.Capabilities) {}
  rpc SetCapabilities(tr104.VoiceService.Capabilities) returns (VoisReply) {}

  rpc GetSIP(VoisRequest) returns (tr104.VoiceService.Capabilities.SIP) {}
  rpc SetSIP(tr104.VoiceService.Capabilities.SIP) returns (VoisReply) {}

  rpc GetClient(VoisRequest) returns (tr104.VoiceService.Capabilities.SIP.Client) {}
  rpc SetClient(tr104.VoiceService.Capabilities.SIP.Client) returns (VoisReply) {}

  rpc GetRegistrar(VoisRequest) returns (tr104.VoiceService.Capabilities.SIP.Registrar) {}
  rpc SetRegistrar(tr104.VoiceService.Capabilities.SIP.Registrar) returns (VoisReply) {}

  rpc GetMGCP(VoisRequest) returns (tr104.VoiceService.Capabilities.MGCP) {}
  rpc SetMGCP(tr104.VoiceService.Capabilities.MGCP) returns (VoisReply) {}

  rpc GetH323(VoisRequest) returns (tr104.VoiceService.Capabilities.H323) {}
  rpc SetH323(tr104.VoiceService.Capabilities.H323) returns (VoisReply) {}

  rpc GetISDN(VoisRequest) returns (tr104.VoiceService.Capabilities.ISDN) {}
  rpc SetISDN(tr104.VoiceService.Capabilities.ISDN) returns (VoisReply) {}

  rpc GetPOTS(VoisRequest) returns (tr104.VoiceService.Capabilities.POTS) {}
  rpc SetPOTS(tr104.VoiceService.Capabilities.POTS) returns (VoisReply) {}

  rpc GetCodec(VoisRequest) returns (stream tr104.VoiceService.Capabilities.Codec) {}
  rpc SetCodec(stream tr104.VoiceService.Capabilities.Codec) returns (VoisReply) {}

  rpc GetQualityIndicator(VoisRequest) returns (tr104.VoiceService.Capabilities.QualityIndicator) {}
  rpc SetQualityIndicator(tr104.VoiceService.Capabilities.QualityIndicator) returns (VoisReply) {}

  rpc GetReservedPorts(VoisRequest) returns (tr104.VoiceService.ReservedPorts) {}
  rpc SetReservedPorts(tr104.VoiceService.ReservedPorts) returns (VoisReply) {}

  //?? rpc GetISDN(VoisRequest) returns (tr104.VoiceService.ISDN) {}
  //?? rpc SetISDN(tr104.VoiceService.ISDN) returns (VoisReply) {}

  rpc GetBRI(VoisRequest) returns (stream tr104.VoiceService.ISDN.BRI) {}
  rpc SetBRI(stream tr104.VoiceService.ISDN.BRI) returns (VoisReply) {}

  rpc GetPRI(VoisRequest) returns (stream tr104.VoiceService.ISDN.PRI) {}
  rpc SetPRI(stream tr104.VoiceService.ISDN.PRI) returns (VoisReply) {}

  //?? rpc GetPOTS(VoisRequest) returns (tr104.VoiceService.POTS) {}
  //?? rpc SetPOTS(tr104.VoiceService.POTS) returns (VoisReply) {}

  rpc GetFXO(VoisRequest) returns (stream tr104.VoiceService.POTS.FXO) {}
  rpc SetFXO(stream tr104.VoiceService.POTS.FXO) returns (VoisReply) {}

  rpc GetDiagTests(VoisRequest) returns (tr104.VoiceService.POTS.FXO.DiagTests) {}
  rpc SetDiagTests(tr104.VoiceService.POTS.FXO.DiagTests) returns (VoisReply) {}

  rpc GetFXS(VoisRequest) returns (stream tr104.VoiceService.POTS.FXS) {}
  rpc SetFXS(stream tr104.VoiceService.POTS.FXS) returns (VoisReply) {}

  rpc GetVoiceProcessing(VoisRequest) returns (tr104.VoiceService.POTS.FXS.VoiceProcessing) {}
  rpc SetVoiceProcessing(tr104.VoiceService.POTS.FXS.VoiceProcessing) returns (VoisReply) {}

  //?? rpc GetDiagTests(VoisRequest) returns (tr104.VoiceService.POTS.FXS.DiagTests) {}
  //?? rpc SetDiagTests(tr104.VoiceService.POTS.FXS.DiagTests) returns (VoisReply) {}

  rpc GetRinger(VoisRequest) returns (tr104.VoiceService.POTS.Ringer) {}
  rpc SetRinger(tr104.VoiceService.POTS.Ringer) returns (VoisReply) {}

  rpc GetEvent(VoisRequest) returns (stream tr104.VoiceService.POTS.Ringer.Event) {}
  rpc SetEvent(stream tr104.VoiceService.POTS.Ringer.Event) returns (VoisReply) {}

  rpc GetDECT(VoisRequest) returns (tr104.VoiceService.DECT) {}
  rpc SetDECT(tr104.VoiceService.DECT) returns (VoisReply) {}

  rpc GetBase(VoisRequest) returns (stream tr104.VoiceService.DECT.Base) {}
  rpc SetBase(stream tr104.VoiceService.DECT.Base) returns (VoisReply) {}

  rpc GetStats(VoisRequest) returns (tr104.VoiceService.DECT.Base.Stats) {}
  rpc SetStats(tr104.VoiceService.DECT.Base.Stats) returns (VoisReply) {}

  rpc GetPortable(VoisRequest) returns (stream tr104.VoiceService.DECT.Portable) {}
  rpc SetPortable(stream tr104.VoiceService.DECT.Portable) returns (VoisReply) {}

  //?? rpc GetSIP(VoisRequest) returns (tr104.VoiceService.SIP) {}
  //?? rpc SetSIP(tr104.VoiceService.SIP) returns (VoisReply) {}

  //?? rpc GetClient(VoisRequest) returns (stream tr104.VoiceService.SIP.Client) {}
  //?? rpc SetClient(stream tr104.VoiceService.SIP.Client) returns (VoisReply) {}

  rpc GetContact(VoisRequest) returns (stream tr104.VoiceService.SIP.Client.Contact) {}
  rpc SetContact(stream tr104.VoiceService.SIP.Client.Contact) returns (VoisReply) {}

  rpc GetEventSubscribe(VoisRequest) returns (stream tr104.VoiceService.SIP.Client.EventSubscribe) {}
  rpc SetEventSubscribe(stream tr104.VoiceService.SIP.Client.EventSubscribe) returns (VoisReply) {}

  rpc GetNetwork(VoisRequest) returns (stream tr104.VoiceService.SIP.Network) {}
  rpc SetNetwork(stream tr104.VoiceService.SIP.Network) returns (VoisReply) {}

  rpc GetFQDNServer(VoisRequest) returns (stream tr104.VoiceService.SIP.Network.FQDNServer) {}
  rpc SetFQDNServer(stream tr104.VoiceService.SIP.Network.FQDNServer) returns (VoisReply) {}

  //?? rpc GetEventSubscribe(VoisRequest) returns (stream tr104.VoiceService.SIP.Network.EventSubscribe) {}
  //?? rpc SetEventSubscribe(stream tr104.VoiceService.SIP.Network.EventSubscribe) returns (VoisReply) {}

  rpc GetResponseMap(VoisRequest) returns (stream tr104.VoiceService.SIP.Network.ResponseMap) {}
  rpc SetResponseMap(stream tr104.VoiceService.SIP.Network.ResponseMap) returns (VoisReply) {}

  rpc GetProxy(VoisRequest) returns (stream tr104.VoiceService.SIP.Proxy) {}
  rpc SetProxy(stream tr104.VoiceService.SIP.Proxy) returns (VoisReply) {}

  //?? rpc GetRegistrar(VoisRequest) returns (stream tr104.VoiceService.SIP.Registrar) {}
  //?? rpc SetRegistrar(stream tr104.VoiceService.SIP.Registrar) returns (VoisReply) {}

  rpc GetAccount(VoisRequest) returns (stream tr104.VoiceService.SIP.Registrar.Account) {}
  rpc SetAccount(stream tr104.VoiceService.SIP.Registrar.Account) returns (VoisReply) {}

  //?? rpc GetContact(VoisRequest) returns (stream tr104.VoiceService.SIP.Registrar.Account.Contact) {}
  //?? rpc SetContact(stream tr104.VoiceService.SIP.Registrar.Account.Contact) returns (VoisReply) {}

  //?? rpc GetMGCP(VoisRequest) returns (tr104.VoiceService.MGCP) {}
  //?? rpc SetMGCP(tr104.VoiceService.MGCP) returns (VoisReply) {}

  //?? rpc GetClient(VoisRequest) returns (stream tr104.VoiceService.MGCP.Client) {}
  //?? rpc SetClient(stream tr104.VoiceService.MGCP.Client) returns (VoisReply) {}

  //?? rpc GetNetwork(VoisRequest) returns (stream tr104.VoiceService.MGCP.Network) {}
  //?? rpc SetNetwork(stream tr104.VoiceService.MGCP.Network) returns (VoisReply) {}

  //?? rpc GetH323(VoisRequest) returns (tr104.VoiceService.H323) {}
  //?? rpc SetH323(tr104.VoiceService.H323) returns (VoisReply) {}

  //?? rpc GetClient(VoisRequest) returns (stream tr104.VoiceService.H323.Client) {}
  //?? rpc SetClient(stream tr104.VoiceService.H323.Client) returns (VoisReply) {}

  //?? rpc GetNetwork(VoisRequest) returns (stream tr104.VoiceService.H323.Network) {}
  //?? rpc SetNetwork(stream tr104.VoiceService.H323.Network) returns (VoisReply) {}

  rpc GetTrunk(VoisRequest) returns (stream tr104.VoiceService.Trunk) {}
  rpc SetTrunk(stream tr104.VoiceService.Trunk) returns (VoisReply) {}

  rpc GetCallControl(VoisRequest) returns (tr104.VoiceService.CallControl) {}
  rpc SetCallControl(tr104.VoiceService.CallControl) returns (VoisReply) {}

  rpc GetLine(VoisRequest) returns (stream tr104.VoiceService.CallControl.Line) {}
  rpc SetLine(stream tr104.VoiceService.CallControl.Line) returns (VoisReply) {}

  //?? rpc GetStats(VoisRequest) returns (tr104.VoiceService.CallControl.Line.Stats) {}
  //?? rpc SetStats(tr104.VoiceService.CallControl.Line.Stats) returns (VoisReply) {}

  rpc GetIncomingCalls(VoisRequest) returns (tr104.VoiceService.CallControl.Line.Stats.IncomingCalls) {}
  rpc SetIncomingCalls(tr104.VoiceService.CallControl.Line.Stats.IncomingCalls) returns (VoisReply) {}

  rpc GetOutgoingCalls(VoisRequest) returns (tr104.VoiceService.CallControl.Line.Stats.OutgoingCalls) {}
  rpc SetOutgoingCalls(tr104.VoiceService.CallControl.Line.Stats.OutgoingCalls) returns (VoisReply) {}

  rpc GetRTP(VoisRequest) returns (tr104.VoiceService.CallControl.Line.Stats.RTP) {}
  rpc SetRTP(tr104.VoiceService.CallControl.Line.Stats.RTP) returns (VoisReply) {}

  rpc GetDSP(VoisRequest) returns (tr104.VoiceService.CallControl.Line.Stats.DSP) {}
  rpc SetDSP(tr104.VoiceService.CallControl.Line.Stats.DSP) returns (VoisReply) {}

  rpc GetExtension(VoisRequest) returns (stream tr104.VoiceService.CallControl.Extension) {}
  rpc SetExtension(stream tr104.VoiceService.CallControl.Extension) returns (VoisReply) {}

  //?? rpc GetStats(VoisRequest) returns (tr104.VoiceService.CallControl.Extension.Stats) {}
  //?? rpc SetStats(tr104.VoiceService.CallControl.Extension.Stats) returns (VoisReply) {}

  //?? rpc GetIncomingCalls(VoisRequest) returns (tr104.VoiceService.CallControl.Extension.Stats.IncomingCalls) {}
  //?? rpc SetIncomingCalls(tr104.VoiceService.CallControl.Extension.Stats.IncomingCalls) returns (VoisReply) {}

  //?? rpc GetOutgoingCalls(VoisRequest) returns (tr104.VoiceService.CallControl.Extension.Stats.OutgoingCalls) {}
  //?? rpc SetOutgoingCalls(tr104.VoiceService.CallControl.Extension.Stats.OutgoingCalls) returns (VoisReply) {}

  //?? rpc GetRTP(VoisRequest) returns (tr104.VoiceService.CallControl.Extension.Stats.RTP) {}
  //?? rpc SetRTP(tr104.VoiceService.CallControl.Extension.Stats.RTP) returns (VoisReply) {}

  //?? rpc GetDSP(VoisRequest) returns (tr104.VoiceService.CallControl.Extension.Stats.DSP) {}
  //?? rpc SetDSP(tr104.VoiceService.CallControl.Extension.Stats.DSP) returns (VoisReply) {}

  rpc GetGroup(VoisRequest) returns (stream tr104.VoiceService.CallControl.Group) {}
  rpc SetGroup(stream tr104.VoiceService.CallControl.Group) returns (VoisReply) {}

  rpc GetMailbox(VoisRequest) returns (stream tr104.VoiceService.CallControl.Mailbox) {}
  rpc SetMailbox(stream tr104.VoiceService.CallControl.Mailbox) returns (VoisReply) {}

  rpc GetIncomingMap(VoisRequest) returns (stream tr104.VoiceService.CallControl.IncomingMap) {}
  rpc SetIncomingMap(stream tr104.VoiceService.CallControl.IncomingMap) returns (VoisReply) {}

  rpc GetOutgoingMap(VoisRequest) returns (stream tr104.VoiceService.CallControl.OutgoingMap) {}
  rpc SetOutgoingMap(stream tr104.VoiceService.CallControl.OutgoingMap) returns (VoisReply) {}

  rpc GetNumberingPlan(VoisRequest) returns (stream tr104.VoiceService.CallControl.NumberingPlan) {}
  rpc SetNumberingPlan(stream tr104.VoiceService.CallControl.NumberingPlan) returns (VoisReply) {}

  rpc GetPrefixInfo(VoisRequest) returns (stream tr104.VoiceService.CallControl.NumberingPlan.PrefixInfo) {}
  rpc SetPrefixInfo(stream tr104.VoiceService.CallControl.NumberingPlan.PrefixInfo) returns (VoisReply) {}

  rpc GetCallingFeatures(VoisRequest) returns (tr104.VoiceService.CallControl.CallingFeatures) {}
  rpc SetCallingFeatures(tr104.VoiceService.CallControl.CallingFeatures) returns (VoisReply) {}

  rpc GetSet(VoisRequest) returns (stream tr104.VoiceService.CallControl.CallingFeatures.Set) {}
  rpc SetSet(stream tr104.VoiceService.CallControl.CallingFeatures.Set) returns (VoisReply) {}

  rpc GetCFT(VoisRequest) returns (stream tr104.VoiceService.CallControl.CallingFeatures.Set.CFT) {}
  rpc SetCFT(stream tr104.VoiceService.CallControl.CallingFeatures.Set.CFT) returns (VoisReply) {}

  rpc GetSCF(VoisRequest) returns (stream tr104.VoiceService.CallControl.CallingFeatures.Set.SCF) {}
  rpc SetSCF(stream tr104.VoiceService.CallControl.CallingFeatures.Set.SCF) returns (VoisReply) {}

  rpc GetSCREJ(VoisRequest) returns (stream tr104.VoiceService.CallControl.CallingFeatures.Set.SCREJ) {}
  rpc SetSCREJ(stream tr104.VoiceService.CallControl.CallingFeatures.Set.SCREJ) returns (VoisReply) {}

  rpc GetFollowMe(VoisRequest) returns (stream tr104.VoiceService.CallControl.CallingFeatures.Set.FollowMe) {}
  rpc SetFollowMe(stream tr104.VoiceService.CallControl.CallingFeatures.Set.FollowMe) returns (VoisReply) {}

  rpc GetVoice2Mail(VoisRequest) returns (tr104.VoiceService.CallControl.CallingFeatures.Set.Voice2Mail) {}
  rpc SetVoice2Mail(tr104.VoiceService.CallControl.CallingFeatures.Set.Voice2Mail) returns (VoisReply) {}

  rpc GetInterwork(VoisRequest) returns (stream tr104.VoiceService.Interwork) {}
  rpc SetInterwork(stream tr104.VoiceService.Interwork) returns (VoisReply) {}

  rpc GetUserInterface(VoisRequest) returns (stream tr104.VoiceService.Interwork.UserInterface) {}
  rpc SetUserInterface(stream tr104.VoiceService.Interwork.UserInterface) returns (VoisReply) {}

  rpc GetMap(VoisRequest) returns (stream tr104.VoiceService.Interwork.Map) {}
  rpc SetMap(stream tr104.VoiceService.Interwork.Map) returns (VoisReply) {}

  rpc GetCallLog(VoisRequest) returns (stream tr104.VoiceService.CallLog) {}
  rpc SetCallLog(stream tr104.VoiceService.CallLog) returns (VoisReply) {}

  rpc GetSignalingPerformance(VoisRequest) returns (stream tr104.VoiceService.CallLog.SignalingPerformance) {}
  rpc SetSignalingPerformance(stream tr104.VoiceService.CallLog.SignalingPerformance) returns (VoisReply) {}

  rpc GetSession(VoisRequest) returns (stream tr104.VoiceService.CallLog.Session) {}
  rpc SetSession(stream tr104.VoiceService.CallLog.Session) returns (VoisReply) {}

  rpc GetSource(VoisRequest) returns (tr104.VoiceService.CallLog.Session.Source) {}
  rpc SetSource(tr104.VoiceService.CallLog.Session.Source) returns (VoisReply) {}

  //?? rpc GetRTP(VoisRequest) returns (tr104.VoiceService.CallLog.Session.Source.RTP) {}
  //?? rpc SetRTP(tr104.VoiceService.CallLog.Session.Source.RTP) returns (VoisReply) {}

  //?? rpc GetDSP(VoisRequest) returns (tr104.VoiceService.CallLog.Session.Source.DSP) {}
  //?? rpc SetDSP(tr104.VoiceService.CallLog.Session.Source.DSP) returns (VoisReply) {}

  rpc GetReceiveCodec(VoisRequest) returns (tr104.VoiceService.CallLog.Session.Source.DSP.ReceiveCodec) {}
  rpc SetReceiveCodec(tr104.VoiceService.CallLog.Session.Source.DSP.ReceiveCodec) returns (VoisReply) {}

  rpc GetTransmitCodec(VoisRequest) returns (tr104.VoiceService.CallLog.Session.Source.DSP.TransmitCodec) {}
  rpc SetTransmitCodec(tr104.VoiceService.CallLog.Session.Source.DSP.TransmitCodec) returns (VoisReply) {}

  rpc GetVoiceQuality(VoisRequest) returns (tr104.VoiceService.CallLog.Session.Source.VoiceQuality) {}
  rpc SetVoiceQuality(tr104.VoiceService.CallLog.Session.Source.VoiceQuality) returns (VoisReply) {}

  rpc GetDestination(VoisRequest) returns (tr104.VoiceService.CallLog.Session.Destination) {}
  rpc SetDestination(tr104.VoiceService.CallLog.Session.Destination) returns (VoisReply) {}

  //?? rpc GetRTP(VoisRequest) returns (tr104.VoiceService.CallLog.Session.Destination.RTP) {}
  //?? rpc SetRTP(tr104.VoiceService.CallLog.Session.Destination.RTP) returns (VoisReply) {}

  //?? rpc GetDSP(VoisRequest) returns (tr104.VoiceService.CallLog.Session.Destination.DSP) {}
  //?? rpc SetDSP(tr104.VoiceService.CallLog.Session.Destination.DSP) returns (VoisReply) {}

  //?? rpc GetReceiveCodec(VoisRequest) returns (tr104.VoiceService.CallLog.Session.Destination.DSP.ReceiveCodec) {}
  //?? rpc SetReceiveCodec(tr104.VoiceService.CallLog.Session.Destination.DSP.ReceiveCodec) returns (VoisReply) {}

  //?? rpc GetTransmitCodec(VoisRequest) returns (tr104.VoiceService.CallLog.Session.Destination.DSP.TransmitCodec) {}
  //?? rpc SetTransmitCodec(tr104.VoiceService.CallLog.Session.Destination.DSP.TransmitCodec) returns (VoisReply) {}

  //?? rpc GetVoiceQuality(VoisRequest) returns (tr104.VoiceService.CallLog.Session.Destination.VoiceQuality) {}
  //?? rpc SetVoiceQuality(tr104.VoiceService.CallLog.Session.Destination.VoiceQuality) returns (VoisReply) {}

  rpc GetVoIPProfile(VoisRequest) returns (stream tr104.VoiceService.VoIPProfile) {}
  rpc SetVoIPProfile(stream tr104.VoiceService.VoIPProfile) returns (VoisReply) {}

  //?? rpc GetRTP(VoisRequest) returns (tr104.VoiceService.VoIPProfile.RTP) {}
  //?? rpc SetRTP(tr104.VoiceService.VoIPProfile.RTP) returns (VoisReply) {}

  rpc GetRTCP(VoisRequest) returns (tr104.VoiceService.VoIPProfile.RTP.RTCP) {}
  rpc SetRTCP(tr104.VoiceService.VoIPProfile.RTP.RTCP) returns (VoisReply) {}

  rpc GetSRTP(VoisRequest) returns (tr104.VoiceService.VoIPProfile.RTP.SRTP) {}
  rpc SetSRTP(tr104.VoiceService.VoIPProfile.RTP.SRTP) returns (VoisReply) {}

  rpc GetRedundancy(VoisRequest) returns (tr104.VoiceService.VoIPProfile.RTP.Redundancy) {}
  rpc SetRedundancy(tr104.VoiceService.VoIPProfile.RTP.Redundancy) returns (VoisReply) {}

  rpc GetFaxT38(VoisRequest) returns (tr104.VoiceService.VoIPProfile.FaxT38) {}
  rpc SetFaxT38(tr104.VoiceService.VoIPProfile.FaxT38) returns (VoisReply) {}

  rpc GetCodecProfile(VoisRequest) returns (stream tr104.VoiceService.CodecProfile) {}
  rpc SetCodecProfile(stream tr104.VoiceService.CodecProfile) returns (VoisReply) {}

  rpc GetTone(VoisRequest) returns (tr104.VoiceService.Tone) {}
  rpc SetTone(tr104.VoiceService.Tone) returns (VoisReply) {}

  rpc GetDescription(VoisRequest) returns (stream tr104.VoiceService.Tone.Description) {}
  rpc SetDescription(stream tr104.VoiceService.Tone.Description) returns (VoisReply) {}

  rpc GetPattern(VoisRequest) returns (stream tr104.VoiceService.Tone.Pattern) {}
  rpc SetPattern(stream tr104.VoiceService.Tone.Pattern) returns (VoisReply) {}

  rpc GetEventProfile(VoisRequest) returns (stream tr104.VoiceService.Tone.EventProfile) {}
  rpc SetEventProfile(stream tr104.VoiceService.Tone.EventProfile) returns (VoisReply) {}

  //?? rpc GetEvent(VoisRequest) returns (stream tr104.VoiceService.Tone.EventProfile.Event) {}
  //?? rpc SetEvent(stream tr104.VoiceService.Tone.EventProfile.Event) returns (VoisReply) {}

  rpc GetTerminal(VoisRequest) returns (stream tr104.VoiceService.Terminal) {}
  rpc SetTerminal(stream tr104.VoiceService.Terminal) returns (VoisReply) {}

  rpc GetAudio(VoisRequest) returns (stream tr104.VoiceService.Terminal.Audio) {}
  rpc SetAudio(stream tr104.VoiceService.Terminal.Audio) returns (VoisReply) {}

  //?? rpc GetVoiceProcessing(VoisRequest) returns (tr104.VoiceService.Terminal.Audio.VoiceProcessing) {}
  //?? rpc SetVoiceProcessing(tr104.VoiceService.Terminal.Audio.VoiceProcessing) returns (VoisReply) {}

  rpc GetButtonMap(VoisRequest) returns (tr104.VoiceService.Terminal.ButtonMap) {}
  rpc SetButtonMap(tr104.VoiceService.Terminal.ButtonMap) returns (VoisReply) {}

  rpc GetButton(VoisRequest) returns (stream tr104.VoiceService.Terminal.ButtonMap.Button) {}
  rpc SetButton(stream tr104.VoiceService.Terminal.ButtonMap.Button) returns (VoisReply) {}

  //?? rpc GetRinger(VoisRequest) returns (tr104.VoiceService.Terminal.Ringer) {}
  //?? rpc SetRinger(tr104.VoiceService.Terminal.Ringer) returns (VoisReply) {}

  //?? rpc GetDescription(VoisRequest) returns (stream tr104.VoiceService.Terminal.Ringer.Description) {}
  //?? rpc SetDescription(stream tr104.VoiceService.Terminal.Ringer.Description) returns (VoisReply) {}

  //?? rpc GetPattern(VoisRequest) returns (stream tr104.VoiceService.Terminal.Ringer.Pattern) {}
  //?? rpc SetPattern(stream tr104.VoiceService.Terminal.Ringer.Pattern) returns (VoisReply) {}

  //?? rpc GetDiagTests(VoisRequest) returns (tr104.VoiceService.Terminal.DiagTests) {}
  //?? rpc SetDiagTests(tr104.VoiceService.Terminal.DiagTests) returns (VoisReply) {}

  rpc GetClockSynchronization(VoisRequest) returns (tr104.VoiceService.ClockSynchronization) {}
  rpc SetClockSynchronization(tr104.VoiceService.ClockSynchronization) returns (VoisReply) {}

  rpc GetClockSource(VoisRequest) returns (stream tr104.VoiceService.ClockSynchronization.ClockSource) {}
  rpc SetClockSource(stream tr104.VoiceService.ClockSynchronization.ClockSource) returns (VoisReply) {}

}
