// Generated by cwmp_proto_to_grpc.cc
// source: tr-104-2-0-0-full.proto
// Use this file to implement gRPC server's service methods.

  Status GetVoiceService(ServerContext* context, const VoisRequest* request, tr104::VoiceService* reply) override { return Status::OK; }
  Status SetVoiceService(ServerContext* context, const tr104::VoiceService* request, VoisReply* reply) override { return Status::OK; }

  Status GetCapabilities(ServerContext* context, const VoisRequest* request, tr104::VoiceService::Capabilities* reply) override { return Status::OK; }
  Status SetCapabilities(ServerContext* context, const tr104::VoiceService::Capabilities* request, VoisReply* reply) override { return Status::OK; }

  Status GetSIP(ServerContext* context, const VoisRequest* request, tr104::VoiceService::Capabilities::SIP* reply) override { return Status::OK; }
  Status SetSIP(ServerContext* context, const tr104::VoiceService::Capabilities::SIP* request, VoisReply* reply) override { return Status::OK; }

  Status GetClient(ServerContext* context, const VoisRequest* request, tr104::VoiceService::Capabilities::SIP::Client* reply) override { return Status::OK; }
  Status SetClient(ServerContext* context, const tr104::VoiceService::Capabilities::SIP::Client* request, VoisReply* reply) override { return Status::OK; }

  Status GetRegistrar(ServerContext* context, const VoisRequest* request, tr104::VoiceService::Capabilities::SIP::Registrar* reply) override { return Status::OK; }
  Status SetRegistrar(ServerContext* context, const tr104::VoiceService::Capabilities::SIP::Registrar* request, VoisReply* reply) override { return Status::OK; }

  Status GetMGCP(ServerContext* context, const VoisRequest* request, tr104::VoiceService::Capabilities::MGCP* reply) override { return Status::OK; }
  Status SetMGCP(ServerContext* context, const tr104::VoiceService::Capabilities::MGCP* request, VoisReply* reply) override { return Status::OK; }

  Status GetH323(ServerContext* context, const VoisRequest* request, tr104::VoiceService::Capabilities::H323* reply) override { return Status::OK; }
  Status SetH323(ServerContext* context, const tr104::VoiceService::Capabilities::H323* request, VoisReply* reply) override { return Status::OK; }

  Status GetISDN(ServerContext* context, const VoisRequest* request, tr104::VoiceService::Capabilities::ISDN* reply) override { return Status::OK; }
  Status SetISDN(ServerContext* context, const tr104::VoiceService::Capabilities::ISDN* request, VoisReply* reply) override { return Status::OK; }

  Status GetPOTS(ServerContext* context, const VoisRequest* request, tr104::VoiceService::Capabilities::POTS* reply) override { return Status::OK; }
  Status SetPOTS(ServerContext* context, const tr104::VoiceService::Capabilities::POTS* request, VoisReply* reply) override { return Status::OK; }

  Status GetCodec(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::Capabilities::Codec>* reply) override { return Status::OK; }
  Status SetCodec(ServerContext* context, ServerReader<tr104::VoiceService::Capabilities::Codec>* request, VoisReply* reply) override { return Status::OK; }

  Status GetQualityIndicator(ServerContext* context, const VoisRequest* request, tr104::VoiceService::Capabilities::QualityIndicator* reply) override { return Status::OK; }
  Status SetQualityIndicator(ServerContext* context, const tr104::VoiceService::Capabilities::QualityIndicator* request, VoisReply* reply) override { return Status::OK; }

  Status GetReservedPorts(ServerContext* context, const VoisRequest* request, tr104::VoiceService::ReservedPorts* reply) override { return Status::OK; }
  Status SetReservedPorts(ServerContext* context, const tr104::VoiceService::ReservedPorts* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetISDN(ServerContext* context, const VoisRequest* request, tr104::VoiceService::ISDN* reply) override { return Status::OK; }
  //?? Status SetISDN(ServerContext* context, const tr104::VoiceService::ISDN* request, VoisReply* reply) override { return Status::OK; }

  Status GetBRI(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::ISDN::BRI>* reply) override { return Status::OK; }
  Status SetBRI(ServerContext* context, ServerReader<tr104::VoiceService::ISDN::BRI>* request, VoisReply* reply) override { return Status::OK; }

  Status GetPRI(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::ISDN::PRI>* reply) override { return Status::OK; }
  Status SetPRI(ServerContext* context, ServerReader<tr104::VoiceService::ISDN::PRI>* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetPOTS(ServerContext* context, const VoisRequest* request, tr104::VoiceService::POTS* reply) override { return Status::OK; }
  //?? Status SetPOTS(ServerContext* context, const tr104::VoiceService::POTS* request, VoisReply* reply) override { return Status::OK; }

  Status GetFXO(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::POTS::FXO>* reply) override { return Status::OK; }
  Status SetFXO(ServerContext* context, ServerReader<tr104::VoiceService::POTS::FXO>* request, VoisReply* reply) override { return Status::OK; }

  Status GetDiagTests(ServerContext* context, const VoisRequest* request, tr104::VoiceService::POTS::FXO::DiagTests* reply) override { return Status::OK; }
  Status SetDiagTests(ServerContext* context, const tr104::VoiceService::POTS::FXO::DiagTests* request, VoisReply* reply) override { return Status::OK; }

  Status GetFXS(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::POTS::FXS>* reply) override { return Status::OK; }
  Status SetFXS(ServerContext* context, ServerReader<tr104::VoiceService::POTS::FXS>* request, VoisReply* reply) override { return Status::OK; }

  Status GetVoiceProcessing(ServerContext* context, const VoisRequest* request, tr104::VoiceService::POTS::FXS::VoiceProcessing* reply) override { return Status::OK; }
  Status SetVoiceProcessing(ServerContext* context, const tr104::VoiceService::POTS::FXS::VoiceProcessing* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetDiagTests(ServerContext* context, const VoisRequest* request, tr104::VoiceService::POTS::FXS::DiagTests* reply) override { return Status::OK; }
  //?? Status SetDiagTests(ServerContext* context, const tr104::VoiceService::POTS::FXS::DiagTests* request, VoisReply* reply) override { return Status::OK; }

  Status GetRinger(ServerContext* context, const VoisRequest* request, tr104::VoiceService::POTS::Ringer* reply) override { return Status::OK; }
  Status SetRinger(ServerContext* context, const tr104::VoiceService::POTS::Ringer* request, VoisReply* reply) override { return Status::OK; }

  Status GetEvent(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::POTS::Ringer::Event>* reply) override { return Status::OK; }
  Status SetEvent(ServerContext* context, ServerReader<tr104::VoiceService::POTS::Ringer::Event>* request, VoisReply* reply) override { return Status::OK; }

  Status GetDECT(ServerContext* context, const VoisRequest* request, tr104::VoiceService::DECT* reply) override { return Status::OK; }
  Status SetDECT(ServerContext* context, const tr104::VoiceService::DECT* request, VoisReply* reply) override { return Status::OK; }

  Status GetBase(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::DECT::Base>* reply) override { return Status::OK; }
  Status SetBase(ServerContext* context, ServerReader<tr104::VoiceService::DECT::Base>* request, VoisReply* reply) override { return Status::OK; }

  Status GetStats(ServerContext* context, const VoisRequest* request, tr104::VoiceService::DECT::Base::Stats* reply) override { return Status::OK; }
  Status SetStats(ServerContext* context, const tr104::VoiceService::DECT::Base::Stats* request, VoisReply* reply) override { return Status::OK; }

  Status GetPortable(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::DECT::Portable>* reply) override { return Status::OK; }
  Status SetPortable(ServerContext* context, ServerReader<tr104::VoiceService::DECT::Portable>* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetSIP(ServerContext* context, const VoisRequest* request, tr104::VoiceService::SIP* reply) override { return Status::OK; }
  //?? Status SetSIP(ServerContext* context, const tr104::VoiceService::SIP* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetClient(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::SIP::Client>* reply) override { return Status::OK; }
  //?? Status SetClient(ServerContext* context, ServerReader<tr104::VoiceService::SIP::Client>* request, VoisReply* reply) override { return Status::OK; }

  Status GetContact(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::SIP::Client::Contact>* reply) override { return Status::OK; }
  Status SetContact(ServerContext* context, ServerReader<tr104::VoiceService::SIP::Client::Contact>* request, VoisReply* reply) override { return Status::OK; }

  Status GetEventSubscribe(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::SIP::Client::EventSubscribe>* reply) override { return Status::OK; }
  Status SetEventSubscribe(ServerContext* context, ServerReader<tr104::VoiceService::SIP::Client::EventSubscribe>* request, VoisReply* reply) override { return Status::OK; }

  Status GetNetwork(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::SIP::Network>* reply) override { return Status::OK; }
  Status SetNetwork(ServerContext* context, ServerReader<tr104::VoiceService::SIP::Network>* request, VoisReply* reply) override { return Status::OK; }

  Status GetFQDNServer(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::SIP::Network::FQDNServer>* reply) override { return Status::OK; }
  Status SetFQDNServer(ServerContext* context, ServerReader<tr104::VoiceService::SIP::Network::FQDNServer>* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetEventSubscribe(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::SIP::Network::EventSubscribe>* reply) override { return Status::OK; }
  //?? Status SetEventSubscribe(ServerContext* context, ServerReader<tr104::VoiceService::SIP::Network::EventSubscribe>* request, VoisReply* reply) override { return Status::OK; }

  Status GetResponseMap(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::SIP::Network::ResponseMap>* reply) override { return Status::OK; }
  Status SetResponseMap(ServerContext* context, ServerReader<tr104::VoiceService::SIP::Network::ResponseMap>* request, VoisReply* reply) override { return Status::OK; }

  Status GetProxy(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::SIP::Proxy>* reply) override { return Status::OK; }
  Status SetProxy(ServerContext* context, ServerReader<tr104::VoiceService::SIP::Proxy>* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetRegistrar(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::SIP::Registrar>* reply) override { return Status::OK; }
  //?? Status SetRegistrar(ServerContext* context, ServerReader<tr104::VoiceService::SIP::Registrar>* request, VoisReply* reply) override { return Status::OK; }

  Status GetAccount(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::SIP::Registrar::Account>* reply) override { return Status::OK; }
  Status SetAccount(ServerContext* context, ServerReader<tr104::VoiceService::SIP::Registrar::Account>* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetContact(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::SIP::Registrar::Account::Contact>* reply) override { return Status::OK; }
  //?? Status SetContact(ServerContext* context, ServerReader<tr104::VoiceService::SIP::Registrar::Account::Contact>* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetMGCP(ServerContext* context, const VoisRequest* request, tr104::VoiceService::MGCP* reply) override { return Status::OK; }
  //?? Status SetMGCP(ServerContext* context, const tr104::VoiceService::MGCP* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetClient(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::MGCP::Client>* reply) override { return Status::OK; }
  //?? Status SetClient(ServerContext* context, ServerReader<tr104::VoiceService::MGCP::Client>* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetNetwork(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::MGCP::Network>* reply) override { return Status::OK; }
  //?? Status SetNetwork(ServerContext* context, ServerReader<tr104::VoiceService::MGCP::Network>* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetH323(ServerContext* context, const VoisRequest* request, tr104::VoiceService::H323* reply) override { return Status::OK; }
  //?? Status SetH323(ServerContext* context, const tr104::VoiceService::H323* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetClient(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::H323::Client>* reply) override { return Status::OK; }
  //?? Status SetClient(ServerContext* context, ServerReader<tr104::VoiceService::H323::Client>* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetNetwork(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::H323::Network>* reply) override { return Status::OK; }
  //?? Status SetNetwork(ServerContext* context, ServerReader<tr104::VoiceService::H323::Network>* request, VoisReply* reply) override { return Status::OK; }

  Status GetTrunk(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::Trunk>* reply) override { return Status::OK; }
  Status SetTrunk(ServerContext* context, ServerReader<tr104::VoiceService::Trunk>* request, VoisReply* reply) override { return Status::OK; }

  Status GetCallControl(ServerContext* context, const VoisRequest* request, tr104::VoiceService::CallControl* reply) override { return Status::OK; }
  Status SetCallControl(ServerContext* context, const tr104::VoiceService::CallControl* request, VoisReply* reply) override { return Status::OK; }

  Status GetLine(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::CallControl::Line>* reply) override { return Status::OK; }
  Status SetLine(ServerContext* context, ServerReader<tr104::VoiceService::CallControl::Line>* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetStats(ServerContext* context, const VoisRequest* request, tr104::VoiceService::CallControl::Line::Stats* reply) override { return Status::OK; }
  //?? Status SetStats(ServerContext* context, const tr104::VoiceService::CallControl::Line::Stats* request, VoisReply* reply) override { return Status::OK; }

  Status GetIncomingCalls(ServerContext* context, const VoisRequest* request, tr104::VoiceService::CallControl::Line::Stats::IncomingCalls* reply) override { return Status::OK; }
  Status SetIncomingCalls(ServerContext* context, const tr104::VoiceService::CallControl::Line::Stats::IncomingCalls* request, VoisReply* reply) override { return Status::OK; }

  Status GetOutgoingCalls(ServerContext* context, const VoisRequest* request, tr104::VoiceService::CallControl::Line::Stats::OutgoingCalls* reply) override { return Status::OK; }
  Status SetOutgoingCalls(ServerContext* context, const tr104::VoiceService::CallControl::Line::Stats::OutgoingCalls* request, VoisReply* reply) override { return Status::OK; }

  Status GetRTP(ServerContext* context, const VoisRequest* request, tr104::VoiceService::CallControl::Line::Stats::RTP* reply) override { return Status::OK; }
  Status SetRTP(ServerContext* context, const tr104::VoiceService::CallControl::Line::Stats::RTP* request, VoisReply* reply) override { return Status::OK; }

  Status GetDSP(ServerContext* context, const VoisRequest* request, tr104::VoiceService::CallControl::Line::Stats::DSP* reply) override { return Status::OK; }
  Status SetDSP(ServerContext* context, const tr104::VoiceService::CallControl::Line::Stats::DSP* request, VoisReply* reply) override { return Status::OK; }

  Status GetExtension(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::CallControl::Extension>* reply) override { return Status::OK; }
  Status SetExtension(ServerContext* context, ServerReader<tr104::VoiceService::CallControl::Extension>* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetStats(ServerContext* context, const VoisRequest* request, tr104::VoiceService::CallControl::Extension::Stats* reply) override { return Status::OK; }
  //?? Status SetStats(ServerContext* context, const tr104::VoiceService::CallControl::Extension::Stats* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetIncomingCalls(ServerContext* context, const VoisRequest* request, tr104::VoiceService::CallControl::Extension::Stats::IncomingCalls* reply) override { return Status::OK; }
  //?? Status SetIncomingCalls(ServerContext* context, const tr104::VoiceService::CallControl::Extension::Stats::IncomingCalls* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetOutgoingCalls(ServerContext* context, const VoisRequest* request, tr104::VoiceService::CallControl::Extension::Stats::OutgoingCalls* reply) override { return Status::OK; }
  //?? Status SetOutgoingCalls(ServerContext* context, const tr104::VoiceService::CallControl::Extension::Stats::OutgoingCalls* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetRTP(ServerContext* context, const VoisRequest* request, tr104::VoiceService::CallControl::Extension::Stats::RTP* reply) override { return Status::OK; }
  //?? Status SetRTP(ServerContext* context, const tr104::VoiceService::CallControl::Extension::Stats::RTP* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetDSP(ServerContext* context, const VoisRequest* request, tr104::VoiceService::CallControl::Extension::Stats::DSP* reply) override { return Status::OK; }
  //?? Status SetDSP(ServerContext* context, const tr104::VoiceService::CallControl::Extension::Stats::DSP* request, VoisReply* reply) override { return Status::OK; }

  Status GetGroup(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::CallControl::Group>* reply) override { return Status::OK; }
  Status SetGroup(ServerContext* context, ServerReader<tr104::VoiceService::CallControl::Group>* request, VoisReply* reply) override { return Status::OK; }

  Status GetMailbox(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::CallControl::Mailbox>* reply) override { return Status::OK; }
  Status SetMailbox(ServerContext* context, ServerReader<tr104::VoiceService::CallControl::Mailbox>* request, VoisReply* reply) override { return Status::OK; }

  Status GetIncomingMap(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::CallControl::IncomingMap>* reply) override { return Status::OK; }
  Status SetIncomingMap(ServerContext* context, ServerReader<tr104::VoiceService::CallControl::IncomingMap>* request, VoisReply* reply) override { return Status::OK; }

  Status GetOutgoingMap(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::CallControl::OutgoingMap>* reply) override { return Status::OK; }
  Status SetOutgoingMap(ServerContext* context, ServerReader<tr104::VoiceService::CallControl::OutgoingMap>* request, VoisReply* reply) override { return Status::OK; }

  Status GetNumberingPlan(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::CallControl::NumberingPlan>* reply) override { return Status::OK; }
  Status SetNumberingPlan(ServerContext* context, ServerReader<tr104::VoiceService::CallControl::NumberingPlan>* request, VoisReply* reply) override { return Status::OK; }

  Status GetPrefixInfo(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::CallControl::NumberingPlan::PrefixInfo>* reply) override { return Status::OK; }
  Status SetPrefixInfo(ServerContext* context, ServerReader<tr104::VoiceService::CallControl::NumberingPlan::PrefixInfo>* request, VoisReply* reply) override { return Status::OK; }

  Status GetCallingFeatures(ServerContext* context, const VoisRequest* request, tr104::VoiceService::CallControl::CallingFeatures* reply) override { return Status::OK; }
  Status SetCallingFeatures(ServerContext* context, const tr104::VoiceService::CallControl::CallingFeatures* request, VoisReply* reply) override { return Status::OK; }

  Status GetSet(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::CallControl::CallingFeatures::Set>* reply) override { return Status::OK; }
  Status SetSet(ServerContext* context, ServerReader<tr104::VoiceService::CallControl::CallingFeatures::Set>* request, VoisReply* reply) override { return Status::OK; }

  Status GetCFT(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::CallControl::CallingFeatures::Set::CFT>* reply) override { return Status::OK; }
  Status SetCFT(ServerContext* context, ServerReader<tr104::VoiceService::CallControl::CallingFeatures::Set::CFT>* request, VoisReply* reply) override { return Status::OK; }

  Status GetSCF(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::CallControl::CallingFeatures::Set::SCF>* reply) override { return Status::OK; }
  Status SetSCF(ServerContext* context, ServerReader<tr104::VoiceService::CallControl::CallingFeatures::Set::SCF>* request, VoisReply* reply) override { return Status::OK; }

  Status GetSCREJ(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::CallControl::CallingFeatures::Set::SCREJ>* reply) override { return Status::OK; }
  Status SetSCREJ(ServerContext* context, ServerReader<tr104::VoiceService::CallControl::CallingFeatures::Set::SCREJ>* request, VoisReply* reply) override { return Status::OK; }

  Status GetFollowMe(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::CallControl::CallingFeatures::Set::FollowMe>* reply) override { return Status::OK; }
  Status SetFollowMe(ServerContext* context, ServerReader<tr104::VoiceService::CallControl::CallingFeatures::Set::FollowMe>* request, VoisReply* reply) override { return Status::OK; }

  Status GetVoice2Mail(ServerContext* context, const VoisRequest* request, tr104::VoiceService::CallControl::CallingFeatures::Set::Voice2Mail* reply) override { return Status::OK; }
  Status SetVoice2Mail(ServerContext* context, const tr104::VoiceService::CallControl::CallingFeatures::Set::Voice2Mail* request, VoisReply* reply) override { return Status::OK; }

  Status GetInterwork(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::Interwork>* reply) override { return Status::OK; }
  Status SetInterwork(ServerContext* context, ServerReader<tr104::VoiceService::Interwork>* request, VoisReply* reply) override { return Status::OK; }

  Status GetUserInterface(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::Interwork::UserInterface>* reply) override { return Status::OK; }
  Status SetUserInterface(ServerContext* context, ServerReader<tr104::VoiceService::Interwork::UserInterface>* request, VoisReply* reply) override { return Status::OK; }

  Status GetMap(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::Interwork::Map>* reply) override { return Status::OK; }
  Status SetMap(ServerContext* context, ServerReader<tr104::VoiceService::Interwork::Map>* request, VoisReply* reply) override { return Status::OK; }

  Status GetCallLog(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::CallLog>* reply) override { return Status::OK; }
  Status SetCallLog(ServerContext* context, ServerReader<tr104::VoiceService::CallLog>* request, VoisReply* reply) override { return Status::OK; }

  Status GetSignalingPerformance(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::CallLog::SignalingPerformance>* reply) override { return Status::OK; }
  Status SetSignalingPerformance(ServerContext* context, ServerReader<tr104::VoiceService::CallLog::SignalingPerformance>* request, VoisReply* reply) override { return Status::OK; }

  Status GetSession(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::CallLog::Session>* reply) override { return Status::OK; }
  Status SetSession(ServerContext* context, ServerReader<tr104::VoiceService::CallLog::Session>* request, VoisReply* reply) override { return Status::OK; }

  Status GetSource(ServerContext* context, const VoisRequest* request, tr104::VoiceService::CallLog::Session::Source* reply) override { return Status::OK; }
  Status SetSource(ServerContext* context, const tr104::VoiceService::CallLog::Session::Source* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetRTP(ServerContext* context, const VoisRequest* request, tr104::VoiceService::CallLog::Session::Source::RTP* reply) override { return Status::OK; }
  //?? Status SetRTP(ServerContext* context, const tr104::VoiceService::CallLog::Session::Source::RTP* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetDSP(ServerContext* context, const VoisRequest* request, tr104::VoiceService::CallLog::Session::Source::DSP* reply) override { return Status::OK; }
  //?? Status SetDSP(ServerContext* context, const tr104::VoiceService::CallLog::Session::Source::DSP* request, VoisReply* reply) override { return Status::OK; }

  Status GetReceiveCodec(ServerContext* context, const VoisRequest* request, tr104::VoiceService::CallLog::Session::Source::DSP::ReceiveCodec* reply) override { return Status::OK; }
  Status SetReceiveCodec(ServerContext* context, const tr104::VoiceService::CallLog::Session::Source::DSP::ReceiveCodec* request, VoisReply* reply) override { return Status::OK; }

  Status GetTransmitCodec(ServerContext* context, const VoisRequest* request, tr104::VoiceService::CallLog::Session::Source::DSP::TransmitCodec* reply) override { return Status::OK; }
  Status SetTransmitCodec(ServerContext* context, const tr104::VoiceService::CallLog::Session::Source::DSP::TransmitCodec* request, VoisReply* reply) override { return Status::OK; }

  Status GetVoiceQuality(ServerContext* context, const VoisRequest* request, tr104::VoiceService::CallLog::Session::Source::VoiceQuality* reply) override { return Status::OK; }
  Status SetVoiceQuality(ServerContext* context, const tr104::VoiceService::CallLog::Session::Source::VoiceQuality* request, VoisReply* reply) override { return Status::OK; }

  Status GetDestination(ServerContext* context, const VoisRequest* request, tr104::VoiceService::CallLog::Session::Destination* reply) override { return Status::OK; }
  Status SetDestination(ServerContext* context, const tr104::VoiceService::CallLog::Session::Destination* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetRTP(ServerContext* context, const VoisRequest* request, tr104::VoiceService::CallLog::Session::Destination::RTP* reply) override { return Status::OK; }
  //?? Status SetRTP(ServerContext* context, const tr104::VoiceService::CallLog::Session::Destination::RTP* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetDSP(ServerContext* context, const VoisRequest* request, tr104::VoiceService::CallLog::Session::Destination::DSP* reply) override { return Status::OK; }
  //?? Status SetDSP(ServerContext* context, const tr104::VoiceService::CallLog::Session::Destination::DSP* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetReceiveCodec(ServerContext* context, const VoisRequest* request, tr104::VoiceService::CallLog::Session::Destination::DSP::ReceiveCodec* reply) override { return Status::OK; }
  //?? Status SetReceiveCodec(ServerContext* context, const tr104::VoiceService::CallLog::Session::Destination::DSP::ReceiveCodec* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetTransmitCodec(ServerContext* context, const VoisRequest* request, tr104::VoiceService::CallLog::Session::Destination::DSP::TransmitCodec* reply) override { return Status::OK; }
  //?? Status SetTransmitCodec(ServerContext* context, const tr104::VoiceService::CallLog::Session::Destination::DSP::TransmitCodec* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetVoiceQuality(ServerContext* context, const VoisRequest* request, tr104::VoiceService::CallLog::Session::Destination::VoiceQuality* reply) override { return Status::OK; }
  //?? Status SetVoiceQuality(ServerContext* context, const tr104::VoiceService::CallLog::Session::Destination::VoiceQuality* request, VoisReply* reply) override { return Status::OK; }

  Status GetVoIPProfile(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::VoIPProfile>* reply) override { return Status::OK; }
  Status SetVoIPProfile(ServerContext* context, ServerReader<tr104::VoiceService::VoIPProfile>* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetRTP(ServerContext* context, const VoisRequest* request, tr104::VoiceService::VoIPProfile::RTP* reply) override { return Status::OK; }
  //?? Status SetRTP(ServerContext* context, const tr104::VoiceService::VoIPProfile::RTP* request, VoisReply* reply) override { return Status::OK; }

  Status GetRTCP(ServerContext* context, const VoisRequest* request, tr104::VoiceService::VoIPProfile::RTP::RTCP* reply) override { return Status::OK; }
  Status SetRTCP(ServerContext* context, const tr104::VoiceService::VoIPProfile::RTP::RTCP* request, VoisReply* reply) override { return Status::OK; }

  Status GetSRTP(ServerContext* context, const VoisRequest* request, tr104::VoiceService::VoIPProfile::RTP::SRTP* reply) override { return Status::OK; }
  Status SetSRTP(ServerContext* context, const tr104::VoiceService::VoIPProfile::RTP::SRTP* request, VoisReply* reply) override { return Status::OK; }

  Status GetRedundancy(ServerContext* context, const VoisRequest* request, tr104::VoiceService::VoIPProfile::RTP::Redundancy* reply) override { return Status::OK; }
  Status SetRedundancy(ServerContext* context, const tr104::VoiceService::VoIPProfile::RTP::Redundancy* request, VoisReply* reply) override { return Status::OK; }

  Status GetFaxT38(ServerContext* context, const VoisRequest* request, tr104::VoiceService::VoIPProfile::FaxT38* reply) override { return Status::OK; }
  Status SetFaxT38(ServerContext* context, const tr104::VoiceService::VoIPProfile::FaxT38* request, VoisReply* reply) override { return Status::OK; }

  Status GetCodecProfile(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::CodecProfile>* reply) override { return Status::OK; }
  Status SetCodecProfile(ServerContext* context, ServerReader<tr104::VoiceService::CodecProfile>* request, VoisReply* reply) override { return Status::OK; }

  Status GetTone(ServerContext* context, const VoisRequest* request, tr104::VoiceService::Tone* reply) override { return Status::OK; }
  Status SetTone(ServerContext* context, const tr104::VoiceService::Tone* request, VoisReply* reply) override { return Status::OK; }

  Status GetDescription(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::Tone::Description>* reply) override { return Status::OK; }
  Status SetDescription(ServerContext* context, ServerReader<tr104::VoiceService::Tone::Description>* request, VoisReply* reply) override { return Status::OK; }

  Status GetPattern(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::Tone::Pattern>* reply) override { return Status::OK; }
  Status SetPattern(ServerContext* context, ServerReader<tr104::VoiceService::Tone::Pattern>* request, VoisReply* reply) override { return Status::OK; }

  Status GetEventProfile(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::Tone::EventProfile>* reply) override { return Status::OK; }
  Status SetEventProfile(ServerContext* context, ServerReader<tr104::VoiceService::Tone::EventProfile>* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetEvent(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::Tone::EventProfile::Event>* reply) override { return Status::OK; }
  //?? Status SetEvent(ServerContext* context, ServerReader<tr104::VoiceService::Tone::EventProfile::Event>* request, VoisReply* reply) override { return Status::OK; }

  Status GetTerminal(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::Terminal>* reply) override { return Status::OK; }
  Status SetTerminal(ServerContext* context, ServerReader<tr104::VoiceService::Terminal>* request, VoisReply* reply) override { return Status::OK; }

  Status GetAudio(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::Terminal::Audio>* reply) override { return Status::OK; }
  Status SetAudio(ServerContext* context, ServerReader<tr104::VoiceService::Terminal::Audio>* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetVoiceProcessing(ServerContext* context, const VoisRequest* request, tr104::VoiceService::Terminal::Audio::VoiceProcessing* reply) override { return Status::OK; }
  //?? Status SetVoiceProcessing(ServerContext* context, const tr104::VoiceService::Terminal::Audio::VoiceProcessing* request, VoisReply* reply) override { return Status::OK; }

  Status GetButtonMap(ServerContext* context, const VoisRequest* request, tr104::VoiceService::Terminal::ButtonMap* reply) override { return Status::OK; }
  Status SetButtonMap(ServerContext* context, const tr104::VoiceService::Terminal::ButtonMap* request, VoisReply* reply) override { return Status::OK; }

  Status GetButton(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::Terminal::ButtonMap::Button>* reply) override { return Status::OK; }
  Status SetButton(ServerContext* context, ServerReader<tr104::VoiceService::Terminal::ButtonMap::Button>* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetRinger(ServerContext* context, const VoisRequest* request, tr104::VoiceService::Terminal::Ringer* reply) override { return Status::OK; }
  //?? Status SetRinger(ServerContext* context, const tr104::VoiceService::Terminal::Ringer* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetDescription(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::Terminal::Ringer::Description>* reply) override { return Status::OK; }
  //?? Status SetDescription(ServerContext* context, ServerReader<tr104::VoiceService::Terminal::Ringer::Description>* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetPattern(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::Terminal::Ringer::Pattern>* reply) override { return Status::OK; }
  //?? Status SetPattern(ServerContext* context, ServerReader<tr104::VoiceService::Terminal::Ringer::Pattern>* request, VoisReply* reply) override { return Status::OK; }

  //?? Status GetDiagTests(ServerContext* context, const VoisRequest* request, tr104::VoiceService::Terminal::DiagTests* reply) override { return Status::OK; }
  //?? Status SetDiagTests(ServerContext* context, const tr104::VoiceService::Terminal::DiagTests* request, VoisReply* reply) override { return Status::OK; }

  Status GetClockSynchronization(ServerContext* context, const VoisRequest* request, tr104::VoiceService::ClockSynchronization* reply) override { return Status::OK; }
  Status SetClockSynchronization(ServerContext* context, const tr104::VoiceService::ClockSynchronization* request, VoisReply* reply) override { return Status::OK; }

  Status GetClockSource(ServerContext* context, const VoisRequest* request, ServerWriter<tr104::VoiceService::ClockSynchronization::ClockSource>* reply) override { return Status::OK; }
  Status SetClockSource(ServerContext* context, ServerReader<tr104::VoiceService::ClockSynchronization::ClockSource>* request, VoisReply* reply) override { return Status::OK; }

