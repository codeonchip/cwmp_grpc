// Generated by cwmp_proto_to_grpc.cc
// source: tr-135-1-4-0-full.proto
// Use this file to implement gRPC server's service methods.

  Status GetSTBService(ServerContext* context, const BoxRequest* request, tr135::STBService* reply) override { return Status::OK; }
  Status SetSTBService(ServerContext* context, const tr135::STBService* request, BoxReply* reply) override { return Status::OK; }

  Status GetCapabilities(ServerContext* context, const BoxRequest* request, tr135::STBService::Capabilities* reply) override { return Status::OK; }
  Status SetCapabilities(ServerContext* context, const tr135::STBService::Capabilities* request, BoxReply* reply) override { return Status::OK; }

  Status GetFrontEnd(ServerContext* context, const BoxRequest* request, tr135::STBService::Capabilities::FrontEnd* reply) override { return Status::OK; }
  Status SetFrontEnd(ServerContext* context, const tr135::STBService::Capabilities::FrontEnd* request, BoxReply* reply) override { return Status::OK; }

  Status GetDVBT(ServerContext* context, const BoxRequest* request, tr135::STBService::Capabilities::FrontEnd::DVBT* reply) override { return Status::OK; }
  Status SetDVBT(ServerContext* context, const tr135::STBService::Capabilities::FrontEnd::DVBT* request, BoxReply* reply) override { return Status::OK; }

  Status GetIP(ServerContext* context, const BoxRequest* request, tr135::STBService::Capabilities::FrontEnd::IP* reply) override { return Status::OK; }
  Status SetIP(ServerContext* context, const tr135::STBService::Capabilities::FrontEnd::IP* request, BoxReply* reply) override { return Status::OK; }

  Status GetPVR(ServerContext* context, const BoxRequest* request, tr135::STBService::Capabilities::PVR* reply) override { return Status::OK; }
  Status SetPVR(ServerContext* context, const tr135::STBService::Capabilities::PVR* request, BoxReply* reply) override { return Status::OK; }

  Status GetAudioDecoder(ServerContext* context, const BoxRequest* request, tr135::STBService::Capabilities::AudioDecoder* reply) override { return Status::OK; }
  Status SetAudioDecoder(ServerContext* context, const tr135::STBService::Capabilities::AudioDecoder* request, BoxReply* reply) override { return Status::OK; }

  Status GetVideoDecoder(ServerContext* context, const BoxRequest* request, tr135::STBService::Capabilities::VideoDecoder* reply) override { return Status::OK; }
  Status SetVideoDecoder(ServerContext* context, const tr135::STBService::Capabilities::VideoDecoder* request, BoxReply* reply) override { return Status::OK; }

  Status GetMPEG2Part2(ServerContext* context, const BoxRequest* request, tr135::STBService::Capabilities::VideoDecoder::MPEG2Part2* reply) override { return Status::OK; }
  Status SetMPEG2Part2(ServerContext* context, const tr135::STBService::Capabilities::VideoDecoder::MPEG2Part2* request, BoxReply* reply) override { return Status::OK; }

  Status GetProfileLevel(ServerContext* context, const BoxRequest* request, ServerWriter<tr135::STBService::Capabilities::VideoDecoder::MPEG2Part2::ProfileLevel>* reply) override { return Status::OK; }
  Status SetProfileLevel(ServerContext* context, ServerReader<tr135::STBService::Capabilities::VideoDecoder::MPEG2Part2::ProfileLevel>* request, BoxReply* reply) override { return Status::OK; }

  Status GetMPEG4Part2(ServerContext* context, const BoxRequest* request, tr135::STBService::Capabilities::VideoDecoder::MPEG4Part2* reply) override { return Status::OK; }
  Status SetMPEG4Part2(ServerContext* context, const tr135::STBService::Capabilities::VideoDecoder::MPEG4Part2* request, BoxReply* reply) override { return Status::OK; }

  //?? Status GetProfileLevel(ServerContext* context, const BoxRequest* request, ServerWriter<tr135::STBService::Capabilities::VideoDecoder::MPEG4Part2::ProfileLevel>* reply) override { return Status::OK; }
  //?? Status SetProfileLevel(ServerContext* context, ServerReader<tr135::STBService::Capabilities::VideoDecoder::MPEG4Part2::ProfileLevel>* request, BoxReply* reply) override { return Status::OK; }

  Status GetMPEG4Part10(ServerContext* context, const BoxRequest* request, tr135::STBService::Capabilities::VideoDecoder::MPEG4Part10* reply) override { return Status::OK; }
  Status SetMPEG4Part10(ServerContext* context, const tr135::STBService::Capabilities::VideoDecoder::MPEG4Part10* request, BoxReply* reply) override { return Status::OK; }

  //?? Status GetProfileLevel(ServerContext* context, const BoxRequest* request, ServerWriter<tr135::STBService::Capabilities::VideoDecoder::MPEG4Part10::ProfileLevel>* reply) override { return Status::OK; }
  //?? Status SetProfileLevel(ServerContext* context, ServerReader<tr135::STBService::Capabilities::VideoDecoder::MPEG4Part10::ProfileLevel>* request, BoxReply* reply) override { return Status::OK; }

  Status GetSMPTEVC1(ServerContext* context, const BoxRequest* request, tr135::STBService::Capabilities::VideoDecoder::SMPTEVC1* reply) override { return Status::OK; }
  Status SetSMPTEVC1(ServerContext* context, const tr135::STBService::Capabilities::VideoDecoder::SMPTEVC1* request, BoxReply* reply) override { return Status::OK; }

  //?? Status GetProfileLevel(ServerContext* context, const BoxRequest* request, ServerWriter<tr135::STBService::Capabilities::VideoDecoder::SMPTEVC1::ProfileLevel>* reply) override { return Status::OK; }
  //?? Status SetProfileLevel(ServerContext* context, ServerReader<tr135::STBService::Capabilities::VideoDecoder::SMPTEVC1::ProfileLevel>* request, BoxReply* reply) override { return Status::OK; }

  Status GetAudioOutput(ServerContext* context, const BoxRequest* request, tr135::STBService::Capabilities::AudioOutput* reply) override { return Status::OK; }
  Status SetAudioOutput(ServerContext* context, const tr135::STBService::Capabilities::AudioOutput* request, BoxReply* reply) override { return Status::OK; }

  Status GetVideoOutput(ServerContext* context, const BoxRequest* request, tr135::STBService::Capabilities::VideoOutput* reply) override { return Status::OK; }
  Status SetVideoOutput(ServerContext* context, const tr135::STBService::Capabilities::VideoOutput* request, BoxReply* reply) override { return Status::OK; }

  Status GetHDMI(ServerContext* context, const BoxRequest* request, tr135::STBService::Capabilities::HDMI* reply) override { return Status::OK; }
  Status SetHDMI(ServerContext* context, const tr135::STBService::Capabilities::HDMI* request, BoxReply* reply) override { return Status::OK; }

  Status GetCDS(ServerContext* context, const BoxRequest* request, tr135::STBService::Capabilities::CDS* reply) override { return Status::OK; }
  Status SetCDS(ServerContext* context, const tr135::STBService::Capabilities::CDS* request, BoxReply* reply) override { return Status::OK; }

  Status GetCA(ServerContext* context, const BoxRequest* request, tr135::STBService::Capabilities::CA* reply) override { return Status::OK; }
  Status SetCA(ServerContext* context, const tr135::STBService::Capabilities::CA* request, BoxReply* reply) override { return Status::OK; }

  Status GetDRM(ServerContext* context, const BoxRequest* request, tr135::STBService::Capabilities::DRM* reply) override { return Status::OK; }
  Status SetDRM(ServerContext* context, const tr135::STBService::Capabilities::DRM* request, BoxReply* reply) override { return Status::OK; }

  Status GetServiceMonitoring(ServerContext* context, const BoxRequest* request, tr135::STBService::Capabilities::ServiceMonitoring* reply) override { return Status::OK; }
  Status SetServiceMonitoring(ServerContext* context, const tr135::STBService::Capabilities::ServiceMonitoring* request, BoxReply* reply) override { return Status::OK; }

  Status GetAudienceStats(ServerContext* context, const BoxRequest* request, tr135::STBService::Capabilities::AudienceStats* reply) override { return Status::OK; }
  Status SetAudienceStats(ServerContext* context, const tr135::STBService::Capabilities::AudienceStats* request, BoxReply* reply) override { return Status::OK; }

  Status GetComponents(ServerContext* context, const BoxRequest* request, tr135::STBService::Components* reply) override { return Status::OK; }
  Status SetComponents(ServerContext* context, const tr135::STBService::Components* request, BoxReply* reply) override { return Status::OK; }

  //?? Status GetFrontEnd(ServerContext* context, const BoxRequest* request, ServerWriter<tr135::STBService::Components::FrontEnd>* reply) override { return Status::OK; }
  //?? Status SetFrontEnd(ServerContext* context, ServerReader<tr135::STBService::Components::FrontEnd>* request, BoxReply* reply) override { return Status::OK; }

  //?? Status GetDVBT(ServerContext* context, const BoxRequest* request, tr135::STBService::Components::FrontEnd::DVBT* reply) override { return Status::OK; }
  //?? Status SetDVBT(ServerContext* context, const tr135::STBService::Components::FrontEnd::DVBT* request, BoxReply* reply) override { return Status::OK; }

  Status GetModulation(ServerContext* context, const BoxRequest* request, tr135::STBService::Components::FrontEnd::DVBT::Modulation* reply) override { return Status::OK; }
  Status SetModulation(ServerContext* context, const tr135::STBService::Components::FrontEnd::DVBT::Modulation* request, BoxReply* reply) override { return Status::OK; }

  Status GetService(ServerContext* context, const BoxRequest* request, tr135::STBService::Components::FrontEnd::DVBT::Service* reply) override { return Status::OK; }
  Status SetService(ServerContext* context, const tr135::STBService::Components::FrontEnd::DVBT::Service* request, BoxReply* reply) override { return Status::OK; }

  Status GetInstall(ServerContext* context, const BoxRequest* request, tr135::STBService::Components::FrontEnd::DVBT::Install* reply) override { return Status::OK; }
  Status SetInstall(ServerContext* context, const tr135::STBService::Components::FrontEnd::DVBT::Install* request, BoxReply* reply) override { return Status::OK; }

  Status GetServiceListDatabase(ServerContext* context, const BoxRequest* request, tr135::STBService::Components::FrontEnd::DVBT::ServiceListDatabase* reply) override { return Status::OK; }
  Status SetServiceListDatabase(ServerContext* context, const tr135::STBService::Components::FrontEnd::DVBT::ServiceListDatabase* request, BoxReply* reply) override { return Status::OK; }

  Status GetLogicalChannel(ServerContext* context, const BoxRequest* request, ServerWriter<tr135::STBService::Components::FrontEnd::DVBT::ServiceListDatabase::LogicalChannel>* reply) override { return Status::OK; }
  Status SetLogicalChannel(ServerContext* context, ServerReader<tr135::STBService::Components::FrontEnd::DVBT::ServiceListDatabase::LogicalChannel>* request, BoxReply* reply) override { return Status::OK; }

  //?? Status GetService(ServerContext* context, const BoxRequest* request, ServerWriter<tr135::STBService::Components::FrontEnd::DVBT::ServiceListDatabase::LogicalChannel::Service>* reply) override { return Status::OK; }
  //?? Status SetService(ServerContext* context, ServerReader<tr135::STBService::Components::FrontEnd::DVBT::ServiceListDatabase::LogicalChannel::Service>* request, BoxReply* reply) override { return Status::OK; }

  Status GetLogicalChannelConnect(ServerContext* context, const BoxRequest* request, tr135::STBService::Components::FrontEnd::DVBT::LogicalChannelConnect* reply) override { return Status::OK; }
  Status SetLogicalChannelConnect(ServerContext* context, const tr135::STBService::Components::FrontEnd::DVBT::LogicalChannelConnect* request, BoxReply* reply) override { return Status::OK; }

  Status GetServiceConnect(ServerContext* context, const BoxRequest* request, tr135::STBService::Components::FrontEnd::DVBT::ServiceConnect* reply) override { return Status::OK; }
  Status SetServiceConnect(ServerContext* context, const tr135::STBService::Components::FrontEnd::DVBT::ServiceConnect* request, BoxReply* reply) override { return Status::OK; }

  //?? Status GetIP(ServerContext* context, const BoxRequest* request, tr135::STBService::Components::FrontEnd::IP* reply) override { return Status::OK; }
  //?? Status SetIP(ServerContext* context, const tr135::STBService::Components::FrontEnd::IP* request, BoxReply* reply) override { return Status::OK; }

  Status GetRTCP(ServerContext* context, const BoxRequest* request, tr135::STBService::Components::FrontEnd::IP::RTCP* reply) override { return Status::OK; }
  Status SetRTCP(ServerContext* context, const tr135::STBService::Components::FrontEnd::IP::RTCP* request, BoxReply* reply) override { return Status::OK; }

  Status GetRTPAVPF(ServerContext* context, const BoxRequest* request, tr135::STBService::Components::FrontEnd::IP::RTPAVPF* reply) override { return Status::OK; }
  Status SetRTPAVPF(ServerContext* context, const tr135::STBService::Components::FrontEnd::IP::RTPAVPF* request, BoxReply* reply) override { return Status::OK; }

  Status GetFEC(ServerContext* context, const BoxRequest* request, tr135::STBService::Components::FrontEnd::IP::FEC* reply) override { return Status::OK; }
  Status SetFEC(ServerContext* context, const tr135::STBService::Components::FrontEnd::IP::FEC* request, BoxReply* reply) override { return Status::OK; }

  Status GetIGMP(ServerContext* context, const BoxRequest* request, tr135::STBService::Components::FrontEnd::IP::IGMP* reply) override { return Status::OK; }
  Status SetIGMP(ServerContext* context, const tr135::STBService::Components::FrontEnd::IP::IGMP* request, BoxReply* reply) override { return Status::OK; }

  Status GetClientGroup(ServerContext* context, const BoxRequest* request, ServerWriter<tr135::STBService::Components::FrontEnd::IP::IGMP::ClientGroup>* reply) override { return Status::OK; }
  Status SetClientGroup(ServerContext* context, ServerReader<tr135::STBService::Components::FrontEnd::IP::IGMP::ClientGroup>* request, BoxReply* reply) override { return Status::OK; }

  Status GetClientGroupStats(ServerContext* context, const BoxRequest* request, ServerWriter<tr135::STBService::Components::FrontEnd::IP::IGMP::ClientGroupStats>* reply) override { return Status::OK; }
  Status SetClientGroupStats(ServerContext* context, ServerReader<tr135::STBService::Components::FrontEnd::IP::IGMP::ClientGroupStats>* request, BoxReply* reply) override { return Status::OK; }

  Status GetTotal(ServerContext* context, const BoxRequest* request, tr135::STBService::Components::FrontEnd::IP::IGMP::ClientGroupStats::Total* reply) override { return Status::OK; }
  Status SetTotal(ServerContext* context, const tr135::STBService::Components::FrontEnd::IP::IGMP::ClientGroupStats::Total* request, BoxReply* reply) override { return Status::OK; }

  Status GetCurrentDay(ServerContext* context, const BoxRequest* request, tr135::STBService::Components::FrontEnd::IP::IGMP::ClientGroupStats::CurrentDay* reply) override { return Status::OK; }
  Status SetCurrentDay(ServerContext* context, const tr135::STBService::Components::FrontEnd::IP::IGMP::ClientGroupStats::CurrentDay* request, BoxReply* reply) override { return Status::OK; }

  Status GetQuarterHour(ServerContext* context, const BoxRequest* request, tr135::STBService::Components::FrontEnd::IP::IGMP::ClientGroupStats::QuarterHour* reply) override { return Status::OK; }
  Status SetQuarterHour(ServerContext* context, const tr135::STBService::Components::FrontEnd::IP::IGMP::ClientGroupStats::QuarterHour* request, BoxReply* reply) override { return Status::OK; }

  Status GetDejittering(ServerContext* context, const BoxRequest* request, tr135::STBService::Components::FrontEnd::IP::Dejittering* reply) override { return Status::OK; }
  Status SetDejittering(ServerContext* context, const tr135::STBService::Components::FrontEnd::IP::Dejittering* request, BoxReply* reply) override { return Status::OK; }

  Status GetInbound(ServerContext* context, const BoxRequest* request, ServerWriter<tr135::STBService::Components::FrontEnd::IP::Inbound>* reply) override { return Status::OK; }
  Status SetInbound(ServerContext* context, ServerReader<tr135::STBService::Components::FrontEnd::IP::Inbound>* request, BoxReply* reply) override { return Status::OK; }

  Status GetOutbound(ServerContext* context, const BoxRequest* request, ServerWriter<tr135::STBService::Components::FrontEnd::IP::Outbound>* reply) override { return Status::OK; }
  Status SetOutbound(ServerContext* context, ServerReader<tr135::STBService::Components::FrontEnd::IP::Outbound>* request, BoxReply* reply) override { return Status::OK; }

  //?? Status GetServiceConnect(ServerContext* context, const BoxRequest* request, tr135::STBService::Components::FrontEnd::IP::ServiceConnect* reply) override { return Status::OK; }
  //?? Status SetServiceConnect(ServerContext* context, const tr135::STBService::Components::FrontEnd::IP::ServiceConnect* request, BoxReply* reply) override { return Status::OK; }

  Status GetForceMonitor(ServerContext* context, const BoxRequest* request, tr135::STBService::Components::FrontEnd::IP::ForceMonitor* reply) override { return Status::OK; }
  Status SetForceMonitor(ServerContext* context, const tr135::STBService::Components::FrontEnd::IP::ForceMonitor* request, BoxReply* reply) override { return Status::OK; }

  //?? Status GetPVR(ServerContext* context, const BoxRequest* request, tr135::STBService::Components::PVR* reply) override { return Status::OK; }
  //?? Status SetPVR(ServerContext* context, const tr135::STBService::Components::PVR* request, BoxReply* reply) override { return Status::OK; }

  Status GetStorage(ServerContext* context, const BoxRequest* request, ServerWriter<tr135::STBService::Components::PVR::Storage>* reply) override { return Status::OK; }
  Status SetStorage(ServerContext* context, ServerReader<tr135::STBService::Components::PVR::Storage>* request, BoxReply* reply) override { return Status::OK; }

  //?? Status GetAudioDecoder(ServerContext* context, const BoxRequest* request, ServerWriter<tr135::STBService::Components::AudioDecoder>* reply) override { return Status::OK; }
  //?? Status SetAudioDecoder(ServerContext* context, ServerReader<tr135::STBService::Components::AudioDecoder>* request, BoxReply* reply) override { return Status::OK; }

  //?? Status GetVideoDecoder(ServerContext* context, const BoxRequest* request, ServerWriter<tr135::STBService::Components::VideoDecoder>* reply) override { return Status::OK; }
  //?? Status SetVideoDecoder(ServerContext* context, ServerReader<tr135::STBService::Components::VideoDecoder>* request, BoxReply* reply) override { return Status::OK; }

  //?? Status GetAudioOutput(ServerContext* context, const BoxRequest* request, ServerWriter<tr135::STBService::Components::AudioOutput>* reply) override { return Status::OK; }
  //?? Status SetAudioOutput(ServerContext* context, ServerReader<tr135::STBService::Components::AudioOutput>* request, BoxReply* reply) override { return Status::OK; }

  Status GetSPDIF(ServerContext* context, const BoxRequest* request, ServerWriter<tr135::STBService::Components::SPDIF>* reply) override { return Status::OK; }
  Status SetSPDIF(ServerContext* context, ServerReader<tr135::STBService::Components::SPDIF>* request, BoxReply* reply) override { return Status::OK; }

  //?? Status GetVideoOutput(ServerContext* context, const BoxRequest* request, ServerWriter<tr135::STBService::Components::VideoOutput>* reply) override { return Status::OK; }
  //?? Status SetVideoOutput(ServerContext* context, ServerReader<tr135::STBService::Components::VideoOutput>* request, BoxReply* reply) override { return Status::OK; }

  Status GetSCART(ServerContext* context, const BoxRequest* request, ServerWriter<tr135::STBService::Components::SCART>* reply) override { return Status::OK; }
  Status SetSCART(ServerContext* context, ServerReader<tr135::STBService::Components::SCART>* request, BoxReply* reply) override { return Status::OK; }

  //?? Status GetHDMI(ServerContext* context, const BoxRequest* request, ServerWriter<tr135::STBService::Components::HDMI>* reply) override { return Status::OK; }
  //?? Status SetHDMI(ServerContext* context, ServerReader<tr135::STBService::Components::HDMI>* request, BoxReply* reply) override { return Status::OK; }

  Status GetDisplayDevice(ServerContext* context, const BoxRequest* request, tr135::STBService::Components::HDMI::DisplayDevice* reply) override { return Status::OK; }
  Status SetDisplayDevice(ServerContext* context, const tr135::STBService::Components::HDMI::DisplayDevice* request, BoxReply* reply) override { return Status::OK; }

  //?? Status GetCA(ServerContext* context, const BoxRequest* request, ServerWriter<tr135::STBService::Components::CA>* reply) override { return Status::OK; }
  //?? Status SetCA(ServerContext* context, ServerReader<tr135::STBService::Components::CA>* request, BoxReply* reply) override { return Status::OK; }

  //?? Status GetDRM(ServerContext* context, const BoxRequest* request, ServerWriter<tr135::STBService::Components::DRM>* reply) override { return Status::OK; }
  //?? Status SetDRM(ServerContext* context, ServerReader<tr135::STBService::Components::DRM>* request, BoxReply* reply) override { return Status::OK; }

  Status GetAVStreams(ServerContext* context, const BoxRequest* request, tr135::STBService::AVStreams* reply) override { return Status::OK; }
  Status SetAVStreams(ServerContext* context, const tr135::STBService::AVStreams* request, BoxReply* reply) override { return Status::OK; }

  Status GetAVStream(ServerContext* context, const BoxRequest* request, ServerWriter<tr135::STBService::AVStreams::AVStream>* reply) override { return Status::OK; }
  Status SetAVStream(ServerContext* context, ServerReader<tr135::STBService::AVStreams::AVStream>* request, BoxReply* reply) override { return Status::OK; }

  Status GetAVPlayers(ServerContext* context, const BoxRequest* request, tr135::STBService::AVPlayers* reply) override { return Status::OK; }
  Status SetAVPlayers(ServerContext* context, const tr135::STBService::AVPlayers* request, BoxReply* reply) override { return Status::OK; }

  Status GetAVPlayer(ServerContext* context, const BoxRequest* request, ServerWriter<tr135::STBService::AVPlayers::AVPlayer>* reply) override { return Status::OK; }
  Status SetAVPlayer(ServerContext* context, ServerReader<tr135::STBService::AVPlayers::AVPlayer>* request, BoxReply* reply) override { return Status::OK; }

  //?? Status GetServiceMonitoring(ServerContext* context, const BoxRequest* request, tr135::STBService::ServiceMonitoring* reply) override { return Status::OK; }
  //?? Status SetServiceMonitoring(ServerContext* context, const tr135::STBService::ServiceMonitoring* request, BoxReply* reply) override { return Status::OK; }

  Status GetMainStream(ServerContext* context, const BoxRequest* request, ServerWriter<tr135::STBService::ServiceMonitoring::MainStream>* reply) override { return Status::OK; }
  Status SetMainStream(ServerContext* context, ServerReader<tr135::STBService::ServiceMonitoring::MainStream>* request, BoxReply* reply) override { return Status::OK; }

  //?? Status GetTotal(ServerContext* context, const BoxRequest* request, tr135::STBService::ServiceMonitoring::MainStream::Total* reply) override { return Status::OK; }
  //?? Status SetTotal(ServerContext* context, const tr135::STBService::ServiceMonitoring::MainStream::Total* request, BoxReply* reply) override { return Status::OK; }

  Status GetDejitteringStats(ServerContext* context, const BoxRequest* request, tr135::STBService::ServiceMonitoring::MainStream::Total::DejitteringStats* reply) override { return Status::OK; }
  Status SetDejitteringStats(ServerContext* context, const tr135::STBService::ServiceMonitoring::MainStream::Total::DejitteringStats* request, BoxReply* reply) override { return Status::OK; }

  Status GetTCPStats(ServerContext* context, const BoxRequest* request, tr135::STBService::ServiceMonitoring::MainStream::Total::TCPStats* reply) override { return Status::OK; }
  Status SetTCPStats(ServerContext* context, const tr135::STBService::ServiceMonitoring::MainStream::Total::TCPStats* request, BoxReply* reply) override { return Status::OK; }

  Status GetRTPStats(ServerContext* context, const BoxRequest* request, tr135::STBService::ServiceMonitoring::MainStream::Total::RTPStats* reply) override { return Status::OK; }
  Status SetRTPStats(ServerContext* context, const tr135::STBService::ServiceMonitoring::MainStream::Total::RTPStats* request, BoxReply* reply) override { return Status::OK; }

  Status GetMPEG2TSStats(ServerContext* context, const BoxRequest* request, tr135::STBService::ServiceMonitoring::MainStream::Total::MPEG2TSStats* reply) override { return Status::OK; }
  Status SetMPEG2TSStats(ServerContext* context, const tr135::STBService::ServiceMonitoring::MainStream::Total::MPEG2TSStats* request, BoxReply* reply) override { return Status::OK; }

  Status GetVideoDecoderStats(ServerContext* context, const BoxRequest* request, tr135::STBService::ServiceMonitoring::MainStream::Total::VideoDecoderStats* reply) override { return Status::OK; }
  Status SetVideoDecoderStats(ServerContext* context, const tr135::STBService::ServiceMonitoring::MainStream::Total::VideoDecoderStats* request, BoxReply* reply) override { return Status::OK; }

  Status GetAudioDecoderStats(ServerContext* context, const BoxRequest* request, tr135::STBService::ServiceMonitoring::MainStream::Total::AudioDecoderStats* reply) override { return Status::OK; }
  Status SetAudioDecoderStats(ServerContext* context, const tr135::STBService::ServiceMonitoring::MainStream::Total::AudioDecoderStats* request, BoxReply* reply) override { return Status::OK; }

  Status GetVideoResponseStats(ServerContext* context, const BoxRequest* request, tr135::STBService::ServiceMonitoring::MainStream::Total::VideoResponseStats* reply) override { return Status::OK; }
  Status SetVideoResponseStats(ServerContext* context, const tr135::STBService::ServiceMonitoring::MainStream::Total::VideoResponseStats* request, BoxReply* reply) override { return Status::OK; }

  Status GetSample(ServerContext* context, const BoxRequest* request, tr135::STBService::ServiceMonitoring::MainStream::Sample* reply) override { return Status::OK; }
  Status SetSample(ServerContext* context, const tr135::STBService::ServiceMonitoring::MainStream::Sample* request, BoxReply* reply) override { return Status::OK; }

  //?? Status GetDejitteringStats(ServerContext* context, const BoxRequest* request, tr135::STBService::ServiceMonitoring::MainStream::Sample::DejitteringStats* reply) override { return Status::OK; }
  //?? Status SetDejitteringStats(ServerContext* context, const tr135::STBService::ServiceMonitoring::MainStream::Sample::DejitteringStats* request, BoxReply* reply) override { return Status::OK; }

  //?? Status GetTCPStats(ServerContext* context, const BoxRequest* request, tr135::STBService::ServiceMonitoring::MainStream::Sample::TCPStats* reply) override { return Status::OK; }
  //?? Status SetTCPStats(ServerContext* context, const tr135::STBService::ServiceMonitoring::MainStream::Sample::TCPStats* request, BoxReply* reply) override { return Status::OK; }

  //?? Status GetRTPStats(ServerContext* context, const BoxRequest* request, tr135::STBService::ServiceMonitoring::MainStream::Sample::RTPStats* reply) override { return Status::OK; }
  //?? Status SetRTPStats(ServerContext* context, const tr135::STBService::ServiceMonitoring::MainStream::Sample::RTPStats* request, BoxReply* reply) override { return Status::OK; }

  //?? Status GetMPEG2TSStats(ServerContext* context, const BoxRequest* request, tr135::STBService::ServiceMonitoring::MainStream::Sample::MPEG2TSStats* reply) override { return Status::OK; }
  //?? Status SetMPEG2TSStats(ServerContext* context, const tr135::STBService::ServiceMonitoring::MainStream::Sample::MPEG2TSStats* request, BoxReply* reply) override { return Status::OK; }

  //?? Status GetVideoDecoderStats(ServerContext* context, const BoxRequest* request, tr135::STBService::ServiceMonitoring::MainStream::Sample::VideoDecoderStats* reply) override { return Status::OK; }
  //?? Status SetVideoDecoderStats(ServerContext* context, const tr135::STBService::ServiceMonitoring::MainStream::Sample::VideoDecoderStats* request, BoxReply* reply) override { return Status::OK; }

  //?? Status GetAudioDecoderStats(ServerContext* context, const BoxRequest* request, tr135::STBService::ServiceMonitoring::MainStream::Sample::AudioDecoderStats* reply) override { return Status::OK; }
  //?? Status SetAudioDecoderStats(ServerContext* context, const tr135::STBService::ServiceMonitoring::MainStream::Sample::AudioDecoderStats* request, BoxReply* reply) override { return Status::OK; }

  //?? Status GetVideoResponseStats(ServerContext* context, const BoxRequest* request, tr135::STBService::ServiceMonitoring::MainStream::Sample::VideoResponseStats* reply) override { return Status::OK; }
  //?? Status SetVideoResponseStats(ServerContext* context, const tr135::STBService::ServiceMonitoring::MainStream::Sample::VideoResponseStats* request, BoxReply* reply) override { return Status::OK; }

  Status GetHighLevelMetricStats(ServerContext* context, const BoxRequest* request, ServerWriter<tr135::STBService::ServiceMonitoring::MainStream::Sample::HighLevelMetricStats>* reply) override { return Status::OK; }
  Status SetHighLevelMetricStats(ServerContext* context, ServerReader<tr135::STBService::ServiceMonitoring::MainStream::Sample::HighLevelMetricStats>* request, BoxReply* reply) override { return Status::OK; }

  Status GetEventLog(ServerContext* context, const BoxRequest* request, tr135::STBService::ServiceMonitoring::MainStream::EventLog* reply) override { return Status::OK; }
  Status SetEventLog(ServerContext* context, const tr135::STBService::ServiceMonitoring::MainStream::EventLog* request, BoxReply* reply) override { return Status::OK; }

  Status GetEntry(ServerContext* context, const BoxRequest* request, ServerWriter<tr135::STBService::ServiceMonitoring::MainStream::EventLog::Entry>* reply) override { return Status::OK; }
  Status SetEntry(ServerContext* context, ServerReader<tr135::STBService::ServiceMonitoring::MainStream::EventLog::Entry>* request, BoxReply* reply) override { return Status::OK; }

  Status GetParameter(ServerContext* context, const BoxRequest* request, ServerWriter<tr135::STBService::ServiceMonitoring::MainStream::EventLog::Entry::Parameter>* reply) override { return Status::OK; }
  Status SetParameter(ServerContext* context, ServerReader<tr135::STBService::ServiceMonitoring::MainStream::EventLog::Entry::Parameter>* request, BoxReply* reply) override { return Status::OK; }

  Status GetGlobalOperation(ServerContext* context, const BoxRequest* request, tr135::STBService::ServiceMonitoring::GlobalOperation* reply) override { return Status::OK; }
  Status SetGlobalOperation(ServerContext* context, const tr135::STBService::ServiceMonitoring::GlobalOperation* request, BoxReply* reply) override { return Status::OK; }

  //?? Status GetTotal(ServerContext* context, const BoxRequest* request, tr135::STBService::ServiceMonitoring::GlobalOperation::Total* reply) override { return Status::OK; }
  //?? Status SetTotal(ServerContext* context, const tr135::STBService::ServiceMonitoring::GlobalOperation::Total* request, BoxReply* reply) override { return Status::OK; }

  //?? Status GetSample(ServerContext* context, const BoxRequest* request, tr135::STBService::ServiceMonitoring::GlobalOperation::Sample* reply) override { return Status::OK; }
  //?? Status SetSample(ServerContext* context, const tr135::STBService::ServiceMonitoring::GlobalOperation::Sample* request, BoxReply* reply) override { return Status::OK; }

  Status GetApplications(ServerContext* context, const BoxRequest* request, tr135::STBService::Applications* reply) override { return Status::OK; }
  Status SetApplications(ServerContext* context, const tr135::STBService::Applications* request, BoxReply* reply) override { return Status::OK; }

  //?? Status GetAudienceStats(ServerContext* context, const BoxRequest* request, tr135::STBService::Applications::AudienceStats* reply) override { return Status::OK; }
  //?? Status SetAudienceStats(ServerContext* context, const tr135::STBService::Applications::AudienceStats* request, BoxReply* reply) override { return Status::OK; }

  Status GetChannel(ServerContext* context, const BoxRequest* request, ServerWriter<tr135::STBService::Applications::AudienceStats::Channel>* reply) override { return Status::OK; }
  Status SetChannel(ServerContext* context, ServerReader<tr135::STBService::Applications::AudienceStats::Channel>* request, BoxReply* reply) override { return Status::OK; }

  Status GetCDSPush(ServerContext* context, const BoxRequest* request, tr135::STBService::Applications::CDSPush* reply) override { return Status::OK; }
  Status SetCDSPush(ServerContext* context, const tr135::STBService::Applications::CDSPush* request, BoxReply* reply) override { return Status::OK; }

  Status GetContentItem(ServerContext* context, const BoxRequest* request, ServerWriter<tr135::STBService::Applications::CDSPush::ContentItem>* reply) override { return Status::OK; }
  Status SetContentItem(ServerContext* context, ServerReader<tr135::STBService::Applications::CDSPush::ContentItem>* request, BoxReply* reply) override { return Status::OK; }

  Status GetCDSPull(ServerContext* context, const BoxRequest* request, tr135::STBService::Applications::CDSPull* reply) override { return Status::OK; }
  Status SetCDSPull(ServerContext* context, const tr135::STBService::Applications::CDSPull* request, BoxReply* reply) override { return Status::OK; }

  //?? Status GetContentItem(ServerContext* context, const BoxRequest* request, ServerWriter<tr135::STBService::Applications::CDSPull::ContentItem>* reply) override { return Status::OK; }
  //?? Status SetContentItem(ServerContext* context, ServerReader<tr135::STBService::Applications::CDSPull::ContentItem>* request, BoxReply* reply) override { return Status::OK; }

  Status GetServiceProvider(ServerContext* context, const BoxRequest* request, ServerWriter<tr135::STBService::Applications::ServiceProvider>* reply) override { return Status::OK; }
  Status SetServiceProvider(ServerContext* context, ServerReader<tr135::STBService::Applications::ServiceProvider>* request, BoxReply* reply) override { return Status::OK; }

