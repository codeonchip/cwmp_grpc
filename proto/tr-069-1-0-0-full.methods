// Generated by cwmp_proto_to_grpc.cc
// source: tr-069-1-0-0-full.proto
// Use this file to implement gRPC server's service methods.

  Status GetInternetGatewayDevice(ServerContext* context, const GatewayRequest* request, tr069::InternetGatewayDevice* reply) override { return Status::OK; }
  Status SetInternetGatewayDevice(ServerContext* context, const tr069::InternetGatewayDevice* request, GatewayReply* reply) override { return Status::OK; }

  Status GetDeviceInfo(ServerContext* context, const GatewayRequest* request, tr069::InternetGatewayDevice::DeviceInfo* reply) override { return Status::OK; }
  Status SetDeviceInfo(ServerContext* context, const tr069::InternetGatewayDevice::DeviceInfo* request, GatewayReply* reply) override { return Status::OK; }

  Status GetVendorConfigFile(ServerContext* context, const GatewayRequest* request, ServerWriter<tr069::InternetGatewayDevice::DeviceInfo::VendorConfigFile>* reply) override { return Status::OK; }
  Status SetVendorConfigFile(ServerContext* context, ServerReader<tr069::InternetGatewayDevice::DeviceInfo::VendorConfigFile>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetDeviceConfig(ServerContext* context, const GatewayRequest* request, tr069::InternetGatewayDevice::DeviceConfig* reply) override { return Status::OK; }
  Status SetDeviceConfig(ServerContext* context, const tr069::InternetGatewayDevice::DeviceConfig* request, GatewayReply* reply) override { return Status::OK; }

  Status GetManagementServer(ServerContext* context, const GatewayRequest* request, tr069::InternetGatewayDevice::ManagementServer* reply) override { return Status::OK; }
  Status SetManagementServer(ServerContext* context, const tr069::InternetGatewayDevice::ManagementServer* request, GatewayReply* reply) override { return Status::OK; }

  Status GetTime(ServerContext* context, const GatewayRequest* request, tr069::InternetGatewayDevice::Time* reply) override { return Status::OK; }
  Status SetTime(ServerContext* context, const tr069::InternetGatewayDevice::Time* request, GatewayReply* reply) override { return Status::OK; }

  Status GetUserInterface(ServerContext* context, const GatewayRequest* request, tr069::InternetGatewayDevice::UserInterface* reply) override { return Status::OK; }
  Status SetUserInterface(ServerContext* context, const tr069::InternetGatewayDevice::UserInterface* request, GatewayReply* reply) override { return Status::OK; }

  Status GetLayer3Forwarding(ServerContext* context, const GatewayRequest* request, tr069::InternetGatewayDevice::Layer3Forwarding* reply) override { return Status::OK; }
  Status SetLayer3Forwarding(ServerContext* context, const tr069::InternetGatewayDevice::Layer3Forwarding* request, GatewayReply* reply) override { return Status::OK; }

  Status GetForwarding(ServerContext* context, const GatewayRequest* request, ServerWriter<tr069::InternetGatewayDevice::Layer3Forwarding::Forwarding>* reply) override { return Status::OK; }
  Status SetForwarding(ServerContext* context, ServerReader<tr069::InternetGatewayDevice::Layer3Forwarding::Forwarding>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetLANConfigSecurity(ServerContext* context, const GatewayRequest* request, tr069::InternetGatewayDevice::LANConfigSecurity* reply) override { return Status::OK; }
  Status SetLANConfigSecurity(ServerContext* context, const tr069::InternetGatewayDevice::LANConfigSecurity* request, GatewayReply* reply) override { return Status::OK; }

  Status GetIPPingDiagnostics(ServerContext* context, const GatewayRequest* request, tr069::InternetGatewayDevice::IPPingDiagnostics* reply) override { return Status::OK; }
  Status SetIPPingDiagnostics(ServerContext* context, const tr069::InternetGatewayDevice::IPPingDiagnostics* request, GatewayReply* reply) override { return Status::OK; }

  Status GetLANDevice(ServerContext* context, const GatewayRequest* request, ServerWriter<tr069::InternetGatewayDevice::LANDevice>* reply) override { return Status::OK; }
  Status SetLANDevice(ServerContext* context, ServerReader<tr069::InternetGatewayDevice::LANDevice>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetLANHostConfigManagement(ServerContext* context, const GatewayRequest* request, tr069::InternetGatewayDevice::LANDevice::LANHostConfigManagement* reply) override { return Status::OK; }
  Status SetLANHostConfigManagement(ServerContext* context, const tr069::InternetGatewayDevice::LANDevice::LANHostConfigManagement* request, GatewayReply* reply) override { return Status::OK; }

  Status GetIPInterface(ServerContext* context, const GatewayRequest* request, ServerWriter<tr069::InternetGatewayDevice::LANDevice::LANHostConfigManagement::IPInterface>* reply) override { return Status::OK; }
  Status SetIPInterface(ServerContext* context, ServerReader<tr069::InternetGatewayDevice::LANDevice::LANHostConfigManagement::IPInterface>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetLANEthernetInterfaceConfig(ServerContext* context, const GatewayRequest* request, ServerWriter<tr069::InternetGatewayDevice::LANDevice::LANEthernetInterfaceConfig>* reply) override { return Status::OK; }
  Status SetLANEthernetInterfaceConfig(ServerContext* context, ServerReader<tr069::InternetGatewayDevice::LANDevice::LANEthernetInterfaceConfig>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetStats(ServerContext* context, const GatewayRequest* request, tr069::InternetGatewayDevice::LANDevice::LANEthernetInterfaceConfig::Stats* reply) override { return Status::OK; }
  Status SetStats(ServerContext* context, const tr069::InternetGatewayDevice::LANDevice::LANEthernetInterfaceConfig::Stats* request, GatewayReply* reply) override { return Status::OK; }

  Status GetLANUSBInterfaceConfig(ServerContext* context, const GatewayRequest* request, ServerWriter<tr069::InternetGatewayDevice::LANDevice::LANUSBInterfaceConfig>* reply) override { return Status::OK; }
  Status SetLANUSBInterfaceConfig(ServerContext* context, ServerReader<tr069::InternetGatewayDevice::LANDevice::LANUSBInterfaceConfig>* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetStats(ServerContext* context, const GatewayRequest* request, tr069::InternetGatewayDevice::LANDevice::LANUSBInterfaceConfig::Stats* reply) override { return Status::OK; }
  //?? Status SetStats(ServerContext* context, const tr069::InternetGatewayDevice::LANDevice::LANUSBInterfaceConfig::Stats* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWLANConfiguration(ServerContext* context, const GatewayRequest* request, ServerWriter<tr069::InternetGatewayDevice::LANDevice::WLANConfiguration>* reply) override { return Status::OK; }
  Status SetWLANConfiguration(ServerContext* context, ServerReader<tr069::InternetGatewayDevice::LANDevice::WLANConfiguration>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetAssociatedDevice(ServerContext* context, const GatewayRequest* request, ServerWriter<tr069::InternetGatewayDevice::LANDevice::WLANConfiguration::AssociatedDevice>* reply) override { return Status::OK; }
  Status SetAssociatedDevice(ServerContext* context, ServerReader<tr069::InternetGatewayDevice::LANDevice::WLANConfiguration::AssociatedDevice>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWEPKey(ServerContext* context, const GatewayRequest* request, ServerWriter<tr069::InternetGatewayDevice::LANDevice::WLANConfiguration::WEPKey>* reply) override { return Status::OK; }
  Status SetWEPKey(ServerContext* context, ServerReader<tr069::InternetGatewayDevice::LANDevice::WLANConfiguration::WEPKey>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetPreSharedKey(ServerContext* context, const GatewayRequest* request, ServerWriter<tr069::InternetGatewayDevice::LANDevice::WLANConfiguration::PreSharedKey>* reply) override { return Status::OK; }
  Status SetPreSharedKey(ServerContext* context, ServerReader<tr069::InternetGatewayDevice::LANDevice::WLANConfiguration::PreSharedKey>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetHosts(ServerContext* context, const GatewayRequest* request, tr069::InternetGatewayDevice::LANDevice::Hosts* reply) override { return Status::OK; }
  Status SetHosts(ServerContext* context, const tr069::InternetGatewayDevice::LANDevice::Hosts* request, GatewayReply* reply) override { return Status::OK; }

  Status GetHost(ServerContext* context, const GatewayRequest* request, ServerWriter<tr069::InternetGatewayDevice::LANDevice::Hosts::Host>* reply) override { return Status::OK; }
  Status SetHost(ServerContext* context, ServerReader<tr069::InternetGatewayDevice::LANDevice::Hosts::Host>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWANDevice(ServerContext* context, const GatewayRequest* request, ServerWriter<tr069::InternetGatewayDevice::WANDevice>* reply) override { return Status::OK; }
  Status SetWANDevice(ServerContext* context, ServerReader<tr069::InternetGatewayDevice::WANDevice>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWANCommonInterfaceConfig(ServerContext* context, const GatewayRequest* request, tr069::InternetGatewayDevice::WANDevice::WANCommonInterfaceConfig* reply) override { return Status::OK; }
  Status SetWANCommonInterfaceConfig(ServerContext* context, const tr069::InternetGatewayDevice::WANDevice::WANCommonInterfaceConfig* request, GatewayReply* reply) override { return Status::OK; }

  Status GetConnection(ServerContext* context, const GatewayRequest* request, ServerWriter<tr069::InternetGatewayDevice::WANDevice::WANCommonInterfaceConfig::Connection>* reply) override { return Status::OK; }
  Status SetConnection(ServerContext* context, ServerReader<tr069::InternetGatewayDevice::WANDevice::WANCommonInterfaceConfig::Connection>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWANDSLInterfaceConfig(ServerContext* context, const GatewayRequest* request, tr069::InternetGatewayDevice::WANDevice::WANDSLInterfaceConfig* reply) override { return Status::OK; }
  Status SetWANDSLInterfaceConfig(ServerContext* context, const tr069::InternetGatewayDevice::WANDevice::WANDSLInterfaceConfig* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetStats(ServerContext* context, const GatewayRequest* request, tr069::InternetGatewayDevice::WANDevice::WANDSLInterfaceConfig::Stats* reply) override { return Status::OK; }
  //?? Status SetStats(ServerContext* context, const tr069::InternetGatewayDevice::WANDevice::WANDSLInterfaceConfig::Stats* request, GatewayReply* reply) override { return Status::OK; }

  Status GetTotal(ServerContext* context, const GatewayRequest* request, tr069::InternetGatewayDevice::WANDevice::WANDSLInterfaceConfig::Stats::Total* reply) override { return Status::OK; }
  Status SetTotal(ServerContext* context, const tr069::InternetGatewayDevice::WANDevice::WANDSLInterfaceConfig::Stats::Total* request, GatewayReply* reply) override { return Status::OK; }

  Status GetShowtime(ServerContext* context, const GatewayRequest* request, tr069::InternetGatewayDevice::WANDevice::WANDSLInterfaceConfig::Stats::Showtime* reply) override { return Status::OK; }
  Status SetShowtime(ServerContext* context, const tr069::InternetGatewayDevice::WANDevice::WANDSLInterfaceConfig::Stats::Showtime* request, GatewayReply* reply) override { return Status::OK; }

  Status GetLastShowtime(ServerContext* context, const GatewayRequest* request, tr069::InternetGatewayDevice::WANDevice::WANDSLInterfaceConfig::Stats::LastShowtime* reply) override { return Status::OK; }
  Status SetLastShowtime(ServerContext* context, const tr069::InternetGatewayDevice::WANDevice::WANDSLInterfaceConfig::Stats::LastShowtime* request, GatewayReply* reply) override { return Status::OK; }

  Status GetCurrentDay(ServerContext* context, const GatewayRequest* request, tr069::InternetGatewayDevice::WANDevice::WANDSLInterfaceConfig::Stats::CurrentDay* reply) override { return Status::OK; }
  Status SetCurrentDay(ServerContext* context, const tr069::InternetGatewayDevice::WANDevice::WANDSLInterfaceConfig::Stats::CurrentDay* request, GatewayReply* reply) override { return Status::OK; }

  Status GetQuarterHour(ServerContext* context, const GatewayRequest* request, tr069::InternetGatewayDevice::WANDevice::WANDSLInterfaceConfig::Stats::QuarterHour* reply) override { return Status::OK; }
  Status SetQuarterHour(ServerContext* context, const tr069::InternetGatewayDevice::WANDevice::WANDSLInterfaceConfig::Stats::QuarterHour* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWANEthernetInterfaceConfig(ServerContext* context, const GatewayRequest* request, tr069::InternetGatewayDevice::WANDevice::WANEthernetInterfaceConfig* reply) override { return Status::OK; }
  Status SetWANEthernetInterfaceConfig(ServerContext* context, const tr069::InternetGatewayDevice::WANDevice::WANEthernetInterfaceConfig* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetStats(ServerContext* context, const GatewayRequest* request, tr069::InternetGatewayDevice::WANDevice::WANEthernetInterfaceConfig::Stats* reply) override { return Status::OK; }
  //?? Status SetStats(ServerContext* context, const tr069::InternetGatewayDevice::WANDevice::WANEthernetInterfaceConfig::Stats* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWANDSLConnectionManagement(ServerContext* context, const GatewayRequest* request, tr069::InternetGatewayDevice::WANDevice::WANDSLConnectionManagement* reply) override { return Status::OK; }
  Status SetWANDSLConnectionManagement(ServerContext* context, const tr069::InternetGatewayDevice::WANDevice::WANDSLConnectionManagement* request, GatewayReply* reply) override { return Status::OK; }

  Status GetConnectionService(ServerContext* context, const GatewayRequest* request, ServerWriter<tr069::InternetGatewayDevice::WANDevice::WANDSLConnectionManagement::ConnectionService>* reply) override { return Status::OK; }
  Status SetConnectionService(ServerContext* context, ServerReader<tr069::InternetGatewayDevice::WANDevice::WANDSLConnectionManagement::ConnectionService>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWANDSLDiagnostics(ServerContext* context, const GatewayRequest* request, tr069::InternetGatewayDevice::WANDevice::WANDSLDiagnostics* reply) override { return Status::OK; }
  Status SetWANDSLDiagnostics(ServerContext* context, const tr069::InternetGatewayDevice::WANDevice::WANDSLDiagnostics* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWANConnectionDevice(ServerContext* context, const GatewayRequest* request, ServerWriter<tr069::InternetGatewayDevice::WANDevice::WANConnectionDevice>* reply) override { return Status::OK; }
  Status SetWANConnectionDevice(ServerContext* context, ServerReader<tr069::InternetGatewayDevice::WANDevice::WANConnectionDevice>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWANDSLLinkConfig(ServerContext* context, const GatewayRequest* request, tr069::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANDSLLinkConfig* reply) override { return Status::OK; }
  Status SetWANDSLLinkConfig(ServerContext* context, const tr069::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANDSLLinkConfig* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWANATMF5LoopbackDiagnostics(ServerContext* context, const GatewayRequest* request, tr069::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANATMF5LoopbackDiagnostics* reply) override { return Status::OK; }
  Status SetWANATMF5LoopbackDiagnostics(ServerContext* context, const tr069::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANATMF5LoopbackDiagnostics* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWANEthernetLinkConfig(ServerContext* context, const GatewayRequest* request, tr069::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANEthernetLinkConfig* reply) override { return Status::OK; }
  Status SetWANEthernetLinkConfig(ServerContext* context, const tr069::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANEthernetLinkConfig* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWANPOTSLinkConfig(ServerContext* context, const GatewayRequest* request, tr069::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANPOTSLinkConfig* reply) override { return Status::OK; }
  Status SetWANPOTSLinkConfig(ServerContext* context, const tr069::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANPOTSLinkConfig* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWANIPConnection(ServerContext* context, const GatewayRequest* request, ServerWriter<tr069::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANIPConnection>* reply) override { return Status::OK; }
  Status SetWANIPConnection(ServerContext* context, ServerReader<tr069::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANIPConnection>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetPortMapping(ServerContext* context, const GatewayRequest* request, ServerWriter<tr069::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANIPConnection::PortMapping>* reply) override { return Status::OK; }
  Status SetPortMapping(ServerContext* context, ServerReader<tr069::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANIPConnection::PortMapping>* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetStats(ServerContext* context, const GatewayRequest* request, tr069::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANIPConnection::Stats* reply) override { return Status::OK; }
  //?? Status SetStats(ServerContext* context, const tr069::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANIPConnection::Stats* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWANPPPConnection(ServerContext* context, const GatewayRequest* request, ServerWriter<tr069::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANPPPConnection>* reply) override { return Status::OK; }
  Status SetWANPPPConnection(ServerContext* context, ServerReader<tr069::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANPPPConnection>* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetPortMapping(ServerContext* context, const GatewayRequest* request, ServerWriter<tr069::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANPPPConnection::PortMapping>* reply) override { return Status::OK; }
  //?? Status SetPortMapping(ServerContext* context, ServerReader<tr069::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANPPPConnection::PortMapping>* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetStats(ServerContext* context, const GatewayRequest* request, tr069::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANPPPConnection::Stats* reply) override { return Status::OK; }
  //?? Status SetStats(ServerContext* context, const tr069::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANPPPConnection::Stats* request, GatewayReply* reply) override { return Status::OK; }

