// Generated by cwmp_proto_to_grpc.cc
// source: tr-135-1-4-0-full.proto
// 1st top-level message: STBService
// Added service 

// tr-135-1-4-0-full.proto
// Generated by cwmp_xml_to_proto.cc
// source: tr-135-1-4-0-full.xml

syntax = "proto3";

package tr135; //!! renamed

//  uint32    stbservice_number_of_entries             = 0  ; //  mber of entries in the {{object|STBServi
message STBService { // STBService.{i}.
  bool      enable                                   = 1  ; //  Enables or disables this {{object}} inst
  string    alias                                    = 2  ; //  {{datatype|expand}}        }        
  message Capabilities { // STBService.{i}.Capabilities.
    int32     max_active_avstreams                     = 1  ; //  Maximum number of simultaneously active 
    int32     max_active_avplayers                     = 2  ; //  Maximum number of simultaneously active 
    message FrontEnd { // STBService.{i}.Capabilities.FrontEnd.
      message DVBT { // STBService.{i}.Capabilities.FrontEnd.DVBT.
        int32     max_active_dvbtstreams                   = 1  ; //  Maximum number of simultaneous active AV
        int32     max_logical_channels                     = 2  ; //  Maximum number of logical channels that 
      }
      DVBT dvbt = 1; // STBService.{i}.Capabilities.FrontEnd.DVBT.
      message IP { // STBService.{i}.Capabilities.FrontEnd.IP.
        int32     max_active_ipstreams                     = 1  ; //  Maximum number of simultaneous active AV
        int32     max_active_inbound_ipstreams             = 2  ; //  Maximum number of simultaneous active In
        int32     max_active_outbound_ipstreams            = 3  ; //  Maximum number of simultaneous active Ou
        string    streaming_control_protocols              = 4  ; //  Supported streaming control protocols. 
        string    streaming_transport_protocols            = 5  ; //  Network protocols supported for AV strea
        string    streaming_transport_control_protocols    = 6  ; //  Transport control protocols supported fo
        string    download_transport_protocols             = 7  ; //  Network protocols supported for AV downl
        string    multiplex_types                          = 8  ; //  AV multiplex types supported by the fron
        int32     max_dejittering_buffer_size              = 9  ; //  Describes the maximum de-jittering buffe
      }
      IP ip = 2; // STBService.{i}.Capabilities.FrontEnd.IP.
    }
    FrontEnd front_end = 3; // STBService.{i}.Capabilities.FrontEnd.
    message PVR { // STBService.{i}.Capabilities.PVR.
      int32     max_iostreams                            = 1  ; //  Maximum number of AV streams that the PV
      int32     max_recording_streams                    = 2  ; //  Maximum number of AV streams that the PV
      int32     max_playback_streams                     = 3  ; //  Maximum number of AV streams that the PV
      int32     max_time_delay                           = 4  ; //  Maximum time delay, in {{units}}, that t
    }
    PVR pvr = 4; // STBService.{i}.Capabilities.PVR.
    message AudioDecoder { // STBService.{i}.Capabilities.AudioDecoder.
      string    audio_standards                          = 1  ; //  Audio standards supported by this STB. 
    }
    AudioDecoder audio_decoder = 5; // STBService.{i}.Capabilities.AudioDecoder.
    message VideoDecoder { // STBService.{i}.Capabilities.VideoDecoder.
      string    video_standards                          = 1  ; //  Video standards supported by this STB. 
      message MPEG2Part2 { // STBService.{i}.Capabilities.VideoDecoder.MPEG2Part2.
        string    audio_standards                          = 1  ; //  Audio Standards supported by the Player 
        uint32    profile_level_number_of_entries          = 2  ; //  Number of instances of {{object|ProfileL
        message ProfileLevel { // STBService.{i}.Capabilities.VideoDecoder.MPEG2Part2.ProfileLevel.{i}.
          string    alias                                    = 1  ; //  {{datatype|expand}}        }        
          string    profile                                  = 2  ; //  Identifier of the MPEG2 Part 2 profile.
          string    level                                    = 3  ; //  Identifier of the MPEG2 part 2 level.  
          uint32    maximum_decoding_capability              = 4  ; //  The maximum decoding capability for this
        }
        repeated ProfileLevel profile_level = 3; // STBService.{i}.Capabilities.VideoDecoder.MPEG2Part2.ProfileLevel.{i}.
      }
      MPEG2Part2 mpeg2part2 = 2; // STBService.{i}.Capabilities.VideoDecoder.MPEG2Part2.
      message MPEG4Part2 { // STBService.{i}.Capabilities.VideoDecoder.MPEG4Part2.
        string    audio_standards                          = 1  ; //  Audio Standards supported by the Player 
        uint32    profile_level_number_of_entries          = 2  ; //  Number of instances of {{object|ProfileL
        message ProfileLevel { // STBService.{i}.Capabilities.VideoDecoder.MPEG4Part2.ProfileLevel.{i}.
          string    alias                                    = 1  ; //  {{datatype|expand}}        }        
          string    profile                                  = 2  ; //  Identifier of the MPEG4 Part 2 profile.
          string    level                                    = 3  ; //  Identifier of the MPEG4 Part 2 level.  
          uint32    maximum_decoding_capability              = 4  ; //  The maximum decoding capability for this
        }
        repeated ProfileLevel profile_level = 3; // STBService.{i}.Capabilities.VideoDecoder.MPEG4Part2.ProfileLevel.{i}.
      }
      MPEG4Part2 mpeg4part2 = 3; // STBService.{i}.Capabilities.VideoDecoder.MPEG4Part2.
      message MPEG4Part10 { // STBService.{i}.Capabilities.VideoDecoder.MPEG4Part10.
        string    audio_standards                          = 1  ; //  Audio Standards supported by the Player 
        uint32    profile_level_number_of_entries          = 2  ; //  Number of instances of {{object|ProfileL
        message ProfileLevel { // STBService.{i}.Capabilities.VideoDecoder.MPEG4Part10.ProfileLevel.{i}.
          string    alias                                    = 1  ; //  {{datatype|expand}}        }        
          string    profile                                  = 2  ; //  Supported MPEG4 Part 10 profiles.      
          string    level                                    = 3  ; //  Supported MPEG4 Part 10 Levels.        
          uint32    maximum_decoding_capability              = 4  ; //  The maximum decoding capability for this
        }
        repeated ProfileLevel profile_level = 3; // STBService.{i}.Capabilities.VideoDecoder.MPEG4Part10.ProfileLevel.{i}.
      }
      MPEG4Part10 mpeg4part10 = 4; // STBService.{i}.Capabilities.VideoDecoder.MPEG4Part10.
      message SMPTEVC1 { // STBService.{i}.Capabilities.VideoDecoder.SMPTEVC1.
        string    audio_standards                          = 1  ; //  Audio Standards supported by the Player 
        uint32    profile_level_number_of_entries          = 2  ; //  Number of instances of {{object|ProfileL
        message ProfileLevel { // STBService.{i}.Capabilities.VideoDecoder.SMPTEVC1.ProfileLevel.{i}.
          string    alias                                    = 1  ; //  {{datatype|expand}}        }        
          string    profile                                  = 2  ; //  Identifier of the SMPTE-VC-1 profile.  
          string    level                                    = 3  ; //  Identifier of the SMPTE-VC-1 level.    
          uint32    maximum_decoding_capability              = 4  ; //  The maximum decoding capability for this
        }
        repeated ProfileLevel profile_level = 3; // STBService.{i}.Capabilities.VideoDecoder.SMPTEVC1.ProfileLevel.{i}.
      }
      SMPTEVC1 smptevc1 = 5; // STBService.{i}.Capabilities.VideoDecoder.SMPTEVC1.
    }
    VideoDecoder video_decoder = 6; // STBService.{i}.Capabilities.VideoDecoder.
    message AudioOutput { // STBService.{i}.Capabilities.AudioOutput.
      string    audio_formats                            = 1  ; //  Supported audio output formats.  {{enum}
    }
    AudioOutput audio_output = 7; // STBService.{i}.Capabilities.AudioOutput.
    message VideoOutput { // STBService.{i}.Capabilities.VideoOutput.
      string    composite_video_standards                = 1  ; //  Analog composite video standards support
      string    video_formats                            = 2  ; //  Supported video output formats.  {{enum}
      string    macrovision                              = 3  ; //  Supported version of Macrovision digital
      string    hdcp                                     = 4  ; //  Supported version of HDCP digital conten
      string    display_formats                          = 5  ; //  Each entry is a supported display format
    }
    VideoOutput video_output = 8; // STBService.{i}.Capabilities.VideoOutput.
    message HDMI { // STBService.{i}.Capabilities.HDMI.
      string    supported_resolutions                    = 1  ; //  Video resolutions supported for the HDMI
      bool      cecsupport                               = 2  ; //  Indicates whether the STB is supporting 
      bool      hdmi3d                                   = 3  ; //  Indicates whether the STB is supporting 
    }
    HDMI hdmi = 9; // STBService.{i}.Capabilities.HDMI.
    message CDS { // STBService.{i}.Capabilities.CDS.
      bool      push_capable                             = 1  ; //  Capability of providing a CDS Push servi
      bool      pull_capable                             = 2  ; //  Capability of providing a CDS Pull servi
    }
    CDS cds = 10; // STBService.{i}.Capabilities.CDS.
    message CA { // STBService.{i}.Capabilities.CA.
      string    casystems                                = 1  ; //  Unique identifiers (e.g. commercial name
    }
    CA ca = 11; // STBService.{i}.Capabilities.CA.
    message DRM { // STBService.{i}.Capabilities.DRM.
      string    drmsystems                               = 1  ; //  Unique identifiers (e.g. commercial name
    }
    DRM drm = 12; // STBService.{i}.Capabilities.DRM.
    message ServiceMonitoring { // STBService.{i}.Capabilities.ServiceMonitoring.
      string    service_types                            = 1  ; //  Supported service types, each of which r
      int32     max_events_per_sample_interval           = 2  ; //  Maximum number of events of each applica
      int32     max_active_main_streams                  = 3  ; //  Maximum number of AV Main streams for wh
      int32     min_sample_interval                      = 4  ; //  Minimum sample interval in {{units}} tha
      int32     max_report_samples                       = 5  ; //  Maximum number of samples of each statis
      string    high_level_metric_names                  = 6  ; //  The names of the supported high-level me
      uint32    max_main_stream_event_log_entries        = 7  ; //  Maximum number of event log entries that
    }
    ServiceMonitoring service_monitoring = 13; // STBService.{i}.Capabilities.ServiceMonitoring.
    message AudienceStats { // STBService.{i}.Capabilities.AudienceStats.
      int32     max_audience_stats_channels              = 1  ; //  Maximum number of channels that the STB 
    }
    AudienceStats audience_stats = 14; // STBService.{i}.Capabilities.AudienceStats.
  }
  Capabilities capabilities = 3; // STBService.{i}.Capabilities.
  message Components { // STBService.{i}.Components.
    uint32    front_end_number_of_entries              = 1  ; //  {{numentries}}        }        Stat
    uint32    audio_decoder_number_of_entries          = 2  ; //  {{numentries}}        }        Stat
    uint32    video_decoder_number_of_entries          = 3  ; //  {{numentries}}        }        Stat
    uint32    audio_output_number_of_entries           = 4  ; //  {{numentries}}        }        Stat
    uint32    video_output_number_of_entries           = 5  ; //  {{numentries}}        }        Stat
    uint32    scartnumber_of_entries                   = 6  ; //  {{numentries}}        }        Stat
    uint32    canumber_of_entries                      = 7  ; //  {{numentries}}        }        Stat
    uint32    drmnumber_of_entries                     = 8  ; //  {{numentries}}        }        Stat
    uint32    hdminumber_of_entries                    = 9  ; //  {{numentries}}        }        Stat
    uint32    spdifnumber_of_entries                   = 10 ; //  {{numentries}}        }        Stat
    message FrontEnd { // STBService.{i}.Components.FrontEnd.{i}.
      bool      enable                                   = 1  ; //  Enables or disables this front-end.    
      string    status                                   = 2  ; //  The status of this front-end.  {{enum}}
      string    alias                                    = 3  ; //  {{datatype|expand}}        }        
      string    name                                     = 4  ; //  Human-readable name associated with this
      message DVBT { // STBService.{i}.Components.FrontEnd.{i}.DVBT.
        message Modulation { // STBService.{i}.Components.FrontEnd.{i}.DVBT.Modulation.
          uint32    frequency                                = 1  ; //  Indicates the current frequency in {{uni
          string    channel_bandwidth                        = 2  ; //  Indicates the channel bandwidth in use.
          string    constellation                            = 3  ; //  Indicates the current constellation in u
          string    hierarchical_information                 = 4  ; //  Hierarchical parameter alpha. The higher
          string    code_rate_hp                             = 5  ; //  Indicates the current code rate in use. 
          string    code_rate_lp                             = 6  ; //  Indicates the current code rate in use. 
          string    guard_interval                           = 7  ; //  Indicates the current guard interval in 
          string    transmission_mode                        = 8  ; //  Indicates the number of carriers in an O
          uint32    snr                                      = 9  ; //  Signal/Noise ratio in the carrier band, 
          uint32    ber                                      = 10 ; //  Bit Error Ratio before correction, expre
          uint32    cber                                     = 11 ; //  Bit Error Ratio after correction, expres
          bool      locked                                   = 12 ; //  Indicates whether or not the tuner is lo
        }
        Modulation modulation = 1; // STBService.{i}.Components.FrontEnd.{i}.DVBT.Modulation.
        message Service { // STBService.{i}.Components.FrontEnd.{i}.DVBT.Service.
          string    current_logical_channel                  = 1  ; //  It represents the logical channel object
          string    current_service                          = 2  ; //  It represents the service object instanc
        }
        Service service = 2; // STBService.{i}.Components.FrontEnd.{i}.DVBT.Service.
        message Install { // STBService.{i}.Components.FrontEnd.{i}.DVBT.Install.
          bool      start                                    = 1  ; //  Starts (when set to {{true}}) or stops (
          string    status                                   = 2  ; //  Indicates the status of the scanning pro
          uint32    progress                                 = 3  ; //  Progression in {{units}} of the current 
          uint32    start_frequency                          = 4  ; //  Frequency (in {{units}}) at which to sta
          uint32    stop_frequency                           = 5  ; //  Frequency (in {{units}}) at which to sto
        }
        Install install = 3; // STBService.{i}.Components.FrontEnd.{i}.DVBT.Install.
        message ServiceListDatabase { // STBService.{i}.Components.FrontEnd.{i}.DVBT.ServiceListDatabase.
          bool      reset                                    = 1  ; //  When set to {{true}}, resets the service
          uint32    total_services                           = 2  ; //  Total number of services defined in the 
          uint32    logical_channel_number_of_entries        = 3  ; //  Number of logical channels in the servic
          message LogicalChannel { // STBService.{i}.Components.FrontEnd.{i}.DVBT.ServiceListDatabase.LogicalChannel.{i}.
            string    alias                                    = 1  ; //  {{datatype|expand}}        }        
            uint32    logical_channel_number                   = 2  ; //  Logical channel number.        .     
            uint32    service_number_of_entries                = 3  ; //  Number of services associated with this 
            message Service { // STBService.{i}.Components.FrontEnd.{i}.DVBT.ServiceListDatabase.LogicalChannel.{i}.Service.{i}.
              string    alias                                    = 1  ; //  {{datatype|expand}}        }        
              string    name                                     = 2  ; //  Human-readable name associated with this
              string    dvb_id                                   = 3  ; //  DVB Triplet {{bibref|TS102034}} that uni
              uint32    frequency                                = 4  ; //  Transmitter frequency (in {{units}}) for
              uint32    ber                                      = 5  ; //  Bit Error Ratio before correction, expre
              uint32    cber                                     = 6  ; //  Bit Error Ratio after correction, expres
              uint32    snr                                      = 7  ; //  Signal/Noise ratio in the carrier band, 
              bool      preferred                                = 8  ; //  When set to {{true}}, identifies this as
            }
            repeated Service service = 4; // STBService.{i}.Components.FrontEnd.{i}.DVBT.ServiceListDatabase.LogicalChannel.{i}.Service.{i}.
          }
          repeated LogicalChannel logical_channel = 4; // STBService.{i}.Components.FrontEnd.{i}.DVBT.ServiceListDatabase.LogicalChannel.{i}.
        }
        ServiceListDatabase service_list_database = 4; // STBService.{i}.Components.FrontEnd.{i}.DVBT.ServiceListDatabase.
        message LogicalChannelConnect { // STBService.{i}.Components.FrontEnd.{i}.DVBT.LogicalChannelConnect.
          uint32    logical_channel_number                   = 1  ; //  Logical channel number to connect to (th
        }
        LogicalChannelConnect logical_channel_connect = 5; // STBService.{i}.Components.FrontEnd.{i}.DVBT.LogicalChannelConnect.
        message ServiceConnect { // STBService.{i}.Components.FrontEnd.{i}.DVBT.ServiceConnect.
          string    dvb_id                                   = 1  ; //  DvbId of the service to connect to.    
        }
        ServiceConnect service_connect = 6; // STBService.{i}.Components.FrontEnd.{i}.DVBT.ServiceConnect.
      }
      DVBT dvbt = 5; // STBService.{i}.Components.FrontEnd.{i}.DVBT.
      message IP { // STBService.{i}.Components.FrontEnd.{i}.IP.
        uint32    inbound_number_of_entries                = 1  ; //  Number of {{object|Inbound}} instances.
        uint32    outbound_number_of_entries               = 2  ; //  Number of {{object|Outbound}} instances.
        uint32    active_inbound_ipstreams                 = 3  ; //  Number of {{object|Inbound}} AV streams 
        uint32    active_outbound_ipstreams                = 4  ; //  Number of {{object|Outbound}} AV streams
        message RTCP { // STBService.{i}.Components.FrontEnd.{i}.IP.RTCP.
          bool      enable                                   = 1  ; //  Enables or disables RTCP receiver report
          string    status                                   = 2  ; //  The status of RTCP receiver report gener
          uint32    tx_repeat_interval                       = 3  ; //  Transmission repeat interval, in {{units
        }
        RTCP rtcp = 5; // STBService.{i}.Components.FrontEnd.{i}.IP.RTCP.
        message RTPAVPF { // STBService.{i}.Components.FrontEnd.{i}.IP.RTPAVPF.
          bool      enable                                   = 1  ; //  Enables or disables RTP/AVPF receiver re
          string    operation_mode                           = 2  ; //  The operation mode of the Error Correcti
          string    ecoperation_status                       = 3  ; //  The status of RTP/AVPF operation. {{enum
          string    status                                   = 4  ; //  The status of RTP/AVPF receiver report g
          uint32    retransmit_timeout                       = 5  ; //  Time in {{units}} the receiver shall wai
          uint32    min_loss_packets                         = 6  ; //  Minimum number of lost packets the recei
          uint32    max_report_time                          = 7  ; //  Maximum time in {{units}} the receiver s
          uint32    max_loss_burst                           = 8  ; //  Maximum number of consecutive lost packe
        }
        RTPAVPF rtpavpf = 6; // STBService.{i}.Components.FrontEnd.{i}.IP.RTPAVPF.
        message FEC { // STBService.{i}.Components.FrontEnd.{i}.IP.FEC.
          bool      enable                                   = 1  ; //  Enables or disables FEC decoder operatio
          string    operation_mode                           = 2  ; //  The operation mode of the FEC decoder. {
          string    ecoperation_status                       = 3  ; //  The status of FEC decoder operation. {{e
        }
        FEC fec = 7; // STBService.{i}.Components.FrontEnd.{i}.IP.FEC.
        message IGMP { // STBService.{i}.Components.FrontEnd.{i}.IP.IGMP.
          bool      enable                                   = 1  ; //  Enables or disables all IGMP support on 
          string    status                                   = 2  ; //  Status of IGMP support on the receiver s
          uint32    maximum_number_of_concurrent_groups      = 3  ; //  Maximum number of group memberships allo
          uint32    maximum_number_of_tracked_groups         = 4  ; //  Maximum number of groups for which stati
          bool      logging_enable                           = 5  ; //  Controls logging of IGMP traffic.      
          uint32    dscpmark                                 = 6  ; //  Diffserv code point to be used for outgo
          int32     vlanidmark                               = 7  ; //  VLAN ID (as defined in 802.1Q) to be use
          int32     ethernet_priority_mark                   = 8  ; //  Ethernet priority code (as defined in 80
          string    client_version                           = 9  ; //  The highest IGMP version supported by th
          uint32    client_robustness                        = 10 ; //  Robustness is a way of indicating how vu
          uint32    client_unsolicited_report_interval       = 11 ; //  The number of {{units}} between repetiti
          uint32    client_group_number_of_entries           = 12 ; //  Number of entries in the {{object|Client
          uint32    client_group_stats_number_of_entries     = 13 ; //  Number of entries in the {{object|Client
          message ClientGroup { // STBService.{i}.Components.FrontEnd.{i}.IP.IGMP.ClientGroup.{i}.
            string    alias                                    = 1  ; //  {{datatype|expand}}        }        
            string    group_address                            = 2  ; //  The IP multicast group address for which
            uint32    up_time                                  = 3  ; //  Time elapsed in {{units}} since the mult
          }
          repeated ClientGroup client_group = 14; // STBService.{i}.Components.FrontEnd.{i}.IP.IGMP.ClientGroup.{i}.
          message ClientGroupStats { // STBService.{i}.Components.FrontEnd.{i}.IP.IGMP.ClientGroupStats.{i}.
            string    alias                                    = 1  ; //  {{datatype|expand}}        }        
            string    group_address                            = 2  ; //  The IP multicast group address for which
            uint32    total_start                              = 3  ; //  Number of {{units}} since the beginning 
            uint32    current_day_start                        = 4  ; //  Number of {{units}} since the beginning 
            uint32    quarter_hour_start                       = 5  ; //  Number of {{units}} since the beginning 
            message Total { // STBService.{i}.Components.FrontEnd.{i}.IP.IGMP.ClientGroupStats.{i}.Total.
              uint32    number_of_joins                          = 1  ; //  Number of IGMP joins during this period.
              uint32    number_of_leaves                         = 2  ; //  Number of IGMP leaves during this period
              uint32    max_join_delay                           = 3  ; //  Maximum latency delay, in {{units}}, fro
            }
            Total total = 6; // STBService.{i}.Components.FrontEnd.{i}.IP.IGMP.ClientGroupStats.{i}.Total.
            message CurrentDay { // STBService.{i}.Components.FrontEnd.{i}.IP.IGMP.ClientGroupStats.{i}.CurrentDay.
              uint32    number_of_joins                          = 1  ; //  Number of IGMP joins during this period.
              uint32    number_of_leaves                         = 2  ; //  Number of IGMP leaves during this period
              uint32    max_join_delay                           = 3  ; //  Maximum latency delay, in {{units}}, fro
            }
            CurrentDay current_day = 7; // STBService.{i}.Components.FrontEnd.{i}.IP.IGMP.ClientGroupStats.{i}.CurrentDay.
            message QuarterHour { // STBService.{i}.Components.FrontEnd.{i}.IP.IGMP.ClientGroupStats.{i}.QuarterHour.
              uint32    number_of_joins                          = 1  ; //  Number of IGMP joins during this period.
              uint32    number_of_leaves                         = 2  ; //  Number of IGMP leaves during this period
              uint32    max_join_delay                           = 3  ; //  Maximum latency delay, in {{units}}, fro
            }
            QuarterHour quarter_hour = 8; // STBService.{i}.Components.FrontEnd.{i}.IP.IGMP.ClientGroupStats.{i}.QuarterHour.
          }
          repeated ClientGroupStats client_group_stats = 15; // STBService.{i}.Components.FrontEnd.{i}.IP.IGMP.ClientGroupStats.{i}.
        }
        IGMP igmp = 8; // STBService.{i}.Components.FrontEnd.{i}.IP.IGMP.
        message Dejittering { // STBService.{i}.Components.FrontEnd.{i}.IP.Dejittering.
          uint32    buffer_size                              = 1  ; //  De-jittering buffer size, measured in {{
          uint32    buffer_initial_level                     = 2  ; //  Describes the number of {{units}} worth 
        }
        Dejittering dejittering = 9; // STBService.{i}.Components.FrontEnd.{i}.IP.Dejittering.
        message Inbound { // STBService.{i}.Components.FrontEnd.{i}.IP.Inbound.{i}.
          string    status                                   = 1  ; //  The status of this Inbound stream.  {{en
          string    alias                                    = 2  ; //  {{datatype|expand}}        }        
          string    name                                     = 3  ; //  Unique human-readable name associated wi
          string    streaming_control_protocol               = 4  ; //  Network protocol currently used for cont
          string    streaming_transport_protocol             = 5  ; //  Network protocol currently used for stre
          string    streaming_transport_control_protocol     = 6  ; //  Transport control protocol currently use
          string    multiplex_type                           = 7  ; //  AV multiplex type currently used for the
          string    download_transport_protocol              = 8  ; //  Network protocol currently used for down
          string    source_address                           = 9  ; //  IP address of the source of the current 
          uint32    source_port                              = 10 ; //  TCP or UDP port number of the source of 
          string    destination_address                      = 11 ; //  IP address of the destination of the cur
          uint32    destination_port                         = 12 ; //  TCP or UDP port number of the destinatio
          string    uri                                      = 13 ; //  RFC 3986 URI that indicates the current 
        }
        repeated Inbound inbound = 10; // STBService.{i}.Components.FrontEnd.{i}.IP.Inbound.{i}.
        message Outbound { // STBService.{i}.Components.FrontEnd.{i}.IP.Outbound.{i}.
          string    status                                   = 1  ; //  The status of this Outbound stream.  {{e
          string    alias                                    = 2  ; //  {{datatype|expand}}        }        
          string    name                                     = 3  ; //  Unique human-readable name associated wi
          string    multiplex_type                           = 4  ; //  AV multiplex type currently used for the
          string    uri                                      = 5  ; //  RFC 3986 URI that indicates the current 
        }
        repeated Outbound outbound = 11; // STBService.{i}.Components.FrontEnd.{i}.IP.Outbound.{i}.
        message ServiceConnect { // STBService.{i}.Components.FrontEnd.{i}.IP.ServiceConnect.
          string    uri                                      = 1  ; //  RFC 3986 URI that  describes the service
        }
        ServiceConnect service_connect = 12; // STBService.{i}.Components.FrontEnd.{i}.IP.ServiceConnect.
        message ForceMonitor { // STBService.{i}.Components.FrontEnd.{i}.IP.ForceMonitor.
          bool      enable                                   = 1  ; //  When set to {{true}}, forces the operati
          string    status                                   = 2  ; //  Indicates the status of the statistic mo
          string    uri                                      = 3  ; //  describes the service to connect to for 
        }
        ForceMonitor force_monitor = 13; // STBService.{i}.Components.FrontEnd.{i}.IP.ForceMonitor.
      }
      IP ip = 6; // STBService.{i}.Components.FrontEnd.{i}.IP.
    }
    repeated FrontEnd front_end = 11; // STBService.{i}.Components.FrontEnd.{i}.
    message PVR { // STBService.{i}.Components.PVR.
      uint32    storage_number_of_entries                = 1  ; //  Number of {{object|Storage}} instances.
      message Storage { // STBService.{i}.Components.PVR.Storage.{i}.
        string    alias                                    = 1  ; //  {{datatype|expand}}        }        
        string    name                                     = 2  ; //  Unique human-readable name associated wi
        string    reference                                = 3  ; //  References the corresponding ''StorageSe
      }
      repeated Storage storage = 2; // STBService.{i}.Components.PVR.Storage.{i}.
    }
    PVR pvr = 12; // STBService.{i}.Components.PVR.
    message AudioDecoder { // STBService.{i}.Components.AudioDecoder.{i}.
      bool      enable                                   = 1  ; //  Enables or disables this audio decoder.
      string    status                                   = 2  ; //  The status of this audio decoder.  {{enu
      string    alias                                    = 3  ; //  {{datatype|expand}}        }        
      string    name                                     = 4  ; //  Human-readable name associated with this
      string    audio_standard                           = 5  ; //  Audio standard currently being processed
    }
    repeated AudioDecoder audio_decoder = 13; // STBService.{i}.Components.AudioDecoder.{i}.
    message VideoDecoder { // STBService.{i}.Components.VideoDecoder.{i}.
      bool      enable                                   = 1  ; //  Enables or disables this video decoder.
      string    status                                   = 2  ; //  The status of this video decoder.  {{enu
      string    alias                                    = 3  ; //  {{datatype|expand}}        }        
      string    name                                     = 4  ; //  Human-readable name associated with this
      string    mpeg2part2                               = 5  ; //  MPEG2 Part 2 profile and level object in
      string    mpeg4part2                               = 6  ; //  MPEG4 Part 2 profile and level object in
      string    mpeg4part10                              = 7  ; //  MPEG4 Part 10 profile and level object i
      string    smptevc1                                 = 8  ; //  SMPTE-VC-1 profile and level object inst
      string    content_aspect_ratio                     = 9  ; //  Indicates the native aspect ratio of the
    }
    repeated VideoDecoder video_decoder = 14; // STBService.{i}.Components.VideoDecoder.{i}.
    message AudioOutput { // STBService.{i}.Components.AudioOutput.{i}.
      bool      enable                                   = 1  ; //  Enables or disables this audio output. 
      string    status                                   = 2  ; //  The status of this audio output.  {{enum
      string    alias                                    = 3  ; //  {{datatype|expand}}        }        
      string    name                                     = 4  ; //  Human-readable name associated with this
      string    audio_format                             = 5  ; //  Currently active audio output format, or
      uint32    audio_level                              = 6  ; //  The audio level on this audio output in 
      bool      cancel_mute                              = 7  ; //  When set to {{true}}, cancels this audio
      string    scarts                                   = 8  ; //  SCART object instances associated with t
    }
    repeated AudioOutput audio_output = 15; // STBService.{i}.Components.AudioOutput.{i}.
    message SPDIF { // STBService.{i}.Components.SPDIF.{i}.
      bool      enable                                   = 1  ; //  Enables or disables the S/PDIF output. 
      string    status                                   = 2  ; //  The status of this S/PDIF output.  {{enu
      string    alias                                    = 3  ; //  {{datatype|expand}}        }        
      string    name                                     = 4  ; //  Human-readable name associated with this
      bool      force_pcm                                = 5  ; //  When set to {{true}}, forces the audio f
      bool      passthrough                              = 6  ; //  When in Passthrough mode, the STB sends 
      uint32    audio_delay                              = 7  ; //  Audio delay value, in {{units}}, current
    }
    repeated SPDIF spdif = 16; // STBService.{i}.Components.SPDIF.{i}.
    message VideoOutput { // STBService.{i}.Components.VideoOutput.{i}.
      bool      enable                                   = 1  ; //  Enables or disables this video output. 
      string    status                                   = 2  ; //  The status of this video output.  {{enum
      string    alias                                    = 3  ; //  {{datatype|expand}}        }        
      bool      colorbar_enable                          = 4  ; //  Enables or disables the color bar displa
      string    name                                     = 5  ; //  Human-readable name associated with this
      string    composite_video_standard                 = 6  ; //  The type of analog video standard curren
      string    video_format                             = 7  ; //  Currently active video output format, or
      string    aspect_ratio_behaviour                   = 8  ; //  Indicates the aspect ratio behaviour for
      string    display_format                           = 9  ; //  Display format being connected to this V
      bool      macrovision                              = 10 ; //  Indicates whether Macrovision analog pro
      bool      hdcp                                     = 11 ; //  Indicates whether HDCP is being used on 
      string    scarts                                   = 12 ; //  SCART object instances associated with t
    }
    repeated VideoOutput video_output = 17; // STBService.{i}.Components.VideoOutput.{i}.
    message SCART { // STBService.{i}.Components.SCART.{i}.
      bool      enable                                   = 1  ; //  Enables or disables this SCART connector
      string    status                                   = 2  ; //  The status of this SCART connector.  {{e
      string    alias                                    = 3  ; //  {{datatype|expand}}        }        
      string    name                                     = 4  ; //  Human-readable name associated with this
      bool      presence                                 = 5  ; //  Enables or disables the Presence control
    }
    repeated SCART scart = 18; // STBService.{i}.Components.SCART.{i}.
    message HDMI { // STBService.{i}.Components.HDMI.{i}.
      bool      enable                                   = 1  ; //  Enables or disables the HDMI output.   
      string    status                                   = 2  ; //  The status of HDMI output.  {{enum}}   
      string    alias                                    = 3  ; //  {{datatype|expand}}        }        
      string    name                                     = 4  ; //  Human-readable name associated with this
      string    resolution_mode                          = 5  ; //  The resolution mode of the HDMI output.
      string    resolution_value                         = 6  ; //  When {{param|ResolutionMode}} is set to 
      message DisplayDevice { // STBService.{i}.Components.HDMI.{i}.DisplayDevice.
        string    status                                   = 1  ; //  The status of the connected HDMI Display
        string    name                                     = 2  ; //  Human-readable name associated with this
        bytes     eedid                                    = 3  ; //  Enhanced Extended Display Information Da
        string    supported_resolutions                    = 4  ; //  Each entry is a supported resolution of 
        string    preferred_resolution                     = 5  ; //  Preferred connected HDMI device resoluti
        uint32    video_latency                            = 6  ; //  Video latency, in {{units}}, being appli
        bool      cecsupport                               = 7  ; //  When set to {{true}}, indicates the conn
        bool      auto_lip_sync_support                    = 8  ; //  When set to {{true}}, indicates the conn
        bool      hdmi3dpresent                            = 9  ; //  When set to {{true}}, indicates the conn
      }
      DisplayDevice display_device = 7; // STBService.{i}.Components.HDMI.{i}.DisplayDevice.
    }
    repeated HDMI hdmi = 19; // STBService.{i}.Components.HDMI.{i}.
    message CA { // STBService.{i}.Components.CA.{i}.
      bool      enable                                   = 1  ; //  Enables or disables this CA system.    
      string    status                                   = 2  ; //  The status of this CA system.  {{enum}}
      string    alias                                    = 3  ; //  {{datatype|expand}}        }        
      string    name                                     = 4  ; //  Indicates a unique identifier (e.g. the 
      string    smart_card_reader                        = 5  ; //  Path name of the smart card reader objec
    }
    repeated CA ca = 20; // STBService.{i}.Components.CA.{i}.
    message DRM { // STBService.{i}.Components.DRM.{i}.
      bool      enable                                   = 1  ; //  Enables or disables this DRM system.   
      string    status                                   = 2  ; //  The status of this DRM system.  {{enum}}
      string    alias                                    = 3  ; //  {{datatype|expand}}        }        
      string    name                                     = 4  ; //  Indicates a unique identifier (e.g. the 
      string    smart_card_reader                        = 5  ; //  Path name of the smart card reader objec
    }
    repeated DRM drm = 21; // STBService.{i}.Components.DRM.{i}.
  }
  Components components = 4; // STBService.{i}.Components.
  message AVStreams { // STBService.{i}.AVStreams.
    uint32    active_avstreams                         = 1  ; //  Number of AV streams currently active (i
    uint32    avstream_number_of_entries               = 2  ; //  Number of {{object|AVStream}} instances.
    message AVStream { // STBService.{i}.AVStreams.AVStream.{i}.
      string    status                                   = 1  ; //  The status of this AV stream.  {{enum}}
      string    alias                                    = 2  ; //  {{datatype|expand}}        }        
      string    name                                     = 3  ; //  Human-readable name associated with this
      string    pvrstate                                 = 4  ; //  Indicates whether this stream is using t
      string    front_end                                = 5  ; //  Input FrontEnd object instance associate
      string    inbound                                  = 6  ; //  Inbound IP stream object instance associ
      string    outbound                                 = 7  ; //  Outbound IP stream object instance assoc
      string    audio_decoder                            = 8  ; //  Audio Decoder object instance associated
      string    video_decoder                            = 9  ; //  Video Decoder object instance associated
      string    ca                                       = 10 ; //  CA system object instance associated wit
      string    drm                                      = 11 ; //  DRM system object instance associated wi
    }
    repeated AVStream avstream = 3; // STBService.{i}.AVStreams.AVStream.{i}.
  }
  AVStreams avstreams = 5; // STBService.{i}.AVStreams.
  message AVPlayers { // STBService.{i}.AVPlayers.
    uint32    active_avplayers                         = 1  ; //  Number of AV players currently active (i
    uint32    avplayer_number_of_entries               = 2  ; //  Number of {{object|AVPlayer}} instances.
    string    preferred_audio_language                 = 3  ; //  Human-readable string, as specified in {
    string    preferred_subtitling_language            = 4  ; //  Human-readable string, as specified in {
    string    preferred_behaviour                      = 5  ; //  Aspect ratio behaviour preference for di
    bool      reset_pincode                            = 6  ; //  When set to {{true}}, the master PIN cod
    message AVPlayer { // STBService.{i}.AVPlayers.AVPlayer.{i}.
      bool      enable                                   = 1  ; //  Enables or disables this AV player.    
      string    status                                   = 2  ; //  The status of this AV player.  {{enum}}
      string    alias                                    = 3  ; //  {{datatype|expand}}        }        
      string    name                                     = 4  ; //  Human-readable name associated with this
      string    audio_language                           = 5  ; //  Human-readable string, as specified in {
      string    subtitling_status                        = 6  ; //  The status of subtitling for this AV pla
      string    subtitling_language                      = 7  ; //  Human-readable string, as specified in {
      string    audio_outputs                            = 8  ; //  Audio output object instances associated
      string    video_outputs                            = 9  ; //  Video output object instances associated
      string    main_stream                              = 10 ; //  AV stream object instance associated wit
      string    pipstreams                               = 11 ; //  AV stream object instances associated wi
    }
    repeated AVPlayer avplayer = 7; // STBService.{i}.AVPlayers.AVPlayer.{i}.
  }
  AVPlayers avplayers = 6; // STBService.{i}.AVPlayers.
  message ServiceMonitoring { // STBService.{i}.ServiceMonitoring.
    bool      sample_enable                            = 1  ; //  Enables or disables collection of Sample
    string    sample_state                             = 2  ; //  Indicates availability of Sample statist
    uint32    sample_interval                          = 3  ; //  The sample interval in {{units}}.  Each 
    uint32    report_samples                           = 4  ; //  The number of samples that the STB can s
    uint32    events_per_sample_interval               = 5  ; //  The number of event measurements of each
    uint32    fetch_samples                            = 6  ; //  If collection of Sample statistics is en
    string    time_reference                           = 7  ; //  An absolute time reference in UTC to det
    bool      force_sample                             = 8  ; //  When set to {{true}}, forces statistics 
    string    report_start_time                        = 9  ; //  The absolute time at which the sample in
    string    report_end_time                          = 10 ; //  The absolute time at which the sample in
    uint32    main_stream_number_of_entries            = 11 ; //  Number of {{object|MainStream}} instance
    bool      event_collection_enable                  = 12 ; //  Enables or disables the collection of th
    message MainStream { // STBService.{i}.ServiceMonitoring.MainStream.{i}.
      bool      enable                                   = 1  ; //  Enables or disables collection of Total 
      string    status                                   = 2  ; //  Total and Sample statistics and event co
      string    session_id                               = 3  ; //  Time based UUID {{bibref|RFC4122|Section
      string    alias                                    = 4  ; //  {{datatype|expand}}        }        
      string    service_type                             = 5  ; //  Service type associated with this main s
      string    avstream                                 = 6  ; //  Main AV stream object instance currently
      uint32    gmin                                     = 7  ; //  Minimum number of consecutive received p
      uint32    severe_loss_min_distance                 = 8  ; //  The minimum distance required between er
      uint32    severe_loss_min_length                   = 9  ; //  The minimum value for the count of lost 
      uint32    channel_change_failure_timeout           = 10 ; //  Time period, in {{units}}, between a use
      string    packets_lost_by_event_histogram_intervals = 11 ; //  {{list}} Definition of the histogram int
      string    delay_between_loss_events_histogram_intervals = 12 ; //  {{list}} Definition of the histogram int
      string    duration_severe_loss_events_histogram_intervals = 13 ; //  {{list}} Definition of the histogram int
      message Total { // STBService.{i}.ServiceMonitoring.MainStream.{i}.Total.
        uint32    total_seconds                            = 1  ; //  The number of seconds during which data 
        bool      reset                                    = 2  ; //  When set to {{true}}, resets Total stati
        uint32    reset_time                               = 3  ; //  Number of seconds since the Total statis
        message DejitteringStats { // STBService.{i}.ServiceMonitoring.MainStream.{i}.Total.DejitteringStats.
          uint32    total_seconds                            = 1  ; //  The number of seconds during which data 
          uint32    empty_buffer_time                        = 2  ; //  Total time, in {{units}}, for which the 
          uint32    overruns                                 = 3  ; //  Total number of times the receive jitter
          uint32    underruns                                = 4  ; //  Total number of times the receive jitter
        }
        DejitteringStats dejittering_stats = 4; // STBService.{i}.ServiceMonitoring.MainStream.{i}.Total.DejitteringStats.
        message TCPStats { // STBService.{i}.ServiceMonitoring.MainStream.{i}.Total.TCPStats.
          uint32    total_seconds                            = 1  ; //  The number of seconds during which data 
          uint32    packets_received                         = 2  ; //  Total number of TCP packets correctly re
          uint32    packets_retransmitted                    = 3  ; //  Total number of TCP packets being retran
          uint32    bytes_received                           = 4  ; //  Total number of bytes received for this 
        }
        TCPStats tcpstats = 5; // STBService.{i}.ServiceMonitoring.MainStream.{i}.Total.TCPStats.
        message RTPStats { // STBService.{i}.ServiceMonitoring.MainStream.{i}.Total.RTPStats.
          uint32    total_seconds                            = 1  ; //  The number of seconds during which data 
          uint32    packets_expected                         = 2  ; //  Total number of RTP packets expected for
          uint32    packets_discarded                        = 3  ; //  Total number of packets discarded at the
          uint32    packets_out_of_sequence                  = 4  ; //  Total number of packets out of sequence 
          uint32    packets_received                         = 5  ; //  Total number of RTP packets received for
          uint32    packets_received_before_ec               = 6  ; //  Total number of RTP packets received for
          uint32    packets_lost                             = 7  ; //  Total number of RTP packets lost for thi
          uint32    packets_lost_before_ec                   = 8  ; //  Total number of RTP packets lost for thi
          string    packets_lost_by_event_histogram          = 9  ; //  {{list}} Total number of loss events cou
          string    packets_lost_by_event_histogram_before_ec = 10 ; //  {{list}} Total number of loss events cou
          uint32    loss_events                              = 11 ; //  Total number of Loss Events for this str
          uint32    loss_events_before_ec                    = 12 ; //  Total number of Loss Events for this str
          string    delay_between_loss_events_histogram      = 13 ; //  {{list}} Total number of times that the 
          string    delay_between_loss_events_histogram_before_ec = 14 ; //  {{list}} Total number of times that the 
          uint32    severe_loss_index_count                  = 15 ; //  Total number of Loss Events closer than 
          uint32    severe_loss_index_count_before_ec        = 16 ; //  Total number of Loss Events closer than 
          uint32    severe_loss_length_count                 = 17 ; //  Total number of Loss Events longer than 
          uint32    severe_loss_length_count_before_ec       = 18 ; //  Total number of Loss Events longer than 
          string    duration_severe_loss_events_histogram    = 19 ; //  {{list}} Total number of severe loss eve
          string    duration_severe_loss_events_histogram_before_ec = 20 ; //  {{list}} Total number of severe loss eve
          uint32    retransmit_timeouts                      = 21 ; //  Total number of RTP/AVPF retransmission 
        }
        RTPStats rtpstats = 6; // STBService.{i}.ServiceMonitoring.MainStream.{i}.Total.RTPStats.
        message MPEG2TSStats { // STBService.{i}.ServiceMonitoring.MainStream.{i}.Total.MPEG2TSStats.
          uint32    total_seconds                            = 1  ; //  The number of seconds during which data 
          uint32    tspackets_received                       = 2  ; //  Total number of MPEG2-TS packets receive
          uint32    tssync_byte_error_count                  = 3  ; //  Total number of MPEG2-TS packets with an
          uint32    tssync_loss_count                        = 4  ; //  Total number of MPEG2-TS Loss of Synchro
          uint32    packet_discontinuity_counter             = 5  ; //  Total number of MPEG2-TS Discontinuity e
          uint32    packet_discontinuity_counter_before_ca   = 6  ; //  Total number of MPEG2-TS Discontinuity e
        }
        MPEG2TSStats mpeg2tsstats = 7; // STBService.{i}.ServiceMonitoring.MainStream.{i}.Total.MPEG2TSStats.
        message VideoDecoderStats { // STBService.{i}.ServiceMonitoring.MainStream.{i}.Total.VideoDecoderStats.
          uint32    total_seconds                            = 1  ; //  The number of seconds during which data 
          uint32    frame_rate                               = 2  ; //  The latest frame rate at which the STB p
          uint32    decoded_frames                           = 3  ; //  The number of video frames that were dec
          uint32    lost_frames                              = 4  ; //  The number of video frames that could no
          uint32    concealed_frames                         = 5  ; //  The number of video frames that were rep
          uint32    idecoded_frames                          = 6  ; //  The number of I frames that were decoded
          uint32    ilost_frames                             = 7  ; //  The number of I frames that could not be
          uint32    iconcealed_frames                        = 8  ; //  The number of I frames that were reprodu
          uint32    pdecoded_frames                          = 9  ; //  The number of P frames that were decoded
          uint32    plost_frames                             = 10 ; //  The number of P frames that could not be
          uint32    pconcealed_frames                        = 11 ; //  The number of P frames that were reprodu
          uint32    bdecoded_frames                          = 12 ; //  The number of B frames that were decoded
          uint32    blost_frames                             = 13 ; //  The number of B frames that could not be
          uint32    bconcealed_frames                        = 14 ; //  The number of B frames that were reprodu
          uint32    avresynch_counter                        = 15 ; //  The number of AV resynchronizations that
        }
        VideoDecoderStats video_decoder_stats = 8; // STBService.{i}.ServiceMonitoring.MainStream.{i}.Total.VideoDecoderStats.
        message AudioDecoderStats { // STBService.{i}.ServiceMonitoring.MainStream.{i}.Total.AudioDecoderStats.
          uint32    total_seconds                            = 1  ; //  The number of seconds during which data 
          uint32    decoded_frames                           = 2  ; //  The number of audio frames that were dec
          uint32    decoding_errors                          = 3  ; //  The number of audio decoding errors dete
        }
        AudioDecoderStats audio_decoder_stats = 9; // STBService.{i}.ServiceMonitoring.MainStream.{i}.Total.AudioDecoderStats.
        message VideoResponseStats { // STBService.{i}.ServiceMonitoring.MainStream.{i}.Total.VideoResponseStats.
          uint32    total_seconds                            = 1  ; //  The number of seconds during which data 
          uint32    channel_change_failures                  = 2  ; //  Number of channel change failures. A cha
          string    channel_failures                         = 3  ; //  Each entry represents a channel for whic
          uint32    minimum_vo_dcontrol_response             = 4  ; //  Minimum time period, in {{units}}, betwe
          uint32    maximum_vo_dcontrol_response             = 5  ; //  Maximum time period, in {{units}}, betwe
          uint32    requested_transactions                   = 6  ; //  Total number of RTSP protocol  requests 
          uint32    access_successes                         = 7  ; //  Total number of successful VoD attempts.
          uint32    completion_count                         = 8  ; //  Total number of completed VoD requests. 
          uint32    minimum_video_system_response            = 9  ; //  Minimum time period (in {{units}}) betwe
          uint32    maximum_video_system_response            = 10 ; //  Maximum time period (in {{units}}) betwe
        }
        VideoResponseStats video_response_stats = 10; // STBService.{i}.ServiceMonitoring.MainStream.{i}.Total.VideoResponseStats.
      }
      Total total = 14; // STBService.{i}.ServiceMonitoring.MainStream.{i}.Total.
      message Sample { // STBService.{i}.ServiceMonitoring.MainStream.{i}.Sample.
        string    sample_seconds                           = 1  ; //  Each entry is the number of seconds duri
        string    significant_changes                      = 2  ; //  Each entry is the total number of times 
        string    pvrtime_shift                            = 3  ; //  Each entry is a Boolean that indicates w
        uint32    high_level_metric_stats_number_of_entries = 4  ; //  Number of {{object|HighLevelMetricStats}
        message DejitteringStats { // STBService.{i}.ServiceMonitoring.MainStream.{i}.Sample.DejitteringStats.
          string    sample_seconds                           = 1  ; //  Each entry is the number of seconds duri
          string    overruns                                 = 2  ; //  Each entry is the total number of times 
          string    underruns                                = 3  ; //  Each entry is the total number of times 
          string    empty_buffer_time                        = 4  ; //  Each entry is the time period, in {{unit
        }
        DejitteringStats dejittering_stats = 5; // STBService.{i}.ServiceMonitoring.MainStream.{i}.Sample.DejitteringStats.
        message TCPStats { // STBService.{i}.ServiceMonitoring.MainStream.{i}.Sample.TCPStats.
          string    sample_seconds                           = 1  ; //  Each entry is the number of seconds duri
          string    packets_received                         = 2  ; //  Each entry is the total number of TCP pa
          string    packets_retransmitted                    = 3  ; //  Each entry is the total number of TCP pa
          string    bytes_received                           = 4  ; //  Each entry is the total number of bytes 
        }
        TCPStats tcpstats = 6; // STBService.{i}.ServiceMonitoring.MainStream.{i}.Sample.TCPStats.
        message RTPStats { // STBService.{i}.ServiceMonitoring.MainStream.{i}.Sample.RTPStats.
          string    sample_seconds                           = 1  ; //  Each entry is the number of seconds duri
          string    packets_expected                         = 2  ; //  Each entry is the total number of RTP pa
          string    packets_discarded                        = 3  ; //  Each entry is the number of packets that
          string    packets_out_of_sequence                  = 4  ; //  Each entry is the number of packets out 
          string    packets_received                         = 5  ; //  Each entry is the total number of RTP pa
          string    packets_received_before_ec               = 6  ; //  Each entry is the total number of RTP pa
          string    retransmit_timeouts                      = 7  ; //  Each entry is the number of RTP/AVPF ret
          string    packets_lost                             = 8  ; //  Each entry is the total number of RTP pa
          string    packets_lost_before_ec                   = 9  ; //  Each entry is the total number of RTP pa
          string    packets_lost_by_event_histogram          = 10 ; //  {{list}} Each list item is a comma-separ
          string    packets_lost_by_event_histogram_before_ec = 11 ; //  {{list}} Each list item is a comma-separ
          string    loss_events                              = 12 ; //  Each entry is the total number of Loss E
          string    loss_events_before_ec                    = 13 ; //  Each entry is the total number of Loss E
          string    delay_between_loss_events_histogram      = 14 ; //  {{list}} Each list item is a comma-separ
          string    delay_between_loss_events_histogram_before_ec = 15 ; //  {{list}} Each list item is a comma-separ
          string    severe_loss_index_count                  = 16 ; //  Each entry is the total number of Loss E
          string    severe_loss_index_count_before_ec        = 17 ; //  Each entry is the total number of Loss E
          string    average_loss_distance                    = 18 ; //  Each entry is the average distance in {{
          string    average_loss_distance_before_ec          = 19 ; //  Each entry is the average distance in {{
          string    minimum_loss_distance                    = 20 ; //  Each entry is the length in {{units}} of
          string    minimum_loss_distance_before_ec          = 21 ; //  Each entry is the length in {{units}} of
          string    severe_loss_length_count                 = 22 ; //  Each entry is the total number of Loss E
          string    severe_loss_length_count_before_ec       = 23 ; //  Each entry is the total number of Loss E
          string    duration_severe_loss_events_histogram    = 24 ; //  {{list}} Each list item is a comma-separ
          string    duration_severe_loss_events_histogram_before_ec = 25 ; //  {{list}} Each list item is a comma-separ
          string    maximum_loss_period                      = 26 ; //  Each entry is the length in {{units}} of
          string    maximum_loss_period_before_ec            = 27 ; //  Each entry is the length in {{units}} of
          string    average_loss_period                      = 28 ; //  Each entry is the average length in {{un
          string    average_loss_period_before_ec            = 29 ; //  Each entry is the average length in {{un
          string    minimum_loss_period                      = 30 ; //  Each entry is the length in {{units}} of
          string    minimum_loss_period_before_ec            = 31 ; //  Each entry is the length in {{units}} of
        }
        RTPStats rtpstats = 7; // STBService.{i}.ServiceMonitoring.MainStream.{i}.Sample.RTPStats.
        message MPEG2TSStats { // STBService.{i}.ServiceMonitoring.MainStream.{i}.Sample.MPEG2TSStats.
          string    sample_seconds                           = 1  ; //  Each entry is the number of seconds duri
          string    tspackets_received                       = 2  ; //  Each entry is the total number of MPEG2-
          string    tspackets_drained                        = 3  ; //  Each entry is the total number of good M
          string    tssync_byte_error_count                  = 4  ; //  Each entry is the total number of MPEG2-
          string    tssync_loss_count                        = 5  ; //  Each entry is the total number of MPEG2-
          string    packet_discontinuity_counter             = 6  ; //  Each entry is the total number of MPEG2-
          string    packet_discontinuity_counter_before_ca   = 7  ; //  Each entry is the total number of MPEG2-
        }
        MPEG2TSStats mpeg2tsstats = 8; // STBService.{i}.ServiceMonitoring.MainStream.{i}.Sample.MPEG2TSStats.
        message VideoDecoderStats { // STBService.{i}.ServiceMonitoring.MainStream.{i}.Sample.VideoDecoderStats.
          string    sample_seconds                           = 1  ; //  Each entry is the number of seconds duri
          string    frame_rate                               = 2  ; //  Each entry is the last frame rate at whi
          string    decoded_frames                           = 3  ; //  Each entry is the number of video frames
          string    lost_frames                              = 4  ; //  Each entry is the number of video frames
          string    concealed_frames                         = 5  ; //  Each entry is the number of video frames
          string    idecoded_frames                          = 6  ; //  Each entry is the number of I frames tha
          string    ilost_frames                             = 7  ; //  Each entry is the number of I frames tha
          string    iconcealed_frames                        = 8  ; //  Each entry is the number of I frames tha
          string    pdecoded_frames                          = 9  ; //  Each entry is the number of P frames tha
          string    plost_frames                             = 10 ; //  Each entry is the number of P frames tha
          string    pconcealed_frames                        = 11 ; //  Each entry is the number of P frames tha
          string    bdecoded_frames                          = 12 ; //  Each entry is the number of B frames tha
          string    blost_frames                             = 13 ; //  Each entry is the number of B frames tha
          string    bconcealed_frames                        = 14 ; //  Each entry is the number of B frames tha
          string    avresynch_counter                        = 15 ; //  Each entry is the number of AV resynchro
        }
        VideoDecoderStats video_decoder_stats = 9; // STBService.{i}.ServiceMonitoring.MainStream.{i}.Sample.VideoDecoderStats.
        message AudioDecoderStats { // STBService.{i}.ServiceMonitoring.MainStream.{i}.Sample.AudioDecoderStats.
          string    sample_seconds                           = 1  ; //  Each entry is the number of seconds duri
          string    decoded_frames                           = 2  ; //  Each entry is the number of audio frames
          string    decoding_errors                          = 3  ; //  Each entry is the number of audio decodi
        }
        AudioDecoderStats audio_decoder_stats = 10; // STBService.{i}.ServiceMonitoring.MainStream.{i}.Sample.AudioDecoderStats.
        message VideoResponseStats { // STBService.{i}.ServiceMonitoring.MainStream.{i}.Sample.VideoResponseStats.
          string    sample_seconds                           = 1  ; //  Each entry is the number of seconds duri
          string    average_video_system_response            = 2  ; //  Each entry is the time period (in {{unit
          string    minimum_video_system_response            = 3  ; //  Each entry is the minimum time period (i
          string    maximum_video_system_response            = 4  ; //  Each entry is the maximum time period (i
          string    average_vo_dcontrol_response             = 5  ; //  Each entry is the time period, in {{unit
          string    minimum_vo_dcontrol_response             = 6  ; //  Each entry is the minimum time period, i
          string    maximum_vo_dcontrol_response             = 7  ; //  Each entry is the maximum time period, i
          string    vo_dcontrol_response                     = 8  ; //  Each entry is a colon separated list of 
          string    video_system_response                    = 9  ; //  Each entry is a colon separated list of 
          string    requested_transactions                   = 10 ; //  Each entry is the number of RTSP protoco
          string    access_successes                         = 11 ; //  Each entry is the number of successful V
          string    completion_count                         = 12 ; //  Each entry is the number of completed Vo
          string    channel_change_failures                  = 13 ; //  Each entry is the number of channel chan
        }
        VideoResponseStats video_response_stats = 11; // STBService.{i}.ServiceMonitoring.MainStream.{i}.Sample.VideoResponseStats.
        message HighLevelMetricStats { // STBService.{i}.ServiceMonitoring.MainStream.{i}.Sample.HighLevelMetricStats.{i}.
          bool      enable                                   = 1  ; //  Enables or disables this Metric instance
          string    status                                   = 2  ; //  The status of this Metric instance.  {{e
          string    alias                                    = 3  ; //  {{datatype|expand}}        }        
          string    metric_name                              = 4  ; //  Indicates a unique identifier for this h
          uint32    metric1threshold                         = 5  ; //  This parameter is DEPRECATED and replace
          uint32    metric2threshold                         = 6  ; //  This parameter is DEPRECATED and replace
          string    sample_seconds                           = 7  ; //  Each entry is the number of seconds duri
          string    metric1                                  = 8  ; //  This parameter is DEPRECATED and replace
          string    metric2                                  = 9  ; //  This parameter is DEPRECATED and replace
          uint32    metric1failures                          = 10 ; //  This parameter is DEPRECATED and replace
          uint32    metric2failures                          = 11 ; //  This parameter is DEPRECATED and replace
          uint32    metric_sample_interval                   = 12 ; //  A time period measured in {{units}}. A n
          uint32    metric_threshold                         = 13 ; //  The threshold value that controls the ca
          string    metric                                   = 14 ; //  Each entry is a high-level metric calcul
          uint32    metric_failures                          = 15 ; //  Counts the number of times (since the la
        }
        repeated HighLevelMetricStats high_level_metric_stats = 12; // STBService.{i}.ServiceMonitoring.MainStream.{i}.Sample.HighLevelMetricStats.{i}.
      }
      Sample sample = 15; // STBService.{i}.ServiceMonitoring.MainStream.{i}.Sample.
      message EventLog { // STBService.{i}.ServiceMonitoring.MainStream.{i}.EventLog.
        bool      reset                                    = 1  ; //  When set to true, clears the events from
        uint32    entry_number_of_entries                  = 2  ; //  {{numentries}}        }        from
        message Entry { // STBService.{i}.ServiceMonitoring.MainStream.{i}.EventLog.Entry.{i}.
          uint32    sequence_number                          = 1  ; //  The sequence number of the event within 
          string    type                                     = 2  ; //  Type of the event. The values for this p
          string    time                                     = 3  ; //  Timestamp of the event.        .     
          uint32    parameter_number_of_entries              = 4  ; //  {{numentries}}        }           
          message Parameter { // STBService.{i}.ServiceMonitoring.MainStream.{i}.EventLog.Entry.{i}.Parameter.{i}.
            string    name                                     = 1  ; //  Name of the parameter (vendor-specific).
            string    value                                    = 2  ; //  Value of the parameter.        .     
          }
          repeated Parameter parameter = 5; // STBService.{i}.ServiceMonitoring.MainStream.{i}.EventLog.Entry.{i}.Parameter.{i}.
        }
        repeated Entry entry = 3; // STBService.{i}.ServiceMonitoring.MainStream.{i}.EventLog.Entry.{i}.
      }
      EventLog event_log = 16; // STBService.{i}.ServiceMonitoring.MainStream.{i}.EventLog.
    }
    repeated MainStream main_stream = 13; // STBService.{i}.ServiceMonitoring.MainStream.{i}.
    message GlobalOperation { // STBService.{i}.ServiceMonitoring.GlobalOperation.
      message Total { // STBService.{i}.ServiceMonitoring.GlobalOperation.Total.
        uint32    service_access_time                      = 1  ; //  The time period in, {{units}}, between t
        uint32    minimum_portal_response                  = 2  ; //  Minimum portal latency defined as the mi
        uint32    maximum_portal_response                  = 3  ; //  Maximum portal latency defined as the ma
      }
      Total total = 1; // STBService.{i}.ServiceMonitoring.GlobalOperation.Total.
      message Sample { // STBService.{i}.ServiceMonitoring.GlobalOperation.Sample.
        string    minimum_portal_response                  = 1  ; //  Each entry is the minimum portal latency
        string    maximum_portal_response                  = 2  ; //  Each entry is the maximum portal latency
        string    portal_response                          = 3  ; //  Each entry is a colon separated list of 
      }
      Sample sample = 2; // STBService.{i}.ServiceMonitoring.GlobalOperation.Sample.
    }
    GlobalOperation global_operation = 14; // STBService.{i}.ServiceMonitoring.GlobalOperation.
  }
  ServiceMonitoring service_monitoring = 7; // STBService.{i}.ServiceMonitoring.
  message Applications { // STBService.{i}.Applications.
    uint32    service_provider_number_of_entries       = 1  ; //  Number of Service Provider instances.  
    message AudienceStats { // STBService.{i}.Applications.AudienceStats.
      bool      enable                                   = 1  ; //  Enables or disables collection of viewin
      bool      reset                                    = 2  ; //  When set to {{true}} resets the viewing 
      uint32    reset_time                               = 3  ; //  Number of {{units}} since the Audience s
      uint32    channel_number_of_entries                = 4  ; //  Number of instances of {{object|Channel}
      message Channel { // STBService.{i}.Applications.AudienceStats.Channel.{i}.
        string    alias                                    = 1  ; //  {{datatype|expand}}        }        
        string    name                                     = 2  ; //  String describing the TV channel being d
        uint32    duration                                 = 3  ; //  The cumulative duration of this channel 
      }
      repeated Channel channel = 5; // STBService.{i}.Applications.AudienceStats.Channel.{i}.
    }
    AudienceStats audience_stats = 2; // STBService.{i}.Applications.AudienceStats.
    message CDSPush { // STBService.{i}.Applications.CDSPush.
      string    reference                                = 1  ; //  It references the object instance dedica
      uint32    content_item_number_of_entries           = 2  ; //  {{numentries}}        }        tat
      message ContentItem { // STBService.{i}.Applications.CDSPush.ContentItem.{i}.
        string    alias                                    = 1  ; //  {{datatype|expand}}        }        
        string    content_reference_id                     = 2  ; //  Unique Content Item reference as defined
        uint32    version_number                           = 3  ; //  Version number of the stored content ite
        bool      delete_item                              = 4  ; //  When set to {{true}}, deletes this Conte
      }
      repeated ContentItem content_item = 3; // STBService.{i}.Applications.CDSPush.ContentItem.{i}.
    }
    CDSPush cdspush = 3; // STBService.{i}.Applications.CDSPush.
    message CDSPull { // STBService.{i}.Applications.CDSPull.
      string    reference                                = 1  ; //  It references the object instance dedica
      uint32    content_item_number_of_entries           = 2  ; //  {{numentries}}        }          
      message ContentItem { // STBService.{i}.Applications.CDSPull.ContentItem.{i}.
        string    alias                                    = 1  ; //  {{datatype|expand}}        }        
        string    content_reference_id                     = 2  ; //  Unique Content Item reference as defined
        uint32    version_number                           = 3  ; //  Version number of the stored content ite
        bool      delete_item                              = 4  ; //  When set to {{true}}, deletes this Conte
      }
      repeated ContentItem content_item = 3; // STBService.{i}.Applications.CDSPull.ContentItem.{i}.
    }
    CDSPull cdspull = 4; // STBService.{i}.Applications.CDSPull.
    message ServiceProvider { // STBService.{i}.Applications.ServiceProvider.{i}.
      string    alias                                    = 1  ; //  {{datatype|expand}}        }        
      string    name                                     = 2  ; //  Service Provider name.        .      
      string    domain                                   = 3  ; //  Service Provider domain URI.        .
      string    service_discovery_server                 = 4  ; //  Service Providers Service Discovery S
      string    active_bcgservers                        = 5  ; //  Comma separated list of the BCG (Broadba
    }
    repeated ServiceProvider service_provider = 5; // STBService.{i}.Applications.ServiceProvider.{i}.
  }
  Applications applications = 8; // STBService.{i}.Applications.
}

message BoxRequest { int32 unused = 1; }

message BoxReply { int32 unused = 1; }

message X_012345_Message { int32 unused = 1;  } // Vendor extensions X_{OUI}_{NameOfNewThing}

service Box {
  rpc GetSTBService(BoxRequest) returns (tr135.STBService) {}
  rpc SetSTBService(tr135.STBService) returns (BoxReply) {}

  rpc GetCapabilities(BoxRequest) returns (tr135.STBService.Capabilities) {}
  rpc SetCapabilities(tr135.STBService.Capabilities) returns (BoxReply) {}

  rpc GetFrontEnd(BoxRequest) returns (tr135.STBService.Capabilities.FrontEnd) {}
  rpc SetFrontEnd(tr135.STBService.Capabilities.FrontEnd) returns (BoxReply) {}

  rpc GetDVBT(BoxRequest) returns (tr135.STBService.Capabilities.FrontEnd.DVBT) {}
  rpc SetDVBT(tr135.STBService.Capabilities.FrontEnd.DVBT) returns (BoxReply) {}

  rpc GetIP(BoxRequest) returns (tr135.STBService.Capabilities.FrontEnd.IP) {}
  rpc SetIP(tr135.STBService.Capabilities.FrontEnd.IP) returns (BoxReply) {}

  rpc GetPVR(BoxRequest) returns (tr135.STBService.Capabilities.PVR) {}
  rpc SetPVR(tr135.STBService.Capabilities.PVR) returns (BoxReply) {}

  rpc GetAudioDecoder(BoxRequest) returns (tr135.STBService.Capabilities.AudioDecoder) {}
  rpc SetAudioDecoder(tr135.STBService.Capabilities.AudioDecoder) returns (BoxReply) {}

  rpc GetVideoDecoder(BoxRequest) returns (tr135.STBService.Capabilities.VideoDecoder) {}
  rpc SetVideoDecoder(tr135.STBService.Capabilities.VideoDecoder) returns (BoxReply) {}

  rpc GetMPEG2Part2(BoxRequest) returns (tr135.STBService.Capabilities.VideoDecoder.MPEG2Part2) {}
  rpc SetMPEG2Part2(tr135.STBService.Capabilities.VideoDecoder.MPEG2Part2) returns (BoxReply) {}

  rpc GetProfileLevel(BoxRequest) returns (stream tr135.STBService.Capabilities.VideoDecoder.MPEG2Part2.ProfileLevel) {}
  rpc SetProfileLevel(stream tr135.STBService.Capabilities.VideoDecoder.MPEG2Part2.ProfileLevel) returns (BoxReply) {}

  rpc GetMPEG4Part2(BoxRequest) returns (tr135.STBService.Capabilities.VideoDecoder.MPEG4Part2) {}
  rpc SetMPEG4Part2(tr135.STBService.Capabilities.VideoDecoder.MPEG4Part2) returns (BoxReply) {}

  //?? rpc GetProfileLevel(BoxRequest) returns (stream tr135.STBService.Capabilities.VideoDecoder.MPEG4Part2.ProfileLevel) {}
  //?? rpc SetProfileLevel(stream tr135.STBService.Capabilities.VideoDecoder.MPEG4Part2.ProfileLevel) returns (BoxReply) {}

  rpc GetMPEG4Part10(BoxRequest) returns (tr135.STBService.Capabilities.VideoDecoder.MPEG4Part10) {}
  rpc SetMPEG4Part10(tr135.STBService.Capabilities.VideoDecoder.MPEG4Part10) returns (BoxReply) {}

  //?? rpc GetProfileLevel(BoxRequest) returns (stream tr135.STBService.Capabilities.VideoDecoder.MPEG4Part10.ProfileLevel) {}
  //?? rpc SetProfileLevel(stream tr135.STBService.Capabilities.VideoDecoder.MPEG4Part10.ProfileLevel) returns (BoxReply) {}

  rpc GetSMPTEVC1(BoxRequest) returns (tr135.STBService.Capabilities.VideoDecoder.SMPTEVC1) {}
  rpc SetSMPTEVC1(tr135.STBService.Capabilities.VideoDecoder.SMPTEVC1) returns (BoxReply) {}

  //?? rpc GetProfileLevel(BoxRequest) returns (stream tr135.STBService.Capabilities.VideoDecoder.SMPTEVC1.ProfileLevel) {}
  //?? rpc SetProfileLevel(stream tr135.STBService.Capabilities.VideoDecoder.SMPTEVC1.ProfileLevel) returns (BoxReply) {}

  rpc GetAudioOutput(BoxRequest) returns (tr135.STBService.Capabilities.AudioOutput) {}
  rpc SetAudioOutput(tr135.STBService.Capabilities.AudioOutput) returns (BoxReply) {}

  rpc GetVideoOutput(BoxRequest) returns (tr135.STBService.Capabilities.VideoOutput) {}
  rpc SetVideoOutput(tr135.STBService.Capabilities.VideoOutput) returns (BoxReply) {}

  rpc GetHDMI(BoxRequest) returns (tr135.STBService.Capabilities.HDMI) {}
  rpc SetHDMI(tr135.STBService.Capabilities.HDMI) returns (BoxReply) {}

  rpc GetCDS(BoxRequest) returns (tr135.STBService.Capabilities.CDS) {}
  rpc SetCDS(tr135.STBService.Capabilities.CDS) returns (BoxReply) {}

  rpc GetCA(BoxRequest) returns (tr135.STBService.Capabilities.CA) {}
  rpc SetCA(tr135.STBService.Capabilities.CA) returns (BoxReply) {}

  rpc GetDRM(BoxRequest) returns (tr135.STBService.Capabilities.DRM) {}
  rpc SetDRM(tr135.STBService.Capabilities.DRM) returns (BoxReply) {}

  rpc GetServiceMonitoring(BoxRequest) returns (tr135.STBService.Capabilities.ServiceMonitoring) {}
  rpc SetServiceMonitoring(tr135.STBService.Capabilities.ServiceMonitoring) returns (BoxReply) {}

  rpc GetAudienceStats(BoxRequest) returns (tr135.STBService.Capabilities.AudienceStats) {}
  rpc SetAudienceStats(tr135.STBService.Capabilities.AudienceStats) returns (BoxReply) {}

  rpc GetComponents(BoxRequest) returns (tr135.STBService.Components) {}
  rpc SetComponents(tr135.STBService.Components) returns (BoxReply) {}

  //?? rpc GetFrontEnd(BoxRequest) returns (stream tr135.STBService.Components.FrontEnd) {}
  //?? rpc SetFrontEnd(stream tr135.STBService.Components.FrontEnd) returns (BoxReply) {}

  //?? rpc GetDVBT(BoxRequest) returns (tr135.STBService.Components.FrontEnd.DVBT) {}
  //?? rpc SetDVBT(tr135.STBService.Components.FrontEnd.DVBT) returns (BoxReply) {}

  rpc GetModulation(BoxRequest) returns (tr135.STBService.Components.FrontEnd.DVBT.Modulation) {}
  rpc SetModulation(tr135.STBService.Components.FrontEnd.DVBT.Modulation) returns (BoxReply) {}

  rpc GetService(BoxRequest) returns (tr135.STBService.Components.FrontEnd.DVBT.Service) {}
  rpc SetService(tr135.STBService.Components.FrontEnd.DVBT.Service) returns (BoxReply) {}

  rpc GetInstall(BoxRequest) returns (tr135.STBService.Components.FrontEnd.DVBT.Install) {}
  rpc SetInstall(tr135.STBService.Components.FrontEnd.DVBT.Install) returns (BoxReply) {}

  rpc GetServiceListDatabase(BoxRequest) returns (tr135.STBService.Components.FrontEnd.DVBT.ServiceListDatabase) {}
  rpc SetServiceListDatabase(tr135.STBService.Components.FrontEnd.DVBT.ServiceListDatabase) returns (BoxReply) {}

  rpc GetLogicalChannel(BoxRequest) returns (stream tr135.STBService.Components.FrontEnd.DVBT.ServiceListDatabase.LogicalChannel) {}
  rpc SetLogicalChannel(stream tr135.STBService.Components.FrontEnd.DVBT.ServiceListDatabase.LogicalChannel) returns (BoxReply) {}

  //?? rpc GetService(BoxRequest) returns (stream tr135.STBService.Components.FrontEnd.DVBT.ServiceListDatabase.LogicalChannel.Service) {}
  //?? rpc SetService(stream tr135.STBService.Components.FrontEnd.DVBT.ServiceListDatabase.LogicalChannel.Service) returns (BoxReply) {}

  rpc GetLogicalChannelConnect(BoxRequest) returns (tr135.STBService.Components.FrontEnd.DVBT.LogicalChannelConnect) {}
  rpc SetLogicalChannelConnect(tr135.STBService.Components.FrontEnd.DVBT.LogicalChannelConnect) returns (BoxReply) {}

  rpc GetServiceConnect(BoxRequest) returns (tr135.STBService.Components.FrontEnd.DVBT.ServiceConnect) {}
  rpc SetServiceConnect(tr135.STBService.Components.FrontEnd.DVBT.ServiceConnect) returns (BoxReply) {}

  //?? rpc GetIP(BoxRequest) returns (tr135.STBService.Components.FrontEnd.IP) {}
  //?? rpc SetIP(tr135.STBService.Components.FrontEnd.IP) returns (BoxReply) {}

  rpc GetRTCP(BoxRequest) returns (tr135.STBService.Components.FrontEnd.IP.RTCP) {}
  rpc SetRTCP(tr135.STBService.Components.FrontEnd.IP.RTCP) returns (BoxReply) {}

  rpc GetRTPAVPF(BoxRequest) returns (tr135.STBService.Components.FrontEnd.IP.RTPAVPF) {}
  rpc SetRTPAVPF(tr135.STBService.Components.FrontEnd.IP.RTPAVPF) returns (BoxReply) {}

  rpc GetFEC(BoxRequest) returns (tr135.STBService.Components.FrontEnd.IP.FEC) {}
  rpc SetFEC(tr135.STBService.Components.FrontEnd.IP.FEC) returns (BoxReply) {}

  rpc GetIGMP(BoxRequest) returns (tr135.STBService.Components.FrontEnd.IP.IGMP) {}
  rpc SetIGMP(tr135.STBService.Components.FrontEnd.IP.IGMP) returns (BoxReply) {}

  rpc GetClientGroup(BoxRequest) returns (stream tr135.STBService.Components.FrontEnd.IP.IGMP.ClientGroup) {}
  rpc SetClientGroup(stream tr135.STBService.Components.FrontEnd.IP.IGMP.ClientGroup) returns (BoxReply) {}

  rpc GetClientGroupStats(BoxRequest) returns (stream tr135.STBService.Components.FrontEnd.IP.IGMP.ClientGroupStats) {}
  rpc SetClientGroupStats(stream tr135.STBService.Components.FrontEnd.IP.IGMP.ClientGroupStats) returns (BoxReply) {}

  rpc GetTotal(BoxRequest) returns (tr135.STBService.Components.FrontEnd.IP.IGMP.ClientGroupStats.Total) {}
  rpc SetTotal(tr135.STBService.Components.FrontEnd.IP.IGMP.ClientGroupStats.Total) returns (BoxReply) {}

  rpc GetCurrentDay(BoxRequest) returns (tr135.STBService.Components.FrontEnd.IP.IGMP.ClientGroupStats.CurrentDay) {}
  rpc SetCurrentDay(tr135.STBService.Components.FrontEnd.IP.IGMP.ClientGroupStats.CurrentDay) returns (BoxReply) {}

  rpc GetQuarterHour(BoxRequest) returns (tr135.STBService.Components.FrontEnd.IP.IGMP.ClientGroupStats.QuarterHour) {}
  rpc SetQuarterHour(tr135.STBService.Components.FrontEnd.IP.IGMP.ClientGroupStats.QuarterHour) returns (BoxReply) {}

  rpc GetDejittering(BoxRequest) returns (tr135.STBService.Components.FrontEnd.IP.Dejittering) {}
  rpc SetDejittering(tr135.STBService.Components.FrontEnd.IP.Dejittering) returns (BoxReply) {}

  rpc GetInbound(BoxRequest) returns (stream tr135.STBService.Components.FrontEnd.IP.Inbound) {}
  rpc SetInbound(stream tr135.STBService.Components.FrontEnd.IP.Inbound) returns (BoxReply) {}

  rpc GetOutbound(BoxRequest) returns (stream tr135.STBService.Components.FrontEnd.IP.Outbound) {}
  rpc SetOutbound(stream tr135.STBService.Components.FrontEnd.IP.Outbound) returns (BoxReply) {}

  //?? rpc GetServiceConnect(BoxRequest) returns (tr135.STBService.Components.FrontEnd.IP.ServiceConnect) {}
  //?? rpc SetServiceConnect(tr135.STBService.Components.FrontEnd.IP.ServiceConnect) returns (BoxReply) {}

  rpc GetForceMonitor(BoxRequest) returns (tr135.STBService.Components.FrontEnd.IP.ForceMonitor) {}
  rpc SetForceMonitor(tr135.STBService.Components.FrontEnd.IP.ForceMonitor) returns (BoxReply) {}

  //?? rpc GetPVR(BoxRequest) returns (tr135.STBService.Components.PVR) {}
  //?? rpc SetPVR(tr135.STBService.Components.PVR) returns (BoxReply) {}

  rpc GetStorage(BoxRequest) returns (stream tr135.STBService.Components.PVR.Storage) {}
  rpc SetStorage(stream tr135.STBService.Components.PVR.Storage) returns (BoxReply) {}

  //?? rpc GetAudioDecoder(BoxRequest) returns (stream tr135.STBService.Components.AudioDecoder) {}
  //?? rpc SetAudioDecoder(stream tr135.STBService.Components.AudioDecoder) returns (BoxReply) {}

  //?? rpc GetVideoDecoder(BoxRequest) returns (stream tr135.STBService.Components.VideoDecoder) {}
  //?? rpc SetVideoDecoder(stream tr135.STBService.Components.VideoDecoder) returns (BoxReply) {}

  //?? rpc GetAudioOutput(BoxRequest) returns (stream tr135.STBService.Components.AudioOutput) {}
  //?? rpc SetAudioOutput(stream tr135.STBService.Components.AudioOutput) returns (BoxReply) {}

  rpc GetSPDIF(BoxRequest) returns (stream tr135.STBService.Components.SPDIF) {}
  rpc SetSPDIF(stream tr135.STBService.Components.SPDIF) returns (BoxReply) {}

  //?? rpc GetVideoOutput(BoxRequest) returns (stream tr135.STBService.Components.VideoOutput) {}
  //?? rpc SetVideoOutput(stream tr135.STBService.Components.VideoOutput) returns (BoxReply) {}

  rpc GetSCART(BoxRequest) returns (stream tr135.STBService.Components.SCART) {}
  rpc SetSCART(stream tr135.STBService.Components.SCART) returns (BoxReply) {}

  //?? rpc GetHDMI(BoxRequest) returns (stream tr135.STBService.Components.HDMI) {}
  //?? rpc SetHDMI(stream tr135.STBService.Components.HDMI) returns (BoxReply) {}

  rpc GetDisplayDevice(BoxRequest) returns (tr135.STBService.Components.HDMI.DisplayDevice) {}
  rpc SetDisplayDevice(tr135.STBService.Components.HDMI.DisplayDevice) returns (BoxReply) {}

  //?? rpc GetCA(BoxRequest) returns (stream tr135.STBService.Components.CA) {}
  //?? rpc SetCA(stream tr135.STBService.Components.CA) returns (BoxReply) {}

  //?? rpc GetDRM(BoxRequest) returns (stream tr135.STBService.Components.DRM) {}
  //?? rpc SetDRM(stream tr135.STBService.Components.DRM) returns (BoxReply) {}

  rpc GetAVStreams(BoxRequest) returns (tr135.STBService.AVStreams) {}
  rpc SetAVStreams(tr135.STBService.AVStreams) returns (BoxReply) {}

  rpc GetAVStream(BoxRequest) returns (stream tr135.STBService.AVStreams.AVStream) {}
  rpc SetAVStream(stream tr135.STBService.AVStreams.AVStream) returns (BoxReply) {}

  rpc GetAVPlayers(BoxRequest) returns (tr135.STBService.AVPlayers) {}
  rpc SetAVPlayers(tr135.STBService.AVPlayers) returns (BoxReply) {}

  rpc GetAVPlayer(BoxRequest) returns (stream tr135.STBService.AVPlayers.AVPlayer) {}
  rpc SetAVPlayer(stream tr135.STBService.AVPlayers.AVPlayer) returns (BoxReply) {}

  //?? rpc GetServiceMonitoring(BoxRequest) returns (tr135.STBService.ServiceMonitoring) {}
  //?? rpc SetServiceMonitoring(tr135.STBService.ServiceMonitoring) returns (BoxReply) {}

  rpc GetMainStream(BoxRequest) returns (stream tr135.STBService.ServiceMonitoring.MainStream) {}
  rpc SetMainStream(stream tr135.STBService.ServiceMonitoring.MainStream) returns (BoxReply) {}

  //?? rpc GetTotal(BoxRequest) returns (tr135.STBService.ServiceMonitoring.MainStream.Total) {}
  //?? rpc SetTotal(tr135.STBService.ServiceMonitoring.MainStream.Total) returns (BoxReply) {}

  rpc GetDejitteringStats(BoxRequest) returns (tr135.STBService.ServiceMonitoring.MainStream.Total.DejitteringStats) {}
  rpc SetDejitteringStats(tr135.STBService.ServiceMonitoring.MainStream.Total.DejitteringStats) returns (BoxReply) {}

  rpc GetTCPStats(BoxRequest) returns (tr135.STBService.ServiceMonitoring.MainStream.Total.TCPStats) {}
  rpc SetTCPStats(tr135.STBService.ServiceMonitoring.MainStream.Total.TCPStats) returns (BoxReply) {}

  rpc GetRTPStats(BoxRequest) returns (tr135.STBService.ServiceMonitoring.MainStream.Total.RTPStats) {}
  rpc SetRTPStats(tr135.STBService.ServiceMonitoring.MainStream.Total.RTPStats) returns (BoxReply) {}

  rpc GetMPEG2TSStats(BoxRequest) returns (tr135.STBService.ServiceMonitoring.MainStream.Total.MPEG2TSStats) {}
  rpc SetMPEG2TSStats(tr135.STBService.ServiceMonitoring.MainStream.Total.MPEG2TSStats) returns (BoxReply) {}

  rpc GetVideoDecoderStats(BoxRequest) returns (tr135.STBService.ServiceMonitoring.MainStream.Total.VideoDecoderStats) {}
  rpc SetVideoDecoderStats(tr135.STBService.ServiceMonitoring.MainStream.Total.VideoDecoderStats) returns (BoxReply) {}

  rpc GetAudioDecoderStats(BoxRequest) returns (tr135.STBService.ServiceMonitoring.MainStream.Total.AudioDecoderStats) {}
  rpc SetAudioDecoderStats(tr135.STBService.ServiceMonitoring.MainStream.Total.AudioDecoderStats) returns (BoxReply) {}

  rpc GetVideoResponseStats(BoxRequest) returns (tr135.STBService.ServiceMonitoring.MainStream.Total.VideoResponseStats) {}
  rpc SetVideoResponseStats(tr135.STBService.ServiceMonitoring.MainStream.Total.VideoResponseStats) returns (BoxReply) {}

  rpc GetSample(BoxRequest) returns (tr135.STBService.ServiceMonitoring.MainStream.Sample) {}
  rpc SetSample(tr135.STBService.ServiceMonitoring.MainStream.Sample) returns (BoxReply) {}

  //?? rpc GetDejitteringStats(BoxRequest) returns (tr135.STBService.ServiceMonitoring.MainStream.Sample.DejitteringStats) {}
  //?? rpc SetDejitteringStats(tr135.STBService.ServiceMonitoring.MainStream.Sample.DejitteringStats) returns (BoxReply) {}

  //?? rpc GetTCPStats(BoxRequest) returns (tr135.STBService.ServiceMonitoring.MainStream.Sample.TCPStats) {}
  //?? rpc SetTCPStats(tr135.STBService.ServiceMonitoring.MainStream.Sample.TCPStats) returns (BoxReply) {}

  //?? rpc GetRTPStats(BoxRequest) returns (tr135.STBService.ServiceMonitoring.MainStream.Sample.RTPStats) {}
  //?? rpc SetRTPStats(tr135.STBService.ServiceMonitoring.MainStream.Sample.RTPStats) returns (BoxReply) {}

  //?? rpc GetMPEG2TSStats(BoxRequest) returns (tr135.STBService.ServiceMonitoring.MainStream.Sample.MPEG2TSStats) {}
  //?? rpc SetMPEG2TSStats(tr135.STBService.ServiceMonitoring.MainStream.Sample.MPEG2TSStats) returns (BoxReply) {}

  //?? rpc GetVideoDecoderStats(BoxRequest) returns (tr135.STBService.ServiceMonitoring.MainStream.Sample.VideoDecoderStats) {}
  //?? rpc SetVideoDecoderStats(tr135.STBService.ServiceMonitoring.MainStream.Sample.VideoDecoderStats) returns (BoxReply) {}

  //?? rpc GetAudioDecoderStats(BoxRequest) returns (tr135.STBService.ServiceMonitoring.MainStream.Sample.AudioDecoderStats) {}
  //?? rpc SetAudioDecoderStats(tr135.STBService.ServiceMonitoring.MainStream.Sample.AudioDecoderStats) returns (BoxReply) {}

  //?? rpc GetVideoResponseStats(BoxRequest) returns (tr135.STBService.ServiceMonitoring.MainStream.Sample.VideoResponseStats) {}
  //?? rpc SetVideoResponseStats(tr135.STBService.ServiceMonitoring.MainStream.Sample.VideoResponseStats) returns (BoxReply) {}

  rpc GetHighLevelMetricStats(BoxRequest) returns (stream tr135.STBService.ServiceMonitoring.MainStream.Sample.HighLevelMetricStats) {}
  rpc SetHighLevelMetricStats(stream tr135.STBService.ServiceMonitoring.MainStream.Sample.HighLevelMetricStats) returns (BoxReply) {}

  rpc GetEventLog(BoxRequest) returns (tr135.STBService.ServiceMonitoring.MainStream.EventLog) {}
  rpc SetEventLog(tr135.STBService.ServiceMonitoring.MainStream.EventLog) returns (BoxReply) {}

  rpc GetEntry(BoxRequest) returns (stream tr135.STBService.ServiceMonitoring.MainStream.EventLog.Entry) {}
  rpc SetEntry(stream tr135.STBService.ServiceMonitoring.MainStream.EventLog.Entry) returns (BoxReply) {}

  rpc GetParameter(BoxRequest) returns (stream tr135.STBService.ServiceMonitoring.MainStream.EventLog.Entry.Parameter) {}
  rpc SetParameter(stream tr135.STBService.ServiceMonitoring.MainStream.EventLog.Entry.Parameter) returns (BoxReply) {}

  rpc GetGlobalOperation(BoxRequest) returns (tr135.STBService.ServiceMonitoring.GlobalOperation) {}
  rpc SetGlobalOperation(tr135.STBService.ServiceMonitoring.GlobalOperation) returns (BoxReply) {}

  //?? rpc GetTotal(BoxRequest) returns (tr135.STBService.ServiceMonitoring.GlobalOperation.Total) {}
  //?? rpc SetTotal(tr135.STBService.ServiceMonitoring.GlobalOperation.Total) returns (BoxReply) {}

  //?? rpc GetSample(BoxRequest) returns (tr135.STBService.ServiceMonitoring.GlobalOperation.Sample) {}
  //?? rpc SetSample(tr135.STBService.ServiceMonitoring.GlobalOperation.Sample) returns (BoxReply) {}

  rpc GetApplications(BoxRequest) returns (tr135.STBService.Applications) {}
  rpc SetApplications(tr135.STBService.Applications) returns (BoxReply) {}

  //?? rpc GetAudienceStats(BoxRequest) returns (tr135.STBService.Applications.AudienceStats) {}
  //?? rpc SetAudienceStats(tr135.STBService.Applications.AudienceStats) returns (BoxReply) {}

  rpc GetChannel(BoxRequest) returns (stream tr135.STBService.Applications.AudienceStats.Channel) {}
  rpc SetChannel(stream tr135.STBService.Applications.AudienceStats.Channel) returns (BoxReply) {}

  rpc GetCDSPush(BoxRequest) returns (tr135.STBService.Applications.CDSPush) {}
  rpc SetCDSPush(tr135.STBService.Applications.CDSPush) returns (BoxReply) {}

  rpc GetContentItem(BoxRequest) returns (stream tr135.STBService.Applications.CDSPush.ContentItem) {}
  rpc SetContentItem(stream tr135.STBService.Applications.CDSPush.ContentItem) returns (BoxReply) {}

  rpc GetCDSPull(BoxRequest) returns (tr135.STBService.Applications.CDSPull) {}
  rpc SetCDSPull(tr135.STBService.Applications.CDSPull) returns (BoxReply) {}

  //?? rpc GetContentItem(BoxRequest) returns (stream tr135.STBService.Applications.CDSPull.ContentItem) {}
  //?? rpc SetContentItem(stream tr135.STBService.Applications.CDSPull.ContentItem) returns (BoxReply) {}

  rpc GetServiceProvider(BoxRequest) returns (stream tr135.STBService.Applications.ServiceProvider) {}
  rpc SetServiceProvider(stream tr135.STBService.Applications.ServiceProvider) returns (BoxReply) {}

}
