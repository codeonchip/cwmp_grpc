// Generated by cwmp_proto_to_grpc.cc
// source: tr-106-1-2-0-full.proto
// Use this file to implement gRPC server's service methods.

  Status GetDevice(ServerContext* context, const BoardRequest* request, tr106::Device* reply) override { return Status::OK; }
  Status SetDevice(ServerContext* context, const tr106::Device* request, BoardReply* reply) override { return Status::OK; }

  Status GetServices(ServerContext* context, const BoardRequest* request, tr106::Device::Services* reply) override { return Status::OK; }
  Status SetServices(ServerContext* context, const tr106::Device::Services* request, BoardReply* reply) override { return Status::OK; }

  Status GetCapabilities(ServerContext* context, const BoardRequest* request, tr106::Device::Capabilities* reply) override { return Status::OK; }
  Status SetCapabilities(ServerContext* context, const tr106::Device::Capabilities* request, BoardReply* reply) override { return Status::OK; }

  Status GetPerformanceDiagnostic(ServerContext* context, const BoardRequest* request, tr106::Device::Capabilities::PerformanceDiagnostic* reply) override { return Status::OK; }
  Status SetPerformanceDiagnostic(ServerContext* context, const tr106::Device::Capabilities::PerformanceDiagnostic* request, BoardReply* reply) override { return Status::OK; }

  Status GetDeviceInfo(ServerContext* context, const BoardRequest* request, tr106::Device::DeviceInfo* reply) override { return Status::OK; }
  Status SetDeviceInfo(ServerContext* context, const tr106::Device::DeviceInfo* request, BoardReply* reply) override { return Status::OK; }

  Status GetManagementServer(ServerContext* context, const BoardRequest* request, tr106::Device::ManagementServer* reply) override { return Status::OK; }
  Status SetManagementServer(ServerContext* context, const tr106::Device::ManagementServer* request, BoardReply* reply) override { return Status::OK; }

  Status GetGatewayInfo(ServerContext* context, const BoardRequest* request, tr106::Device::GatewayInfo* reply) override { return Status::OK; }
  Status SetGatewayInfo(ServerContext* context, const tr106::Device::GatewayInfo* request, BoardReply* reply) override { return Status::OK; }

  Status GetConfig(ServerContext* context, const BoardRequest* request, tr106::Device::Config* reply) override { return Status::OK; }
  Status SetConfig(ServerContext* context, const tr106::Device::Config* request, BoardReply* reply) override { return Status::OK; }

  Status GetTime(ServerContext* context, const BoardRequest* request, tr106::Device::Time* reply) override { return Status::OK; }
  Status SetTime(ServerContext* context, const tr106::Device::Time* request, BoardReply* reply) override { return Status::OK; }

  Status GetUserInterface(ServerContext* context, const BoardRequest* request, tr106::Device::UserInterface* reply) override { return Status::OK; }
  Status SetUserInterface(ServerContext* context, const tr106::Device::UserInterface* request, BoardReply* reply) override { return Status::OK; }

  Status GetLAN(ServerContext* context, const BoardRequest* request, tr106::Device::LAN* reply) override { return Status::OK; }
  Status SetLAN(ServerContext* context, const tr106::Device::LAN* request, BoardReply* reply) override { return Status::OK; }

  Status GetDHCPOption(ServerContext* context, const BoardRequest* request, ServerWriter<tr106::Device::LAN::DHCPOption>* reply) override { return Status::OK; }
  Status SetDHCPOption(ServerContext* context, ServerReader<tr106::Device::LAN::DHCPOption>* request, BoardReply* reply) override { return Status::OK; }

  Status GetStats(ServerContext* context, const BoardRequest* request, tr106::Device::LAN::Stats* reply) override { return Status::OK; }
  Status SetStats(ServerContext* context, const tr106::Device::LAN::Stats* request, BoardReply* reply) override { return Status::OK; }

  Status GetIPPingDiagnostics(ServerContext* context, const BoardRequest* request, tr106::Device::LAN::IPPingDiagnostics* reply) override { return Status::OK; }
  Status SetIPPingDiagnostics(ServerContext* context, const tr106::Device::LAN::IPPingDiagnostics* request, BoardReply* reply) override { return Status::OK; }

  Status GetTraceRouteDiagnostics(ServerContext* context, const BoardRequest* request, tr106::Device::LAN::TraceRouteDiagnostics* reply) override { return Status::OK; }
  Status SetTraceRouteDiagnostics(ServerContext* context, const tr106::Device::LAN::TraceRouteDiagnostics* request, BoardReply* reply) override { return Status::OK; }

  Status GetRouteHops(ServerContext* context, const BoardRequest* request, ServerWriter<tr106::Device::LAN::TraceRouteDiagnostics::RouteHops>* reply) override { return Status::OK; }
  Status SetRouteHops(ServerContext* context, ServerReader<tr106::Device::LAN::TraceRouteDiagnostics::RouteHops>* request, BoardReply* reply) override { return Status::OK; }

  Status GetDownloadDiagnostics(ServerContext* context, const BoardRequest* request, tr106::Device::DownloadDiagnostics* reply) override { return Status::OK; }
  Status SetDownloadDiagnostics(ServerContext* context, const tr106::Device::DownloadDiagnostics* request, BoardReply* reply) override { return Status::OK; }

  Status GetUploadDiagnostics(ServerContext* context, const BoardRequest* request, tr106::Device::UploadDiagnostics* reply) override { return Status::OK; }
  Status SetUploadDiagnostics(ServerContext* context, const tr106::Device::UploadDiagnostics* request, BoardReply* reply) override { return Status::OK; }

  Status GetUDPEchoConfig(ServerContext* context, const BoardRequest* request, tr106::Device::UDPEchoConfig* reply) override { return Status::OK; }
  Status SetUDPEchoConfig(ServerContext* context, const tr106::Device::UDPEchoConfig* request, BoardReply* reply) override { return Status::OK; }

