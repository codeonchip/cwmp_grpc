// Generated by cwmp_proto_to_grpc.cc
// source: tr-098-1-8-0-full.proto
// Use this file to implement gRPC server's service methods.

  Status GetInternetGatewayDevice(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice* reply) override { return Status::OK; }
  Status SetInternetGatewayDevice(ServerContext* context, const tr098::InternetGatewayDevice* request, GatewayReply* reply) override { return Status::OK; }

  Status GetServices(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::Services* reply) override { return Status::OK; }
  Status SetServices(ServerContext* context, const tr098::InternetGatewayDevice::Services* request, GatewayReply* reply) override { return Status::OK; }

  Status GetCapabilities(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::Capabilities* reply) override { return Status::OK; }
  Status SetCapabilities(ServerContext* context, const tr098::InternetGatewayDevice::Capabilities* request, GatewayReply* reply) override { return Status::OK; }

  Status GetPerformanceDiagnostic(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::Capabilities::PerformanceDiagnostic* reply) override { return Status::OK; }
  Status SetPerformanceDiagnostic(ServerContext* context, const tr098::InternetGatewayDevice::Capabilities::PerformanceDiagnostic* request, GatewayReply* reply) override { return Status::OK; }

  Status GetDeviceInfo(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::DeviceInfo* reply) override { return Status::OK; }
  Status SetDeviceInfo(ServerContext* context, const tr098::InternetGatewayDevice::DeviceInfo* request, GatewayReply* reply) override { return Status::OK; }

  Status GetVendorConfigFile(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::DeviceInfo::VendorConfigFile>* reply) override { return Status::OK; }
  Status SetVendorConfigFile(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::DeviceInfo::VendorConfigFile>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetMemoryStatus(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::DeviceInfo::MemoryStatus* reply) override { return Status::OK; }
  Status SetMemoryStatus(ServerContext* context, const tr098::InternetGatewayDevice::DeviceInfo::MemoryStatus* request, GatewayReply* reply) override { return Status::OK; }

  Status GetProcessStatus(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::DeviceInfo::ProcessStatus* reply) override { return Status::OK; }
  Status SetProcessStatus(ServerContext* context, const tr098::InternetGatewayDevice::DeviceInfo::ProcessStatus* request, GatewayReply* reply) override { return Status::OK; }

  Status GetProcess(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::DeviceInfo::ProcessStatus::Process>* reply) override { return Status::OK; }
  Status SetProcess(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::DeviceInfo::ProcessStatus::Process>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetTemperatureStatus(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::DeviceInfo::TemperatureStatus* reply) override { return Status::OK; }
  Status SetTemperatureStatus(ServerContext* context, const tr098::InternetGatewayDevice::DeviceInfo::TemperatureStatus* request, GatewayReply* reply) override { return Status::OK; }

  Status GetTemperatureSensor(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::DeviceInfo::TemperatureStatus::TemperatureSensor>* reply) override { return Status::OK; }
  Status SetTemperatureSensor(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::DeviceInfo::TemperatureStatus::TemperatureSensor>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetNetworkProperties(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::DeviceInfo::NetworkProperties* reply) override { return Status::OK; }
  Status SetNetworkProperties(ServerContext* context, const tr098::InternetGatewayDevice::DeviceInfo::NetworkProperties* request, GatewayReply* reply) override { return Status::OK; }

  Status GetSupportedDataModel(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::DeviceInfo::SupportedDataModel>* reply) override { return Status::OK; }
  Status SetSupportedDataModel(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::DeviceInfo::SupportedDataModel>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetProcessor(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::DeviceInfo::Processor>* reply) override { return Status::OK; }
  Status SetProcessor(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::DeviceInfo::Processor>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetVendorLogFile(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::DeviceInfo::VendorLogFile>* reply) override { return Status::OK; }
  Status SetVendorLogFile(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::DeviceInfo::VendorLogFile>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetProxierInfo(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::DeviceInfo::ProxierInfo* reply) override { return Status::OK; }
  Status SetProxierInfo(ServerContext* context, const tr098::InternetGatewayDevice::DeviceInfo::ProxierInfo* request, GatewayReply* reply) override { return Status::OK; }

  Status GetLocation(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::DeviceInfo::Location>* reply) override { return Status::OK; }
  Status SetLocation(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::DeviceInfo::Location>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetDeviceConfig(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::DeviceConfig* reply) override { return Status::OK; }
  Status SetDeviceConfig(ServerContext* context, const tr098::InternetGatewayDevice::DeviceConfig* request, GatewayReply* reply) override { return Status::OK; }

  Status GetManagementServer(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::ManagementServer* reply) override { return Status::OK; }
  Status SetManagementServer(ServerContext* context, const tr098::InternetGatewayDevice::ManagementServer* request, GatewayReply* reply) override { return Status::OK; }

  Status GetManageableDevice(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::ManagementServer::ManageableDevice>* reply) override { return Status::OK; }
  Status SetManageableDevice(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::ManagementServer::ManageableDevice>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetAutonomousTransferCompletePolicy(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::ManagementServer::AutonomousTransferCompletePolicy* reply) override { return Status::OK; }
  Status SetAutonomousTransferCompletePolicy(ServerContext* context, const tr098::InternetGatewayDevice::ManagementServer::AutonomousTransferCompletePolicy* request, GatewayReply* reply) override { return Status::OK; }

  Status GetDUStateChangeComplPolicy(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::ManagementServer::DUStateChangeComplPolicy* reply) override { return Status::OK; }
  Status SetDUStateChangeComplPolicy(ServerContext* context, const tr098::InternetGatewayDevice::ManagementServer::DUStateChangeComplPolicy* request, GatewayReply* reply) override { return Status::OK; }

  Status GetEmbeddedDevice(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::ManagementServer::EmbeddedDevice>* reply) override { return Status::OK; }
  Status SetEmbeddedDevice(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::ManagementServer::EmbeddedDevice>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetVirtualDevice(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::ManagementServer::VirtualDevice>* reply) override { return Status::OK; }
  Status SetVirtualDevice(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::ManagementServer::VirtualDevice>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetStandbyPolicy(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::ManagementServer::StandbyPolicy* reply) override { return Status::OK; }
  Status SetStandbyPolicy(ServerContext* context, const tr098::InternetGatewayDevice::ManagementServer::StandbyPolicy* request, GatewayReply* reply) override { return Status::OK; }

  Status GetInformParameter(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::ManagementServer::InformParameter>* reply) override { return Status::OK; }
  Status SetInformParameter(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::ManagementServer::InformParameter>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetTime(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::Time* reply) override { return Status::OK; }
  Status SetTime(ServerContext* context, const tr098::InternetGatewayDevice::Time* request, GatewayReply* reply) override { return Status::OK; }

  Status GetUserInterface(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::UserInterface* reply) override { return Status::OK; }
  Status SetUserInterface(ServerContext* context, const tr098::InternetGatewayDevice::UserInterface* request, GatewayReply* reply) override { return Status::OK; }

  Status GetRemoteAccess(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::UserInterface::RemoteAccess* reply) override { return Status::OK; }
  Status SetRemoteAccess(ServerContext* context, const tr098::InternetGatewayDevice::UserInterface::RemoteAccess* request, GatewayReply* reply) override { return Status::OK; }

  Status GetLocalDisplay(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::UserInterface::LocalDisplay* reply) override { return Status::OK; }
  Status SetLocalDisplay(ServerContext* context, const tr098::InternetGatewayDevice::UserInterface::LocalDisplay* request, GatewayReply* reply) override { return Status::OK; }

  Status GetLayer3Forwarding(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::Layer3Forwarding* reply) override { return Status::OK; }
  Status SetLayer3Forwarding(ServerContext* context, const tr098::InternetGatewayDevice::Layer3Forwarding* request, GatewayReply* reply) override { return Status::OK; }

  Status GetForwarding(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::Layer3Forwarding::Forwarding>* reply) override { return Status::OK; }
  Status SetForwarding(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::Layer3Forwarding::Forwarding>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetLayer2Bridging(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::Layer2Bridging* reply) override { return Status::OK; }
  Status SetLayer2Bridging(ServerContext* context, const tr098::InternetGatewayDevice::Layer2Bridging* request, GatewayReply* reply) override { return Status::OK; }

  Status GetBridge(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::Layer2Bridging::Bridge>* reply) override { return Status::OK; }
  Status SetBridge(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::Layer2Bridging::Bridge>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetPort(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::Layer2Bridging::Bridge::Port>* reply) override { return Status::OK; }
  Status SetPort(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::Layer2Bridging::Bridge::Port>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetVLAN(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::Layer2Bridging::Bridge::VLAN>* reply) override { return Status::OK; }
  Status SetVLAN(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::Layer2Bridging::Bridge::VLAN>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetFilter(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::Layer2Bridging::Filter>* reply) override { return Status::OK; }
  Status SetFilter(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::Layer2Bridging::Filter>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetMarking(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::Layer2Bridging::Marking>* reply) override { return Status::OK; }
  Status SetMarking(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::Layer2Bridging::Marking>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetAvailableInterface(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::Layer2Bridging::AvailableInterface>* reply) override { return Status::OK; }
  Status SetAvailableInterface(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::Layer2Bridging::AvailableInterface>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetQueueManagement(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::QueueManagement* reply) override { return Status::OK; }
  Status SetQueueManagement(ServerContext* context, const tr098::InternetGatewayDevice::QueueManagement* request, GatewayReply* reply) override { return Status::OK; }

  Status GetClassification(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::QueueManagement::Classification>* reply) override { return Status::OK; }
  Status SetClassification(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::QueueManagement::Classification>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetApp(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::QueueManagement::App>* reply) override { return Status::OK; }
  Status SetApp(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::QueueManagement::App>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetFlow(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::QueueManagement::Flow>* reply) override { return Status::OK; }
  Status SetFlow(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::QueueManagement::Flow>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetPolicer(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::QueueManagement::Policer>* reply) override { return Status::OK; }
  Status SetPolicer(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::QueueManagement::Policer>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetQueue(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::QueueManagement::Queue>* reply) override { return Status::OK; }
  Status SetQueue(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::QueueManagement::Queue>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetQueueStats(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::QueueManagement::QueueStats>* reply) override { return Status::OK; }
  Status SetQueueStats(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::QueueManagement::QueueStats>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetLANConfigSecurity(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::LANConfigSecurity* reply) override { return Status::OK; }
  Status SetLANConfigSecurity(ServerContext* context, const tr098::InternetGatewayDevice::LANConfigSecurity* request, GatewayReply* reply) override { return Status::OK; }

  Status GetIPPingDiagnostics(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::IPPingDiagnostics* reply) override { return Status::OK; }
  Status SetIPPingDiagnostics(ServerContext* context, const tr098::InternetGatewayDevice::IPPingDiagnostics* request, GatewayReply* reply) override { return Status::OK; }

  Status GetDownloadDiagnostics(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::DownloadDiagnostics* reply) override { return Status::OK; }
  Status SetDownloadDiagnostics(ServerContext* context, const tr098::InternetGatewayDevice::DownloadDiagnostics* request, GatewayReply* reply) override { return Status::OK; }

  Status GetUploadDiagnostics(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::UploadDiagnostics* reply) override { return Status::OK; }
  Status SetUploadDiagnostics(ServerContext* context, const tr098::InternetGatewayDevice::UploadDiagnostics* request, GatewayReply* reply) override { return Status::OK; }

  Status GetUDPEchoConfig(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::UDPEchoConfig* reply) override { return Status::OK; }
  Status SetUDPEchoConfig(ServerContext* context, const tr098::InternetGatewayDevice::UDPEchoConfig* request, GatewayReply* reply) override { return Status::OK; }

  Status GetLANDevice(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::LANDevice>* reply) override { return Status::OK; }
  Status SetLANDevice(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::LANDevice>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetLANHostConfigManagement(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::LANDevice::LANHostConfigManagement* reply) override { return Status::OK; }
  Status SetLANHostConfigManagement(ServerContext* context, const tr098::InternetGatewayDevice::LANDevice::LANHostConfigManagement* request, GatewayReply* reply) override { return Status::OK; }

  Status GetIPInterface(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::LANDevice::LANHostConfigManagement::IPInterface>* reply) override { return Status::OK; }
  Status SetIPInterface(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::LANDevice::LANHostConfigManagement::IPInterface>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetDHCPStaticAddress(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::LANDevice::LANHostConfigManagement::DHCPStaticAddress>* reply) override { return Status::OK; }
  Status SetDHCPStaticAddress(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::LANDevice::LANHostConfigManagement::DHCPStaticAddress>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetDHCPOption(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::LANDevice::LANHostConfigManagement::DHCPOption>* reply) override { return Status::OK; }
  Status SetDHCPOption(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::LANDevice::LANHostConfigManagement::DHCPOption>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetDHCPConditionalServingPool(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::LANDevice::LANHostConfigManagement::DHCPConditionalServingPool>* reply) override { return Status::OK; }
  Status SetDHCPConditionalServingPool(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::LANDevice::LANHostConfigManagement::DHCPConditionalServingPool>* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetDHCPStaticAddress(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::LANDevice::LANHostConfigManagement::DHCPConditionalServingPool::DHCPStaticAddress>* reply) override { return Status::OK; }
  //?? Status SetDHCPStaticAddress(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::LANDevice::LANHostConfigManagement::DHCPConditionalServingPool::DHCPStaticAddress>* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetDHCPOption(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::LANDevice::LANHostConfigManagement::DHCPConditionalServingPool::DHCPOption>* reply) override { return Status::OK; }
  //?? Status SetDHCPOption(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::LANDevice::LANHostConfigManagement::DHCPConditionalServingPool::DHCPOption>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetLANEthernetInterfaceConfig(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::LANDevice::LANEthernetInterfaceConfig>* reply) override { return Status::OK; }
  Status SetLANEthernetInterfaceConfig(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::LANDevice::LANEthernetInterfaceConfig>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetStats(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::LANDevice::LANEthernetInterfaceConfig::Stats* reply) override { return Status::OK; }
  Status SetStats(ServerContext* context, const tr098::InternetGatewayDevice::LANDevice::LANEthernetInterfaceConfig::Stats* request, GatewayReply* reply) override { return Status::OK; }

  Status GetLANUSBInterfaceConfig(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::LANDevice::LANUSBInterfaceConfig>* reply) override { return Status::OK; }
  Status SetLANUSBInterfaceConfig(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::LANDevice::LANUSBInterfaceConfig>* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetStats(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::LANDevice::LANUSBInterfaceConfig::Stats* reply) override { return Status::OK; }
  //?? Status SetStats(ServerContext* context, const tr098::InternetGatewayDevice::LANDevice::LANUSBInterfaceConfig::Stats* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWLANConfiguration(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::LANDevice::WLANConfiguration>* reply) override { return Status::OK; }
  Status SetWLANConfiguration(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::LANDevice::WLANConfiguration>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetAssociatedDevice(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::LANDevice::WLANConfiguration::AssociatedDevice>* reply) override { return Status::OK; }
  Status SetAssociatedDevice(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::LANDevice::WLANConfiguration::AssociatedDevice>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWEPKey(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::LANDevice::WLANConfiguration::WEPKey>* reply) override { return Status::OK; }
  Status SetWEPKey(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::LANDevice::WLANConfiguration::WEPKey>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetPreSharedKey(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::LANDevice::WLANConfiguration::PreSharedKey>* reply) override { return Status::OK; }
  Status SetPreSharedKey(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::LANDevice::WLANConfiguration::PreSharedKey>* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetStats(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::LANDevice::WLANConfiguration::Stats* reply) override { return Status::OK; }
  //?? Status SetStats(ServerContext* context, const tr098::InternetGatewayDevice::LANDevice::WLANConfiguration::Stats* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWPS(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::LANDevice::WLANConfiguration::WPS* reply) override { return Status::OK; }
  Status SetWPS(ServerContext* context, const tr098::InternetGatewayDevice::LANDevice::WLANConfiguration::WPS* request, GatewayReply* reply) override { return Status::OK; }

  Status GetRegistrar(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::LANDevice::WLANConfiguration::WPS::Registrar>* reply) override { return Status::OK; }
  Status SetRegistrar(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::LANDevice::WLANConfiguration::WPS::Registrar>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetAPWMMParameter(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::LANDevice::WLANConfiguration::APWMMParameter>* reply) override { return Status::OK; }
  Status SetAPWMMParameter(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::LANDevice::WLANConfiguration::APWMMParameter>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetSTAWMMParameter(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::LANDevice::WLANConfiguration::STAWMMParameter>* reply) override { return Status::OK; }
  Status SetSTAWMMParameter(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::LANDevice::WLANConfiguration::STAWMMParameter>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetHosts(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::LANDevice::Hosts* reply) override { return Status::OK; }
  Status SetHosts(ServerContext* context, const tr098::InternetGatewayDevice::LANDevice::Hosts* request, GatewayReply* reply) override { return Status::OK; }

  Status GetHost(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::LANDevice::Hosts::Host>* reply) override { return Status::OK; }
  Status SetHost(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::LANDevice::Hosts::Host>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetLANInterfaces(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::LANInterfaces* reply) override { return Status::OK; }
  Status SetLANInterfaces(ServerContext* context, const tr098::InternetGatewayDevice::LANInterfaces* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetLANEthernetInterfaceConfig(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::LANInterfaces::LANEthernetInterfaceConfig>* reply) override { return Status::OK; }
  //?? Status SetLANEthernetInterfaceConfig(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::LANInterfaces::LANEthernetInterfaceConfig>* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetLANUSBInterfaceConfig(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::LANInterfaces::LANUSBInterfaceConfig>* reply) override { return Status::OK; }
  //?? Status SetLANUSBInterfaceConfig(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::LANInterfaces::LANUSBInterfaceConfig>* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetWLANConfiguration(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::LANInterfaces::WLANConfiguration>* reply) override { return Status::OK; }
  //?? Status SetWLANConfiguration(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::LANInterfaces::WLANConfiguration>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWANDevice(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::WANDevice>* reply) override { return Status::OK; }
  Status SetWANDevice(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::WANDevice>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWANCommonInterfaceConfig(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::WANDevice::WANCommonInterfaceConfig* reply) override { return Status::OK; }
  Status SetWANCommonInterfaceConfig(ServerContext* context, const tr098::InternetGatewayDevice::WANDevice::WANCommonInterfaceConfig* request, GatewayReply* reply) override { return Status::OK; }

  Status GetConnection(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::WANDevice::WANCommonInterfaceConfig::Connection>* reply) override { return Status::OK; }
  Status SetConnection(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::WANDevice::WANCommonInterfaceConfig::Connection>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWANDSLInterfaceConfig(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::WANDevice::WANDSLInterfaceConfig* reply) override { return Status::OK; }
  Status SetWANDSLInterfaceConfig(ServerContext* context, const tr098::InternetGatewayDevice::WANDevice::WANDSLInterfaceConfig* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetStats(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::WANDevice::WANDSLInterfaceConfig::Stats* reply) override { return Status::OK; }
  //?? Status SetStats(ServerContext* context, const tr098::InternetGatewayDevice::WANDevice::WANDSLInterfaceConfig::Stats* request, GatewayReply* reply) override { return Status::OK; }

  Status GetTotal(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::WANDevice::WANDSLInterfaceConfig::Stats::Total* reply) override { return Status::OK; }
  Status SetTotal(ServerContext* context, const tr098::InternetGatewayDevice::WANDevice::WANDSLInterfaceConfig::Stats::Total* request, GatewayReply* reply) override { return Status::OK; }

  Status GetShowtime(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::WANDevice::WANDSLInterfaceConfig::Stats::Showtime* reply) override { return Status::OK; }
  Status SetShowtime(ServerContext* context, const tr098::InternetGatewayDevice::WANDevice::WANDSLInterfaceConfig::Stats::Showtime* request, GatewayReply* reply) override { return Status::OK; }

  Status GetLastShowtime(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::WANDevice::WANDSLInterfaceConfig::Stats::LastShowtime* reply) override { return Status::OK; }
  Status SetLastShowtime(ServerContext* context, const tr098::InternetGatewayDevice::WANDevice::WANDSLInterfaceConfig::Stats::LastShowtime* request, GatewayReply* reply) override { return Status::OK; }

  Status GetCurrentDay(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::WANDevice::WANDSLInterfaceConfig::Stats::CurrentDay* reply) override { return Status::OK; }
  Status SetCurrentDay(ServerContext* context, const tr098::InternetGatewayDevice::WANDevice::WANDSLInterfaceConfig::Stats::CurrentDay* request, GatewayReply* reply) override { return Status::OK; }

  Status GetQuarterHour(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::WANDevice::WANDSLInterfaceConfig::Stats::QuarterHour* reply) override { return Status::OK; }
  Status SetQuarterHour(ServerContext* context, const tr098::InternetGatewayDevice::WANDevice::WANDSLInterfaceConfig::Stats::QuarterHour* request, GatewayReply* reply) override { return Status::OK; }

  Status GetTestParams(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::WANDevice::WANDSLInterfaceConfig::TestParams* reply) override { return Status::OK; }
  Status SetTestParams(ServerContext* context, const tr098::InternetGatewayDevice::WANDevice::WANDSLInterfaceConfig::TestParams* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWANEthernetInterfaceConfig(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::WANDevice::WANEthernetInterfaceConfig* reply) override { return Status::OK; }
  Status SetWANEthernetInterfaceConfig(ServerContext* context, const tr098::InternetGatewayDevice::WANDevice::WANEthernetInterfaceConfig* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetStats(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::WANDevice::WANEthernetInterfaceConfig::Stats* reply) override { return Status::OK; }
  //?? Status SetStats(ServerContext* context, const tr098::InternetGatewayDevice::WANDevice::WANEthernetInterfaceConfig::Stats* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWANDSLConnectionManagement(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::WANDevice::WANDSLConnectionManagement* reply) override { return Status::OK; }
  Status SetWANDSLConnectionManagement(ServerContext* context, const tr098::InternetGatewayDevice::WANDevice::WANDSLConnectionManagement* request, GatewayReply* reply) override { return Status::OK; }

  Status GetConnectionService(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::WANDevice::WANDSLConnectionManagement::ConnectionService>* reply) override { return Status::OK; }
  Status SetConnectionService(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::WANDevice::WANDSLConnectionManagement::ConnectionService>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWANDSLDiagnostics(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::WANDevice::WANDSLDiagnostics* reply) override { return Status::OK; }
  Status SetWANDSLDiagnostics(ServerContext* context, const tr098::InternetGatewayDevice::WANDevice::WANDSLDiagnostics* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWANConnectionDevice(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice>* reply) override { return Status::OK; }
  Status SetWANConnectionDevice(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWANDSLLinkConfig(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANDSLLinkConfig* reply) override { return Status::OK; }
  Status SetWANDSLLinkConfig(ServerContext* context, const tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANDSLLinkConfig* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWANATMF5LoopbackDiagnostics(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANATMF5LoopbackDiagnostics* reply) override { return Status::OK; }
  Status SetWANATMF5LoopbackDiagnostics(ServerContext* context, const tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANATMF5LoopbackDiagnostics* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWANPTMLinkConfig(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANPTMLinkConfig* reply) override { return Status::OK; }
  Status SetWANPTMLinkConfig(ServerContext* context, const tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANPTMLinkConfig* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetStats(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANPTMLinkConfig::Stats* reply) override { return Status::OK; }
  //?? Status SetStats(ServerContext* context, const tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANPTMLinkConfig::Stats* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWANEthernetLinkConfig(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANEthernetLinkConfig* reply) override { return Status::OK; }
  Status SetWANEthernetLinkConfig(ServerContext* context, const tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANEthernetLinkConfig* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWANPOTSLinkConfig(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANPOTSLinkConfig* reply) override { return Status::OK; }
  Status SetWANPOTSLinkConfig(ServerContext* context, const tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANPOTSLinkConfig* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWANIPConnection(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANIPConnection>* reply) override { return Status::OK; }
  Status SetWANIPConnection(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANIPConnection>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetDHCPClient(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANIPConnection::DHCPClient* reply) override { return Status::OK; }
  Status SetDHCPClient(ServerContext* context, const tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANIPConnection::DHCPClient* request, GatewayReply* reply) override { return Status::OK; }

  Status GetSentDHCPOption(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANIPConnection::DHCPClient::SentDHCPOption>* reply) override { return Status::OK; }
  Status SetSentDHCPOption(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANIPConnection::DHCPClient::SentDHCPOption>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetReqDHCPOption(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANIPConnection::DHCPClient::ReqDHCPOption>* reply) override { return Status::OK; }
  Status SetReqDHCPOption(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANIPConnection::DHCPClient::ReqDHCPOption>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetPortMapping(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANIPConnection::PortMapping>* reply) override { return Status::OK; }
  Status SetPortMapping(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANIPConnection::PortMapping>* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetStats(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANIPConnection::Stats* reply) override { return Status::OK; }
  //?? Status SetStats(ServerContext* context, const tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANIPConnection::Stats* request, GatewayReply* reply) override { return Status::OK; }

  Status GetWANPPPConnection(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANPPPConnection>* reply) override { return Status::OK; }
  Status SetWANPPPConnection(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANPPPConnection>* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetPortMapping(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANPPPConnection::PortMapping>* reply) override { return Status::OK; }
  //?? Status SetPortMapping(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANPPPConnection::PortMapping>* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetStats(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANPPPConnection::Stats* reply) override { return Status::OK; }
  //?? Status SetStats(ServerContext* context, const tr098::InternetGatewayDevice::WANDevice::WANConnectionDevice::WANPPPConnection::Stats* request, GatewayReply* reply) override { return Status::OK; }

  Status GetCaptivePortal(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::CaptivePortal* reply) override { return Status::OK; }
  Status SetCaptivePortal(ServerContext* context, const tr098::InternetGatewayDevice::CaptivePortal* request, GatewayReply* reply) override { return Status::OK; }

  Status GetTraceRouteDiagnostics(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::TraceRouteDiagnostics* reply) override { return Status::OK; }
  Status SetTraceRouteDiagnostics(ServerContext* context, const tr098::InternetGatewayDevice::TraceRouteDiagnostics* request, GatewayReply* reply) override { return Status::OK; }

  Status GetRouteHops(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::TraceRouteDiagnostics::RouteHops>* reply) override { return Status::OK; }
  Status SetRouteHops(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::TraceRouteDiagnostics::RouteHops>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetUser(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::User>* reply) override { return Status::OK; }
  Status SetUser(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::User>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetUPnP(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::UPnP* reply) override { return Status::OK; }
  Status SetUPnP(ServerContext* context, const tr098::InternetGatewayDevice::UPnP* request, GatewayReply* reply) override { return Status::OK; }

  Status GetDevice(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::UPnP::Device* reply) override { return Status::OK; }
  Status SetDevice(ServerContext* context, const tr098::InternetGatewayDevice::UPnP::Device* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetCapabilities(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::UPnP::Device::Capabilities* reply) override { return Status::OK; }
  //?? Status SetCapabilities(ServerContext* context, const tr098::InternetGatewayDevice::UPnP::Device::Capabilities* request, GatewayReply* reply) override { return Status::OK; }

  Status GetDiscovery(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::UPnP::Discovery* reply) override { return Status::OK; }
  Status SetDiscovery(ServerContext* context, const tr098::InternetGatewayDevice::UPnP::Discovery* request, GatewayReply* reply) override { return Status::OK; }

  Status GetRootDevice(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::UPnP::Discovery::RootDevice>* reply) override { return Status::OK; }
  Status SetRootDevice(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::UPnP::Discovery::RootDevice>* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetDevice(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::UPnP::Discovery::Device>* reply) override { return Status::OK; }
  //?? Status SetDevice(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::UPnP::Discovery::Device>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetService(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::UPnP::Discovery::Service>* reply) override { return Status::OK; }
  Status SetService(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::UPnP::Discovery::Service>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetDescription(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::UPnP::Description* reply) override { return Status::OK; }
  Status SetDescription(ServerContext* context, const tr098::InternetGatewayDevice::UPnP::Description* request, GatewayReply* reply) override { return Status::OK; }

  Status GetDeviceDescription(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::UPnP::Description::DeviceDescription>* reply) override { return Status::OK; }
  Status SetDeviceDescription(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::UPnP::Description::DeviceDescription>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetDeviceInstance(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::UPnP::Description::DeviceInstance>* reply) override { return Status::OK; }
  Status SetDeviceInstance(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::UPnP::Description::DeviceInstance>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetServiceInstance(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::UPnP::Description::ServiceInstance>* reply) override { return Status::OK; }
  Status SetServiceInstance(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::UPnP::Description::ServiceInstance>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetDLNA(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::DLNA* reply) override { return Status::OK; }
  Status SetDLNA(ServerContext* context, const tr098::InternetGatewayDevice::DLNA* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetCapabilities(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::DLNA::Capabilities* reply) override { return Status::OK; }
  //?? Status SetCapabilities(ServerContext* context, const tr098::InternetGatewayDevice::DLNA::Capabilities* request, GatewayReply* reply) override { return Status::OK; }

  Status GetSmartCardReader(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::SmartCardReader>* reply) override { return Status::OK; }
  Status SetSmartCardReader(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::SmartCardReader>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetSmartCard(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::SmartCardReader::SmartCard* reply) override { return Status::OK; }
  Status SetSmartCard(ServerContext* context, const tr098::InternetGatewayDevice::SmartCardReader::SmartCard* request, GatewayReply* reply) override { return Status::OK; }

  Status GetSelfTestDiagnostics(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::SelfTestDiagnostics* reply) override { return Status::OK; }
  Status SetSelfTestDiagnostics(ServerContext* context, const tr098::InternetGatewayDevice::SelfTestDiagnostics* request, GatewayReply* reply) override { return Status::OK; }

  Status GetNSLookupDiagnostics(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::NSLookupDiagnostics* reply) override { return Status::OK; }
  Status SetNSLookupDiagnostics(ServerContext* context, const tr098::InternetGatewayDevice::NSLookupDiagnostics* request, GatewayReply* reply) override { return Status::OK; }

  Status GetResult(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::NSLookupDiagnostics::Result>* reply) override { return Status::OK; }
  Status SetResult(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::NSLookupDiagnostics::Result>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetFirewall(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::Firewall* reply) override { return Status::OK; }
  Status SetFirewall(ServerContext* context, const tr098::InternetGatewayDevice::Firewall* request, GatewayReply* reply) override { return Status::OK; }

  Status GetUSBHosts(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::USBHosts* reply) override { return Status::OK; }
  Status SetUSBHosts(ServerContext* context, const tr098::InternetGatewayDevice::USBHosts* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetHost(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::USBHosts::Host>* reply) override { return Status::OK; }
  //?? Status SetHost(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::USBHosts::Host>* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetDevice(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::USBHosts::Host::Device>* reply) override { return Status::OK; }
  //?? Status SetDevice(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::USBHosts::Host::Device>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetConfiguration(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::USBHosts::Host::Device::Configuration>* reply) override { return Status::OK; }
  Status SetConfiguration(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::USBHosts::Host::Device::Configuration>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetInterface(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::USBHosts::Host::Device::Configuration::Interface>* reply) override { return Status::OK; }
  Status SetInterface(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::USBHosts::Host::Device::Configuration::Interface>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetPeriodicStatistics(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::PeriodicStatistics* reply) override { return Status::OK; }
  Status SetPeriodicStatistics(ServerContext* context, const tr098::InternetGatewayDevice::PeriodicStatistics* request, GatewayReply* reply) override { return Status::OK; }

  Status GetSampleSet(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::PeriodicStatistics::SampleSet>* reply) override { return Status::OK; }
  Status SetSampleSet(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::PeriodicStatistics::SampleSet>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetParameter(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::PeriodicStatistics::SampleSet::Parameter>* reply) override { return Status::OK; }
  Status SetParameter(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::PeriodicStatistics::SampleSet::Parameter>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetDownloadAvailability(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::DownloadAvailability* reply) override { return Status::OK; }
  Status SetDownloadAvailability(ServerContext* context, const tr098::InternetGatewayDevice::DownloadAvailability* request, GatewayReply* reply) override { return Status::OK; }

  Status GetAnnouncement(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::DownloadAvailability::Announcement* reply) override { return Status::OK; }
  Status SetAnnouncement(ServerContext* context, const tr098::InternetGatewayDevice::DownloadAvailability::Announcement* request, GatewayReply* reply) override { return Status::OK; }

  Status GetGroup(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::DownloadAvailability::Announcement::Group>* reply) override { return Status::OK; }
  Status SetGroup(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::DownloadAvailability::Announcement::Group>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetQuery(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::DownloadAvailability::Query* reply) override { return Status::OK; }
  Status SetQuery(ServerContext* context, const tr098::InternetGatewayDevice::DownloadAvailability::Query* request, GatewayReply* reply) override { return Status::OK; }

  Status GetSoftwareModules(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::SoftwareModules* reply) override { return Status::OK; }
  Status SetSoftwareModules(ServerContext* context, const tr098::InternetGatewayDevice::SoftwareModules* request, GatewayReply* reply) override { return Status::OK; }

  Status GetExecEnv(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::SoftwareModules::ExecEnv>* reply) override { return Status::OK; }
  Status SetExecEnv(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::SoftwareModules::ExecEnv>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetDeploymentUnit(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::SoftwareModules::DeploymentUnit>* reply) override { return Status::OK; }
  Status SetDeploymentUnit(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::SoftwareModules::DeploymentUnit>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetExecutionUnit(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::SoftwareModules::ExecutionUnit>* reply) override { return Status::OK; }
  Status SetExecutionUnit(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::SoftwareModules::ExecutionUnit>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetExtensions(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::SoftwareModules::ExecutionUnit::Extensions* reply) override { return Status::OK; }
  Status SetExtensions(ServerContext* context, const tr098::InternetGatewayDevice::SoftwareModules::ExecutionUnit::Extensions* request, GatewayReply* reply) override { return Status::OK; }

  Status GetSecurity(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::Security* reply) override { return Status::OK; }
  Status SetSecurity(ServerContext* context, const tr098::InternetGatewayDevice::Security* request, GatewayReply* reply) override { return Status::OK; }

  Status GetCertificate(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::Security::Certificate>* reply) override { return Status::OK; }
  Status SetCertificate(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::Security::Certificate>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetFaultMgmt(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::FaultMgmt* reply) override { return Status::OK; }
  Status SetFaultMgmt(ServerContext* context, const tr098::InternetGatewayDevice::FaultMgmt* request, GatewayReply* reply) override { return Status::OK; }

  Status GetSupportedAlarm(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::FaultMgmt::SupportedAlarm>* reply) override { return Status::OK; }
  Status SetSupportedAlarm(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::FaultMgmt::SupportedAlarm>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetCurrentAlarm(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::FaultMgmt::CurrentAlarm>* reply) override { return Status::OK; }
  Status SetCurrentAlarm(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::FaultMgmt::CurrentAlarm>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetHistoryEvent(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::FaultMgmt::HistoryEvent>* reply) override { return Status::OK; }
  Status SetHistoryEvent(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::FaultMgmt::HistoryEvent>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetExpeditedEvent(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::FaultMgmt::ExpeditedEvent>* reply) override { return Status::OK; }
  Status SetExpeditedEvent(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::FaultMgmt::ExpeditedEvent>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetQueuedEvent(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::FaultMgmt::QueuedEvent>* reply) override { return Status::OK; }
  Status SetQueuedEvent(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::FaultMgmt::QueuedEvent>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetFAP(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::FAP* reply) override { return Status::OK; }
  Status SetFAP(ServerContext* context, const tr098::InternetGatewayDevice::FAP* request, GatewayReply* reply) override { return Status::OK; }

  Status GetGPS(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::FAP::GPS* reply) override { return Status::OK; }
  Status SetGPS(ServerContext* context, const tr098::InternetGatewayDevice::FAP::GPS* request, GatewayReply* reply) override { return Status::OK; }

  Status GetContinuousGPSStatus(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::FAP::GPS::ContinuousGPSStatus* reply) override { return Status::OK; }
  Status SetContinuousGPSStatus(ServerContext* context, const tr098::InternetGatewayDevice::FAP::GPS::ContinuousGPSStatus* request, GatewayReply* reply) override { return Status::OK; }

  Status GetAGPSServerConfig(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::FAP::GPS::AGPSServerConfig* reply) override { return Status::OK; }
  Status SetAGPSServerConfig(ServerContext* context, const tr098::InternetGatewayDevice::FAP::GPS::AGPSServerConfig* request, GatewayReply* reply) override { return Status::OK; }

  Status GetTunnel(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::FAP::Tunnel* reply) override { return Status::OK; }
  Status SetTunnel(ServerContext* context, const tr098::InternetGatewayDevice::FAP::Tunnel* request, GatewayReply* reply) override { return Status::OK; }

  Status GetCryptoProfile(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::FAP::Tunnel::CryptoProfile>* reply) override { return Status::OK; }
  Status SetCryptoProfile(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::FAP::Tunnel::CryptoProfile>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetIKESA(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::FAP::Tunnel::IKESA>* reply) override { return Status::OK; }
  Status SetIKESA(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::FAP::Tunnel::IKESA>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetChildSA(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::FAP::Tunnel::ChildSA>* reply) override { return Status::OK; }
  Status SetChildSA(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::FAP::Tunnel::ChildSA>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetVirtualInterface(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::FAP::Tunnel::VirtualInterface>* reply) override { return Status::OK; }
  Status SetVirtualInterface(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::FAP::Tunnel::VirtualInterface>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetPerfMgmt(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::FAP::PerfMgmt* reply) override { return Status::OK; }
  Status SetPerfMgmt(ServerContext* context, const tr098::InternetGatewayDevice::FAP::PerfMgmt* request, GatewayReply* reply) override { return Status::OK; }

  Status GetConfig(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::FAP::PerfMgmt::Config>* reply) override { return Status::OK; }
  Status SetConfig(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::FAP::PerfMgmt::Config>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetApplicationPlatform(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::FAP::ApplicationPlatform* reply) override { return Status::OK; }
  Status SetApplicationPlatform(ServerContext* context, const tr098::InternetGatewayDevice::FAP::ApplicationPlatform* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetCapabilities(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::FAP::ApplicationPlatform::Capabilities* reply) override { return Status::OK; }
  //?? Status SetCapabilities(ServerContext* context, const tr098::InternetGatewayDevice::FAP::ApplicationPlatform::Capabilities* request, GatewayReply* reply) override { return Status::OK; }

  Status GetControl(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::FAP::ApplicationPlatform::Control* reply) override { return Status::OK; }
  Status SetControl(ServerContext* context, const tr098::InternetGatewayDevice::FAP::ApplicationPlatform::Control* request, GatewayReply* reply) override { return Status::OK; }

  Status GetFemtoAwareness(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::FAP::ApplicationPlatform::Control::FemtoAwareness* reply) override { return Status::OK; }
  Status SetFemtoAwareness(ServerContext* context, const tr098::InternetGatewayDevice::FAP::ApplicationPlatform::Control::FemtoAwareness* request, GatewayReply* reply) override { return Status::OK; }

  Status GetSMS(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::FAP::ApplicationPlatform::Control::SMS* reply) override { return Status::OK; }
  Status SetSMS(ServerContext* context, const tr098::InternetGatewayDevice::FAP::ApplicationPlatform::Control::SMS* request, GatewayReply* reply) override { return Status::OK; }

  Status GetMMS(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::FAP::ApplicationPlatform::Control::MMS* reply) override { return Status::OK; }
  Status SetMMS(ServerContext* context, const tr098::InternetGatewayDevice::FAP::ApplicationPlatform::Control::MMS* request, GatewayReply* reply) override { return Status::OK; }

  Status GetTerminalLocation(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::FAP::ApplicationPlatform::Control::TerminalLocation* reply) override { return Status::OK; }
  Status SetTerminalLocation(ServerContext* context, const tr098::InternetGatewayDevice::FAP::ApplicationPlatform::Control::TerminalLocation* request, GatewayReply* reply) override { return Status::OK; }

  Status GetMonitoring(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::FAP::ApplicationPlatform::Monitoring* reply) override { return Status::OK; }
  Status SetMonitoring(ServerContext* context, const tr098::InternetGatewayDevice::FAP::ApplicationPlatform::Monitoring* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetFemtoAwareness(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::FAP::ApplicationPlatform::Monitoring::FemtoAwareness* reply) override { return Status::OK; }
  //?? Status SetFemtoAwareness(ServerContext* context, const tr098::InternetGatewayDevice::FAP::ApplicationPlatform::Monitoring::FemtoAwareness* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetSMS(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::FAP::ApplicationPlatform::Monitoring::SMS* reply) override { return Status::OK; }
  //?? Status SetSMS(ServerContext* context, const tr098::InternetGatewayDevice::FAP::ApplicationPlatform::Monitoring::SMS* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetMMS(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::FAP::ApplicationPlatform::Monitoring::MMS* reply) override { return Status::OK; }
  //?? Status SetMMS(ServerContext* context, const tr098::InternetGatewayDevice::FAP::ApplicationPlatform::Monitoring::MMS* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetTerminalLocation(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::FAP::ApplicationPlatform::Monitoring::TerminalLocation* reply) override { return Status::OK; }
  //?? Status SetTerminalLocation(ServerContext* context, const tr098::InternetGatewayDevice::FAP::ApplicationPlatform::Monitoring::TerminalLocation* request, GatewayReply* reply) override { return Status::OK; }

  Status GetBulkData(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::BulkData* reply) override { return Status::OK; }
  Status SetBulkData(ServerContext* context, const tr098::InternetGatewayDevice::BulkData* request, GatewayReply* reply) override { return Status::OK; }

  Status GetProfile(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::BulkData::Profile>* reply) override { return Status::OK; }
  Status SetProfile(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::BulkData::Profile>* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetParameter(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::BulkData::Profile::Parameter>* reply) override { return Status::OK; }
  //?? Status SetParameter(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::BulkData::Profile::Parameter>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetDNS(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::DNS* reply) override { return Status::OK; }
  Status SetDNS(ServerContext* context, const tr098::InternetGatewayDevice::DNS* request, GatewayReply* reply) override { return Status::OK; }

  Status GetSD(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::DNS::SD* reply) override { return Status::OK; }
  Status SetSD(ServerContext* context, const tr098::InternetGatewayDevice::DNS::SD* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetService(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::DNS::SD::Service>* reply) override { return Status::OK; }
  //?? Status SetService(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::DNS::SD::Service>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetTextRecord(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::DNS::SD::Service::TextRecord>* reply) override { return Status::OK; }
  Status SetTextRecord(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::DNS::SD::Service::TextRecord>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetXMPP(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::XMPP* reply) override { return Status::OK; }
  Status SetXMPP(ServerContext* context, const tr098::InternetGatewayDevice::XMPP* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetConnection(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::XMPP::Connection>* reply) override { return Status::OK; }
  //?? Status SetConnection(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::XMPP::Connection>* request, GatewayReply* reply) override { return Status::OK; }

  Status GetServer(ServerContext* context, const GatewayRequest* request, ServerWriter<tr098::InternetGatewayDevice::XMPP::Connection::Server>* reply) override { return Status::OK; }
  Status SetServer(ServerContext* context, ServerReader<tr098::InternetGatewayDevice::XMPP::Connection::Server>* request, GatewayReply* reply) override { return Status::OK; }

  //?? Status GetStats(ServerContext* context, const GatewayRequest* request, tr098::InternetGatewayDevice::XMPP::Connection::Stats* reply) override { return Status::OK; }
  //?? Status SetStats(ServerContext* context, const tr098::InternetGatewayDevice::XMPP::Connection::Stats* request, GatewayReply* reply) override { return Status::OK; }

