// Generated by cwmp_proto_to_grpc.cc
// source: tr-196-2-1-0-full.proto
// 1st top-level message: FAPService
// Added service 

// tr-196-2-1-0-full.proto
// Generated by cwmp_xml_to_proto.cc
// source: tr-196-2-1-0-full.xml

syntax = "proto3";

package tr196; //!! renamed

//  uint32    fapservice_number_of_entries             = 0  ; //  numentries}}      s}}      !
message FAPService { // FAPService.{i}.
  string    alias                                    = 1  ; //  {{datatype|expand}}        }        
  string    device_type                              = 2  ; //  The type of FAP device.        .     
  string    dnprefix                                 = 3  ; //  The Distinguished Name prefix (DNPrefix)
  message Capabilities { // FAPService.{i}.Capabilities.
    bool      gpsequipped                              = 1  ; //  Indicates whether the FAP is equipped wi
    uint32    max_tx_power                             = 2  ; //  Indicates the maximum possible transmit 
    string    supported_systems                        = 3  ; //  {{list}} Each entry is a type of system 
    bool      beacon                                   = 4  ; //  Indicates whether FAP can support beacon
    message UMTS { // FAPService.{i}.Capabilities.UMTS.
      string    duplex_mode                              = 1  ; //  Indicates the mode supported by the FAP.
      bool      gsmrx_supported                          = 2  ; //  Indicates whether the FAP hardware suppo
      bool      hsdpasupported                           = 3  ; //  Indicates whether the FAP hardware suppo
      uint32    max_hsdpadata_rate_supported             = 4  ; //  If the FAP hardware supports HSDPA ({{pa
      bool      hsupasupported                           = 5  ; //  Indicates whether the FAP hardware suppo
      uint32    max_hsupadata_rate_supported             = 6  ; //  If the FAP hardware supports HSUPA ({{pa
      uint32    max_hspdschs_supported                   = 7  ; //  If the FAP hardware supports HSPA family
      uint32    max_hsscchs_supported                    = 8  ; //  If the FAP hardware supports HSPA family
      string    fddbands_supported                       = 9  ; //  {{list}} Indicates the UMTS bands that t
      string    gsmrx_bands_supported                    = 10 ; //  {{list}} Indicates the GSM receive bands
      message SelfConfig { // FAPService.{i}.Capabilities.UMTS.SelfConfig.
        bool      uarfcnconfig                             = 1  ; //  Indicates whether the FAP supports the s
        bool      primary_scrambling_code_config           = 2  ; //  Indicates whether the FAP supports the s
        bool      max_faptx_power_expanded_config          = 3  ; //  Indicates whether the FAP supports the s
        bool      pcpichpower_config                       = 4  ; //  Indicates whether the FAP supports the s
        bool      max_ultx_power_config                    = 5  ; //  Indicates whether the FAP supports the s
        bool      lacracuraconfig                          = 6  ; //  Indicates whether the FAP supports the s
        bool      neighbor_list_config                     = 7  ; //  Indicates whether the FAP supports the s
        bool      cell_re_selection_config                 = 8  ; //  Indicates whether the FAP supports the s
        bool      intra_freq_meas_config                   = 9  ; //  Indicates whether the FAP supports the s
        bool      inter_freq_meas_config                   = 10 ; //  Indicates whether the FAP supports the s
        bool      inter_ratmeas_config                     = 11 ; //  Indicates whether the FAP supports the s
        bool      ueinternal_meas_config                   = 12 ; //  Indicates whether the FAP supports the s
        bool      noise_rise_limit_config                  = 13 ; //  Indicates whether the FAP supports the s
      }
      SelfConfig self_config = 11; // FAPService.{i}.Capabilities.UMTS.SelfConfig.
    }
    UMTS umts = 5; // FAPService.{i}.Capabilities.UMTS.
    message LTE { // FAPService.{i}.Capabilities.LTE.
      string    duplex_mode                              = 1  ; //  Indicates the mode supported by the LTE 
      string    bands_supported                          = 2  ; //  {{list}} Indicates the LTE bands that th
      bool      nnsfsupported                            = 3  ; //  Indicates whether LTE FAP supports the N
      bool      umtsrx_supported                         = 4  ; //  Indicates whether the LTE FAP hardware s
      string    umtsrx_bands_supported                   = 5  ; //  {{list}} Indicates the UMTS receive band
      bool      gsmrx_supported                          = 6  ; //  Indicates whether the LTE FAP hardware s
      string    gsmrx_bands_supported                    = 7  ; //  {{list}} Indicates the GSM receive bands
      bool      cdma2000rx_supported                     = 8  ; //  Indicates whether the LTE FAP hardware s
      string    cdma2000rx_bands_supported               = 9  ; //  {{list}} Indicates the CDMA2000 receive 
    }
    LTE lte = 6; // FAPService.{i}.Capabilities.LTE.
    message CDMA2000 { // FAPService.{i}.Capabilities.CDMA2000.
      bool      remote_ipaccess_capable                  = 1  ; //  Indicates whether the FAP is capable of 
      string    band_class_supported_fapbeacon           = 2  ; //  {{list}} Indicates the band classes that
      message OneX { // FAPService.{i}.Capabilities.CDMA2000.OneX.
        string    band_class_supported_fap                 = 1  ; //  {{list}} Indicates the CDMA bands that t
        bool      active_handin_capable                    = 2  ; //  Indicates whether the FAP is capable of 
        bool      femto_overhead_messages_capable          = 3  ; //  Indicates whether the FAP supports Acces
        message SelfConfig { // FAPService.{i}.Capabilities.CDMA2000.OneX.SelfConfig.
          bool      rfcnflconfig                             = 1  ; //  Indicates whether the FAP supports the s
          bool      pilot_pnconfig                           = 2  ; //  Indicates whether the FAP supports the s
          bool      max_faptx_power_config                   = 3  ; //  Indicates whether the FAP supports the s
          bool      max_fapbeacon_tx_power_config            = 4  ; //  Indicates whether the FAP supports the s
        }
        SelfConfig self_config = 4; // FAPService.{i}.Capabilities.CDMA2000.OneX.SelfConfig.
      }
      OneX one_x = 3; // FAPService.{i}.Capabilities.CDMA2000.OneX.
      message HRPD { // FAPService.{i}.Capabilities.CDMA2000.HRPD.
        bool      a13session_transfer_capable              = 1  ; //  Indicates whether the FAP is capable of 
        bool      a16session_transfer_capable              = 2  ; //  Indicates whether the FAP is capable of 
        bool      local_ipaccess_capable                   = 3  ; //  Indicates whether the FAP is capable of 
        bool      dedicated_hrpdbeacon                     = 4  ; //  Indicated whether the FAP supports a ded
        message SelfConfig { // FAPService.{i}.Capabilities.CDMA2000.HRPD.SelfConfig.
          bool      rfcnflconfig                             = 1  ; //  Indicates whether the FAP supports the s
          bool      pilot_pnconfig                           = 2  ; //  Indicates whether the FAP supports the s
          bool      max_faptx_power_config                   = 3  ; //  Indicates whether the FAP supports the s
          bool      max_fapbeacon_tx_power_config            = 4  ; //  Indicates whether the FAP supports the s
        }
        SelfConfig self_config = 5; // FAPService.{i}.Capabilities.CDMA2000.HRPD.SelfConfig.
      }
      HRPD hrpd = 4; // FAPService.{i}.Capabilities.CDMA2000.HRPD.
    }
    CDMA2000 cdma2000 = 7; // FAPService.{i}.Capabilities.CDMA2000.
  }
  Capabilities capabilities = 4; // FAPService.{i}.Capabilities.
  message FAPControl { // FAPService.{i}.FAPControl.
    string    self_config_events                       = 1  ; //  {{list}}  Each item is an event that cau
    bool      enclosure_tampering_detected             = 2  ; //  This parameter indicates whether or not 
    message UMTS { // FAPService.{i}.FAPControl.UMTS.
      bool      op_state                                 = 1  ; //  Current operational state of the UMTS FA
      bool      admin_state                              = 2  ; //  Lock or unlock the UMTS FAP. This contro
      bool      rftx_status                              = 3  ; //  Current status of this UMTS FAP RF trans
      string    pmconfig                                 = 4  ; //  The value MUST be the path name of a row
      message SelfConfig { // FAPService.{i}.FAPControl.UMTS.SelfConfig.
        bool      uarfcnself_config_enable                 = 1  ; //  Indicates whether the self-configuration
        bool      primary_scrambling_code_self_config_enable = 2  ; //  Indicates whether the self-configuration
        bool      max_faptx_power_expanded_self_config_enable = 3  ; //  Indicates whether the self-configuration
        bool      pcpichpower_self_config_enable           = 4  ; //  Indicates whether the self-configuration
        bool      max_ultx_power_self_config_enable        = 5  ; //  Indicates whether the self-configuration
        bool      lacracuraself_config_enable              = 6  ; //  Indicates whether the self-configuration
        bool      neighbor_list_self_config_enable         = 7  ; //  Indicates whether the self-configuration
        bool      cell_re_selection_self_config_enable     = 8  ; //  Indicates whether the self-configuration
        bool      intra_freq_meas_self_config_enable       = 9  ; //  Indicates whether the self-configuration
        bool      inter_freq_meas_self_config_enable       = 10 ; //  Indicates whether the self-configuration
        bool      inter_ratmeas_self_config_enable         = 11 ; //  Indicates whether the self-configuration
        bool      ueinternal_meas_config_enable            = 12 ; //  Indicates whether the self-configuration
        bool      noise_rise_limit_config_enable           = 13 ; //  Indicates whether the self-configuration
      }
      SelfConfig self_config = 5; // FAPService.{i}.FAPControl.UMTS.SelfConfig.
      message Gateway { // FAPService.{i}.FAPControl.UMTS.Gateway.
        string    sec_gwserver1                            = 1  ; //  First SecGW the FAP attempts to establis
        string    sec_gwserver2                            = 2  ; //  Second SecGW the FAP attempts to establi
        string    sec_gwserver3                            = 3  ; //  Third SecGW the FAP attempts to establis
        string    fapgwserver1                             = 4  ; //  First FAPGW the FAP attempts to establis
        string    fapgwserver2                             = 5  ; //  Second FAPGW the FAP attempts to establi
        string    fapgwserver3                             = 6  ; //  Third FAPGW the FAP attempts to establis
        uint32    fapgwport                                = 7  ; //  Port number of FAPGW used for initial Iu
      }
      Gateway gateway = 6; // FAPService.{i}.FAPControl.UMTS.Gateway.
    }
    UMTS umts = 3; // FAPService.{i}.FAPControl.UMTS.
    message LTE { // FAPService.{i}.FAPControl.LTE.
      bool      op_state                                 = 1  ; //  Current operational state of the LTE FAP
      bool      admin_state                              = 2  ; //  Lock or unlock the LTE FAP. This control
      bool      rftx_status                              = 3  ; //  Current status of this LTE FAP RF transm
      string    pmconfig                                 = 4  ; //  The value MUST be the path name of a row
      message Gateway { // FAPService.{i}.FAPControl.LTE.Gateway.
        string    sec_gwserver1                            = 1  ; //  First SecGW the LTE FAP attempts to esta
        string    sec_gwserver2                            = 2  ; //  Second SecGW the LTE FAP attempts to est
        string    sec_gwserver3                            = 3  ; //  Third SecGW the LTE FAP attempts to esta
        string    s1sig_link_server_list                   = 4  ; //  {{list}} Each item is a S1 signaling con
        string    s1connection_mode                        = 5  ; //  Indicates how many of the configured far
        uint32    s1sig_link_port                          = 6  ; //  Port number of S1AP signaling connection
      }
      Gateway gateway = 5; // FAPService.{i}.FAPControl.LTE.Gateway.
    }
    LTE lte = 4; // FAPService.{i}.FAPControl.LTE.
    message CDMA2000 { // FAPService.{i}.FAPControl.CDMA2000.
      string    home_domain                              = 1  ; //  A string containing one of operator's ho
      bool      remote_ipaccess_enable                   = 2  ; //  Enable or disable remote IP access servi
      string    pmconfig                                 = 3  ; //  The value MUST be the path name of a row
      message Time { // FAPService.{i}.FAPControl.CDMA2000.Time.
        string    local_time_zone                          = 1  ; //  The local time zone for CDMA2000 operati
        string    current_local_time                       = 2  ; //  The current CDMA System Time (see {{bibr
        int32     leap_seconds                             = 3  ; //  Number of leap seconds (in {{units}} to 
        bool      daylight_savings_used                    = 4  ; //  Whether or not daylight savings time is 
      }
      Time time = 4; // FAPService.{i}.FAPControl.CDMA2000.Time.
      message OneX { // FAPService.{i}.FAPControl.CDMA2000.OneX.
        string    admin_state                              = 1  ; //  Administrative state for 1x        x 
        string    op_state                                 = 2  ; //  Operational state of the 1x        x 
        bool      rftx_status                              = 3  ; //  Current status of this RF transmitter. {
        int32     daylight                                 = 4  ; //  If Daylight Savings Time is being used w
        int32     max_prev                                 = 5  ; //  Protocol revision supported by the FAP.
        uint32    reregister                               = 6  ; //  {{param}} triggers a re-registration of 
        uint32    emergency_session_period                 = 7  ; //  The period (in {{units}}) the session of
        uint32    location_area_code                       = 8  ; //  This is the location area code.        
        uint32    mscid                                    = 9  ; //  This is the FAP's MSCID. This ID is used
        bool      active_handin_enable                     = 10 ; //  Indicates whether the FAP performs activ
        message ActiveHandinMeasurement { // FAPService.{i}.FAPControl.CDMA2000.OneX.ActiveHandinMeasurement.
          bool      active_handin_measurement_enable         = 1  ; //  Indicates whether the FAP performs activ
          uint32    active_hand_in_measurement_duration      = 2  ; //  The minimum duration in {{units}} for wh
          int32     measurement_report_threshold             = 3  ; //  The threshold (in {{units}}) for the FAP
        }
        ActiveHandinMeasurement active_handin_measurement = 11; // FAPService.{i}.FAPControl.CDMA2000.OneX.ActiveHandinMeasurement.
        message SelfConfig { // FAPService.{i}.FAPControl.CDMA2000.OneX.SelfConfig.
          bool      rfcnflself_config_enable                 = 1  ; //  Indicates whether the self-configuration
          bool      pilot_pnself_config_enable               = 2  ; //  Indicates whether the self-configuration
          bool      max_faptx_power_self_config_enable       = 3  ; //  Indicates whether the self-configuration
          bool      max_fapbeacon_tx_power_self_config_enable = 4  ; //  Indicates whether the self-configuration
        }
        SelfConfig self_config = 12; // FAPService.{i}.FAPControl.CDMA2000.OneX.SelfConfig.
      }
      OneX one_x = 5; // FAPService.{i}.FAPControl.CDMA2000.OneX.
      message Gateway { // FAPService.{i}.FAPControl.CDMA2000.Gateway.
        string    sec_gwserver1                            = 1  ; //  First SecGW the FAP attempts to contact.
        string    sec_gwserver2                            = 2  ; //  Second SecGW the FAP attempts to contact
        string    sec_gwserver3                            = 3  ; //  Third SecGW that the FAP attempts to con
        uint32    sec_gwswitchover_count                   = 4  ; //  Counter indicating how many times FAP ha
      }
      Gateway gateway = 6; // FAPService.{i}.FAPControl.CDMA2000.Gateway.
      message HRPD { // FAPService.{i}.FAPControl.CDMA2000.HRPD.
        bool      op_state                                 = 1  ; //  Current operational state of the FAP as 
        bool      admin_state                              = 2  ; //  Lock or unlock the FAP. This controls th
        bool      rftx_status                              = 3  ; //  Current status of this RF transmitter. {
        bool      a13session_transfer_enable               = 4  ; //  Indicates whether the FAP performs A13 s
        bool      local_ipaccess_enable                    = 5  ; //  Indicates whether the FAP can assign loc
        message SelfConfig { // FAPService.{i}.FAPControl.CDMA2000.HRPD.SelfConfig.
          bool      rfcnflself_config_enable                 = 1  ; //  Indicates whether the self-configuration
          bool      pilot_pnself_config_enable               = 2  ; //  Indicates whether the self-configuration
          bool      max_faptx_power_self_config_enable       = 3  ; //  Indicates whether the self-configuration
          bool      max_hrpdbeacon_tx_power_self_config_enable = 4  ; //  Indicates whether the self-configuration
        }
        SelfConfig self_config = 6; // FAPService.{i}.FAPControl.CDMA2000.HRPD.SelfConfig.
        message A13 { // FAPService.{i}.FAPControl.CDMA2000.HRPD.A13.
          uint32    color_code_to_uati104number_of_entries   = 1  ; //  {{numentries}}        }        RPD.
          uint32    hrpdsubnet_to_ipnumber_of_entries        = 2  ; //  {{numentries}}        }        RPD.
          message ColorCodeToUATI104 { // FAPService.{i}.FAPControl.CDMA2000.HRPD.A13.ColorCodeToUATI104.{i}.
            bool      enable                                   = 1  ; //  Enables or disables the {{object}} entry
            string    alias                                    = 2  ; //  {{datatype|expand}}        }        
            uint32    color_code                               = 3  ; //  Color Code mapped to UATI104 in the foll
            bytes     uati104                                  = 4  ; //  The UATI104 of the AT that accesses with
          }
          repeated ColorCodeToUATI104 color_code_to_uati104 = 3; // FAPService.{i}.FAPControl.CDMA2000.HRPD.A13.ColorCodeToUATI104.{i}.
          message HRPDSubnetToIP { // FAPService.{i}.FAPControl.CDMA2000.HRPD.A13.HRPDSubnetToIP.{i}.
            bool      enable                                   = 1  ; //  Enables or disables the {{object}} entry
            string    alias                                    = 2  ; //  {{datatype|expand}}        }        
            uint32    hrpdsubnet_length                        = 3  ; //  The number of MSBs (in {{units}}) in the
            bytes     hrpdsubnet                               = 4  ; //  The {{param|HRPDSubnetLength}} MSBs of t
            string    a13ipaddress                             = 5  ; //  This field contains the IP address of A1
          }
          repeated HRPDSubnetToIP hrpdsubnet_to_ip = 4; // FAPService.{i}.FAPControl.CDMA2000.HRPD.A13.HRPDSubnetToIP.{i}.
        }
        A13 a13 = 7; // FAPService.{i}.FAPControl.CDMA2000.HRPD.A13.
      }
      HRPD hrpd = 7; // FAPService.{i}.FAPControl.CDMA2000.HRPD.
    }
    CDMA2000 cdma2000 = 5; // FAPService.{i}.FAPControl.CDMA2000.
  }
  FAPControl fapcontrol = 5; // FAPService.{i}.FAPControl.
  message AccessMgmt { // FAPService.{i}.AccessMgmt.
    message UMTS { // FAPService.{i}.AccessMgmt.UMTS.
      string    access_mode                              = 1  ; //  Indicates the type of access mode the FA
      string    non_csgueaccess_decision                 = 2  ; //  Indicates how the access decision is mad
      bool      csgmembership_determined_locally         = 3  ; //  Indicates how the access decision is mad
      int32     max_ues_served                           = 4  ; //  Maximum number of concurrent UEs allowed
      int32     max_csgmembers                           = 5  ; //  Maximum number of concurrent CSG member 
      int32     max_non_csgmembers                       = 6  ; //  Maximum number of concurerent non-CSG me
      uint32    max_resource_non_csgmembers              = 7  ; //  Maximum percentage of physical resource 
      string    hnbname                                  = 8  ; //  Home NodeB name. An operator-defined str
      uint32    csgid                                    = 9  ; //  Defines the Closed Subscriber Group of t
      string    access_control_list                      = 10 ; //  {{list}} Each entry is an IMSI.        
      uint32    max_member_detail_entries                = 11 ; //  The maximum number of entries available 
      uint32    member_detail_number_of_entries          = 12 ; //  {{numentries}}        }        y.
      message MemberDetail { // FAPService.{i}.AccessMgmt.UMTS.MemberDetail.{i}.
        bool      enable                                   = 1  ; //  Enables or disables the MemberDetail ent
        string    alias                                    = 2  ; //  {{datatype|expand}}        }        
        string    imsi                                     = 3  ; //  International Mobile Subscriber Identity
        string    msisdn                                   = 4  ; //  Mobile Station International Subscriber 
        string    membership_expires                       = 5  ; //  Time when the ACL membership expires.  
      }
      repeated MemberDetail member_detail = 13; // FAPService.{i}.AccessMgmt.UMTS.MemberDetail.{i}.
      message LocalIPAccess { // FAPService.{i}.AccessMgmt.UMTS.LocalIPAccess.
        bool      enable                                   = 1  ; //  Enables/disables the Local IP Access (LI
      }
      LocalIPAccess local_ipaccess = 14; // FAPService.{i}.AccessMgmt.UMTS.LocalIPAccess.
    }
    UMTS umts = 1; // FAPService.{i}.AccessMgmt.UMTS.
    message LTE { // FAPService.{i}.AccessMgmt.LTE.
      string    access_mode                              = 1  ; //  Indicates the type of access mode the FA
      int32     max_ues_served                           = 2  ; //  Maximum number of concurrent UEs allowed
      int32     max_csgmembers                           = 3  ; //  Maximum number of concurrent CSG member 
      int32     max_non_csgmembers                       = 4  ; //  Maximum number of concurerent non-CSG me
      uint32    max_resource_non_csgmembers              = 5  ; //  Maximum percentage of physical resource 
      uint32    csgid                                    = 6  ; //  Defines the Closed Subscriber Group of t
      string    hnbname                                  = 7  ; //  Home NodeB name. An operator-defined str
      message LocalIPAccess { // FAPService.{i}.AccessMgmt.LTE.LocalIPAccess.
        bool      enable                                   = 1  ; //  Enables/disables the Local IP Access (LI
      }
      LocalIPAccess local_ipaccess = 8; // FAPService.{i}.AccessMgmt.LTE.LocalIPAccess.
    }
    LTE lte = 2; // FAPService.{i}.AccessMgmt.LTE.
    message CDMA2000 { // FAPService.{i}.AccessMgmt.CDMA2000.
      uint32    access_mode                              = 1  ; //  Defines the access control mode of FAP. 
      uint32    max_total_active_calls_allowed           = 2  ; //  Total number of active calls allowed.  
      string    access_control_list                      = 3  ; //  {{list}} (maximum item length 15). Each 
      uint32    max_member_detail_entries                = 4  ; //  The maximum number of entries available 
      uint32    member_detail_number_of_entries          = 5  ; //  {{numentries}}        }        PAcc
      message MemberDetail { // FAPService.{i}.AccessMgmt.CDMA2000.MemberDetail.{i}.
        bool      enable                                   = 1  ; //  Enables or disables the {{object}} entry
        string    alias                                    = 2  ; //  {{datatype|expand}}        }        
        string    imsi                                     = 3  ; //  International Mobile Subscriber Identity
        int32     hrpdidentifier_type                      = 4  ; //  Type of identifier used for the HRPD AT.
        string    hrpdidentifier_value                     = 5  ; //  The value of this attribute depends on {
        string    membership_expires                       = 6  ; //  The time that the current ACL membership
      }
      repeated MemberDetail member_detail = 6; // FAPService.{i}.AccessMgmt.CDMA2000.MemberDetail.{i}.
      message LocalIPAccess { // FAPService.{i}.AccessMgmt.CDMA2000.LocalIPAccess.
        message HRPD { // FAPService.{i}.AccessMgmt.CDMA2000.LocalIPAccess.HRPD.
          uint32    filter_type                              = 1  ; //  Value of '0' indicates that the FAP shal
          string    filter_in_use                            = 2  ; //  This parameter is set to the IPCP Vendor
          uint32    egress_filter_number_of_entries          = 3  ; //  {{numentries}}        }        RPD.
          message EgressFilter { // FAPService.{i}.AccessMgmt.CDMA2000.LocalIPAccess.HRPD.EgressFilter.{i}.
            bool      enable                                   = 1  ; //  Enables or disables the {{object}} entry
            string    alias                                    = 2  ; //  {{datatype|expand}}        }        
            string    subnet                                   = 3  ; //  The IP subnet of the egress filter to be
            uint32    subnet_mask                              = 4  ; //  The length of the IP subnetmask associat
          }
          repeated EgressFilter egress_filter = 4; // FAPService.{i}.AccessMgmt.CDMA2000.LocalIPAccess.HRPD.EgressFilter.{i}.
        }
        HRPD hrpd = 1; // FAPService.{i}.AccessMgmt.CDMA2000.LocalIPAccess.HRPD.
      }
      LocalIPAccess local_ipaccess = 7; // FAPService.{i}.AccessMgmt.CDMA2000.LocalIPAccess.
    }
    CDMA2000 cdma2000 = 3; // FAPService.{i}.AccessMgmt.CDMA2000.
    message Legacy { // FAPService.{i}.AccessMgmt.Legacy.
      message LocalIPAccess { // FAPService.{i}.AccessMgmt.Legacy.LocalIPAccess.
        bool      enable                                   = 1  ; //  Enables/disables the Local IP Access (LI
        uint32    max_rules_entries                        = 2  ; //  The maximum number of entries available 
        uint32    rule_number_of_entries                   = 3  ; //  {{numentries}}        }        alIP
        message Rule { // FAPService.{i}.AccessMgmt.Legacy.LocalIPAccess.Rule.{i}.
          bool      enable                                   = 1  ; //  Enables or disables the forwarding entry
          string    alias                                    = 2  ; //  {{datatype|expand}}        }        
          string    dest_ipaddress                           = 3  ; //  Destination IP Address. {{empty}} indica
          string    dest_subnet_mask                         = 4  ; //  Destination subnet mask (IPv4) or prefix
          int32     protocol                                 = 5  ; //  IP Protocol Identifier. -1 matches any p
          string    action                                   = 6  ; //  Action to be taken for traffic matching 
          string    interface                                = 7  ; //  Specifies the egress interface when {{pa
        }
        repeated Rule rule = 4; // FAPService.{i}.AccessMgmt.Legacy.LocalIPAccess.Rule.{i}.
      }
      LocalIPAccess local_ipaccess = 1; // FAPService.{i}.AccessMgmt.Legacy.LocalIPAccess.
    }
    Legacy legacy = 4; // FAPService.{i}.AccessMgmt.Legacy.
  }
  AccessMgmt access_mgmt = 6; // FAPService.{i}.AccessMgmt.
  message CellConfig { // FAPService.{i}.CellConfig.
    message UMTS { // FAPService.{i}.CellConfig.UMTS.
      string    tunnel_instance                          = 1  ; //  This is the reference to the IPsec tunne
      message CN { // FAPService.{i}.CellConfig.UMTS.CN.
        string    plmntype                                 = 1  ; //  Type of Public Land Mobile Network (PLMN
        string    plmnid                                   = 2  ; //  PLMN ID consists of Mobile Country Code 
        string    equiv_plmnid                             = 3  ; //  {{list}} Each item is a PLMNID.        
        uint32    sac                                      = 4  ; //  Service Area Code (SAC)  {{bibref|3GPP-T
        uint32    broadcast_sac                            = 5  ; //  Service Area Code (SAC) for broadcast. T
        string    lacrac                                   = 6  ; //  {{list}}  Each item is a LAC/RAC combina
        uint32    lacin_use                                = 7  ; //  The LAC being used by the FAP.         
        uint32    racin_use                                = 8  ; //  The RAC being used by the FAP.         
        message CSDomain { // FAPService.{i}.CellConfig.UMTS.CN.CSDomain.
          uint32    t3212                                    = 1  ; //  T3212 timeout value specified in {{units
          bool      imsiattach_detach_enable                 = 2  ; //  Indicates the UE behavior regarding IMSI
          message RAB { // FAPService.{i}.CellConfig.UMTS.CN.CSDomain.RAB.
            message Stats { // FAPService.{i}.CellConfig.UMTS.CN.CSDomain.RAB.Stats.
              uint32    att_estab_cs                             = 1  ; //  This measurement provides the total numb
              uint32    fail_estab_cs                            = 2  ; //  This measurement provides the number of 
              uint32    succ_estab_cs                            = 3  ; //  This measurement provides the number of 
              uint32    rel_drop_cs                              = 4  ; //  This measurement provides the total numb
            }
            Stats stats = 1; // FAPService.{i}.CellConfig.UMTS.CN.CSDomain.RAB.Stats.
          }
          RAB rab = 3; // FAPService.{i}.CellConfig.UMTS.CN.CSDomain.RAB.
          message HHO { // FAPService.{i}.CellConfig.UMTS.CN.CSDomain.HHO.
            message Stats { // FAPService.{i}.CellConfig.UMTS.CN.CSDomain.HHO.Stats.
              uint32    att3gmacro_to_hnb_csho                   = 1  ; //  This measurement provides the number of 
              uint32    succ3gmacro_to_hnb_csho                  = 2  ; //  This measurement provides the number of 
              uint32    att2gmacro_to_hnb_csho                   = 3  ; //  This measurement provides the number of 
              uint32    succ2gmacro_to_hnb_csho                  = 4  ; //  This measurement provides the number of 
            }
            Stats stats = 1; // FAPService.{i}.CellConfig.UMTS.CN.CSDomain.HHO.Stats.
          }
          HHO hho = 4; // FAPService.{i}.CellConfig.UMTS.CN.CSDomain.HHO.
        }
        CSDomain csdomain = 9; // FAPService.{i}.CellConfig.UMTS.CN.CSDomain.
        message PSDomain { // FAPService.{i}.CellConfig.UMTS.CN.PSDomain.
          bool      network_mode_operation_combined          = 1  ; //  Network Mode of Operation of the CN. {{b
          message RAB { // FAPService.{i}.CellConfig.UMTS.CN.PSDomain.RAB.
            message Stats { // FAPService.{i}.CellConfig.UMTS.CN.PSDomain.RAB.Stats.
              string    att_estab_ps                             = 1  ; //  This measurement provides the number of 
              uint32    succ_estab_ps                            = 2  ; //  This measurement provides the total numb
              uint32    fail_estab_ps                            = 3  ; //  This measurement provides the total numb
              uint32    rel_drop_ps                              = 4  ; //  This measurement provides the total numb
              uint64    ulnum_user_bits_edch                     = 5  ; //  This measurement provides the number of 
              uint32    ulnum_user_bits64k                       = 6  ; //  This measurement provides the number of 
              uint32    ulnum_user_bits128k                      = 7  ; //  This measurement provides the number of 
              uint32    ulnum_user_bits384k                      = 8  ; //  This measurement provides the number of 
              uint32    dlnum_user_bits_hsdpa                    = 9  ; //  This measurement provides the number of 
              uint32    dlnum_user_bits64k                       = 10 ; //  This measurement provides the number of 
              uint32    dlnum_user_bits128k                      = 11 ; //  This measurement provides the number of 
              uint32    dlnum_user_bits384k                      = 12 ; //  This measurement provides the number of 
              uint32    lgwnumber_of_entries                     = 13 ; //  {{numentries}}        }        
              message LGW { // FAPService.{i}.CellConfig.UMTS.CN.PSDomain.RAB.Stats.LGW.{i}.
                string    correlation_id                           = 1  ; //  The value of this parameter is equal to 
                uint32    estab_direct_path_lgwatt_nbr             = 2  ; //  This measurement provides the number of 
                uint32    estab_direct_path_lgwsucc_nbr            = 3  ; //  This measurement provides the number of 
                string    estab_direct_path_lgwfail_nbr            = 4  ; //  This measurement provides the number of 
              }
              repeated LGW lgw = 14; // FAPService.{i}.CellConfig.UMTS.CN.PSDomain.RAB.Stats.LGW.{i}.
            }
            Stats stats = 1; // FAPService.{i}.CellConfig.UMTS.CN.PSDomain.RAB.Stats.
          }
          RAB rab = 2; // FAPService.{i}.CellConfig.UMTS.CN.PSDomain.RAB.
        }
        PSDomain psdomain = 10; // FAPService.{i}.CellConfig.UMTS.CN.PSDomain.
        message HHO { // FAPService.{i}.CellConfig.UMTS.CN.HHO.
          message Stats { // FAPService.{i}.CellConfig.UMTS.CN.HHO.Stats.
            uint32    succ_hnb_umts_intra_freq                 = 1  ; //  This measurement provides the number of 
            uint32    att_hnb_umts_intra_freq                  = 2  ; //  This measurement provides the number of 
            uint32    att_hnb_umts_inter_freq                  = 3  ; //  This measurement provides the number of 
          }
          Stats stats = 1; // FAPService.{i}.CellConfig.UMTS.CN.HHO.Stats.
        }
        HHO hho = 11; // FAPService.{i}.CellConfig.UMTS.CN.HHO.
      }
      CN cn = 2; // FAPService.{i}.CellConfig.UMTS.CN.
      message RAN { // FAPService.{i}.CellConfig.UMTS.RAN.
        string    uralist                                  = 1  ; //  {{list}} Each item is a URA (UTRAN Regis
        uint32    urain_use                                = 2  ; //  The URA being used by the FAP.         
        uint32    rncid                                    = 3  ; //  RNC-ID allocated to the FAP. It uniquely
        uint32    cell_id                                  = 4  ; //  Cell Identity. {{bibref|3GPP-TS.25.401|S
        uint32    trat_c                                   = 5  ; //  Guard period in {{units}} before sending
        uint32    traf_c                                   = 6  ; //  Maximum amount of time in {{units}} that
        uint32    nraf_c                                   = 7  ; //  Maximum number for RESET procedure that 
        uint32    tig_or                                   = 8  ; //  Amount of time in {{units}} used to dete
        uint32    tin_tr                                   = 9  ; //  Amount of time in {{units}} used to dete
        uint32    tdata_fwd                                = 10 ; //  Maximum amount of time in {{units}} for 
        uint32    treloc_prep                              = 11 ; //  Maximum amount of time in {{units}} for 
        uint32    treloc_overall                           = 12 ; //  Maximum amount of time in {{units}} for 
        string    hnbidrealm                               = 13 ; //  The "realm" portion of the HNB-ID where 
        bool      hsflag                                   = 14 ; //  Enables/disables the HSDPA function in t
        bool      hsenable                                 = 15 ; //  Enables or disables HSDPA in the cell. 
        uint32    num_of_hspdschs                          = 16 ; //  The number of codes at the defined sprea
        uint32    num_of_hsscchs                           = 17 ; //  The number of HS-SCCHs for one cell. {{b
        message CSG { // FAPService.{i}.CellConfig.UMTS.RAN.CSG.
          bool      csgindicator                             = 1  ; //  The CSG-indicator Information Element (I
          string    uarfcndllist                             = 2  ; //  {{list}} Each item is a UTRA Absolute Ra
          message CSGPSCSplitInfo { // FAPService.{i}.CellConfig.UMTS.RAN.CSG.CSGPSCSplitInfo.
            uint32    start_pscrange1coefficient               = 1  ; //  The value of this Information Element (I
            string    number_of_pscs                           = 2  ; //  This Information Element (IE) specifies 
            uint32    pscrange2offset                          = 3  ; //  If this Information Element (IE) is incl
          }
          CSGPSCSplitInfo csgpscsplit_info = 3; // FAPService.{i}.CellConfig.UMTS.RAN.CSG.CSGPSCSplitInfo.
        }
        CSG csg = 18; // FAPService.{i}.CellConfig.UMTS.RAN.CSG.
        message CellSelection { // FAPService.{i}.CellConfig.UMTS.RAN.CellSelection.
          string    quality_measure_cpich                    = 1  ; //  Which mechanism to use when doing CPICH 
          int32     qqual_min                                = 2  ; //  Minimum required quality measure, specif
          uint32    qqual_min_offset                         = 3  ; //  Offset for {{param|QqualMin}} specified 
          int32     qrx_lev_min                              = 4  ; //  Minimum required RX level in the cell, s
          int32     delta_qrx_lev_min                        = 5  ; //  Delta for the minimum required RX level 
          uint32    qrx_lev_min_offset                       = 6  ; //  Offset for {{param|QRxLevMin}}, specifie
          uint32    qhyst1s                                  = 7  ; //  GSM and FDD Cell reselection hysteresis 
          uint32    qhyst2s                                  = 8  ; //  FDD Cell reselection hysteresis 2. {{bib
          uint32    treselections                            = 9  ; //  A member of the set of parameters used f
          int32     sintrasearch                             = 10 ; //  A member of the set of parameters used f
          int32     sintersearch                             = 11 ; //  A member of the set of parameters used f
          int32     ssearch_hcs                              = 12 ; //  A member of the set of parameters used f
          int32     ssearch_rat                              = 13 ; //  A member of the set of parameters used f
          int32     shcsrat                                  = 14 ; //  A member of the set of parameters used f
          int32     slimit_search_rat                        = 15 ; //  A member of the set of parameters used f
          string    non_hcstcrmax                            = 16 ; //  A member of the set of parameters used f
          uint32    non_hcsncr                               = 17 ; //  A member of the set of parameters used f
          string    non_hcstcrmax_hyst                       = 18 ; //  A member of the set of parameters used f
          uint32    qhcs                                     = 19 ; //  A member of the set of parameters used f
          bool      use_of_hcs                               = 20 ; //  A member of the set of parameters used f
          uint32    hcsprio                                  = 21 ; //  A member of the set of parameters used f
          string    tcrmax                                   = 22 ; //  A member of the set of parameters used f
          uint32    ncr                                      = 23 ; //  A member of the set of parameters used f
          string    tcrmax_hyst                              = 24 ; //  A member of the set of parameters used f
          int32     uetx_pwr_max_rach                        = 25 ; //  A member of the set of parameters used f
        }
        CellSelection cell_selection = 19; // FAPService.{i}.CellConfig.UMTS.RAN.CellSelection.
        message RRCTimers { // FAPService.{i}.CellConfig.UMTS.RAN.RRCTimers.
          uint32    t300                                     = 1  ; //  Timer measured in {{units}}.          O
          uint32    t301                                     = 2  ; //  Timer measured in {{units}}.          O
          uint32    t302                                     = 3  ; //  Timer measured in {{units}}.          O
          uint32    t304                                     = 4  ; //  Timer measured in {{units}}. Defined in 
          int32     t305                                     = 5  ; //  Timer measured in {{units}}.          -
          uint32    t307                                     = 6  ; //  Timer measured in {{units}}. Defined in 
          uint32    t308                                     = 7  ; //  Timer measured in {{units}}. Defined in 
          uint32    t309                                     = 8  ; //  Timer measured in {{units}}. Defined in 
          uint32    t310                                     = 9  ; //  Timer measured in {{units}}. Defined in 
          uint32    t311                                     = 10 ; //  Timer measured in {{units}}. Defined in 
          uint32    t312                                     = 11 ; //  Timer measured in {{units}}. Defined in 
          uint32    t313                                     = 12 ; //  Timer measured in {{units}}. Defined in 
          uint32    t314                                     = 13 ; //  Timer measured in {{units}}. Defined in 
          uint32    t315                                     = 14 ; //  Timer measured in {{units}}. Defined in 
          int32     t316                                     = 15 ; //  Timer measured in {{units}}. Defined in 
          uint32    t317                                     = 16 ; //  Timer measured in {{units}}. Defined in 
          uint32    n300                                     = 17 ; //  Counter. Defined in SIB1 {{bibref|3GPP-T
          uint32    n301                                     = 18 ; //  Counter. Defined in SIB1 {{bibref|3GPP-T
          uint32    n302                                     = 19 ; //  Counter. Defined in SIB1 {{bibref|3GPP-T
          uint32    n304                                     = 20 ; //  Counter. Defined in SIB1 {{bibref|3GPP-T
          uint32    n310                                     = 21 ; //  Counter. Defined in SIB1 {{bibref|3GPP-T
          uint32    n312                                     = 22 ; //  Counter.          Only the following va
          uint32    n313                                     = 23 ; //  Counter. Defined in SIB1 {{bibref|3GPP-T
          uint32    n315                                     = 24 ; //  Counter.          Only the following va
          uint32    wait_time                                = 25 ; //  Time period the UE has to wait before re
        }
        RRCTimers rrctimers = 20; // FAPService.{i}.CellConfig.UMTS.RAN.RRCTimers.
        message DRX { // FAPService.{i}.CellConfig.UMTS.RAN.DRX.
          uint32    drxcycle_length_coefficient_cs           = 1  ; //  Defines the DRX cycle length coefficient
          uint32    drxcycle_length_coefficient_ps           = 2  ; //  Defines the DRX cycle length coefficient
          uint32    utrandrxcycle_length_coefficient         = 3  ; //  Defines the DRX cycle length used by UTR
        }
        DRX drx = 21; // FAPService.{i}.CellConfig.UMTS.RAN.DRX.
        message PowerControl { // FAPService.{i}.CellConfig.UMTS.RAN.PowerControl.
          int32     constant_value                           = 1  ; //  Used by the UE to calculate the initial 
          uint32    power_ramp_step_up                       = 2  ; //  Used for the Uplink Common Channel.    
          uint32    preamble_retrans_max                     = 3  ; //  Used for the Uplink Common Channel.    
          uint32    persistence_scale_factor                 = 4  ; //  Persistence Scaling Factor for overload 
          uint32    mmax                                     = 5  ; //  Maximum number of RACH preamble cycles.
          uint32    nb01min                                  = 6  ; //  RACH random back-off lower bound.      
          uint32    nb01max                                  = 7  ; //  RACH random back-off upper bound.      
        }
        PowerControl power_control = 22; // FAPService.{i}.CellConfig.UMTS.RAN.PowerControl.
        message CellRestriction { // FAPService.{i}.CellConfig.UMTS.RAN.CellRestriction.
          bool      cell_barred                              = 1  ; //  Indicates whether the FAP is barred from
          bool      intra_freq_cell_reselection_indicator    = 2  ; //  When {{param|CellBarred}} is {{true}}, t
          uint32    tbarred                                  = 3  ; //  The time period in {{units}} during whic
          string    access_class_barred_list_cs              = 4  ; //  {{list}} Each entry is an Access Class t
          string    access_class_barred_list_ps              = 5  ; //  {{list}} Each entry is an Access Class t
          bool      cell_reserved_for_operator_use           = 6  ; //  Indicates whether the FAP is reserved fo
        }
        CellRestriction cell_restriction = 23; // FAPService.{i}.CellConfig.UMTS.RAN.CellRestriction.
        message IntraFreqMeas { // FAPService.{i}.CellConfig.UMTS.RAN.IntraFreqMeas.
          string    measurement_quantity                     = 1  ; //  Defines the measurement quantity for int
          uint32    filter_coefficient                       = 2  ; //  Defines the equivalent time constant of 
          string    intra_frequency_event_identity           = 3  ; //  {{list}} Each entry is an Event ID from 
          string    triggering_condition2event1a             = 4  ; //  {{list}} Indicates which cells can trigg
          string    triggering_condition1event1b             = 5  ; //  {{list}} Indicates which cells can trigg
          string    triggering_condition2event1e             = 6  ; //  {{list}} Indicates which cells can trigg
          string    triggering_condition1event1f             = 7  ; //  {{list}} Indicates which cells can trigg
          uint32    reporting_range_event1a                  = 8  ; //  Defines a constant in the inequality cri
          uint32    reporting_range_event1b                  = 9  ; //  Defines a constant in the inequality cri
          uint32    weighting_factor_event1a                 = 10 ; //  Defines the weighting factor for intra-f
          uint32    weighting_factor_event1b                 = 11 ; //  Defines the weighting factor for intra-f
          uint32    report_deactivation_threshold_event1a    = 12 ; //  Defines the maximum number of cells allo
          int32     reporting_amount_event1a                 = 13 ; //  Defines the maximum number of MEASUREMEN
          int32     reporting_amount_event1c                 = 14 ; //  Defines the maximum number of MEASUREMEN
          uint32    reporting_interval_event1a               = 15 ; //  Defines the transmission period in {{uni
          uint32    reporting_interval_event1c               = 16 ; //  Defines the transmission period in {{uni
          uint32    hysteresis_event1a                       = 17 ; //  Defines the hysteresis for intra-freq HO
          uint32    hysteresis_event1b                       = 18 ; //  Defines the hysteresis for intra-freq HO
          uint32    hysteresis_event1c                       = 19 ; //  Defines the hysteresis for intra-freq HO
          uint32    hysteresis_event1d                       = 20 ; //  Defines the hysteresis for intra-freq HO
          uint32    hysteresis_event1e                       = 21 ; //  Defines the hysteresis for intra-freq HO
          uint32    hysteresis_event1f                       = 22 ; //  Defines the hysteresis for intra-freq HO
          uint32    time_to_trigger_event1a                  = 23 ; //  Defines the time-to-trigger in {{units}}
          uint32    time_to_trigger_event1b                  = 24 ; //  Defines the time-to-trigger in {{units}}
          uint32    time_to_trigger_event1c                  = 25 ; //  Defines the time-to-trigger in {{units}}
          uint32    time_to_trigger_event1d                  = 26 ; //  Defines the time-to-trigger in {{units}}
          uint32    time_to_trigger_event1e                  = 27 ; //  Defines the time-to-trigger in {{units}}
          uint32    time_to_trigger_event1f                  = 28 ; //  Defines the time-to-trigger in {{units}}
          int32     threshold_used_frequency_event1e         = 29 ; //  Defines the reporting threshold for intr
          int32     threshold_used_frequency_event1f         = 30 ; //  Defines the reporting threshold for intr
          uint32    replacement_activation_threshold_event1c = 31 ; //  Defines the minimum number of cells allo
          uint32    instance_number_of_entries               = 32 ; //  {{numentries}}        }        c.
          message Instance { // FAPService.{i}.CellConfig.UMTS.RAN.IntraFreqMeas.Instance.{i}.
            bool      enable                                   = 1  ; //  Enables or disables this {{object}} entr
            string    alias                                    = 2  ; //  {{datatype|expand}}        }        
            string    intra_frequency_event_identity           = 3  ; //  Each entry is an Event ID from the list 
            string    event_description                        = 4  ; //  A free-form description of the way the e
            string    measurement_quantity                     = 5  ; //  Defines the measurement quantity for int
            uint32    filter_coefficient                       = 6  ; //  Defines the equivalent time constant of 
            string    triggering_condition                     = 7  ; //  {{list}} Indicates which cells can trigg
            uint32    reporting_range                          = 8  ; //  Applicable to events 1a, 1b, otherwise n
            uint32    weighting_factor                         = 9  ; //  Applicable to events 1a, 1b, otherwise n
            uint32    report_deactivation_threshold            = 10 ; //  Applicable to events 1a, otherwise not n
            int32     reporting_amount                         = 11 ; //  Applicable to events 1a, 1c, otherwise n
            uint32    reporting_interval                       = 12 ; //  Applicable to events 1a, 1c, otherwise n
            uint32    hysteresis                               = 13 ; //  Defines the hysteresis for intra-freq HO
            uint32    time_to_trigger                          = 14 ; //  Defines the time-to-trigger in {{units}}
            int32     threshold_used_frequency                 = 15 ; //  Applicable to events 1e, 1f, otherwise n
            uint32    replacement_activation_threshold         = 16 ; //  Applicable only to event 1c          De
          }
          repeated Instance instance = 33; // FAPService.{i}.CellConfig.UMTS.RAN.IntraFreqMeas.Instance.{i}.
        }
        IntraFreqMeas intra_freq_meas = 24; // FAPService.{i}.CellConfig.UMTS.RAN.IntraFreqMeas.
        message InterFreqMeas { // FAPService.{i}.CellConfig.UMTS.RAN.InterFreqMeas.
          string    measurement_quantity                     = 1  ; //  Defines the measurement quantity for int
          uint32    filter_coefficient                       = 2  ; //  Defines the filter coefficient for inter
          string    inter_frequency_event_identity           = 3  ; //  {{list}} Each entry is an Event ID from 
          uint32    weighting_factor_event2a                 = 4  ; //  Defines the weighting factor for inter-f
          uint32    weighting_factor_event2b                 = 5  ; //  Defines the weighting factor for inter-f
          uint32    weighting_factor_event2d                 = 6  ; //  Defines the weighting factor for inter-f
          uint32    weighting_factor_event2f                 = 7  ; //  Defines the weighting factor for inter-f
          uint32    hysteresis_event2a                       = 8  ; //  Defines the hysteresis for inter-freq HO
          uint32    hysteresis_event2b                       = 9  ; //  Defines the hysteresis for inter-freq HO
          uint32    hysteresis_event2d                       = 10 ; //  Defines the hysteresis for inter-freq HO
          uint32    hysteresis_event2f                       = 11 ; //  Defines the hysteresis for inter-freq HO
          uint32    time_to_trigger_event2a                  = 12 ; //  Defines the time-to-trigger in {{units}}
          uint32    time_to_trigger_event2b                  = 13 ; //  Defines the time-to-trigger in {{units}}
          uint32    time_to_trigger_event2d                  = 14 ; //  Defines the time-to-trigger in {{units}}
          uint32    time_to_trigger_event2f                  = 15 ; //  Defines the time-to-trigger in {{units}}
          int32     threshold_used_frequency_event2b         = 16 ; //  Defines the reporting threshold for inte
          int32     threshold_used_frequency_event2d         = 17 ; //  Defines the reporting threshold for inte
          int32     threshold_used_frequency_event2f         = 18 ; //  Defines the reporting threshold for inte
          uint32    instance_number_of_entries               = 19 ; //  {{numentries}}        }        
          message Instance { // FAPService.{i}.CellConfig.UMTS.RAN.InterFreqMeas.Instance.{i}.
            bool      enable                                   = 1  ; //  Enables or disables this {{object}} entr
            string    alias                                    = 2  ; //  {{datatype|expand}}        }        
            string    intra_frequency_event_identity           = 3  ; //  Each entry is an Event ID from the list 
            string    event_description                        = 4  ; //  A free-form description of the way the e
            string    measurement_quantity                     = 5  ; //  Defines the measurement quantity for int
            uint32    filter_coefficient                       = 6  ; //  Defines the filter coefficient for inter
            uint32    weighting_factor                         = 7  ; //  Defines the weighting factor for inter-f
            uint32    hysteresis                               = 8  ; //  Defines the hysteresis for inter-freq HO
            uint32    time_to_trigger                          = 9  ; //  Defines the time-to-trigger in {{units}}
            int32     threshold_used_frequency                 = 10 ; //  Applicable to events 2b, 2d, 2f, otherwi
            int32     threshold_non_used_frequency             = 11 ; //  Applicable to events 2a, 2b, 2c, 2e othe
          }
          repeated Instance instance = 20; // FAPService.{i}.CellConfig.UMTS.RAN.InterFreqMeas.Instance.{i}.
        }
        InterFreqMeas inter_freq_meas = 25; // FAPService.{i}.CellConfig.UMTS.RAN.InterFreqMeas.
        message InterRATMeas { // FAPService.{i}.CellConfig.UMTS.RAN.InterRATMeas.
          uint32    gsmfilter_coefficient                    = 1  ; //  Defines the filter coefficient for inter
          bool      bsicverification_required                = 2  ; //  Indicates whether the BSIC verification 
          uint32    weighting_factor                         = 3  ; //  Defines the weighting factor for inter-R
          uint32    hysteresis                               = 4  ; //  Defines the hysteresis for inter-RAT HO 
          uint32    time_to_trigger                          = 5  ; //  Defines the time-to-trigger in {{units}}
          int32     threshold_own_system                     = 6  ; //  Defines the reporting threshold for inte
          int32     threshold_other_system                   = 7  ; //  Defines the reporting threshold for inte
          uint32    instance_number_of_entries               = 8  ; //  {{numentries}}        }        ion 
          message Instance { // FAPService.{i}.CellConfig.UMTS.RAN.InterRATMeas.Instance.{i}.
            bool      enable                                   = 1  ; //  Enables or disables this {{object}} entr
            string    alias                                    = 2  ; //  {{datatype|expand}}        }        
            string    inter_ratevent_identity                  = 3  ; //  Each entry is an Event ID from the list 
            string    event_description                        = 4  ; //  A free-form description of the way the e
            uint32    filter_coefficient                       = 5  ; //  Defines the filter coefficient for inter
            bool      bsicverification_required                = 6  ; //  Applicable only to GSM events.         
            uint32    weighting_factor                         = 7  ; //  Defines the weighting factor for inter-R
            uint32    hysteresis                               = 8  ; //  Defines the hysteresis for inter-RAT HO 
            uint32    time_to_trigger                          = 9  ; //  Defines the time-to-trigger in {{units}}
            int32     threshold_own_system                     = 10 ; //  Applicable only to event 3a, otherwise n
            int32     threshold_other_system                   = 11 ; //  Applicable to events 3a, 3b, 3c, otherwi
          }
          repeated Instance instance = 9; // FAPService.{i}.CellConfig.UMTS.RAN.InterRATMeas.Instance.{i}.
        }
        InterRATMeas inter_ratmeas = 26; // FAPService.{i}.CellConfig.UMTS.RAN.InterRATMeas.
        message UEInternalMeas { // FAPService.{i}.CellConfig.UMTS.RAN.UEInternalMeas.
          uint32    filter_coefficient                       = 1  ; //  Defines the filter coefficient for UE in
          int32     uetx_pwr_threshold_event6a               = 2  ; //  Defines the threshold for UE transmit po
          uint32    time_to_trigger_event6a                  = 3  ; //  Defines the period in {{units}} between 
          int32     uetx_pwr_threshold_event6b               = 4  ; //  Defines the threshold for UE transmit po
          uint32    time_to_trigger_event6b                  = 5  ; //  Defines the period in {{units}} between 
        }
        UEInternalMeas ueinternal_meas = 27; // FAPService.{i}.CellConfig.UMTS.RAN.UEInternalMeas.
        message RF { // FAPService.{i}.CellConfig.UMTS.RAN.RF.
          string    uarfcndl                                 = 1  ; //  {{list}} Each item is a DL UTRA Absolute
          uint32    uarfcndlin_use                           = 2  ; //  The DL UARFCN being used by the FAP.   
          uint32    uarfcnulin_use                           = 3  ; //  The UL UARFCN being used by the FAP.   
          string    uarfcndlto_protect                       = 4  ; //  {{list}} Each item is a DL UARFCNs to be
          string    primary_scrambling_code                  = 5  ; //  {{list}} Each item is a Primary DL Scram
          uint32    primary_scrambling_code_in_use           = 6  ; //  The PSC being used by the FAP.         
          string    max_faptx_power_expanded                 = 7  ; //  Defines the maximum transmission power a
          int32     max_faptx_power_in_use_expanded          = 8  ; //  The maximum transmission power measured 
          string    max_ultx_power                           = 9  ; //  Defines the maximum transmission power l
          int32     max_ultx_power_in_use                    = 10 ; //  The maximum transmission power level a U
          string    pcpichpower                              = 11 ; //  The value of the transmission power of t
          int32     pcpichpower_in_use                       = 12 ; //  The P-CPICH power measured in {{units}} 
          uint32    power_offset_pilot_dpdch                 = 13 ; //  Defines the power offset between pilot c
          uint32    fapcoverage_target                       = 14 ; //  Defines the target value measured in {{u
          int32     fapquality_target_ec_io                  = 15 ; //  Defines the target value measured in dB 
          int32     pschpower                                = 16 ; //  Defines the transmission power offset me
          int32     sschpower                                = 17 ; //  Defines the transmission power offset me
          int32     pichpower                                = 18 ; //  Defines the maximum transmission power o
          int32     pchpower                                 = 19 ; //  Defines the transmission power offset me
          int32     fachpower                                = 20 ; //  Defines the transmission power offset me
          int32     bchpower                                 = 21 ; //  Defines the transmission power offset me
          int32     aichpower                                = 22 ; //  Defines the transmission power offset me
          uint32    ctchallocation_period                    = 23 ; //  The value defines 'N' multiples of M(TTI
          uint32    cbsframe_offset                          = 24 ; //  Value of CBS frame offset (CTCH) on DL F
          uint32    max_tti                                  = 25 ; //  Defines the number of radio frames in th
          uint32    noise_rise_limit_lower_value             = 26 ; //  Defines the lower value of the Noise Ris
          uint32    noise_rise_limit_upper_value             = 27 ; //  Defines the upper value of the Noise Ris
          uint32    noise_rise_limit_in_use                  = 28 ; //  Actual value of the Noise Rise Limit tha
        }
        RF rf = 28; // FAPService.{i}.CellConfig.UMTS.RAN.RF.
        message NeighborList { // FAPService.{i}.CellConfig.UMTS.RAN.NeighborList.
          uint32    max_intra_freq_cell_entries              = 1  ; //  The maximum number of entries in the {{o
          uint32    max_inter_freq_cell_entries              = 2  ; //  The maximum number of entries in the {{o
          uint32    intra_freq_cell_number_of_entries        = 3  ; //  {{numentries}}        }        F.t
          uint32    inter_freq_cell_number_of_entries        = 4  ; //  {{numentries}}        }        F.t
          message IntraFreqCell { // FAPService.{i}.CellConfig.UMTS.RAN.NeighborList.IntraFreqCell.{i}.
            bool      enable                                   = 1  ; //  Enables or disables this entry.        
            string    alias                                    = 2  ; //  {{datatype|expand}}        }        
            bool      must_include                             = 3  ; //  Indicates whether this instance of the n
            string    plmnid                                   = 4  ; //  PLMN ID consists of Mobile Country Code 
            uint32    rncid                                    = 5  ; //  RNC-ID of an intra-freq neighbor cell. I
            uint32    cid                                      = 6  ; //  Cell Identifier (C-id) that identifies a
            uint32    lac                                      = 7  ; //  Location Area Code (LAC). The concatenat
            uint32    rac                                      = 8  ; //  Routing Area Code (RAC). The concatenati
            uint32    ura                                      = 9  ; //  UTRAN Registration Area (URA) {{bibref|3
            uint32    pcpichscrambling_code                    = 10 ; //  Primary CPICH scrambling code.        
            int32     pcpichtx_power                           = 11 ; //  Primary CPICH Tx power in {{units}}.   
            uint32    collocated_inter_freq_cell               = 12 ; //  Provides identity of collocated inter-fr
            int32     max_tx_power                             = 13 ; //  Cell Max Tx Power. Parameter needed in H
            int32     max_dpchtx_power                         = 14 ; //  Maximum DL DPCH Tx Power per UE configur
          }
          repeated IntraFreqCell intra_freq_cell = 5; // FAPService.{i}.CellConfig.UMTS.RAN.NeighborList.IntraFreqCell.{i}.
          message InterFreqCell { // FAPService.{i}.CellConfig.UMTS.RAN.NeighborList.InterFreqCell.{i}.
            bool      enable                                   = 1  ; //  Enables or disables this entry.        
            string    alias                                    = 2  ; //  {{datatype|expand}}        }        
            bool      must_include                             = 3  ; //  Indicates whether this instance of the n
            string    plmnid                                   = 4  ; //  PLMN ID consists of Mobile Country Code 
            uint32    rncid                                    = 5  ; //  RNC-ID of an intra-freq neighbor cell. I
            uint32    cid                                      = 6  ; //  Cell Identifier (C-id) that identifies a
            uint32    lac                                      = 7  ; //  Location Area Code (LAC). The concatenat
            uint32    rac                                      = 8  ; //  Routing Area Code (RAC). The concatenati
            uint32    ura                                      = 9  ; //  UTRAN Registration Area (URA) {{bibref|3
            uint32    uarfcnul                                 = 10 ; //  The UL UTRA Absolute Radio Frequency Cha
            uint32    uarfcndl                                 = 11 ; //  The DL UTRA Absolute Radio Frequency Cha
            uint32    pcpichscrambling_code                    = 12 ; //  Primary CPICH scrambling code.        
            int32     pcpichtx_power                           = 13 ; //  Primary CPICH Tx power in {{units}}.   
          }
          repeated InterFreqCell inter_freq_cell = 6; // FAPService.{i}.CellConfig.UMTS.RAN.NeighborList.InterFreqCell.{i}.
          message InterRATCell { // FAPService.{i}.CellConfig.UMTS.RAN.NeighborList.InterRATCell.
            uint32    max_gsmentries                           = 1  ; //  The maximum number of entries in the {{o
            uint32    gsmnumber_of_entries                     = 2  ; //  {{numentries}}        }         {{o
            message GSM { // FAPService.{i}.CellConfig.UMTS.RAN.NeighborList.InterRATCell.GSM.{i}.
              bool      enable                                   = 1  ; //  Enables or disables this entry.        
              string    alias                                    = 2  ; //  {{datatype|expand}}        }        
              bool      must_include                             = 3  ; //  Indicates whether this instance of the n
              string    plmnid                                   = 4  ; //  PLMN ID consists of Mobile Country Code 
              uint32    lac                                      = 5  ; //  Location Area Code (LAC). The concatenat
              uint32    bsic                                     = 6  ; //  BSIC of the cell per {{bibref|3GPP-TS.23
              uint32    ci                                       = 7  ; //  Cell ID of the cell per {{bibref|3GPP-TS
              string    band_indicator                           = 8  ; //  Indicates how to interpret the BCCH ARFC
              uint32    bccharfcn                                = 9  ; //  ARFCN of this cell.        .        
            }
            repeated GSM gsm = 3; // FAPService.{i}.CellConfig.UMTS.RAN.NeighborList.InterRATCell.GSM.{i}.
          }
          InterRATCell inter_ratcell = 7; // FAPService.{i}.CellConfig.UMTS.RAN.NeighborList.InterRATCell.
        }
        NeighborList neighbor_list = 29; // FAPService.{i}.CellConfig.UMTS.RAN.NeighborList.
        message NeighborListInUse { // FAPService.{i}.CellConfig.UMTS.RAN.NeighborListInUse.
          uint32    max_intra_freq_cell_entries              = 1  ; //  The maximum number of entries in the {{o
          uint32    max_inter_freq_cell_entries              = 2  ; //  The maximum number of entries in the {{o
          uint32    intra_freq_cell_number_of_entries        = 3  ; //  {{numentries}}        }        
          uint32    inter_freq_cell_number_of_entries        = 4  ; //  {{numentries}}        }        
          message IntraFreqCell { // FAPService.{i}.CellConfig.UMTS.RAN.NeighborListInUse.IntraFreqCell.{i}.
            string    plmnid                                   = 1  ; //  PLMN ID consists of Mobile Country Code 
            uint32    rncid                                    = 2  ; //  RNC-ID of an intra-freq neighbor cell. I
            uint32    cid                                      = 3  ; //  C-ID of the intra-freq neighbour cell {{
            uint32    lac                                      = 4  ; //  Location Area Code (LAC). The concatenat
            uint32    rac                                      = 5  ; //  Routing Area Code (RAC). The concatenati
            uint32    ura                                      = 6  ; //  UTRAN Registration Area (URA) {{bibref|3
            uint32    pcpichscrambling_code                    = 7  ; //  Primary CPICH scrambling code.        
          }
          repeated IntraFreqCell intra_freq_cell = 5; // FAPService.{i}.CellConfig.UMTS.RAN.NeighborListInUse.IntraFreqCell.{i}.
          message InterFreqCell { // FAPService.{i}.CellConfig.UMTS.RAN.NeighborListInUse.InterFreqCell.{i}.
            string    plmnid                                   = 1  ; //  PLMN ID consists of Mobile Country Code 
            uint32    rncid                                    = 2  ; //  RNC-ID of an intra-freq neighbor cell. I
            uint32    cid                                      = 3  ; //  C-ID of the intra-freq neighbour cell {{
            uint32    lac                                      = 4  ; //  Location Area Code (LAC). The concatenat
            uint32    rac                                      = 5  ; //  Routing Area Code (RAC). The concatenati
            uint32    ura                                      = 6  ; //  UTRAN Registration Area (URA) {{bibref|3
            uint32    uarfcnul                                 = 7  ; //  The UL UTRA Absolute Radio Frequency Cha
            uint32    uarfcndl                                 = 8  ; //  The DL UTRA Absolute Radio Frequency Cha
            uint32    pcpichscrambling_code                    = 9  ; //  Primary CPICH scrambling code.        
          }
          repeated InterFreqCell inter_freq_cell = 6; // FAPService.{i}.CellConfig.UMTS.RAN.NeighborListInUse.InterFreqCell.{i}.
          message InterRATCell { // FAPService.{i}.CellConfig.UMTS.RAN.NeighborListInUse.InterRATCell.
            uint32    max_gsmentries                           = 1  ; //  The maximum number of entries in the {{o
            uint32    gsmnumber_of_entries                     = 2  ; //  {{numentries}}        }         {{o
            message GSM { // FAPService.{i}.CellConfig.UMTS.RAN.NeighborListInUse.InterRATCell.GSM.{i}.
              string    plmnid                                   = 1  ; //  PLMN ID consists of Mobile Country Code 
              uint32    lac                                      = 2  ; //  Location Area Code (LAC). The concatenat
              uint32    bsic                                     = 3  ; //  BSIC of the cell per {{bibref|3GPP-TS.23
              uint32    ci                                       = 4  ; //  Cell ID of the cell per {{bibref|3GPP-TS
              string    band_indicator                           = 5  ; //  Indicates how to interpret the BCCH ARFC
              uint32    bccharfcn                                = 6  ; //  ARFCN of this cell.        .        
            }
            repeated GSM gsm = 3; // FAPService.{i}.CellConfig.UMTS.RAN.NeighborListInUse.InterRATCell.GSM.{i}.
          }
          InterRATCell inter_ratcell = 7; // FAPService.{i}.CellConfig.UMTS.RAN.NeighborListInUse.InterRATCell.
        }
        NeighborListInUse neighbor_list_in_use = 30; // FAPService.{i}.CellConfig.UMTS.RAN.NeighborListInUse.
        message RRC { // FAPService.{i}.CellConfig.UMTS.RAN.RRC.
          message Stats { // FAPService.{i}.CellConfig.UMTS.RAN.RRC.Stats.
            string    att_conn_estab                           = 1  ; //  This measurement provides the number of 
            string    fail_conn_estab                          = 2  ; //  This measurement provides the number of 
            string    succ_conn_estab                          = 3  ; //  This measurement provides the number of 
          }
          Stats stats = 1; // FAPService.{i}.CellConfig.UMTS.RAN.RRC.Stats.
        }
        RRC rrc = 31; // FAPService.{i}.CellConfig.UMTS.RAN.RRC.
      }
      RAN ran = 3; // FAPService.{i}.CellConfig.UMTS.RAN.
      message RAB { // FAPService.{i}.CellConfig.UMTS.RAB.
        uint32    rabsucc_estab_cs                         = 1  ; //  The number of successfully established R
        uint32    rabfail_estab_cs                         = 2  ; //  The number of RAB establishment failures
        uint32    rabsucc_estab_ps                         = 3  ; //  The number of successfully established R
        uint32    rabfail_estab_ps                         = 4  ; //  The number of RABs failed to establish f
        uint32    rabcssetup_time_mean                     = 5  ; //  The mean time in {{units}} for a FAP to 
        uint32    rabcssetup_time_max                      = 6  ; //  The maximum time in {{units}} for a FAP 
        uint32    rabpssetup_time_mean                     = 7  ; //  The mean time in {{units}} for a FAP to 
        uint32    rabpssetup_time_max                      = 8  ; //  The maximum time in {{units}} for a FAP 
        uint32    fail_ho                                  = 9  ; //  The number of failed Handovers.        
        uint32    succ_ho                                  = 10 ; //  The number of successful Handovers.    
      }
      RAB rab = 4; // FAPService.{i}.CellConfig.UMTS.RAB.
    }
    UMTS umts = 1; // FAPService.{i}.CellConfig.UMTS.
    message LTE { // FAPService.{i}.CellConfig.LTE.
      uint32    tunnel_number_of_entries                 = 1  ; //  {{numentries}}        }        RC.S
      message Tunnel { // FAPService.{i}.CellConfig.LTE.Tunnel.{i}.
        bool      enable                                   = 1  ; //  Enables or disables this entry.        
        string    alias                                    = 2  ; //  {{datatype|expand}}        }        
        string    tunnel_ref                               = 3  ; //  This is the reference to an IPsec tunnel
        string    plmnid                                   = 4  ; //  {{list}} Optional list of PLMM IDs assoc
      }
      repeated Tunnel tunnel = 2; // FAPService.{i}.CellConfig.LTE.Tunnel.{i}.
      message EPC { // FAPService.{i}.CellConfig.LTE.EPC.
        string    allowed_ciphering_algorithm_list         = 1  ; //  {{list}} Each item is a ciphering algori
        string    allowed_integrity_protection_algorithm_list = 2  ; //  {{list}} Each item is a integrity protec
        uint32    tac                                      = 3  ; //  TAC (Tracking Area Code) for LTE FAP as 
        uint32    eaid                                     = 4  ; //  Emergency Area ID that uniquely identifi
        uint32    max_plmnlist_entries                     = 5  ; //  The maximum number of entries available 
        uint32    plmnlist_number_of_entries               = 6  ; //  {{numentries}}        }        ist
        uint32    max_qo_sentries                          = 7  ; //  The maximum number of entries in the {{o
        uint32    qo_snumber_of_entries                    = 8  ; //  {{numentries}}        }        ist
        message PLMNList { // FAPService.{i}.CellConfig.LTE.EPC.PLMNList.{i}.
          bool      enable                                   = 1  ; //  Enables or disables this entry.        
          string    alias                                    = 2  ; //  {{datatype|expand}}        }        
          bool      is_primary                               = 3  ; //  Indicates whether this {{param|PLMNID}} 
          string    plmnid                                   = 4  ; //  PLMN ID consists of Mobile Country Code 
          bool      cell_reserved_for_operator_use           = 5  ; //  Indicates whether the cell is reserved f
        }
        repeated PLMNList plmnlist = 9; // FAPService.{i}.CellConfig.LTE.EPC.PLMNList.{i}.
        message QoS { // FAPService.{i}.CellConfig.LTE.EPC.QoS.{i}.
          bool      enable                                   = 1  ; //  Enables or disables this entry.        
          string    alias                                    = 2  ; //  {{datatype|expand}}        }        
          uint32    qci                                      = 3  ; //  QoS class identity as defined in {{bibre
          string    type                                     = 4  ; //  Defines the type of the QoS class as def
          uint32    priority                                 = 5  ; //  Priority of the QoS class as defined in 
          uint32    packet_delay_budget                      = 6  ; //  Defines the Packet delay budget, specifi
        }
        repeated QoS qo_s = 10; // FAPService.{i}.CellConfig.LTE.EPC.QoS.{i}.
        message HO { // FAPService.{i}.CellConfig.LTE.EPC.HO.
          message Stats { // FAPService.{i}.CellConfig.LTE.EPC.HO.Stats.
            string    toe_nbatt                                = 1  ; //  This measurement provides the number of 
            string    toe_nbsucc                               = 2  ; //  This measurement provides the number of 
            string    toe_nbfail                               = 3  ; //  This measurement provides the number of 
            string    frome_nbatt                              = 4  ; //  This measurement provides the number of 
            string    frome_nbsucc                             = 5  ; //  This measurement provides the number of 
            string    frome_nbfail                             = 6  ; //  This measurement provides the number of 
            string    to_utran_att                             = 7  ; //  This measurement provides the number of 
            string    to_utran_succ                            = 8  ; //  This measurement provides the number of 
            string    to_utran_fail                            = 9  ; //  This measurement provides the number of 
            string    to_geran_att                             = 10 ; //  This measurement provides the number of 
            string    to_geran_succ                            = 11 ; //  This measurement provides the number of 
            string    to_geran_fail                            = 12 ; //  This measurement provides the number of 
          }
          Stats stats = 1; // FAPService.{i}.CellConfig.LTE.EPC.HO.Stats.
        }
        HO ho = 11; // FAPService.{i}.CellConfig.LTE.EPC.HO.
      }
      EPC epc = 3; // FAPService.{i}.CellConfig.LTE.EPC.
      message RAN { // FAPService.{i}.CellConfig.LTE.RAN.
        message Common { // FAPService.{i}.CellConfig.LTE.RAN.Common.
          uint32    cell_identity                            = 1  ; //  Cell Identity as specified in {{bibref|3
        }
        Common common = 1; // FAPService.{i}.CellConfig.LTE.RAN.Common.
        message S1AP { // FAPService.{i}.CellConfig.LTE.RAN.S1AP.
          string    treloc_prep                              = 1  ; //  {{list}} Each item is a maximum time for
          string    treloc_overall                           = 2  ; //  {{list}} Each item is a maximum time for
        }
        S1AP s1ap = 2; // FAPService.{i}.CellConfig.LTE.RAN.S1AP.
        message S1U { // FAPService.{i}.CellConfig.LTE.RAN.S1U.
          uint32    gtpuecho_interval                        = 1  ; //  Defines the interval in {{units}} betwee
        }
        S1U s1u = 3; // FAPService.{i}.CellConfig.LTE.RAN.S1U.
        message RF { // FAPService.{i}.CellConfig.LTE.RAN.RF.
          string    earfcndl                                 = 1  ; //  {{list}} Each item is an E-UTRA Absolute
          string    earfcnul                                 = 2  ; //  {{list}} Each item is an E-UTRA Absolute
          uint32    freq_band_indicator                      = 3  ; //  Frequency band indicator. Corresponds to
          string    dlbandwidth                              = 4  ; //  {{list}} Each item is a downlink transmi
          string    ulbandwidth                              = 5  ; //  {{list}} Each item is an uplink transmis
          string    reference_signal_power                   = 6  ; //  {{list}} Each item is a downlink referen
          string    phy_cell_id                              = 7  ; //  {{list}} Each item is a physical cell ID
          string    pschpower_offset                         = 8  ; //  {{list}} Each item is a power offset, sp
          string    sschpower_offset                         = 9  ; //  {{list}} Each item is a power offset, sp
          string    pbchpower_offset                         = 10 ; //  {{list}} Each item is a power offset, sp
        }
        RF rf = 4; // FAPService.{i}.CellConfig.LTE.RAN.RF.
        message PHY { // FAPService.{i}.CellConfig.LTE.RAN.PHY.
          message AntennaInfo { // FAPService.{i}.CellConfig.LTE.RAN.PHY.AntennaInfo.
            uint32    antenna_ports_count                      = 1  ; //  Defines the number of cell specific ante
          }
          AntennaInfo antenna_info = 1; // FAPService.{i}.CellConfig.LTE.RAN.PHY.AntennaInfo.
          message PDSCH { // FAPService.{i}.CellConfig.LTE.RAN.PHY.PDSCH.
            string    pb                                       = 1  ; //  {{list}} Each item is a Eb/Ea value with
            string    pa                                       = 2  ; //  {{list}} Each item is a Ea/Ers value. In
          }
          PDSCH pdsch = 2; // FAPService.{i}.CellConfig.LTE.RAN.PHY.PDSCH.
          message SRS { // FAPService.{i}.CellConfig.LTE.RAN.PHY.SRS.
            bool      srsenabled                               = 1  ; //  Indicates whether UL SRS (Sounding RS) i
            string    srsbandwidth_config                      = 2  ; //  {{list}} Each item is a index into table
            bool      srsmax_up_pts                            = 3  ; //  Defines whether reconfiguration of SRS a
            bool      ack_nack_srssimultaneous_transmission    = 4  ; //  Defines whether a UE can simultaneously 
          }
          SRS srs = 3; // FAPService.{i}.CellConfig.LTE.RAN.PHY.SRS.
          message PRACH { // FAPService.{i}.CellConfig.LTE.RAN.PHY.PRACH.
            string    root_sequence_index                      = 1  ; //  {{list}} Each item is a Logical root seq
            string    configuration_index                      = 2  ; //  {{list}} Each item is an index to the ta
            bool      high_speed_flag                          = 3  ; //  Indicates whether restricted set or unre
            string    zero_correlation_zone_config             = 4  ; //  {{list}} Each item is a value used for p
            string    freq_offset                              = 5  ; //  {{list}} Each item represents the first 
          }
          PRACH prach = 4; // FAPService.{i}.CellConfig.LTE.RAN.PHY.PRACH.
          message PUCCH { // FAPService.{i}.CellConfig.LTE.RAN.PHY.PUCCH.
            string    delta_pucchshift                         = 1  ; //  Defines the cyclic shift used for PUCCH 
            string    nrbcqi                                   = 2  ; //  {{list}} Each item is a value that defin
            uint32    ncsan                                    = 3  ; //  Defines the number of cyclic shift used 
            string    n1pucchan                                = 4  ; //  {{list}} Each item is a value that deter
            string    cqipucchresource_index                   = 5  ; //  {{list}} Each item is a value that indic
            uint32    k                                        = 6  ; //  Sub-band size for sub-band reporting mod
          }
          PUCCH pucch = 5; // FAPService.{i}.CellConfig.LTE.RAN.PHY.PUCCH.
          message PUSCH { // FAPService.{i}.CellConfig.LTE.RAN.PHY.PUSCH.
            uint32    nsb                                      = 1  ; //  Defines the number of sub-bands. This pa
            string    hopping_mode                             = 2  ; //  Indicates if hopping is "inter-subframe"
            string    hopping_offset                           = 3  ; //  {{list}} Each item is a value to compute
            bool      enable64qam                              = 4  ; //  Indicates whether 64QAM is allowed or no
            message ULRS { // FAPService.{i}.CellConfig.LTE.RAN.PHY.PUSCH.ULRS.
              bool      group_hopping_enabled                    = 1  ; //  Indicates whether group hopping is enabl
              uint32    group_assignment_pusch                   = 2  ; //  Corresponds to parameter groupAssignment
              bool      sequence_hopping_enabled                 = 3  ; //  Indicates whether sequence hopping is en
              uint32    cyclic_shift                             = 4  ; //  Corresponds to parameter cyclcShift spec
            }
            ULRS ulrs = 5; // FAPService.{i}.CellConfig.LTE.RAN.PHY.PUSCH.ULRS.
          }
          PUSCH pusch = 6; // FAPService.{i}.CellConfig.LTE.RAN.PHY.PUSCH.
          message ULPowerControl { // FAPService.{i}.CellConfig.LTE.RAN.PHY.ULPowerControl.
            string    p0nominal_pusch                          = 1  ; //  {{list}} Each item is a value to compute
            string    alpha                                    = 2  ; //  {{list}} Each item is a value used to co
            string    p0nominal_pucch                          = 3  ; //  {{list}} Each item is a value to compute
            int32     delta_fpucchformat1                      = 4  ; //  Defines deltaF-PUCCH-Format1 to derive t
            uint32    delta_fpucchformat1b                     = 5  ; //  Defines deltaF-PUCCH-Format1b to derive 
            int32     delta_fpucchformat2                      = 6  ; //  Defines deltaF-PUCCH-Format2 to derive t
            int32     delta_fpucchformat2a                     = 7  ; //  Defines deltaF-PUCCH-Format2a to derive 
            int32     delta_fpucchformat2b                     = 8  ; //  Defines deltaF-PUCCH-Format2b to derive 
            int32     delta_preamble_msg3                      = 9  ; //  Defines the parameter in {{units}} used 
          }
          ULPowerControl ulpower_control = 7; // FAPService.{i}.CellConfig.LTE.RAN.PHY.ULPowerControl.
          message MBSFN { // FAPService.{i}.CellConfig.LTE.RAN.PHY.MBSFN.
            uint32    neigh_cell_config                        = 1  ; //  Defines the information related to MBSFN
            uint32    max_sfconfig_list_entries                = 2  ; //  The maximum number of entries in the {{o
            uint32    sfconfig_list_number_of_entries          = 3  ; //  {{numentries}}        }        Y.MB
            message SFConfigList { // FAPService.{i}.CellConfig.LTE.RAN.PHY.MBSFN.SFConfigList.{i}.
              bool      enable                                   = 1  ; //  Enables or disables this entry.        
              string    alias                                    = 2  ; //  {{datatype|expand}}        }        
              uint32    sync_stratum_id                          = 3  ; //  This parameter is applicable to TDD mode
              uint32    radio_frame_allocation_period            = 4  ; //  Defines the period where MBSFN sub-frame
              uint32    radioframe_allocation_offset             = 5  ; //  Defines the offset where MBSFN sub-frame
              uint32    radio_frame_allocation_size              = 6  ; //  Defines the number of connsecutive frame
              string    sub_frame_allocations                    = 7  ; //  {{list}} The value of "1" indicates the 
            }
            repeated SFConfigList sfconfig_list = 4; // FAPService.{i}.CellConfig.LTE.RAN.PHY.MBSFN.SFConfigList.{i}.
          }
          MBSFN mbsfn = 8; // FAPService.{i}.CellConfig.LTE.RAN.PHY.MBSFN.
          message PRS { // FAPService.{i}.CellConfig.LTE.RAN.PHY.PRS.
            uint32    num_prsresource_blocks                   = 1  ; //  Defines the number of RBs ({{units}}) us
            uint32    prsconfiguration_index                   = 2  ; //  Corresponds to the PRS configuration ind
            uint32    num_consecutive_prssubfames              = 3  ; //  Defines the number of consecutive positi
          }
          PRS prs = 9; // FAPService.{i}.CellConfig.LTE.RAN.PHY.PRS.
          message TDDFrame { // FAPService.{i}.CellConfig.LTE.RAN.PHY.TDDFrame.
            uint32    sub_frame_assignment                     = 1  ; //  Defines the DL/UL sub-frame configuratio
            uint32    special_subframe_patterns                = 2  ; //  Defines the configuration of the special
          }
          TDDFrame tddframe = 10; // FAPService.{i}.CellConfig.LTE.RAN.PHY.TDDFrame.
        }
        PHY phy = 5; // FAPService.{i}.CellConfig.LTE.RAN.PHY.
        message MAC { // FAPService.{i}.CellConfig.LTE.RAN.MAC.
          message RACH { // FAPService.{i}.CellConfig.LTE.RAN.MAC.RACH.
            string    number_of_ra_preambles                   = 1  ; //  {{list}} Each item is a number of non-de
            string    size_of_ra_group_a                       = 2  ; //  {{list}} Each item is a number of non-de
            string    message_size_group_a                     = 3  ; //  {{list}} Each item is a threshold for pr
            string    message_power_offset_group_b             = 4  ; //  {{list}} Each item is a threshold for pr
            string    power_ramping_step                       = 5  ; //  {{list}} Each item is a power increase f
            string    preamble_initial_received_target_power   = 6  ; //  {{list}} Each item is a value used as th
            string    preamble_trans_max                       = 7  ; //  {{list}} Each item is a maximum number o
            string    response_window_size                     = 8  ; //  {{list}} Each item is a duration of the 
            string    contention_resolution_timer              = 9  ; //  {{list}} Each item is a contention resol
            string    max_harqmsg3tx                           = 10 ; //  {{list}} Each item is a maximum number o
          }
          RACH rach = 1; // FAPService.{i}.CellConfig.LTE.RAN.MAC.RACH.
          message DRX { // FAPService.{i}.CellConfig.LTE.RAN.MAC.DRX.
            bool      drxenabled                               = 1  ; //  Specifies whether DRX operation is enabl
            string    on_duration_timer                        = 2  ; //  {{list}} Each item is the DRX cycle duri
            string    drxinactivity_timer                      = 3  ; //  {{list}} Each item defines the number of
            string    drxretransmission_timer                  = 4  ; //  {{list}} Each item defines the maximum n
            string    long_drxcycle                            = 5  ; //  {{list}} Each item is long DRX Cycle val
            string    drxstart_offset                          = 6  ; //  {{list}} Each item defines the starting 
            string    short_drxcycle                           = 7  ; //  {{list}} Each item is the short DRX Cycl
            string    drxshort_cycle_timer                     = 8  ; //  {{list}} Each item defined the duration 
          }
          DRX drx = 2; // FAPService.{i}.CellConfig.LTE.RAN.MAC.DRX.
          message ULSCH { // FAPService.{i}.CellConfig.LTE.RAN.MAC.ULSCH.
            uint32    max_harqtx                               = 1  ; //  Maximum number of UL HARQ transmissions.
            uint32    periodic_bsrtimer                        = 2  ; //  Timer for Periodic BSR (Buffer Status Re
            uint32    retx_bsrtimer                            = 3  ; //  Timer for Regular BSR reporting, specifi
            bool      ttibundling                              = 4  ; //  Enables/disables TTI bundling. If {{true
          }
          ULSCH ulsch = 3; // FAPService.{i}.CellConfig.LTE.RAN.MAC.ULSCH.
        }
        MAC mac = 6; // FAPService.{i}.CellConfig.LTE.RAN.MAC.
        message RLC { // FAPService.{i}.CellConfig.LTE.RAN.RLC.
          message SRB1 { // FAPService.{i}.CellConfig.LTE.RAN.RLC.SRB1.
            bool      default_configuration                    = 1  ; //  Indicates the whether default RLC config
            string    tpoll_retransmit                         = 2  ; //  {{list}} Each item is a timer between su
            string    poll_pdu                                 = 3  ; //  {{list}} Each item is a counter of PDUs 
            string    poll_byte                                = 4  ; //  {{list}} Each item is a counter of PDU b
            string    max_retx_threshold                       = 5  ; //  {{list}} Each item defines the maximum n
            string    treordering                              = 6  ; //  {{list}} Each item defines a timer used 
            string    tstatus_prohibit                         = 7  ; //  {{list}} Each item defines a timer used 
          }
          SRB1 srb1 = 1; // FAPService.{i}.CellConfig.LTE.RAN.RLC.SRB1.
          message SRB2 { // FAPService.{i}.CellConfig.LTE.RAN.RLC.SRB2.
            bool      default_configuration                    = 1  ; //  Indicates the whether default RLC config
            string    tpoll_retransmit                         = 2  ; //  {{list}} Each item is a timer between su
            string    poll_pdu                                 = 3  ; //  {{list}} Each item is a counter of PDUs 
            string    poll_byte                                = 4  ; //  {{list}} Each item is a counter of PDU b
            string    max_retx_threshold                       = 5  ; //  {{list}} Each item defines the maximum n
            string    treordering                              = 6  ; //  {{list}} Each item defines a timer used 
            string    tstatus_prohibit                         = 7  ; //  {{list}} Each item defines a timer used 
          }
          SRB2 srb2 = 2; // FAPService.{i}.CellConfig.LTE.RAN.RLC.SRB2.
        }
        RLC rlc = 7; // FAPService.{i}.CellConfig.LTE.RAN.RLC.
        message RRCTimers { // FAPService.{i}.CellConfig.LTE.RAN.RRCTimers.
          string    t300                                     = 1  ; //  {{list}} Each item is an interval, in mi
          string    t301                                     = 2  ; //  {{list}} Each item is an interval, in mi
          uint32    t302                                     = 3  ; //  Time to wait in {{units}} for cell re-se
          string    t304eutra                                = 4  ; //  {{list}} Each item is a HO failure timer
          string    t304irat                                 = 5  ; //  {{list}} Each item is a HO failure timer
          string    t310                                     = 6  ; //  {{list}} Each item is a RLF declaration 
          string    t311                                     = 7  ; //  {{list}} Each item is a RLF recovery tim
          uint32    t320                                     = 8  ; //  Time in {{units}} after RRCConnection Re
          uint32    n310                                     = 9  ; //  Number of consecutive "out-of-sync" indi
          uint32    n311                                     = 10 ; //  Number of consecutive "in-sync" indicati
        }
        RRCTimers rrctimers = 8; // FAPService.{i}.CellConfig.LTE.RAN.RRCTimers.
        message CellRestriction { // FAPService.{i}.CellConfig.LTE.RAN.CellRestriction.
          bool      cell_barred                              = 1  ; //  Indicates whether the  is barred or not.
          bool      cell_reserved_for_operator_use           = 2  ; //  Indicates whether the  is reserved for o
          bool      barring_for_emergency                    = 3  ; //  Indicates whether the  is barred for Acc
        }
        CellRestriction cell_restriction = 9; // FAPService.{i}.CellConfig.LTE.RAN.CellRestriction.
        message Mobility { // FAPService.{i}.CellConfig.LTE.RAN.Mobility.
          message IdleMode { // FAPService.{i}.CellConfig.LTE.RAN.Mobility.IdleMode.
            message Common { // FAPService.{i}.CellConfig.LTE.RAN.Mobility.IdleMode.Common.
              string    qhyst                                    = 1  ; //  {{list}} Each item is a hysteresis value
              int32     qhyst_sfmedium                           = 2  ; //  Speed-dependent scaling factor for Qhyst
              int32     qhyst_sfhigh                             = 3  ; //  Speed-dependent scaling factor for Qhyst
              uint32    tevaluation                              = 4  ; //  Duration for evaluating allowed amount o
              uint32    thyst_normal                             = 5  ; //  Additional duration for evaluating crite
              uint32    ncell_change_medium                      = 6  ; //  Defines the number of cell re-selections
              uint32    ncell_change_high                        = 7  ; //  Defines the number of cell re-selections
            }
            Common common = 1; // FAPService.{i}.CellConfig.LTE.RAN.Mobility.IdleMode.Common.
            message IntraFreq { // FAPService.{i}.CellConfig.LTE.RAN.Mobility.IdleMode.IntraFreq.
              string    qrx_lev_min_sib1                         = 1  ; //  {{list}} Each item is a required minimum
              string    qrx_lev_min_sib3                         = 2  ; //  {{list}} Each item is a required minimum
              uint32    qrx_lev_min_offset                       = 3  ; //  Defines offset with respect to QrxLevMin
              string    sintra_search                            = 4  ; //  {{list}} Each item is a threshold for in
              string    treselection_eutra                       = 5  ; //  {{list}} Each item is a cell re-selectio
              string    snon_intra_search                        = 6  ; //  {{list}} Each item is a threshold for in
              uint32    cell_reselection_priority                = 7  ; //  Absolute priority of the E-UTRAN serving
              int32     pmax                                     = 8  ; //  Used to limit the allowed UE uplink tran
              uint32    thresh_serving_low                       = 9  ; //  Threshold for serving frequency used in 
              uint32    treselection_eutrasfmedium               = 10 ; //  Scaling factor for intra-frequency Trese
              uint32    treselection_eutrasfhigh                 = 11 ; //  Scaling factor for intra-frequency Trese
            }
            IntraFreq intra_freq = 2; // FAPService.{i}.CellConfig.LTE.RAN.Mobility.IdleMode.IntraFreq.
            message InterFreq { // FAPService.{i}.CellConfig.LTE.RAN.Mobility.IdleMode.InterFreq.
              uint32    max_carrier_entries                      = 1  ; //  The maximum number of entries in the {{o
              uint32    carrier_number_of_entries                = 2  ; //  {{numentries}}        }        
              message Carrier { // FAPService.{i}.CellConfig.LTE.RAN.Mobility.IdleMode.InterFreq.Carrier.{i}.
                bool      enable                                   = 1  ; //  Enables or disables this entry.        
                string    alias                                    = 2  ; //  {{datatype|expand}}        }        
                uint32    eutracarrier_arfcn                       = 3  ; //  Indicates the ARFCN of this frequency ca
                string    qrx_lev_min_sib5                         = 4  ; //  {{list}} Each item is a required minimum
                string    qoffset_freq                             = 5  ; //  {{list}} Each item is an offset applicab
                string    treselection_eutra                       = 6  ; //  {{list}} Each item is a cell re-selectio
                uint32    cell_reselection_priority                = 7  ; //  Absolute priority of this E-UTRA frequen
                uint32    thresh_xhigh                             = 8  ; //  Threshold used when re-selecting from a 
                uint32    thresh_xlow                              = 9  ; //  Threshold used when re-selecting from a 
                int32     pmax                                     = 10 ; //  Used to limit the allowed UE uplink tran
                uint32    treselection_eutrasfmedium               = 11 ; //  Scaling factor for TreselectionEUTRA for
                uint32    treselection_eutrasfhigh                 = 12 ; //  Scaling factor for TreselectionEUTRA for
              }
              repeated Carrier carrier = 3; // FAPService.{i}.CellConfig.LTE.RAN.Mobility.IdleMode.InterFreq.Carrier.{i}.
            }
            InterFreq inter_freq = 3; // FAPService.{i}.CellConfig.LTE.RAN.Mobility.IdleMode.InterFreq.
            message IRAT { // FAPService.{i}.CellConfig.LTE.RAN.Mobility.IdleMode.IRAT.
              message UTRA { // FAPService.{i}.CellConfig.LTE.RAN.Mobility.IdleMode.IRAT.UTRA.
                string    treselection_utra                        = 1  ; //  {{list}} Each item is a cell re-selectio
                uint32    treselection_utrasfmedium                = 2  ; //  Scaling factor for TreselectionUTRA for 
                uint32    treselection_utrasfhigh                  = 3  ; //  Scaling factor for TreselectionEUTRA for
                uint32    max_utranfddfreq_entries                 = 4  ; //  The maximum number of entries in the {{o
                uint32    utranfddfreq_number_of_entries           = 5  ; //  {{numentries}}        }        IRAT
                message UTRANFDDFreq { // FAPService.{i}.CellConfig.LTE.RAN.Mobility.IdleMode.IRAT.UTRA.UTRANFDDFreq.{i}.
                  bool      enable                                   = 1  ; //  Enables or disables this entry.        
                  string    alias                                    = 2  ; //  {{datatype|expand}}        }        
                  uint32    utracarrier_arfcn                        = 3  ; //  Indicates the ARFCN of the frequency car
                  string    qrx_lev_min                              = 4  ; //  {{list}} Each item is a required minimum
                  string    qqual_min                                = 5  ; //  {{list}} Each item is a required minimum
                  uint32    cell_reselection_priority                = 6  ; //  Absolute priority of this UTRA FDD frequ
                  uint32    thresh_xhigh                             = 7  ; //  Threshold used when re-selecting towards
                  uint32    thresh_xlow                              = 8  ; //  Threshold used when re-selecting towards
                  int32     pmax_utra                                = 9  ; //  Used to limit the allowed UE uplink tran
                }
                repeated UTRANFDDFreq utranfddfreq = 6; // FAPService.{i}.CellConfig.LTE.RAN.Mobility.IdleMode.IRAT.UTRA.UTRANFDDFreq.{i}.
              }
              UTRA utra = 1; // FAPService.{i}.CellConfig.LTE.RAN.Mobility.IdleMode.IRAT.UTRA.
              message GERAN { // FAPService.{i}.CellConfig.LTE.RAN.Mobility.IdleMode.IRAT.GERAN.
                string    treselection_geran                       = 1  ; //  {{list}} Each item is a cell re-selectio
                uint32    treselection_geransfmedium               = 2  ; //  Scaling factor for TreselectionGERAN for
                uint32    treselection_geransfhigh                 = 3  ; //  Scaling factor for TreselectionGERAN for
                uint32    max_geranfreq_group_entries              = 4  ; //  The maximum number of entries in the {{o
                uint32    geranfreq_group_number_of_entries        = 5  ; //  {{numentries}}        }        
                message GERANFreqGroup { // FAPService.{i}.CellConfig.LTE.RAN.Mobility.IdleMode.IRAT.GERAN.GERANFreqGroup.{i}.
                  bool      enable                                   = 1  ; //  Enables or disables this entry.        
                  string    alias                                    = 2  ; //  {{datatype|expand}}        }        
                  string    band_indicator                           = 3  ; //  Indicates how to interpret the BCCH ARFC
                  uint32    bccharfcn                                = 4  ; //  ARFCN of this cell.        .        
                  string    qrx_lev_min                              = 5  ; //  {{list}} Each item is a required minimum
                  uint32    cell_reselection_priority                = 6  ; //  Absolute priority of this GERAN frequenc
                  uint32    thresh_xhigh                             = 7  ; //  Threshold used when re-selecting towards
                  uint32    thresh_xlow                              = 8  ; //  Threshold used when re-selecting towards
                }
                repeated GERANFreqGroup geranfreq_group = 6; // FAPService.{i}.CellConfig.LTE.RAN.Mobility.IdleMode.IRAT.GERAN.GERANFreqGroup.{i}.
              }
              GERAN geran = 2; // FAPService.{i}.CellConfig.LTE.RAN.Mobility.IdleMode.IRAT.GERAN.
              message CDMA2000 { // FAPService.{i}.CellConfig.LTE.RAN.Mobility.IdleMode.IRAT.CDMA2000.
                string    search_window_size                       = 1  ; //  {{list}} Each item is a CDMA2000 paramet
                string    treselection_cdma2000                    = 2  ; //  {{list}} Each item is a cell re-selectio
                uint32    treselection_cdma2000sfmedium            = 3  ; //  Scaling factor for TReselectionCDMA2000 
                uint32    treselection_cdma2000sfhigh              = 4  ; //  Scaling factor for TReselectionCDMA2000 
                uint32    max_cdma2000band_entries                 = 5  ; //  The maximum number of entries in the {{o
                uint32    cdma2000band_number_of_entries           = 6  ; //  {{numentries}}        }        
                message CDMA2000Band { // FAPService.{i}.CellConfig.LTE.RAN.Mobility.IdleMode.IRAT.CDMA2000.CDMA2000Band.{i}.
                  bool      enable                                   = 1  ; //  Enables or disables this entry.        
                  string    alias                                    = 2  ; //  {{datatype|expand}}        }        
                  uint32    band_class                               = 3  ; //  Defines the CDMA2000 band in which the C
                  uint32    cell_reselection_priority                = 4  ; //  Absolute priority of this CDMA2000 band 
                  uint32    thresh_xhigh                             = 5  ; //  Threshold used when re-selecting towards
                  uint32    thresh_xlow                              = 6  ; //  Threshold used when re-selecting towards
                }
                repeated CDMA2000Band cdma2000band = 7; // FAPService.{i}.CellConfig.LTE.RAN.Mobility.IdleMode.IRAT.CDMA2000.CDMA2000Band.{i}.
              }
              CDMA2000 cdma2000 = 3; // FAPService.{i}.CellConfig.LTE.RAN.Mobility.IdleMode.IRAT.CDMA2000.
            }
            IRAT irat = 4; // FAPService.{i}.CellConfig.LTE.RAN.Mobility.IdleMode.IRAT.
          }
          IdleMode idle_mode = 1; // FAPService.{i}.CellConfig.LTE.RAN.Mobility.IdleMode.
          message ConnMode { // FAPService.{i}.CellConfig.LTE.RAN.Mobility.ConnMode.
            message EUTRA { // FAPService.{i}.CellConfig.LTE.RAN.Mobility.ConnMode.EUTRA.
              string    filter_coefficient_rsrp                  = 1  ; //  {{list}} Each item is a filtering coeffi
              string    filter_coefficient_rsrq                  = 2  ; //  {{list}} Each item is a filtering coeffi
              uint32    a1threshold_rsrp                         = 3  ; //  Threshold to be used in EUTRA measuremen
              uint32    a1threshold_rsrq                         = 4  ; //  Threshold to be used in EUTRA measuremen
              uint32    a2threshold_rsrp                         = 5  ; //  Threshold to be used in EUTRA measuremen
              uint32    a2threshold_rsrq                         = 6  ; //  Threshold to be used in EUTRA measuremen
              string    a3offset                                 = 7  ; //  {{list}} Each item is an offset to be us
              bool      report_on_leave                          = 8  ; //  Indicates whether or not the UE shall in
              uint32    a4threshold_rsrp                         = 9  ; //  Threshold to be used in EUTRA measuremen
              uint32    a4threshold_rsrq                         = 10 ; //  Threshold to be used in EUTRA measuremen
              uint32    a5threshold1rsrp                         = 11 ; //  Threshold1 to be used in EUTRA measureme
              uint32    a5threshold1rsrq                         = 12 ; //  Threshold1 to be used in EUTRA measureme
              uint32    a5threshold2rsrp                         = 13 ; //  Threshold2 to be used in EUTRA measureme
              uint32    a5threshold2rsrq                         = 14 ; //  Threshold2 to be used in EUTRA measureme
              string    hysteresis                               = 15 ; //  {{list}} Each item is a hysteresis value
              string    time_to_trigger                          = 16 ; //  {{list}} Each item is a time period duri
              string    trigger_quantity                         = 17 ; //  Quantities used to evaluate a measuremen
              string    report_quantity                          = 18 ; //  Measrument quantities to be included in 
              uint32    max_report_cells                         = 19 ; //  Maximum number of cells that can be incl
              uint32    report_interval                          = 20 ; //  Interval between successive measurement 
              uint32    report_amount                            = 21 ; //  Number of times a measurement report is 
            }
            EUTRA eutra = 1; // FAPService.{i}.CellConfig.LTE.RAN.Mobility.ConnMode.EUTRA.
            message IRAT { // FAPService.{i}.CellConfig.LTE.RAN.Mobility.ConnMode.IRAT.
              string    qoffsett_utra                            = 1  ; //  {{list}} Each item is a UTRA-specific of
              string    filter_coefficient_utra                  = 2  ; //  {{list}} Each item is a filtering coeffi
              string    meas_quantity_utrafdd                    = 3  ; //  Measurement quantity used for UTRA measu
              int32     b1threshold_utrarscp                     = 4  ; //  RSCP threshold to be used in UTRA measur
              uint32    b1threshold_utraec_n0                    = 5  ; //  EcNo threshold to be used in UTRA measur
              string    qoffset_geran                            = 6  ; //  {{list}} Each item is a GERAN-specific o
              string    filter_coefficient_geran                 = 7  ; //  {{list}} Each item is a filtering coeffi
              uint32    b1threshold_geran                        = 8  ; //  Threshold to be used in GERAN measuremen
              string    qoffset_cdma2000                         = 9  ; //  {{list}} Each item is a CDMA2000-specifi
              string    meas_quantity_cdma2000                   = 10 ; //  Measurement quantity used for CDMA2000 m
              uint32    b1threshold_cdma2000                     = 11 ; //  Threshold to be used in CDMA2000 measure
              int32     b2threshold2utrarscp                     = 12 ; //  RSCP threshold to be used in UTRA measur
              uint32    b2threshold2utraec_n0                    = 13 ; //  EcNo threshold to be used in UTRA measur
              uint32    b2threshold2geran                        = 14 ; //  Threshold to be used in GERAN measuremen
              uint32    b2threshold2cdma2000                     = 15 ; //  Threshold to be used in CDMA2000 measure
              string    hysteresis                               = 16 ; //  {{list}} Each item is a hysteresis value
              string    time_to_trigger                          = 17 ; //  {{list}} Each item is a time period duri
              uint32    max_report_cells                         = 18 ; //  Maximum number of IRAT cells that can be
              uint32    report_interval                          = 19 ; //  Interval between successive IRAT measure
              uint32    report_amount                            = 20 ; //  Number of times an IRAT measurement repo
            }
            IRAT irat = 2; // FAPService.{i}.CellConfig.LTE.RAN.Mobility.ConnMode.IRAT.
          }
          ConnMode conn_mode = 2; // FAPService.{i}.CellConfig.LTE.RAN.Mobility.ConnMode.
        }
        Mobility mobility = 10; // FAPService.{i}.CellConfig.LTE.RAN.Mobility.
        message NeighborList { // FAPService.{i}.CellConfig.LTE.RAN.NeighborList.
          uint32    max_ltecell_entries                      = 1  ; //  The maximum number of entries in the {{o
          uint32    ltecell_number_of_entries                = 2  ; //  {{numentries}}        }        ighb
          message LTECell { // FAPService.{i}.CellConfig.LTE.RAN.NeighborList.LTECell.{i}.
            bool      enable                                   = 1  ; //  Enables or disables this entry.        
            string    alias                                    = 2  ; //  {{datatype|expand}}        }        
            bool      must_include                             = 3  ; //  Indicates whether this instance of the n
            string    plmnid                                   = 4  ; //  PLMN ID consists of Mobile Country Code 
            uint32    cid                                      = 5  ; //  Cell Identity. {{bibref|3GPP-TS.36.331|S
            uint32    eutracarrier_arfcn                       = 6  ; //  Indicates the ARFCN of this carrier freq
            uint32    phy_cell_id                              = 7  ; //  Physical cell ID, as specified in {{bibr
            int32     qoffset                                  = 8  ; //  Indicate a cell-specific offset applicab
            int32     cio                                      = 9  ; //  Cell individual offset applicable to a s
            int32     rstx_power                               = 10 ; //  The downlink reference-signal transmit p
            bool      blacklisted                              = 11 ; //  Indicates whether this neighbor cell is 
          }
          repeated LTECell ltecell = 3; // FAPService.{i}.CellConfig.LTE.RAN.NeighborList.LTECell.{i}.
          message InterRATCell { // FAPService.{i}.CellConfig.LTE.RAN.NeighborList.InterRATCell.
            uint32    max_umtsentries                          = 1  ; //  The maximum number of entries in the {{o
            uint32    max_gsmentries                           = 2  ; //  The maximum number of entries in the {{o
            uint32    max_cdma2000entries                      = 3  ; //  The maximum number of entries in the {{o
            uint32    umtsnumber_of_entries                    = 4  ; //  {{numentries}}        }        +
            uint32    gsmnumber_of_entries                     = 5  ; //  {{numentries}}        }         {{o
            uint32    cdma2000number_of_entries                = 6  ; //  {{numentries}}        }        f 16
            message UMTS { // FAPService.{i}.CellConfig.LTE.RAN.NeighborList.InterRATCell.UMTS.{i}.
              bool      enable                                   = 1  ; //  Enables or disables this entry.        
              string    alias                                    = 2  ; //  {{datatype|expand}}        }        
              bool      must_include                             = 3  ; //  Indicates whether this instance of the n
              string    plmnid                                   = 4  ; //  PLMN ID consists of Mobile Country Code 
              uint32    rncid                                    = 5  ; //  RNC-ID of an intra-RAT UMTS neighbor cel
              uint32    cid                                      = 6  ; //  Cell Identifier (C-id) that identifies a
              uint32    lac                                      = 7  ; //  Location Area Code (LAC). The concatenat
              uint32    rac                                      = 8  ; //  Routing Area Code (RAC). The concatenati
              uint32    ura                                      = 9  ; //  UTRAN Registration Area (URA) {{bibref|3
              uint32    uarfcnul                                 = 10 ; //  The UL UTRA Absolute Radio Frequency Cha
              uint32    uarfcndl                                 = 11 ; //  The DL UTRA Absolute Radio Frequency Cha
              uint32    pcpichscrambling_code                    = 12 ; //  Primary CPICH scrambling code.        
              int32     pcpichtx_power                           = 13 ; //  Primary CPICH Tx power in {{units}}.   
            }
            repeated UMTS umts = 7; // FAPService.{i}.CellConfig.LTE.RAN.NeighborList.InterRATCell.UMTS.{i}.
            message GSM { // FAPService.{i}.CellConfig.LTE.RAN.NeighborList.InterRATCell.GSM.{i}.
              bool      enable                                   = 1  ; //  Enables or disables this entry.        
              string    alias                                    = 2  ; //  {{datatype|expand}}        }        
              bool      must_include                             = 3  ; //  Indicates whether this instance of the n
              string    plmnid                                   = 4  ; //  PLMN ID consists of Mobile Country Code 
              uint32    lac                                      = 5  ; //  Location Area Code (LAC). The concatenat
              uint32    bsic                                     = 6  ; //  BSIC of the cell per {{bibref|3GPP-TS.23
              uint32    ci                                       = 7  ; //  Cell ID of the cell per {{bibref|3GPP-TS
              string    band_indicator                           = 8  ; //  Indicates how to interpret the BCCH ARFC
              uint32    bccharfcn                                = 9  ; //  ARFCN of this cell.        .        
            }
            repeated GSM gsm = 8; // FAPService.{i}.CellConfig.LTE.RAN.NeighborList.InterRATCell.GSM.{i}.
            message CDMA2000 { // FAPService.{i}.CellConfig.LTE.RAN.NeighborList.InterRATCell.CDMA2000.{i}.
              bool      enable                                   = 1  ; //  Enables or disables this entry.        
              string    alias                                    = 2  ; //  {{datatype|expand}}        }        
              bool      must_include                             = 3  ; //  Indicates whether this instance of the n
              uint32    band_class                               = 4  ; //  Defines the CDMA2000 band in which the C
              uint32    arfcn                                    = 5  ; //  Defines the CDMA2000 frequency carrier w
              uint32    pnoffset                                 = 6  ; //  Defines the PN offset that represents th
              string    type                                     = 7  ; //  Indicates the type of the cell. This par
              string    cid                                      = 8  ; //  Defines the global cell identity of the 
            }
            repeated CDMA2000 cdma2000 = 9; // FAPService.{i}.CellConfig.LTE.RAN.NeighborList.InterRATCell.CDMA2000.{i}.
          }
          InterRATCell inter_ratcell = 4; // FAPService.{i}.CellConfig.LTE.RAN.NeighborList.InterRATCell.
        }
        NeighborList neighbor_list = 11; // FAPService.{i}.CellConfig.LTE.RAN.NeighborList.
        message NeighborListInUse { // FAPService.{i}.CellConfig.LTE.RAN.NeighborListInUse.
          uint32    max_ltecell_entries                      = 1  ; //  The maximum number of entries in the {{o
          uint32    ltecell_number_of_entries                = 2  ; //  {{numentries}}        }        ighb
          message LTECell { // FAPService.{i}.CellConfig.LTE.RAN.NeighborListInUse.LTECell.{i}.
            string    plmnid                                   = 1  ; //  PLMN ID consists of Mobile Country Code 
            uint32    cid                                      = 2  ; //  Cell Identity. {{bibref|3GPP-TS.36.331|S
            uint32    eutracarrier_arfcn                       = 3  ; //  Indicates the ARFCN of this carrier freq
            uint32    phy_cell_id                              = 4  ; //  Physical cell ID, as specified in {{bibr
            int32     qoffset                                  = 5  ; //  Indicate a cell-specific offset applicab
            int32     cio                                      = 6  ; //  Cell individual offset applicable to a s
            int32     rstx_power                               = 7  ; //  The downlink reference-signal transmit p
            bool      blacklisted                              = 8  ; //  Indicates whether this neighbor cell is 
          }
          repeated LTECell ltecell = 3; // FAPService.{i}.CellConfig.LTE.RAN.NeighborListInUse.LTECell.{i}.
          message InterRATCell { // FAPService.{i}.CellConfig.LTE.RAN.NeighborListInUse.InterRATCell.
            uint32    max_umtsentries                          = 1  ; //  The maximum number of entries in the {{o
            uint32    max_gsmentries                           = 2  ; //  The maximum number of entries in the {{o
            uint32    max_cdma2000entries                      = 3  ; //  The maximum number of entries in the {{o
            uint32    umtsnumber_of_entries                    = 4  ; //  {{numentries}}        }        here
            uint32    gsmnumber_of_entries                     = 5  ; //  {{numentries}}        }         {{o
            uint32    cdma2000number_of_entries                = 6  ; //  {{numentries}}        }        ncie
            message UMTS { // FAPService.{i}.CellConfig.LTE.RAN.NeighborListInUse.InterRATCell.UMTS.{i}.
              string    plmnid                                   = 1  ; //  PLMN ID consists of Mobile Country Code 
              uint32    rncid                                    = 2  ; //  RNC-ID of an intra-RAT UMTS neighbor cel
              uint32    cid                                      = 3  ; //  Cell Identifier (C-id) that identifies a
              uint32    lac                                      = 4  ; //  Location Area Code (LAC). The concatenat
              uint32    rac                                      = 5  ; //  Routing Area Code (RAC). The concatenati
              uint32    ura                                      = 6  ; //  UTRAN Registration Area (URA) {{bibref|3
              uint32    uarfcnul                                 = 7  ; //  The UL UTRA Absolute Radio Frequency Cha
              uint32    uarfcndl                                 = 8  ; //  The DL UTRA Absolute Radio Frequency Cha
              uint32    pcpichscrambling_code                    = 9  ; //  Primary CPICH scrambling code.        
              int32     pcpichtx_power                           = 10 ; //  Primary CPICH Tx power in {{units}}.   
            }
            repeated UMTS umts = 7; // FAPService.{i}.CellConfig.LTE.RAN.NeighborListInUse.InterRATCell.UMTS.{i}.
            message GSM { // FAPService.{i}.CellConfig.LTE.RAN.NeighborListInUse.InterRATCell.GSM.{i}.
              string    plmnid                                   = 1  ; //  PLMN ID consists of Mobile Country Code 
              uint32    lac                                      = 2  ; //  Location Area Code (LAC). The concatenat
              uint32    bsic                                     = 3  ; //  BSIC of the cell per {{bibref|3GPP-TS.23
              uint32    ci                                       = 4  ; //  Cell ID of the cell per {{bibref|3GPP-TS
              string    band_indicator                           = 5  ; //  Indicates how to interpret the BCCH ARFC
              uint32    bccharfcn                                = 6  ; //  ARFCN of this cell.        .        
            }
            repeated GSM gsm = 8; // FAPService.{i}.CellConfig.LTE.RAN.NeighborListInUse.InterRATCell.GSM.{i}.
            message CDMA2000 { // FAPService.{i}.CellConfig.LTE.RAN.NeighborListInUse.InterRATCell.CDMA2000.{i}.
              uint32    band_class                               = 1  ; //  Defines the CDMA2000 band in which the C
              uint32    arfcn                                    = 2  ; //  Defines the CDMA2000 frequency carrier w
              uint32    pnoffset                                 = 3  ; //  Defines the PN offset that represents th
              string    type                                     = 4  ; //  Indicates the type of the cell. This par
              string    cid                                      = 5  ; //  Defines the global cell identity of the 
            }
            repeated CDMA2000 cdma2000 = 9; // FAPService.{i}.CellConfig.LTE.RAN.NeighborListInUse.InterRATCell.CDMA2000.{i}.
          }
          InterRATCell inter_ratcell = 4; // FAPService.{i}.CellConfig.LTE.RAN.NeighborListInUse.InterRATCell.
        }
        NeighborListInUse neighbor_list_in_use = 12; // FAPService.{i}.CellConfig.LTE.RAN.NeighborListInUse.
        message CSG { // FAPService.{i}.CellConfig.LTE.RAN.CSG.
          message Stats { // FAPService.{i}.CellConfig.LTE.RAN.CSG.Stats.
            uint32    mean_nbr_usr                             = 1  ; //  This measurement provides the mean numbe
            uint32    att_inbound_mobility                     = 2  ; //  This measurement provides the number of 
            uint32    succ_inbound_mobility                    = 3  ; //  This measurement provides the number of 
            string    failed_inbound_mobility                  = 4  ; //  This measurement provides the number of 
          }
          Stats stats = 1; // FAPService.{i}.CellConfig.LTE.RAN.CSG.Stats.
        }
        CSG csg = 13; // FAPService.{i}.CellConfig.LTE.RAN.CSG.
        message RRC { // FAPService.{i}.CellConfig.LTE.RAN.RRC.
          message Stats { // FAPService.{i}.CellConfig.LTE.RAN.RRC.Stats.
            string    att_conn_estab                           = 1  ; //  This measurement provides the number of 
            string    fail_conn_estab                          = 2  ; //  This measurement provides the number of 
            string    succ_conn_estab                          = 3  ; //  This measurement provides the number of 
          }
          Stats stats = 1; // FAPService.{i}.CellConfig.LTE.RAN.RRC.Stats.
        }
        RRC rrc = 14; // FAPService.{i}.CellConfig.LTE.RAN.RRC.
        message ERAB { // FAPService.{i}.CellConfig.LTE.RAN.ERAB.
          message Stats { // FAPService.{i}.CellConfig.LTE.RAN.ERAB.Stats.
            string    estab_init_att_nbr                       = 1  ; //  This measurement provides the number of 
            string    estab_init_succ_nbr                      = 2  ; //  This measurement provides the number of 
            string    estab_init_fail_nbr                      = 3  ; //  This measurement provides the number of 
            string    estab_att_nbr                            = 4  ; //  This measurement provides the number of 
            string    estab_succ_nbr                           = 5  ; //  This measurement provides the number of 
            string    estab_fail_nbr                           = 6  ; //  This measurement provides the number of 
            string    rel_enb_nbr_qci                          = 7  ; //  This measurement provides the number of 
            string    rel_enb_nbr_cause                        = 8  ; //  This measurement provides the number of 
            uint32    lgwnumber_of_entries                     = 9  ; //  {{numentries}}        }        AB.S
            message LGW { // FAPService.{i}.CellConfig.LTE.RAN.ERAB.Stats.LGW.{i}.
              string    correlation_id                           = 1  ; //  The value of this parameter is equal to 
              uint32    estab_direct_path_lgwatt_nbr             = 2  ; //  This measurement provides the number of 
              uint32    estab_direct_path_lgwsucc_nbr            = 3  ; //  This measurement provides the number of 
              string    estab_direct_path_lgwfail_nbr            = 4  ; //  This measurement provides the number of 
            }
            repeated LGW lgw = 10; // FAPService.{i}.CellConfig.LTE.RAN.ERAB.Stats.LGW.{i}.
          }
          Stats stats = 1; // FAPService.{i}.CellConfig.LTE.RAN.ERAB.Stats.
        }
        ERAB erab = 15; // FAPService.{i}.CellConfig.LTE.RAN.ERAB.
        message DRB { // FAPService.{i}.CellConfig.LTE.RAN.DRB.
          message Stats { // FAPService.{i}.CellConfig.LTE.RAN.DRB.Stats.
            string    pdcp_sdu_bitrate_dl                      = 1  ; //  This measurement provides the average ce
            string    pdcp_sdu_bitrate_ul                      = 2  ; //  This measurement provides the average ce
            uint32    pdcp_sdu_bitrate_dl_max                  = 3  ; //  This measurement provides the maximum ce
            uint32    pdcp_sdu_bitrate_ul_max                  = 4  ; //  This measurement provides the maximum ce
            string    pdcp_sdu_delay_dl                        = 5  ; //  This measurement provides the average (a
            string    pdcp_sdu_drop_rate_dl                    = 6  ; //  This measurement provides the fraction o
            string    pdcp_sdu_air_loss_rate_dl                = 7  ; //  This measurement provides the fraction o
            string    pdcp_sdu_loss_rate_ul                    = 8  ; //  This measurement provides the fraction o
            string    ueactive_dl                              = 9  ; //  This measurement provides the average nu
            string    ueactive_ul                              = 10 ; //  This measurement provides the average nu
          }
          Stats stats = 1; // FAPService.{i}.CellConfig.LTE.RAN.DRB.Stats.
        }
        DRB drb = 16; // FAPService.{i}.CellConfig.LTE.RAN.DRB.
        message RRU { // FAPService.{i}.CellConfig.LTE.RAN.RRU.
          message Stats { // FAPService.{i}.CellConfig.LTE.RAN.RRU.Stats.
            uint32    prb_tot_dl                               = 1  ; //  This measurement provides the total usag
            uint32    prb_tot_ul                               = 2  ; //  This measurement provides the total usag
          }
          Stats stats = 1; // FAPService.{i}.CellConfig.LTE.RAN.RRU.Stats.
        }
        RRU rru = 17; // FAPService.{i}.CellConfig.LTE.RAN.RRU.
      }
      RAN ran = 4; // FAPService.{i}.CellConfig.LTE.RAN.
      message EnergySavings { // FAPService.{i}.CellConfig.LTE.EnergySavings.
        bool      enable                                   = 1  ; //  This attribute determines whether the en
        string    state                                    = 2  ; //  Specifies the status regarding the energ
        uint32    not_allowed_time_period_number_of_entries = 3  ; //  {{numentries}}        }        Savi
        message ActivationCandidateCellsLoad { // FAPService.{i}.CellConfig.LTE.EnergySavings.ActivationCandidateCellsLoad.
          uint32    threshold                                = 1  ; //  PRB usage as a {{units}} {{bibref|3GPP-T
          uint32    time_duration                            = 2  ; //  This parameter indicates how long the tr
        }
        ActivationCandidateCellsLoad activation_candidate_cells_load = 4; // FAPService.{i}.CellConfig.LTE.EnergySavings.ActivationCandidateCellsLoad.
        message DeactivationCandidateCellsLoad { // FAPService.{i}.CellConfig.LTE.EnergySavings.DeactivationCandidateCellsLoad.
          uint32    threshold                                = 1  ; //  PRB usage as a {{units}} {{bibref|3GPP-T
          uint32    time_duration                            = 2  ; //  This parameter indicates how long the tr
        }
        DeactivationCandidateCellsLoad deactivation_candidate_cells_load = 5; // FAPService.{i}.CellConfig.LTE.EnergySavings.DeactivationCandidateCellsLoad.
        message NotAllowedTimePeriod { // FAPService.{i}.CellConfig.LTE.EnergySavings.NotAllowedTimePeriod.{i}.
          bool      enable                                   = 1  ; //  This attribute determines whether the ti
          string    start_time                               = 2  ; //  Starting time for this time period forma
          string    end_time                                 = 3  ; //  Ending time for this time period formatt
          string    days_of_week                             = 4  ; //  {{list| that represents the days of the 
        }
        repeated NotAllowedTimePeriod not_allowed_time_period = 6; // FAPService.{i}.CellConfig.LTE.EnergySavings.NotAllowedTimePeriod.{i}.
      }
      EnergySavings energy_savings = 5; // FAPService.{i}.CellConfig.LTE.EnergySavings.
    }
    LTE lte = 2; // FAPService.{i}.CellConfig.LTE.
    message CDMA2000 { // FAPService.{i}.CellConfig.CDMA2000.
      string    tunnel_instance                          = 1  ; //  This is the reference to the IPsec tunne
      message OneX { // FAPService.{i}.CellConfig.CDMA2000.OneX.
        uint32    pcfpdsnnumber_of_entries                 = 1  ; //  {{numentries}}        }        Savi
        uint32    max_batch_pcfpdsnentries                 = 2  ; //  Maximum number of entries in the {{objec
        uint32    batch_pcfpdsnnumber_of_entries           = 3  ; //  {{numentries}}        }        neX.
        message RAN { // FAPService.{i}.CellConfig.CDMA2000.OneX.RAN.
          int32     one_xsector_nid                          = 1  ; //  SID for 1x. See {{bibref|3GPP2-C.S0005}}
          int32     one_xsector_sid                          = 2  ; //  NID for 1x . See {{bibref|3GPP2-C.S0005}
          int32     one_xpzid                                = 3  ; //  packet Zone ID for 1x packet calls     
          int32     base_id                                  = 4  ; //  Base station ID (needed in SPM). This is
          uint32    max_neighbor_list_entries                = 5  ; //  Maximum number of entries avaiable in  {
          uint32    neighbor_list_number_of_entries          = 6  ; //  {{numentries}}        }        neX.
          message RF { // FAPService.{i}.CellConfig.CDMA2000.OneX.RAN.RF.
            string    rfcnfl                                   = 1  ; //  {{list}} Each item is a pair of 2-digit 
            string    rfcnflband_in_use                        = 2  ; //  The FL Band being used by the FAP. Self-
            uint32    rfcnflin_use                             = 3  ; //  The FL RFCN being used by the FAP. Self-
            string    pilot_pn                                 = 4  ; //  {{list}} Each item is a pilot PN offset 
            uint32    pilot_pnin_use                           = 5  ; //  The Pilot PN Offset being used by the FA
            string    max_faptx_power                          = 6  ; //  Defines the maximum transmission power a
            int32     max_faptx_power_in_use                   = 7  ; //  The maximum transmission power measured 
            uint32    pch_pwr_percentage                       = 8  ; //  Percentage of Max Sector Power Used By P
            uint32    pilot_pwr_percentage                     = 9  ; //  Percentage of Max Sector Power Used By P
            uint32    sync_pwr_percentage                      = 10 ; //  Percentage of Max Sector Power Used By S
          }
          RF rf = 7; // FAPService.{i}.CellConfig.CDMA2000.OneX.RAN.RF.
          message NetworkListenModeConfig { // FAPService.{i}.CellConfig.CDMA2000.OneX.RAN.NetworkListenModeConfig.
            uint32    rfcnflmargin                             = 1  ; //  If self-configuration of RFCNFL is enabl
            string    fapcoverage_target                       = 2  ; //  Defines the target value measured in dB 
            string    fapbeacon_coverage_target                = 3  ; //  Defines the target value measured in dB 
            int32     max_coverage_edge_pilot_strength         = 4  ; //  The maximum strength of the received pil
            int32     max_allowable_pilot_strength_degradation = 5  ; //  The maximum amount in dB by which the st
            string    rfcnflto_protect                         = 6  ; //  {{list}} Each item is a FL RFCN correspo
            uint32    fapallowed_adj_chan_coverage_hole        = 7  ; //  Defines the maximum allowed coverage hol
            uint32    acir                                     = 8  ; //  AdjacentChannelInterferenceRatio value i
          }
          NetworkListenModeConfig network_listen_mode_config = 8; // FAPService.{i}.CellConfig.CDMA2000.OneX.RAN.NetworkListenModeConfig.
          message AccessParameters { // FAPService.{i}.CellConfig.CDMA2000.OneX.RAN.AccessParameters.
            int32     nom_pwr                                  = 1  ; //  Nominal power correction factor used by 
            int32     init_pwr                                 = 2  ; //  Initial power offset used by the mobile 
            uint32    pwr_step_indb                            = 3  ; //  Power step increment in successive acces
            uint32    nom_pwr_ext                              = 4  ; //  {{param}} should be zero for BC0 and BC1
            uint32    apmauth                                  = 5  ; //  Enabling/disabling global authentication
            uint32    apmrand_update_prd                       = 6  ; //  The period (in {{units}}) that the BSS u
            uint32    initialpwr                               = 7  ; //  Initial power offset for access. The bas
            uint32    pwr_step                                 = 8  ; //  Power increment. The base station shall 
            uint32    num_step                                 = 9  ; //  Number of access probes. The base statio
            uint32    max_cap_size                             = 10 ; //  Maximum Access Channel message capsule s
            uint32    preamble_size                            = 11 ; //  Access Channel preamble length. The base
            uint32    psist09                                  = 12 ; //  Persistence value for access probes sent
            uint32    psist10                                  = 13 ; //  Persistence value for access probes sent
            uint32    psist11                                  = 14 ; //  Persistence value for access probes sent
            uint32    psist12                                  = 15 ; //  Persistence value for access probes sent
            uint32    psist13                                  = 16 ; //  Persistence value for access probes sent
            uint32    psist14                                  = 17 ; //  Persistence value for access probes sent
            uint32    psist15                                  = 18 ; //  Persistence value for access probes sent
            uint32    msg_psist                                = 19 ; //  Persistence modifier for access channel 
            uint32    reg_psist                                = 20 ; //  Persistence modifier for registration me
            uint32    probe_pnran                              = 21 ; //  Time randomization for access channel pr
            uint32    acc_tmo                                  = 22 ; //  Access transmission timeout. Two less th
            uint32    probe_bkoff                              = 23 ; //  One less than maximum number for randomi
            uint32    bkoff                                    = 24 ; //  One less than maximum number for randomi
            uint32    max_req_seq                              = 25 ; //  Maximum number of access probe sequences
            uint32    max_rsp_seq                              = 26 ; //  Maximum number of access probe sequences
          }
          AccessParameters access_parameters = 9; // FAPService.{i}.CellConfig.CDMA2000.OneX.RAN.AccessParameters.
          message SystemParameters { // FAPService.{i}.CellConfig.CDMA2000.OneX.RAN.SystemParameters.
            uint32    reg_zone                                 = 1  ; //  registration zone number (refer to Secti
            uint32    total_zones                              = 2  ; //  Total number of zones the mobile shall r
            uint32    zone_timer                               = 3  ; //  timer value to be used by the mobile in 
            uint32    reg_period                               = 4  ; //  Registration period for timer based regi
            uint32    srch_win_a                               = 5  ; //  Search window size to be used ny the mob
            uint32    srch_win_n                               = 6  ; //  Search window size to be used by the mob
            uint32    srch_win_r                               = 7  ; //  Search window size to be used by the mob
            uint32    nghbr_max_age                            = 8  ; //  neighbor set maximum age beyond which th
            uint32    pwr_rep_thresh                           = 9  ; //  Power control reporting threshold. Numbe
            uint32    pwr_rep_frames                           = 10 ; //  Duration (in number of frames) for measu
            uint32    pwr_thresh_enable                        = 11 ; //  enable/disable power measurement report 
            uint32    pwr_period_enable                        = 12 ; //  enable/disable periodic power measuremen
            uint32    pwr_rep_delay                            = 13 ; //  Delay (in unit of four frames) following
            uint32    rescan                                   = 14 ; //  If {{param}} is set to 1, the mobiles sh
            uint32    tadd                                     = 15 ; //  Power threshold (in {{units}}) for trans
            uint32    tdrop                                    = 16 ; //  Drop threshold (in {{units}}) to start a
            uint32    tcomp                                    = 17 ; //  If a pilot in condidate set exceeds the 
            uint32    ttdrop                                   = 18 ; //  Timer value for which an action is taken
            uint32    in_traffic_tadd                          = 19 ; //  T-ADD value (in {{units}}) used for in-t
            uint32    in_traffic_tdrop                         = 20 ; //  T-Drop value (in {{units}}) used in in-t
            uint32    in_traffic_tcomp                         = 21 ; //  T_Comp value (in {{units}}) used for in-
            uint32    in_traffic_ttdrop                        = 22 ; //  T_Tdrop timer value value used for in-tr
          }
          SystemParameters system_parameters = 10; // FAPService.{i}.CellConfig.CDMA2000.OneX.RAN.SystemParameters.
          message ExtendedSystemParameters { // FAPService.{i}.CellConfig.CDMA2000.OneX.RAN.ExtendedSystemParameters.
            uint32    prev                                     = 1  ; //  protocol revision        n        
            uint32    pmin_rev                                 = 2  ; //  minimum protocol revision        n   
            uint32    delete_for_tmsi                          = 3  ; //  Delete Foreign TMSI.          The base 
            uint32    use_tmsi                                 = 4  ; //  Use TMSI indicator.          The base s
            uint32    pref_msidtype                            = 5  ; //  Preferred Access Channel Mobile Station 
            uint32    mcc                                      = 6  ; //  Mobile Country Code. See {{bibref|3GPP2-
            uint32    imsi1112                                 = 7  ; //  11th and 12th digits of IMSI. See {{bibr
            uint32    tmsizone_len                             = 8  ; //  TMSI zone length.          The base sta
            uint32    tmsizone                                 = 9  ; //  TMSI zone.          The base station sh
            uint32    bcast_index                              = 10 ; //  Broadcast slot cycle index. To enable pe
            int32     imsitsupported                           = 11 ; //  1: IMISI_T is supported, 0: IMSI_T is no
            uint32    soft_slope                               = 12 ; //  The slope in the inequality criterion fo
            uint32    add_intercept                            = 13 ; //  The intercept in the inequality criterio
            uint32    drop_intercept                           = 14 ; //  The intercept in the inequality criterio
            uint32    max_num_alt_so                           = 15 ; //  Maximum number of alternative service op
            uint32    reselected_included                      = 16 ; //  System reselection parameters included.
            uint32    ec_thresh                                = 17 ; //  Pilot power threshold.          If RESE
            uint32    ec_io_thresh                             = 18 ; //  Pilot Ec / Io threshold.          If RE
            uint32    pilot_report                             = 19 ; //  Pilot reporting indicator.          The
            uint32    nghbr_set_entry_info                     = 20 ; //  Neighbor Set access entry handoff inform
            uint32    access_hoorder                           = 21 ; //  Access entry handoff permitted indicator
            uint32    nghbr_set_access_info                    = 22 ; //  Neighbor Set access handoff included ind
            uint32    access_ho                                = 23 ; //  Access handoff permitted indicator.    
            uint32    access_homsg_rsp                         = 24 ; //  Access handoff permitted for message res
            uint32    access_probe_ho                          = 25 ; //  Access probe handoff permitted indicator
            uint32    acc_holist_upd                           = 26 ; //  Access handoff list update permitted ind
            uint32    acc_probe_hoother_msg                    = 27 ; //  Access probe handoff permitted for messa
            uint32    max_num_probe_ho                         = 28 ; //  Maximum number of times that mobile stat
            uint32    brdcast_gpsassit                         = 29 ; //  If {{param}} is set to 1, then Braodcast
            uint32    qpchsupported                            = 30 ; //  Quick Paging Channel Supported Indicatio
            uint32    num_qpch                                 = 31 ; //  Number of Quick Paging Channels.       
            uint32    qpchrate                                 = 32 ; //  Quick Paging Channel indicator rate.   
            uint32    qpchpwr_level_page                       = 33 ; //  Quick Paging Channel paging indicator tr
            uint32    qpchcci_supported                        = 34 ; //  Quick Paging Channel configuration chang
            uint32    qpchpwr_level_config                     = 35 ; //  Quick Paging Channel configuration chang
            uint32    sdbsupported                             = 36 ; //  Short Data Burst supported indicator.  
            uint32    rlgain_traffic_pilot                     = 37 ; //  Gain adjustment of the Reverse Traffic C
            uint32    rvs_pwr_ctrl_delay_incl                  = 38 ; //  Reverse Power Control Delay included ind
            uint32    rvs_pwr_ctrl_delay                       = 39 ; //  The reverse power control delay.       
          }
          ExtendedSystemParameters extended_system_parameters = 11; // FAPService.{i}.CellConfig.CDMA2000.OneX.RAN.ExtendedSystemParameters.
          message ForwardPwrCtr { // FAPService.{i}.CellConfig.CDMA2000.OneX.RAN.ForwardPwrCtr.
            int32     fpcfchinit_setpt                         = 1  ; //  Initial Fundamental Channel outer loop E
            int32     fpcsubchan_gain                          = 2  ; //  Forward power control subchannel relativ
            int32     rlgain_adj                               = 3  ; //  Reverse Traffic Channel power relative t
            uint32    fpcfchfer                                = 4  ; //  Fundamental Channel target frame error r
            int32     fpcfchmin_setpt                          = 5  ; //  Minimum Fundamental Channel Outer Loop E
            int32     fpcfchmax_setpt                          = 6  ; //  Maximum Fundamental Channel Outer Loop E
          }
          ForwardPwrCtr forward_pwr_ctr = 12; // FAPService.{i}.CellConfig.CDMA2000.OneX.RAN.ForwardPwrCtr.
          message HardHandoff { // FAPService.{i}.CellConfig.CDMA2000.OneX.RAN.HardHandoff.
            bool      handout_enable                           = 1  ; //  Enabling handout operation.        . 
            int32     hopilot_power_thresh                     = 2  ; //  Pilot power threshold (in {{units}} rela
            uint32    hopilot_duration                         = 3  ; //  Timethreshold for handout declaration (i
            message Stats { // FAPService.{i}.CellConfig.CDMA2000.OneX.RAN.HardHandoff.Stats.
              uint32    tx_horequired                            = 1  ; //  Total number of Handout Required message
              uint32    rx_hocommand                             = 2  ; //  Total number of Handout Command messegae
              uint32    horequired_rejected                      = 3  ; //  Total number of HO required requests rej
              uint32    horequired_unanswered                    = 4  ; //  Total number of HO required requests for
              uint32    tx_uhdm                                  = 5  ; //  Total number UHDMs sent to mobiles     
              uint32    rx_nsack                                 = 6  ; //  Total number of MSAcks received from the
              uint32    hofailure_count                          = 7  ; //  Total number of Handout attempts declare
              uint32    call_drop_count                          = 8  ; //  Total numer of call drops after a HO att
              uint32    tx_hocommence                            = 9  ; //  Number of Handout Commenced messages sen
              uint32    rx_hosession_clear                       = 10 ; //  Number of session clear commands receive
              uint32    return_on_failure_count                  = 11 ; //  Total number of times a Return On Handof
              uint32    one_pilot_report_count                   = 12 ; //  Number of times only one pilot was repor
              uint32    two_pilot_report_count                   = 13 ; //  Number of times only two pilot was repor
              uint32    three_pilot_report_count                 = 14 ; //  Number of times only three pilot was rep
            }
            Stats stats = 4; // FAPService.{i}.CellConfig.CDMA2000.OneX.RAN.HardHandoff.Stats.
          }
          HardHandoff hard_handoff = 13; // FAPService.{i}.CellConfig.CDMA2000.OneX.RAN.HardHandoff.
          message PowerControl { // FAPService.{i}.CellConfig.CDMA2000.OneX.RAN.PowerControl.
            int32     one_xpcfpcincl                           = 1  ; //  Whether Forward power control informatio
            int32     one_xpcfpcfchmin_setpt                   = 2  ; //  The value for the minimum Fundamental Ch
            int32     one_xpcfpcfchmax_setpt                   = 3  ; //  The value for the maximum Fundamental Ch
            int32     one_xpcrpcincl                           = 4  ; //  Whether reverse Power control informatio
            int32     one_xpcfchchan_adj_gain                  = 5  ; //  Channel adjustment gain (in {{units}}) f
            uint32    one_xpcpwr_rep_thresh                    = 6  ; //  The number of bad frames to be received 
            uint32    one_xpcpwr_rep_frames                    = 7  ; //  Power control reporting frame count. Num
            int32     one_xpwr_thresh_enable                   = 8  ; //  Threshold report mode indicator. If the 
            int32     one_xpcpwr_period_enable                 = 9  ; //  Periodic report mode indicator. If the m
            uint32    one_xpcpwr_rep_delay                     = 10 ; //  Power report delay. The period that the 
          }
          PowerControl power_control = 14; // FAPService.{i}.CellConfig.CDMA2000.OneX.RAN.PowerControl.
          message NeighborList { // FAPService.{i}.CellConfig.CDMA2000.OneX.RAN.NeighborList.{i}.
            bool      enable                                   = 1  ; //  Enables or disables the {{object}} entry
            string    alias                                    = 2  ; //  {{datatype|expand}}        }        
            int32     pilot_inc                                = 3  ; //  pilot increment policy for this network.
            int32     one_xneighbor_index                      = 4  ; //  Macro neighbour index. See {{bibref|3GPP
            string    neighbor_config                          = 5  ; //  Neighbor configuration in terms of numbe
            int32     neighbor_pn                              = 6  ; //  PN offset of the neighbor. See {{bibref|
            string    search_priority                          = 7  ; //  priority level for serching this neighbo
            string    neighbor_band                            = 8  ; //  Neighbor band class. See {{bibref|3GPP2-
            int32     neighbor_frequency                       = 9  ; //  frequency of neighbor. See {{bibref|3GPP
            int32     frequency_included                       = 10 ; //  Flag to indicate if the channel id inclu
            int32     in_traffic                               = 11 ; //  whether this neighbor can be used for in
            int32     overhead_msg                             = 12 ; //  whether this neighbor can be used for ov
            int32     base_identifier                          = 13 ; //  unique identifire of the neighboring cel
            string    air_interface                            = 14 ; //  Air interface technology of the neighbor
            int32     hand_out_capable                         = 15 ; //  Flag to indicate if the handOutCapabilit
            string    one_xneighbor_longitude                  = 16 ; //  Longitude for this neighbor. Parameter i
            string    one_xneighbor_latitude                   = 17 ; //  Lattitude for this neighbor. Parameter i
            uint32    one_xneighbor_mscid                      = 18 ; //  IOS MSCID of the neighbors. See {{bibref
            uint32    one_xneighbor_ioscell_id                 = 19 ; //  Cell Identifier of the neighbor (formatt
            bool      force_in_overhead                        = 20 ; //  If {{param}} is set to {{true}}, the FAP
            bool      included_in_overhead                     = 21 ; //  If {{param}} is set to {{true}}, the FAP
          }
          repeated NeighborList neighbor_list = 15; // FAPService.{i}.CellConfig.CDMA2000.OneX.RAN.NeighborList.{i}.
          message APIDM { // FAPService.{i}.CellConfig.CDMA2000.OneX.RAN.APIDM.
            uint32    association_type                         = 1  ; //  The FAP shall set this field to the valu
            uint32    apidlen                                  = 2  ; //  The FAP shall set this field to the leng
            bytes     apid                                     = 3  ; //  Access Point Identification. Refer {{bib
            uint32    apidmask                                 = 4  ; //  Access Point identification Mask. Refer 
            uint32    iosmscid                                 = 5  ; //  MSC_ID of the base station. Refer {{bibr
            uint32    ioscellid                                = 6  ; //  CELL_ID of the base station. Refer {{bib
            bool      intrafreqhohysincl                       = 7  ; //  This field indicates whether the INTRAFR
            uint32    intrafreqhohys                           = 8  ; //  Intra Frequency Handoff Hysteresis. Refe
            bool      intrafreqhoslopeincl                     = 9  ; //  This field indicates whether the INTRAFR
            uint32    intrafreqhoslope                         = 10 ; //  Intra Frequency Handoff Slope. Refer {{b
            bool      interfreqhohysincl                       = 11 ; //  This field indicates whether the INTERFR
            uint32    interfreqhohys                           = 12 ; //  Inter frequency handoff hysteresis. Refe
            bool      interfreqhoslopeincl                     = 13 ; //  This field indicates whether the INTERFR
            uint32    interfreqhoslope                         = 14 ; //  Inter frequency handoff slope. Refer {{b
            bool      interfreqsrchthincl                      = 15 ; //  This field indicates whether the INTERFR
            uint32    interfreqsrchth                          = 16 ; //  Inter-frequency search threshold. Refer 
          }
          APIDM apidm = 16; // FAPService.{i}.CellConfig.CDMA2000.OneX.RAN.APIDM.
          message APIDTM { // FAPService.{i}.CellConfig.CDMA2000.OneX.RAN.APIDTM.
            uint32    apidtextchari_len                        = 1  ; //  Access Point identification Text CHARi f
            uint32    apidtextmsgencoding                      = 2  ; //  Access Point identification Text message
            string    apidtextchari                            = 3  ; //  Access Point Identification Text. Refer 
          }
          APIDTM apidtm = 17; // FAPService.{i}.CellConfig.CDMA2000.OneX.RAN.APIDTM.
          message APPIM { // FAPService.{i}.CellConfig.CDMA2000.OneX.RAN.APPIM.
            uint32    lifetime                                 = 1  ; //  Lifetime of the information in the acces
            uint32    numappirec                               = 2  ; //  The number of entries for {{object|.Cell
            uint32    appirecnumber_of_entries                 = 3  ; //  {{numentries}}        }            
            message APPIREC { // FAPService.{i}.CellConfig.CDMA2000.OneX.RAN.APPIM.APPIREC.{i}.
              bool      enable                                   = 1  ; //  Enables or disables the {{object}} entry
              string    alias                                    = 2  ; //  {{datatype|expand}}        }        
              uint32    apassntype                               = 3  ; //  Access point association type the access
              uint32    apsidsameasprevious                      = 4  ; //  SID same as previous indicator in the ac
              uint32    apnidsameasprevious                      = 5  ; //  NID same as previous indicator in the ac
              uint32    apbandsameasprevious                     = 6  ; //  Bandclass same as previous indicator in 
              uint32    apfreqsameasprevious                     = 7  ; //  Frequency same as previous indicator in 
              uint32    appnrecsameasprevious                    = 8  ; //  PN offset same as previous indicator in 
              uint32    apsid                                    = 9  ; //  Access point SID in the access point pil
              uint32    apnid                                    = 10 ; //  Access point NID in the access point pil
              uint32    apband                                   = 11 ; //  Access point bandclass in the access poi
              uint32    apfreq                                   = 12 ; //  Access point frequency in the access poi
              uint32    appnrectype                              = 13 ; //  Access point PN offset in the access poi
              uint32    appnreclen                               = 14 ; //  Length in octets of the access point PN 
              bytes     appnrec                                  = 15 ; //  Access point PN Record in the access poi
            }
            repeated APPIREC appirec = 4; // FAPService.{i}.CellConfig.CDMA2000.OneX.RAN.APPIM.APPIREC.{i}.
          }
          APPIM appim = 18; // FAPService.{i}.CellConfig.CDMA2000.OneX.RAN.APPIM.
        }
        RAN ran = 4; // FAPService.{i}.CellConfig.CDMA2000.OneX.RAN.
        message PCFConfig { // FAPService.{i}.CellConfig.CDMA2000.OneX.PCFConfig.
          uint32    pcfpdsnhealth_monitor_interval           = 1  ; //  PDSN health check monitor interval in {{
          message PCFPerformanceStats { // FAPService.{i}.CellConfig.CDMA2000.OneX.PCFConfig.PCFPerformanceStats.
            uint32    a10setup_failure_no_reason               = 1  ; //  Number of times the PCF was refused an A
            uint32    a10setup_failure_admin_prohibit          = 2  ; //  Number of times the PCF was refused an A
            uint32    a10setup_failure_insuff_resources        = 3  ; //  Number of times the PCF was refused  an 
            uint32    a10setup_failure_failed_auth             = 4  ; //  Number of times the PCF was refused an A
            uint32    a10setup_failure_id_mismatch             = 5  ; //  Number of times the PCF was refused an A
            uint32    a10setup_failure_malformed_req           = 6  ; //  Number of times the PCF was  refused an 
            uint32    a10setup_failure_unknown_pdsn            = 7  ; //  Number of times  the PCF was refused an 
            uint32    a10setup_failure_unsupp_vend_id          = 8  ; //  Number of times the PCF was refused an A
            uint32    total_a10closed_by_rnc                   = 9  ; //  Number of A10 closed by the FAP RNC.   
            uint32    total_a10closed_by_pdsn                  = 10 ; //  Number of A10 closed by the PDSN.      
            uint32    total_a10success_pages                   = 11 ; //  Numebr of  A10 Pages initiated by PCFsuc
            uint32    total_a10failed_pages                    = 12 ; //  Numebr of  A10 Pages initiated by PCF fa
            uint32    total_a10ingress_bytes                   = 13 ; //  Number of {{units}} received from the PD
            uint32    total_a10egress_bytes                    = 14 ; //  Number of {{units}} transmitted to the P
            uint32    a10reg_update_received                   = 15 ; //  Number of A10 Registration updates recei
            uint32    total_a10dropped_pages                   = 16 ; //  Number of  A10 Pages initiated by PCF dr
          }
          PCFPerformanceStats pcfperformance_stats = 2; // FAPService.{i}.CellConfig.CDMA2000.OneX.PCFConfig.PCFPerformanceStats.
        }
        PCFConfig pcfconfig = 5; // FAPService.{i}.CellConfig.CDMA2000.OneX.PCFConfig.
        message BatchPCFPDSN { // FAPService.{i}.CellConfig.CDMA2000.OneX.BatchPCFPDSN.{i}.
          bool      enable                                   = 1  ; //  Enables or disables the {{object}} entry
          string    alias                                    = 2  ; //  {{datatype|expand}}        }        
          int32     batch_table_number                       = 3  ; //  The BatchTable Number should be given on
          string    batch_table_start_ipaddress              = 4  ; //  Start IP address of the range of PDSNs.
          string    batch_table_end_ipaddress                = 5  ; //  End IP address of the range of PDSNs.  
          uint32    batch_table_security_parameter_index     = 6  ; //  Security Parameter Index to be used.   
          bytes     batch_table_secret_key                   = 7  ; //  Secret key in 32-digit hexidecimal repre
          string    batch_table_iosversion                   = 8  ; //  IOS Version of this PDSN.        .   
          int32     batch_table_pdsnadmin_status             = 9  ; //  Administrative status of this PDSN.  0- 
          string    pdsntype                                 = 10 ; //  Indicates the PDSN type for this batch.
        }
        repeated BatchPCFPDSN batch_pcfpdsn = 6; // FAPService.{i}.CellConfig.CDMA2000.OneX.BatchPCFPDSN.{i}.
        message PCFPDSN { // FAPService.{i}.CellConfig.CDMA2000.OneX.PCFPDSN.{i}.
          bool      enable                                   = 1  ; //  Enables or disables the {{object}} entry
          string    alias                                    = 2  ; //  {{datatype|expand}}        }        
          int32     pdsnnumber                               = 3  ; //  Index of this PDSN object in the PCFPDSN
          uint32    security_parameter_index                 = 4  ; //  Security Parameter Index used        d
          bytes     security_key                             = 5  ; //  Secret key in 32-digit hexidecimal repre
          string    iosversion                               = 6  ; //  HRPD IOS Version of this PDSN.        
          int32     pdsnadmin_status                         = 7  ; //  Administrative status of this PDSN.  0- 
          uint32    pdsnhealth_status                        = 8  ; //  Reachability status of this PDSN.  0-unr
          string    pdsnipaddress                            = 9  ; //  IP address of the PDSN.        .     
          message A11RegUpdateStats { // FAPService.{i}.CellConfig.CDMA2000.OneX.PCFPDSN.{i}.A11RegUpdateStats.
            int32     pdsnnumber_reg_update_perf               = 1  ; //  The PDSN Number        r        11 R
            string    pdsnipaddress_reg_update_perf            = 2  ; //  The IP Address of the PDSN for which the
            uint32    a11reg_update_received_pdsn              = 3  ; //  Number of A10 Reg-update messages receie
            uint32    a11reg_update_idcheck_fail_pdsn          = 4  ; //  Number of A10 Reg-Update messages receie
            uint32    a11reg_update_auth_check_fail_pdsn       = 5  ; //  Number of A10 Reg-Update messages receiv
            uint32    a11reg_update_for_unknown_psipdsn        = 6  ; //  Number of A10 Reg-Update messages receiv
            uint32    a11reg_update_unspecified_reason_pdsn    = 7  ; //  Number of A10 Reg-Update messages receiv
            uint32    a11reg_update_ppp_timeout_pdsn           = 8  ; //  Number of A10 Reg-Update messages receiv
            uint32    a11reg_update_registration_timeout_pdsn  = 9  ; //  Number of A10 Reg-Update messages receiv
            uint32    a11reg_update_pdsnerror_pdsn             = 10 ; //  Number of A10 Reg-Update messages receiv
            uint32    a11reg_update_inter_pcfhandoff_pdsn      = 11 ; //  Number of A10 Reg-Update messages receiv
            uint32    a11reg_update_inter_pdsnhandoff_pdsn     = 12 ; //  Number of A10 Reg-Update messages receiv
            uint32    a11reg_update_pdsnoampintervention_pdsn  = 13 ; //  Number of A10 Reg-Update messages receiv
            uint32    a11reg_update_accounting_error_pdsn      = 14 ; //  Number of A10 Reg-Update messages receiv
            uint32    a11reg_update_user_failed_authentication_pdsn = 15 ; //  Number of A10 Reg-Update messages receiv
            uint32    a11reg_update_unknown_cause_code_pdsn    = 16 ; //  Number of A10 Reg-Update messages receiv
            uint32    a11reg_update_without_reason_code_pdsn   = 17 ; //  Number of A10 Reg-Update messages receiv
          }
          A11RegUpdateStats a11reg_update_stats = 10; // FAPService.{i}.CellConfig.CDMA2000.OneX.PCFPDSN.{i}.A11RegUpdateStats.
          message PCFPDSNStats { // FAPService.{i}.CellConfig.CDMA2000.OneX.PCFPDSN.{i}.PCFPDSNStats.
            uint32    a10setup_attempts_pdsn                   = 1  ; //  Number of attempts the PCF made to estab
            uint32    a10setup_successes_pdsn                  = 2  ; //  Number of times PCF succeeded in establi
            uint32    a10setup_blocks_pdsn                     = 3  ; //  Number of times PCF was blocked in estab
            uint32    a11reg_req_denied_id_mismatch_pdsn       = 4  ; //  Number ofA11 Registration Request denied
            uint32    a11reg_req_denied_unknown_pdsnpdsn       = 5  ; //  Number of A11 Registration Request denie
            uint32    a11reg_req_denied_no_reason_pdsn         = 6  ; //  Number of A11 Registration Request denie
            uint32    a11reg_req_denied_admin_prohibit_pdsn    = 7  ; //  Number of A11 Registration Request denie
            uint32    a11reg_req_denied_insuff_resources_pdsn  = 8  ; //  Number of A11 Registration Request denie
            uint32    a11reg_req_denied_failed_auth_pdsn       = 9  ; //  Number of A11 Registration Request denie
            uint32    a11reg_req_denied_malformed_req_pdsn     = 10 ; //  Number of A11 Registration Request denie
            uint32    a11reg_req_denied_unsupp_vend_id_pdsn    = 11 ; //  Number ofA11 Registration Request denied
            uint32    a11reg_req_denied_reverse_tunnel_unavailable_pdsn = 12 ; //  Number ofA11 Registration Request denied
            uint32    a11reg_req_denied_reverse_tunnel_tbit_not_set_pdsn = 13 ; //  Number ofA11 Registration Request denied
            uint32    a11reg_req_denied_unknown_error_code_pdsn = 14 ; //  Number of A11 Registration Request denie
            uint32    a10reg_req_for_registration_retransmissions_pdsn = 15 ; //  Number of A11 Registration Requests retr
            uint32    a10reg_req_for_re_registration_retransmissions_pdsn = 16 ; //  Number of A11 Registration Requests retr
            uint32    a10reg_req_for_release_retransmissions_pdsn = 17 ; //  Number of A11 Registration Requests retr
            int32     pdsnnumber_pdsnperf                      = 18 ; //  The PDSN Number        r        SNn
            string    pdsnip_address_pdsnperf                  = 19 ; //  The IP Address of the PDSN for which the
          }
          PCFPDSNStats pcfpdsnstats = 11; // FAPService.{i}.CellConfig.CDMA2000.OneX.PCFPDSN.{i}.PCFPDSNStats.
        }
        repeated PCFPDSN pcfpdsn = 7; // FAPService.{i}.CellConfig.CDMA2000.OneX.PCFPDSN.{i}.
        message Stats { // FAPService.{i}.CellConfig.CDMA2000.OneX.Stats.
          uint32    registration_attempts                    = 1  ; //  Total number of registration attempts  
          uint32    registration_fails                       = 2  ; //  Total number of registrations failed   
          uint32    registrations_blocked                    = 3  ; //  Unauthorized registrations blocked by ad
          uint32    page_attempts                            = 4  ; //  Total number of attemots to page request
          uint32    page_fails                               = 5  ; //  Total number of page requests rejected o
          uint32    voice_call_attempts                      = 6  ; //  Total number of voice call attempts    
          uint32    voice_call_failures                      = 7  ; //  Total number of voice call attempts whic
          uint32    voice_calls_blocked                      = 8  ; //  Total number of voice calls blocked due 
          uint32    voice_calls_dropped                      = 9  ; //  Number of voice calls dropped due to var
          uint32    data_call_attempts                       = 10 ; //  Total number of data call attempts     
          uint32    data_call_failures                       = 11 ; //  Total number of data call attemots faile
          uint32    data_calls_blocked                       = 12 ; //  Total number of data calls failed due to
          uint32    data_calls_dropped                       = 13 ; //  Total number of data calls dropped due t
          uint32    average_voice_call                       = 14 ; //  Average voice call duration in {{units}}
          uint32    average_data_call                        = 15 ; //  Average data call duration in {{units}}
          uint32    average_session_in_sec                   = 16 ; //  Average session duration in {{units}}. 
          uint32    total_voice_calls                        = 17 ; //  Total number of successful voice calls 
          uint32    total_data_calls                         = 18 ; //  Total number of successful data calls  
          uint32    fwd_voice_packet_drop_percentage         = 19 ; //  Percentage of voice packets dropped in M
          uint32    rev_voice_packet_drop_percentage         = 20 ; //  Percentage of voice packets received wit
          uint32    fwd_avg_data_rate                        = 21 ; //  Average data rate of the scheduler on th
          uint32    rev_avg_data_rate                        = 22 ; //  Average data rate of the scheduler on re
          uint32    bc_index_zero_to_one_transitions         = 23 ; //  Num of times the bcIndex was changed fro
          uint32    bc_index_one_to_zero_transitions         = 24 ; //  Num of times the bcIndex was changed fro
        }
        Stats stats = 8; // FAPService.{i}.CellConfig.CDMA2000.OneX.Stats.
        message Redirect { // FAPService.{i}.CellConfig.CDMA2000.OneX.Redirect.
          uint32    redirect_channel_number                  = 1  ; //  The channel number set from ACS that the
          uint32    redirect_band_class                      = 2  ; //  The bandclass set from ACS that the FAP 
        }
        Redirect redirect = 9; // FAPService.{i}.CellConfig.CDMA2000.OneX.Redirect.
      }
      OneX one_x = 2; // FAPService.{i}.CellConfig.CDMA2000.OneX.
      message HRPD { // FAPService.{i}.CellConfig.CDMA2000.HRPD.
        uint32    pcfpdsnnumber_of_entries                 = 1  ; //  {{numentries}}        }        neX.
        uint32    max_batch_pcfpdsnentries                 = 2  ; //  Maximum number of entries in the {{objec
        uint32    batch_pcfpdsnnumber_of_entries           = 3  ; //  {{numentries}}        }        RPD.
        message RAN { // FAPService.{i}.CellConfig.CDMA2000.HRPD.RAN.
          message RF { // FAPService.{i}.CellConfig.CDMA2000.HRPD.RAN.RF.
            uint32    hrpdcar_band_class                       = 1  ; //  The Band Class this HRPD Carrier object 
            string    rfcnfl                                   = 2  ; //  {{list}} Each item is a FL Radio Frequen
            uint32    rfcnflin_use                             = 3  ; //  The FL RFCN being used by the FAP. Self-
            string    pilot_pn                                 = 4  ; //  {{list}} (maximum length 32) (minimum 1 
            uint32    pilot_pnin_use                           = 5  ; //  The Pilot PN Offset being used by the FA
            string    max_faptx_power                          = 6  ; //  Defines the maximum transmission power a
            int32     max_faptx_power_in_use                   = 7  ; //  The maximum transmission power measured 
            int32     control_channel_rate                     = 8  ; //  The data rate of the Control Channel of 
            int32     sync_capsule_offset                      = 9  ; //  The offset from the control channel cycl
            int32     rab_length                               = 10 ; //  The Reverse Activity Bit (RAB) length me
            int32     rab_offset                               = 11 ; //  The Reverse Activity Bit (RAB) offset fo
            bytes     sector_id                                = 12 ; //  The 128 bit Sector ID for this HRPD Sect
            int32     color_code                               = 13 ; //  The HRPD color code associated with this
            int32     subnet_mask_length                       = 14 ; //  {{param}} is the length of the HRPD Subn
            int32     hrpdsec_el_reverse_link_silence_duration = 15 ; //  Duration of the Reverse Link Silence Int
            int32     hrpdsec_el_reverse_link_silence_period   = 16 ; //  The Reverse Link Silence Interval is def
            int32     open_loop_adjust                         = 17 ; //  The open loop adjustment (in {{units}}) 
            int32     probe_initial_adjust                     = 18 ; //  The probe initial adjustment (in {{units
            int32     probe_num_steps                          = 19 ; //  The number of power level steps for acce
            int32     probe_power_step                         = 20 ; //  The power step size (in {{units}}) appli
            string    apersistence                             = 21 ; //  The A-Persistence vector, as per HRPD sp
            int32     rssirabthreshold                         = 22 ; //  RAB threshold for RSSI based RAB algorit
            uint32    load_rabthreshold                        = 23 ; //  RAB threshold for Load based RAB algorit
            uint32    connection_rate_limit                    = 24 ; //  4 different configurations.        . 
            uint32    rfe_rlbalance_ratio                      = 25 ; //  Config Parameter for DRC based rate cont
          }
          RF rf = 1; // FAPService.{i}.CellConfig.CDMA2000.HRPD.RAN.RF.
        }
        RAN ran = 4; // FAPService.{i}.CellConfig.CDMA2000.HRPD.RAN.
        message PCFConfig { // FAPService.{i}.CellConfig.CDMA2000.HRPD.PCFConfig.
          uint32    pcfpdsnhealth_monitor_interval           = 1  ; //  PDSN health check monitor interval in {{
          message PCFPerformanceStats { // FAPService.{i}.CellConfig.CDMA2000.HRPD.PCFConfig.PCFPerformanceStats.
            uint32    a10setup_failure_no_reason               = 1  ; //  Number of times the PCF was refused an A
            uint32    a10setup_failure_admin_prohibit          = 2  ; //  Number of times the PCF was refused an A
            uint32    a10setup_failure_insuff_resources        = 3  ; //  Number of times the PCF was refused  an 
            uint32    a10setup_failure_failed_auth             = 4  ; //  Number of times the PCF was refused an A
            uint32    a10setup_failure_id_mismatch             = 5  ; //  Number of times the PCF was refused an A
            uint32    a10setup_failure_malformed_req           = 6  ; //  Number of times the PCF was  refused an 
            uint32    a10setup_failure_unknown_pdsn            = 7  ; //  Number of times  the PCF was refused an 
            uint32    a10setup_failure_unsupp_vend_id          = 8  ; //  Number of times the PCF was refused an A
            uint32    total_a10closed_by_rnc                   = 9  ; //  Number of A10 closed by the FAP RNC    
            uint32    total_a10closed_by_pdsn                  = 10 ; //  Number of A10 closed by the PDSN       
            uint32    total_a10success_pages                   = 11 ; //  Numebr of  A10 Pages initiated by PCFsuc
            uint32    total_a10failed_pages                    = 12 ; //  Numebr of  A10 Pages initiated by PCF fa
            uint32    total_a10ingress_bytes                   = 13 ; //  Number of {{units}} received from the PD
            uint32    total_a10egress_bytes                    = 14 ; //  Number of {{units}} transmitted to the P
            uint32    a10reg_update_received                   = 15 ; //  Number of A10 Registration updates recei
            uint32    total_a10dropped_pages                   = 16 ; //  Number of  A10 Pages initiated by PCF dr
          }
          PCFPerformanceStats pcfperformance_stats = 2; // FAPService.{i}.CellConfig.CDMA2000.HRPD.PCFConfig.PCFPerformanceStats.
        }
        PCFConfig pcfconfig = 5; // FAPService.{i}.CellConfig.CDMA2000.HRPD.PCFConfig.
        message BatchPCFPDSN { // FAPService.{i}.CellConfig.CDMA2000.HRPD.BatchPCFPDSN.{i}.
          bool      enable                                   = 1  ; //  Enables or disables the {{object}} entry
          string    alias                                    = 2  ; //  {{datatype|expand}}        }        
          int32     batch_table_number                       = 3  ; //  The BatchTable Number should be given on
          string    batch_table_start_ipaddress              = 4  ; //  Start IP address of the range of PDSNs 
          string    batch_table_end_ipaddress                = 5  ; //  End IP address of the range of PDSNs   
          uint32    batch_table_security_parameter_index     = 6  ; //  Security Parameter Index to be used    
          bytes     batch_table_secret_key                   = 7  ; //  Secret key in 32-digit hexidecimal repre
          string    batch_table_iosversion                   = 8  ; //  HRPD IOS Version of this PDSN        N
          int32     batch_table_pdsnadmin_status             = 9  ; //  Administrative status of this PDSN.  0- 
          string    pdsntype                                 = 10 ; //  Indicates the PDSN type for this batch.
        }
        repeated BatchPCFPDSN batch_pcfpdsn = 6; // FAPService.{i}.CellConfig.CDMA2000.HRPD.BatchPCFPDSN.{i}.
        message PCFPDSN { // FAPService.{i}.CellConfig.CDMA2000.HRPD.PCFPDSN.{i}.
          bool      enable                                   = 1  ; //  Enables or disables the {{object}} entry
          string    alias                                    = 2  ; //  {{datatype|expand}}        }        
          int32     pdsnnumber                               = 3  ; //  Index of this PDSN object in the PCFPDSN
          uint32    security_parameter_index                 = 4  ; //  Security Parameter Index used        d
          bytes     security_key                             = 5  ; //  Secret key in 32-digit hexidecimal repre
          string    iosversion                               = 6  ; //  HRPD IOS Version of this PDSN        N
          int32     pdsnadmin_status                         = 7  ; //  Administrative status of this PDSN.  0- 
          uint32    pdsnhealth_status                        = 8  ; //  Reachability status of this PDSN.  0-unr
          string    pdsnipaddress                            = 9  ; //  IP address of the PDSN.        .     
          message A11SessionUpdateStats { // FAPService.{i}.CellConfig.CDMA2000.HRPD.PCFPDSN.{i}.A11SessionUpdateStats.
            int32     pdsnnumber_session_update_perf           = 1  ; //  The PDSN Number        r           
            string    pdsnipaddress_session_update_perf        = 2  ; //  The IP Address of the PDSN for which the
            uint32    a11session_update_received_pdsn          = 3  ; //  Number of A11 Session Updates received f
            uint32    a11session_update_accepted_pdsn          = 4  ; //  Number of A11 Session Updates accepted  
            uint32    a11session_update_extended_apipdsn       = 5  ; //  Number of A11 Session Updates received f
            uint32    a11session_update_for_unknown_psipdsn    = 6  ; //  Number of A11 Session Updates received f
            uint32    a11session_update_denied_idcheck_fail_pdsn = 7  ; //  Number of A11 Session Updates received f
            uint32    a11session_update_denied_auth_check_fail_pdsn = 8  ; //  Number of A11 Session Updates received f
            uint32    a11session_update_denied_reason_unspecified_pdsn = 9  ; //  Number of A11 Session Updates received f
            uint32    a11session_update_denied_poorly_formed_pdsn = 10 ; //  Number of A11 Session Updates received f
            uint32    a11session_update_denied_session_params_not_updated_pdsn = 11 ; //  Number of A11 Session Updates received f
            uint32    a11session_update_denied_qo_sprofile_id_not_supported_pdsn = 12 ; //  Number of A11 Session Updates received f
            uint32    a11session_update_denied_insufficient_resources_pdsn = 13 ; //  Number of A11 Session Updates received f
            uint32    a11session_update_denied_handoff_in_progress_pdsn = 14 ; //  Number of A11 Session Updates received f
          }
          A11SessionUpdateStats a11session_update_stats = 10; // FAPService.{i}.CellConfig.CDMA2000.HRPD.PCFPDSN.{i}.A11SessionUpdateStats.
          message A11RegUpdateStats { // FAPService.{i}.CellConfig.CDMA2000.HRPD.PCFPDSN.{i}.A11RegUpdateStats.
            int32     pdsnnumber_reg_update_perf               = 1  ; //  The PDSN Number        r        
            string    pdsnipaddress_reg_update_perf            = 2  ; //  The IP Address of the PDSN for which the
            uint32    a11reg_update_received_pdsn              = 3  ; //  Number of A10 Reg-update messages receie
            uint32    a11reg_update_idcheck_fail_pdsn          = 4  ; //  Number of A10 Reg-Update messages receie
            uint32    a11reg_update_auth_check_fail_pdsn       = 5  ; //  Number of A10 Reg-Update messages receiv
            uint32    a11reg_update_for_unknown_psipdsn        = 6  ; //  Number of A10 Reg-Update messages receiv
            uint32    a11reg_update_unspecified_reason_pdsn    = 7  ; //  Number of A10 Reg-Update messages receiv
            uint32    a11reg_update_ppp_timeout_pdsn           = 8  ; //  Number of A10 Reg-Update messages receiv
            uint32    a11reg_update_registration_timeout_pdsn  = 9  ; //  Number of A10 Reg-Update messages receiv
            uint32    a11reg_update_pdsnerror_pdsn             = 10 ; //  Number of A10 Reg-Update messages receiv
            uint32    a11reg_update_inter_pcfhandoff_pdsn      = 11 ; //  Number of A10 Reg-Update messages receiv
            uint32    a11reg_update_inter_pdsnhandoff_pdsn     = 12 ; //  Number of A10 Reg-Update messages receiv
            uint32    a11reg_update_pdsnoampintervention_pdsn  = 13 ; //  Number of A10 Reg-Update messages receiv
            uint32    a11reg_update_accounting_error_pdsn      = 14 ; //  Number of A10 Reg-Update messages receiv
            uint32    a11reg_update_user_failed_authentication_pdsn = 15 ; //  Number of A10 Reg-Update messages receiv
            uint32    a11reg_update_unknown_cause_code_pdsn    = 16 ; //  Number of A10 Reg-Update messages receiv
            uint32    a11reg_update_without_reason_code_pdsn   = 17 ; //  Number of A10 Reg-Update messages receiv
          }
          A11RegUpdateStats a11reg_update_stats = 11; // FAPService.{i}.CellConfig.CDMA2000.HRPD.PCFPDSN.{i}.A11RegUpdateStats.
          message AuxA10Stats { // FAPService.{i}.CellConfig.CDMA2000.HRPD.PCFPDSN.{i}.AuxA10Stats.
            int32     pdsnnumber_aux_a10perf                   = 1  ; //  The PDSN Number        r        
            string    pdsnipaddress_aux_a10perf                = 2  ; //  The IP Address of the PDSN for which the
            uint32    aux_a10connections_created_in_first_reg_req_pdsn = 3  ; //  Number of Auxillary A10 Connections Crea
            uint32    aux_a10connections_created_in_subsequent_reg_req_pdsn = 4  ; //  Number of Auxillary A10 Connections Crea
            uint32    aux_a10fwd_ip_flows_created_pdsn         = 5  ; //  Number of Forward IP Flows created  with
            uint32    aux_a10rev_ip_flows_created_pdsn         = 6  ; //  Number of Forward IP Flows created  with
            uint32    aux_a10ip_flow_accounting_reg_requests_pdsn = 7  ; //  Number of IP flow Accounting Reg Request
          }
          AuxA10Stats aux_a10stats = 12; // FAPService.{i}.CellConfig.CDMA2000.HRPD.PCFPDSN.{i}.AuxA10Stats.
          message PCFPDSNStats { // FAPService.{i}.CellConfig.CDMA2000.HRPD.PCFPDSN.{i}.PCFPDSNStats.
            uint32    a10setup_attempts_pdsn                   = 1  ; //  Number of attempts the PCF made to estab
            uint32    a10setup_successes_pdsn                  = 2  ; //  Number of times PCF succeeded in establi
            uint32    a10setup_blocks_pdsn                     = 3  ; //  Number of times PCF was blocked in estab
            uint32    a11reg_req_denied_id_mismatch_pdsn       = 4  ; //  Number ofA11 Registration Request denied
            uint32    a11reg_req_denied_unknown_pdsnpdsn       = 5  ; //  Number of A11 Registration Request denie
            uint32    a11reg_req_denied_no_reason_pdsn         = 6  ; //  Number of A11 Registration Request denie
            uint32    a11reg_req_denied_admin_prohibit_pdsn    = 7  ; //  Number of A11 Registration Request denie
            uint32    a11reg_req_denied_insuff_resources_pdsn  = 8  ; //  Number of A11 Registration Request denie
            uint32    a11reg_req_denied_failed_auth_pdsn       = 9  ; //  Number of A11 Registration Request denie
            uint32    a11reg_req_denied_malformed_req_pdsn     = 10 ; //  Number of A11 Registration Request denie
            uint32    a11reg_req_denied_unsupp_vend_id_pdsn    = 11 ; //  Number ofA11 Registration Request denied
            uint32    a11reg_req_denied_reverse_tunnel_unavailable_pdsn = 12 ; //  Number ofA11 Registration Request denied
            uint32    a11reg_req_denied_reverse_tunnel_tbit_not_set_pdsn = 13 ; //  Number ofA11 Registration Request denied
            uint32    a11reg_req_denied_unknown_error_code_pdsn = 14 ; //  Number of A11 Registration Request denie
            uint32    a10reg_req_for_registration_retransmissions_pdsn = 15 ; //  Number of A11 Registration Requests retr
            uint32    a10reg_req_for_re_registration_retransmissions_pdsn = 16 ; //  Number of A11 Registration Requests retr
            uint32    a10reg_req_for_release_retransmissions_pdsn = 17 ; //  Number of A11 Registration Requests retr
            int32     pdsnnumber_pdsnperf                      = 18 ; //  The PDSN Number        r        SNn
            string    pdsnip_address_pdsnperf                  = 19 ; //  The IP Address of the PDSN for which the
          }
          PCFPDSNStats pcfpdsnstats = 13; // FAPService.{i}.CellConfig.CDMA2000.HRPD.PCFPDSN.{i}.PCFPDSNStats.
        }
        repeated PCFPDSN pcfpdsn = 7; // FAPService.{i}.CellConfig.CDMA2000.HRPD.PCFPDSN.{i}.
        message Redirect { // FAPService.{i}.CellConfig.CDMA2000.HRPD.Redirect.
          uint32    redirect_channel_number                  = 1  ; //  The channel number set from ACS that the
          uint32    redirect_band_class                      = 2  ; //  The bandclass set from ACS that the FAP 
        }
        Redirect redirect = 8; // FAPService.{i}.CellConfig.CDMA2000.HRPD.Redirect.
        message CallControlStats { // FAPService.{i}.CellConfig.CDMA2000.HRPD.CallControlStats.
          uint32    num_session_setup_attempts               = 1  ; //  This parameter is a counter for the tota
          uint32    num_session_setup_successful             = 2  ; //  This parameter is a counter for the tota
          uint32    num_current_sessions_established         = 3  ; //  This parameter is a counter for the tota
          uint32    num_page_messages_to_at                  = 4  ; //  The number of times a Page Message was s
          uint32    num_pages_succeeded                      = 5  ; //  The total number of pages succeeded    
          uint32    num_connections_opened                   = 6  ; //  Total HRPD Connections Opened        d
          uint32    num_session_setups_failed_to_term_auth   = 7  ; //  This parameter is a counter for the tota
          uint32    num_forward_rlpbytes                     = 8  ; //  Number of HRPD packets(bytes) sent from 
          uint32    num_reverse_rlpbytes                     = 9  ; //  No. of HRPD packets(bytes) sent from AT 
          uint32    average_session_setup_time               = 10 ; //  This parameter maintains a record of the
          uint32    average_page_setup_time                  = 11 ; //  The average connection setup time in res
          uint32    num_conn_setups_aborted                  = 12 ; //  The number of connection setups that wer
          uint32    num_forward_pre_rlpdropped_pkts          = 13 ; //  Number of packets dropped at Pre-RLP que
        }
        CallControlStats call_control_stats = 9; // FAPService.{i}.CellConfig.CDMA2000.HRPD.CallControlStats.
        message QoSStats { // FAPService.{i}.CellConfig.CDMA2000.HRPD.QoSStats.
          uint32    num_qo_ssubscriber_profile_updates_rcvd  = 1  ; //  Number of subscriber QoS profile updates
          uint32    num_pdsnipflow_updates_msg_rcvd          = 2  ; //  Number of PDSN IP flow update messages r
          uint32    num_pdsnipflow_updates_msg_failed        = 3  ; //  Number of PDSN IP Flow updates messages 
          uint32    num_qo_ssetup_requests_received          = 4  ; //  Number of QoS setup requests received fr
          uint32    num_qo_ssetup_requests_accepted          = 5  ; //  Number of QoS setup requests received fr
          uint32    num_qo_ssetup_requests_rejected          = 6  ; //  Number of QoS setup requests from the AT
          uint32    num_reservation_on_requests_received     = 7  ; //  Number of ReservationOnRequest messages 
          uint32    num_reservation_on_requests_accepted     = 8  ; //  Number of ReservationOnRequest messages 
          uint32    num_reservation_on_requests_rejected     = 9  ; //  Number of ReservationOnRequest message r
          uint32    num_reservation_on_requests_failed       = 10 ; //  Number of ReservationOnRequest message r
          uint32    num_fwd_reservation_on_messages_sent     = 11 ; //  Number of times the FAP RNC sent a FwdRe
          uint32    num_rev_reservation_on_messages_sent     = 12 ; //  Number of times the FAP RNC sent a RevRe
          uint32    num_reservation_off_requests_received    = 13 ; //  Number of ReservationOffRequest message 
          uint32    num_reservation_off_requests_accepted    = 14 ; //  Number of ReservationOffRequest messages
          uint32    num_reservation_off_requests_rejected    = 15 ; //  Number of ReservationOffRequest messages
          uint32    num_fwd_reservation_off_messages_sent    = 16 ; //  Number of times the FAP RNC sent a FwdRe
          uint32    num_rev_reservation_off_messages_sent    = 17 ; //  Number of times the FAP RNC sent a RevRe
          uint32    num_qo_srelease_requests_received        = 18 ; //  Number of QoS release requests received 
          uint32    num_connection_close_initiated_no_ranrsr = 19 ; //  Number of times FAP RNC initiated a conn
        }
        QoSStats qo_sstats = 10; // FAPService.{i}.CellConfig.CDMA2000.HRPD.QoSStats.
        message RNCSigAppsStats { // FAPService.{i}.CellConfig.CDMA2000.HRPD.RNCSigAppsStats.
          uint32    cnum_page_requests                       = 1  ; //  Number of HRPD Page requests made after 
          uint32    snum_page_requests                       = 2  ; //  Number of HRPD Page requests made before
          uint32    snum_connection_setup_attempts           = 3  ; //  Number of HRPD Connection setups attempt
          uint32    cnum_connection_setup_attempts           = 4  ; //  Number of HRPD Connection setups attempt
          uint32    snum_connection_setup_success            = 5  ; //  Number of HRPD Connection setups succeed
          uint32    cnum_connection_setup_success            = 6  ; //  Number of HRPD Connection setups succeed
          uint32    snum_normal_connection_closes            = 7  ; //  The number of HRPD connections that were
          uint32    cnum_normal_connection_closes            = 8  ; //  The number of HRPD connections that were
          uint32    snum_total_connection_closes             = 9  ; //  The total number of HRPD connections clo
          uint32    cnum_total_connection_closes             = 10 ; //  The total number of HRPD connections clo
          uint32    snum_rfrelated_drops                     = 11 ; //  Number of HRPD connection close because 
          uint32    cnum_rfrelated_drops                     = 12 ; //  Number of HRPD connection close because 
          uint32    snum_page_responses                      = 13 ; //  Total number of successful responses to 
          uint32    cnum_page_responses                      = 14 ; //  Total number of successful responses to 
          uint32    snum_rfrelated_drops_rtclost             = 15 ; //  This statistic counts the number of time
          uint32    cnum_rfrelated_drops_rtclost             = 16 ; //  This statistic counts the number of time
          uint32    snum_rfrelated_drops_no_ftc              = 17 ; //  This statistic counts the number of HRPD
          uint32    cnum_rfrelated_drops_no_ftc              = 18 ; //  This statistic counts the number of HRPD
          uint32    snum_network_error_drops                 = 19 ; //  This statistic counts the number of HRPD
          uint32    cnum_network_error_drops                 = 20 ; //  This statistic counts the number of HRPD
          uint32    snum_network_error_drops_rncinternal     = 21 ; //  This statistic counts the number of open
          uint32    cnum_network_error_drops_rncinternal     = 22 ; //  This statistic counts the number of open
          uint32    snum_network_error_drops_rncexternal     = 23 ; //  This statistic counts the number of open
          uint32    cnum_network_error_drops_rncexternal     = 24 ; //  This statistic counts the number of open
          uint32    snum_network_error_drops_a10setup_fail   = 25 ; //  This statistic counts the number of open
          uint32    cnum_network_error_drops_a10setup_fail   = 26 ; //  This statistic counts the number of open
          uint32    snum_misc_drops_sector_down              = 27 ; //  This statistic counts the number of HRPD
          uint32    cnum_misc_drops_sector_down              = 28 ; //  This statistic counts the number of HRPD
          uint32    snum_misc_drops_internal_error           = 29 ; //  This statistic counts the number of HRPD
          uint32    cnum_misc_drops_internal_error           = 30 ; //  This statistic counts the number of HRPD
          uint32    cnum_misc_drops_state_mismatch           = 31 ; //  This statistic counts the number of HRPD
          uint32    snum_misc_drops_state_mismatch           = 32 ; //  This statistic counts the number of conn
          uint32    snum_misc_drops_due_to_rlp               = 33 ; //  This statistic counts the number of time
          uint32    cnum_misc_drops_due_to_rlp               = 34 ; //  This statistic counts the number of time
        }
        RNCSigAppsStats rncsig_apps_stats = 11; // FAPService.{i}.CellConfig.CDMA2000.HRPD.RNCSigAppsStats.
        message AccessAuthConfig { // FAPService.{i}.CellConfig.CDMA2000.HRPD.AccessAuthConfig.
          int32     a12access_authentication_enable          = 1  ; //  Flag to enable/Disable HRPD Access Authe
        }
        AccessAuthConfig access_auth_config = 12; // FAPService.{i}.CellConfig.CDMA2000.HRPD.AccessAuthConfig.
        message AccessAuthStats { // FAPService.{i}.CellConfig.CDMA2000.HRPD.AccessAuthStats.
          uint32    an_ppp_authentication_attempts_by_node   = 1  ; //  Number of AnPppAuthentications attempted
          uint32    a12requests_sent_from_node               = 2  ; //  Number of A12 Access Requests Sent from 
          uint32    a12rejects_received_by_node              = 3  ; //  Number of A12 Access Rejects received fr
          uint32    a12accepts_received_by_node              = 4  ; //  Number of A12 Access Accepts received by
          uint32    a12access_challenges_received_by_node    = 5  ; //  Number of A12 Access Challenges received
          uint32    a12retransmits_sent_from_node            = 6  ; //  Number of A12 Access Requests retransmit
          uint32    a12timeouts_events_for_node              = 7  ; //  Number of A12 Timeout events occurred at
          uint32    a12malformedresponse_received_by_node    = 8  ; //  Number of Malformed A12 Access Response 
          uint32    a12bad_authenticator_received_by_node    = 9  ; //  Number of A12 Access Response with Bad A
          uint32    a12unknown_type_received_by_node         = 10 ; //  Number of A12 Packet of unknown type  re
          uint32    a12unknown_pkt_received_by_node          = 11 ; //  Number of unknown A12  packets  received
          uint32    a12unknown_server_received_by_node       = 12 ; //  Number of  A12  packets  received from u
          uint32    a12other_failure_occurences_in_node      = 13 ; //  Number of  A12  packets  failed due to o
          uint32    a12by_pass_num_ats_with_unknown_mfr_code_by_node = 14 ; //  Number of ATs with UnknowMfrCode detecte
          uint32    a12tx_path_fail_due_to_an_ppp_error_by_node = 15 ; //  Number of times sending of A12 packet fa
          uint32    a12tx_path_fail_due_to_no_server_available_by_node = 16 ; //  Number of times sending of A12 packet fa
          uint32    a12tx_path_fail_due_to_internal_error_by_node = 17 ; //  Number of times sending of A12 packet fa
          uint32    a12tx_path_fail_due_to_no_packet_id_available_by_node = 18 ; //  Number of times sending of A12 packet fa
          uint32    a12tx_path_fail_due_to_transmit_error_by_node = 19 ; //  Number of times sending of A12 packet fa
          uint32    a12svr_timeouts_for_node                 = 20 ; //  Number of  A12 server timeouts happened 
          uint32    a12enh_ta_bypass_lcp_timeout_by_node     = 21 ; //  Number of LCP timeouts happened in the F
          uint32    a12enh_ta_bypass_chap_timeout_by_node    = 22 ; //  Number of CHAP timeouts happened in the 
          uint32    a12enh_ta_bypass_chap_invalid_by_node    = 23 ; //  Number of  CHAP Challenge response recei
          uint32    a12enh_ta_bypass_chap_nai_matches_a12bypass_list_by_node = 24 ; //  Number of  times the CHAP NAI received f
          uint32    a12session_ta_timeout_by_node            = 25 ; //  Number of times Session timeouts occurre
          uint32    access_auth_failed_due_to_session_close_total = 26 ; //  Number of times the Access Authenticaito
          uint32    access_auth_succeeded                    = 27 ; //  Number of times the Access Authenticaito
        }
        AccessAuthStats access_auth_stats = 13; // FAPService.{i}.CellConfig.CDMA2000.HRPD.AccessAuthStats.
      }
      HRPD hrpd = 3; // FAPService.{i}.CellConfig.CDMA2000.HRPD.
      message Beacon { // FAPService.{i}.CellConfig.CDMA2000.Beacon.
        string    beacon_admin_status                      = 1  ; //  Allows administrative control of beacon.
        string    beacon_oper_status                       = 2  ; //  Reports operational status of beacon.  
        bool      hrpdbeacon_enable                        = 3  ; //  If set to {{true}} the HRPD-specific bea
        uint32    period                                   = 4  ; //  Length and periodicity of the beacon fra
        string    max_fapbeacon_tx_power                   = 5  ; //  Maximum transmission power allowed on th
        int32     max_fapbeacon_tx_power_in_use            = 6  ; //  Maximum beacon transmission power measur
        int32     beacon_pch_pwr_percentage                = 7  ; //  Percentage of Max Sector Power Used By P
        string    max_hrpdbeacon_tx_power                  = 8  ; //  Maximum transmission power allowed on th
        int32     max_hrpdbeacon_tx_power_in_use           = 9  ; //  Maximum beacon transmission power measur
        int32     beacon_pilot_pwr_percentage              = 10 ; //  Percentage of Max Sector Power Used By P
        int32     beacon_sync_pwr_percentage               = 11 ; //  Percentage of Max Sector Power Used By S
        uint32    max_beacon_list_entries                  = 12 ; //  Maximum number of entries in the {{objec
        uint32    beacon_list_number_of_entries            = 13 ; //  {{numentries}}        }        eaco
        uint32    max_hrpdbeacon_list_entries              = 14 ; //  Maximum number of entries in the {{objec
        uint32    hrpdbeacon_list_number_of_entries        = 15 ; //  {{numentries}}        }        eaco
        message BeaconList { // FAPService.{i}.CellConfig.CDMA2000.Beacon.BeaconList.{i}.
          bool      enable                                   = 1  ; //  Enables or disables the {{object}} entry
          string    alias                                    = 2  ; //  {{datatype|expand}}        }        
          int32     beacon_index                             = 3  ; //  Instance identifier for this beacon inte
          uint32    offset                                   = 4  ; //  Offset from the start of the beacon fram
          uint32    duration                                 = 5  ; //  Duration of this beacon interval in {{un
          string    transmission_format                      = 6  ; //  Determines if this beacon interval shall
          int32     beacon_band_class                        = 7  ; //  Band class for this beacon interval.   
          uint32    beacon_channel_freq                      = 8  ; //  Channel number for this beacon interval.
          string    beacon_pnoffset                          = 9  ; //  {{list}} Each item is a pilot PN offset 
          int32     tx_power                                 = 10 ; //  TX power for the beacon interval (in {{u
          uint32    beacon_sid                               = 11 ; //  SID for this beacon interval.        .
          uint32    beacon_nid                               = 12 ; //  NID for this beacon interval.        .
          uint32    beacon_pzid                              = 13 ; //  PZID for this beacon interval.        
        }
        repeated BeaconList beacon_list = 16; // FAPService.{i}.CellConfig.CDMA2000.Beacon.BeaconList.{i}.
        message HRPDBeaconList { // FAPService.{i}.CellConfig.CDMA2000.Beacon.HRPDBeaconList.{i}.
          bool      enable                                   = 1  ; //  Enables or disables the {{object}} entry
          string    alias                                    = 2  ; //  {{datatype|expand}}        }        
          int32     beacon_index                             = 3  ; //  Instance identifier for this beacon inte
          uint32    ccoffset                                 = 4  ; //  Offset of the current beacon interval fr
          int32     offset                                   = 5  ; //  Start of beacon transmission with respec
          uint32    duration                                 = 6  ; //  Duration of the beacon transmission with
          uint32    num_cccycles                             = 7  ; //  Number of Control Channel Cycles this be
          uint32    beacon_band_class                        = 8  ; //  Band class for this beacon interval.   
          uint32    beacon_channel_freq                      = 9  ; //  Channel number for this beacon interval.
          string    beacon_pnoffset                          = 10 ; //  {{list}} Each item is a pilot PN offset 
          int32     tx_power                                 = 11 ; //  TX power for the beacon interval. If sel
        }
        repeated HRPDBeaconList hrpdbeacon_list = 17; // FAPService.{i}.CellConfig.CDMA2000.Beacon.HRPDBeaconList.{i}.
      }
      Beacon beacon = 4; // FAPService.{i}.CellConfig.CDMA2000.Beacon.
    }
    CDMA2000 cdma2000 = 3; // FAPService.{i}.CellConfig.CDMA2000.
  }
  CellConfig cell_config = 7; // FAPService.{i}.CellConfig.
  message REM { // FAPService.{i}.REM.
    message UMTS { // FAPService.{i}.REM.UMTS.
      message WCDMA { // FAPService.{i}.REM.UMTS.WCDMA.
        string    in_service_handling                      = 1  ; //  FAP REM behavior with respect to ongoing
        bool      scan_on_boot                             = 2  ; //  Enables or disables Radio Environment Me
        bool      scan_periodically                        = 3  ; //  Enable Periodic Radio Environment Measur
        uint32    periodic_interval                        = 4  ; //  When {{param|ScanPeriodically}} is {{tru
        string    periodic_time                            = 5  ; //  An absolute time reference in UTC to det
        string    remplmnlist                              = 6  ; //  {{list}} Each item is a PLMN ID to measu
        string    remband_list                             = 7  ; //  {{list}} Each item is a UMTS Band to mea
        string    uarfcndllist                             = 8  ; //  {{list}} Each entry is a UARFCN in the D
        uint32    scan_timeout                             = 9  ; //  Specifies the time-out value in {{units}
        string    scan_status                              = 10 ; //  Indicates the current status of this sca
        string    error_details                            = 11 ; //  Provides more detail when the {{param|Sc
        string    last_scan_time                           = 12 ; //  The  time of the last UMTS system radio 
        uint32    max_cell_entries                         = 13 ; //  The maximum number of entries available 
        uint32    cell_number_of_entries                   = 14 ; //  {{numentries}}        }        eaco
        message Cell { // FAPService.{i}.REM.UMTS.WCDMA.Cell.{i}.
          message RF { // FAPService.{i}.REM.UMTS.WCDMA.Cell.{i}.RF.
            uint32    uarfcndl                                 = 1  ; //  The UTRA Absolute Radio Frequency Channe
            int32     cpichrscp                                = 2  ; //  Received signal level in {{units}} of th
            int32     cpichec_no                               = 3  ; //  Measured EcNo. (energy per chip to inter
            int32     rssi                                     = 4  ; //  This measurement is for Inter-frequency 
            uint32    primary_scrambling_code                  = 5  ; //  Primary scrambling code.        .    
          }
          RF rf = 1; // FAPService.{i}.REM.UMTS.WCDMA.Cell.{i}.RF.
          message BCCH { // FAPService.{i}.REM.UMTS.WCDMA.Cell.{i}.BCCH.
            string    plmntype                                 = 1  ; //  Type of Public Land Mobile Network (PLMN
            string    plmnid                                   = 2  ; //  PLMN ID consists of Mobile Country Code 
            uint32    lac                                      = 3  ; //  Location Area Code (LAC) as defined in S
            uint32    rac                                      = 4  ; //  Routing Area Code (RAC) as defined in SI
            uint32    cell_id                                  = 5  ; //  Cell Identity as defined in SIB3 {{bibre
            int32     pcpichtx_power                           = 6  ; //  Primary Common Pilot Channel (CPICH) pow
            bool      csgindicator                             = 7  ; //  The CSG-indicator Information Element (I
            uint32    csgid                                    = 8  ; //  Defines the Closed Subscriber Group of t
            string    uarfcndllist                             = 9  ; //  {{list}} Each item is a UTRA Absolute Ra
            message CSGPSCSplitInfo { // FAPService.{i}.REM.UMTS.WCDMA.Cell.{i}.BCCH.CSGPSCSplitInfo.
              uint32    start_pscrange1coefficient               = 1  ; //  The value of this Information Element (I
              string    number_of_pscs                           = 2  ; //  This Information Element (IE) specifies 
              uint32    pscrange2offset                          = 3  ; //  If this Information Element (IE) is incl
            }
            CSGPSCSplitInfo csgpscsplit_info = 10; // FAPService.{i}.REM.UMTS.WCDMA.Cell.{i}.BCCH.CSGPSCSplitInfo.
            message ReferencePosition { // FAPService.{i}.REM.UMTS.WCDMA.Cell.{i}.BCCH.ReferencePosition.
              int32     latitude                                 = 1  ; //  This parameter specifies the latitude of
              int32     longitude                                = 2  ; //  This parameter specifies the longitude o
              uint32    uncertainty_semi_major                   = 3  ; //  The uncertainty r is derived from the "u
              uint32    uncertainty_semi_minor                   = 4  ; //  The uncertainty r is derived from the "u
              uint32    orientation_of_major_axis                = 5  ; //  The Information Element (IE) value 'N' i
              uint32    confidence                               = 6  ; //  The degree of confidence in the ellipsoi
            }
            ReferencePosition reference_position = 11; // FAPService.{i}.REM.UMTS.WCDMA.Cell.{i}.BCCH.ReferencePosition.
          }
          BCCH bcch = 2; // FAPService.{i}.REM.UMTS.WCDMA.Cell.{i}.BCCH.
        }
        repeated Cell cell = 15; // FAPService.{i}.REM.UMTS.WCDMA.Cell.{i}.
      }
      WCDMA wcdma = 1; // FAPService.{i}.REM.UMTS.WCDMA.
      message GSM { // FAPService.{i}.REM.UMTS.GSM.
        string    in_service_handling                      = 1  ; //  FAP REM behavior with respect to ongoing
        bool      scan_on_boot                             = 2  ; //  Enables or disables Radio Environment Me
        bool      scan_periodically                        = 3  ; //  Enable Periodic Radio Environment Measur
        uint32    periodic_interval                        = 4  ; //  When {{param|ScanPeriodically}} is {{tru
        string    periodic_time                            = 5  ; //  An absolute time reference in UTC to det
        string    remplmnlist                              = 6  ; //  {{list}} Each item is a PLMNID.        
        string    remband_list                             = 7  ; //  {{list}} Each item is a GSM Band to meas
        string    arfcnlist                                = 8  ; //  {{list}} Each item is a GSM ARFCN to mea
        uint32    scan_timeout                             = 9  ; //  Specifies the time-out value in {{units}
        string    scan_status                              = 10 ; //  Indicates the current status of this sca
        string    error_details                            = 11 ; //  Provides more detail when the {{param|Sc
        string    last_scan_time                           = 12 ; //  The time of the last GSM radio environme
        uint32    max_cell_entries                         = 13 ; //  The maximum number of entries allowed in
        uint32    cell_number_of_entries                   = 14 ; //  {{numentries}}        }            
        message Cell { // FAPService.{i}.REM.UMTS.GSM.Cell.{i}.
          string    band_indicator                           = 1  ; //  Indicates how to interpret the BCCH ARFC
          uint32    arfcn                                    = 2  ; //  Absolute Radio Frequency Channel Number 
          uint32    bsic                                     = 3  ; //  Base Station Identity Code {{bibref|3GPP
          string    plmnid                                   = 4  ; //  PLMN ID consists of Mobile Country Code 
          uint32    lac                                      = 5  ; //  Location Area Code (LAC) as defined in S
          uint32    rac                                      = 6  ; //  Routing Area Code (RAC) consists of up t
          uint32    ci                                       = 7  ; //  Cell Identity. {{bibref|3GPP-TS.25.331|S
          int32     rssi                                     = 8  ; //  Received signal level in {{units}} of th
        }
        repeated Cell cell = 15; // FAPService.{i}.REM.UMTS.GSM.Cell.{i}.
      }
      GSM gsm = 2; // FAPService.{i}.REM.UMTS.GSM.
    }
    UMTS umts = 1; // FAPService.{i}.REM.UMTS.
    message LTE { // FAPService.{i}.REM.LTE.
      string    in_service_handling                      = 1  ; //  FAP REM behavior with respect to ongoing
      bool      scan_on_boot                             = 2  ; //  Enables or disables Radio Environment Me
      bool      scan_periodically                        = 3  ; //  Enable Periodic Radio Environment Measur
      uint32    periodic_interval                        = 4  ; //  When {{param|ScanPeriodically}} is {{tru
      string    periodic_time                            = 5  ; //  An absolute time reference in UTC to det
      string    remplmnlist                              = 6  ; //  {{list}} Each item is a PLMN ID to measu
      string    remband_list                             = 7  ; //  {{list}} Each item is a LTE Band to meas
      string    eutracarrier_arfcndllist                 = 8  ; //  {{list}} Each entry is a EUTRA ARFCN in 
      uint32    scan_timeout                             = 9  ; //  Specifies the time-out value in {{units}
      string    scan_status                              = 10 ; //  Indicates the current status of this sca
      string    error_details                            = 11 ; //  Provides more detail when the {{param|Sc
      string    last_scan_time                           = 12 ; //  The  time of the last LTE system radio e
      uint32    max_cell_entries                         = 13 ; //  The maximum number of entries available 
      uint32    cell_number_of_entries                   = 14 ; //  {{numentries}}        }        +
      uint32    max_carrier_meas_entries                 = 15 ; //  The maximum number of entries available 
      uint32    carrier_meas_number_of_entries           = 16 ; //  {{numentries}}        }        +
      message Cell { // FAPService.{i}.REM.LTE.Cell.{i}.
        message RF { // FAPService.{i}.REM.LTE.Cell.{i}.RF.
          uint32    eutracarrier_arfcn                       = 1  ; //  Indicates the ARFCN of this carrier freq
          uint32    phy_cell_id                              = 2  ; //  Physical cell ID of the detected EUTRAN 
          int32     rsrp                                     = 3  ; //  Received RSRP level of the detected EUTR
          int32     rsrq                                     = 4  ; //  Received RSRQ level of the detected EUTR
          int32     rssi                                     = 5  ; //  E-UTRA Carrier Received Signal Strength 
        }
        RF rf = 1; // FAPService.{i}.REM.LTE.Cell.{i}.RF.
        message BCCH { // FAPService.{i}.REM.LTE.Cell.{i}.BCCH.
          uint32    dlbandwidth                              = 1  ; //  Downlink transmission bandwidth, specifi
          uint32    ulbandwidth                              = 2  ; //  Uplink transmission bandwidth, specified
          int32     rstx_power                               = 3  ; //  The downlink reference-signal transmit p
          uint32    tac                                      = 4  ; //  Tracking Area Code that is common for al
          uint32    cell_id                                  = 5  ; //  Defines the cell identify, defines as a 
          bool      cell_barred                              = 6  ; //  Indicates whether the cell is barred or 
          bool      csgindication                            = 7  ; //  Indicates whether CSG is used in this ce
          uint32    csgidentity                              = 8  ; //  Defines the CSG ID value if {{param|CSGI
          uint32    max_plmnlist_entries                     = 9  ; //  The maximum number of entries available 
          uint32    plmnlist_number_of_entries               = 10 ; //  {{numentries}}        }        .
          message PLMNList { // FAPService.{i}.REM.LTE.Cell.{i}.BCCH.PLMNList.{i}.
            string    plmnid                                   = 1  ; //  PLMN ID consists of Mobile Country Code 
            bool      cell_reserved_for_operator_use           = 2  ; //  Indicates whether the cell is reserved f
          }
          repeated PLMNList plmnlist = 11; // FAPService.{i}.REM.LTE.Cell.{i}.BCCH.PLMNList.{i}.
        }
        BCCH bcch = 2; // FAPService.{i}.REM.LTE.Cell.{i}.BCCH.
      }
      repeated Cell cell = 17; // FAPService.{i}.REM.LTE.Cell.{i}.
      message CarrierMeas { // FAPService.{i}.REM.LTE.CarrierMeas.{i}.
        bool      enable                                   = 1  ; //  Enables or disables the CarrierMeas entr
        string    alias                                    = 2  ; //  {{datatype|expand}}        }        
        int32     carrier_arfcndl                          = 3  ; //  Lower bound of the EUTRA ARFCN as specif
        int32     carrier_ch_width                         = 4  ; //  Number of {{units}} in DL direction, as 
        int32     carrier_rssi                             = 5  ; //  Received Signal Strength Indicator (RSSI
      }
      repeated CarrierMeas carrier_meas = 18; // FAPService.{i}.REM.LTE.CarrierMeas.{i}.
    }
    LTE lte = 2; // FAPService.{i}.REM.LTE.
    message CDMA2000 { // FAPService.{i}.REM.CDMA2000.
      string    in_service_handling                      = 1  ; //  FAP REM behavior with respect to ongoing
      bool      scan_on_boot                             = 2  ; //  Enables or disables Radio Environment Me
      bool      scan_now                                 = 3  ; //  Directs FAP to perform radio environment
      uint32    return_timer                             = 4  ; //  Time  in {{units}} within which the acti
      bool      scan_periodically                        = 5  ; //  Enables periodic reporting of radio envi
      uint32    periodic_interval                        = 6  ; //  When {{param|ScanPeriodically}} is {{tru
      string    periodic_time                            = 7  ; //  An absolute time reference in UTC to det
      string    report_overheads                         = 8  ; //  If {{param}} is set to {{enum|All}}, the
      uint32    scan_timeout                             = 9  ; //  Specifies the time-out value in {{units}
      string    scan_status                              = 10 ; //  Indicates the current status of this sca
      string    error_details                            = 11 ; //  Provides more detail when the {{param|Sc
      string    last_scan_time                           = 12 ; //  The time of the last system radio enviro
      message OneX { // FAPService.{i}.REM.CDMA2000.OneX.
        uint32    max_cell_entries                         = 1  ; //  The maximum number of entries available 
        uint32    cell_number_of_entries                   = 2  ; //  {{numentries}}        }        i}.
        uint32    max_channel_entries                      = 3  ; //  The maximum number of entries available 
        uint32    channel_number_of_entries                = 4  ; //  {{numentries}}        }        i}.
        message Channel { // FAPService.{i}.REM.CDMA2000.OneX.Channel.{i}.
          bool      enable                                   = 1  ; //  Enables or disables the {{object}} entry
          string    alias                                    = 2  ; //  {{datatype|expand}}        }        
          uint32    sniffing_band_class                      = 3  ; //  Config parameter to set band class. Refe
          uint32    sniffing_channel_number                  = 4  ; //  The Radio Frequency Channel Number (RFCN
          string    pnlist                                   = 5  ; //  {{list}} Each item is a (single value) P
        }
        repeated Channel channel = 5; // FAPService.{i}.REM.CDMA2000.OneX.Channel.{i}.
        message Cell { // FAPService.{i}.REM.CDMA2000.OneX.Cell.{i}.
          message RF { // FAPService.{i}.REM.CDMA2000.OneX.Cell.{i}.RF.
            int32     band                                     = 1  ; //  CDMA band for the reported cell.       
            uint32    rfcnfl                                   = 2  ; //  The Radio Frequency Channel Number (RFCN
            int32     io                                       = 3  ; //  The total received power spectral densit
            uint32    pilot_pn                                 = 4  ; //  Pilot PN Offset (in units of {{units}}).
            uint32    pilot_pnphase                            = 5  ; //  Pilot PN phase in {{units}}.        .
            int32     pilot_strength_ecp                       = 6  ; //  The strength estimate of the received pi
            int32     pilot_strength_ecp_io                    = 7  ; //  The strength estimate of the received pi
            bool      overheads_available                      = 8  ; //  If set to {{true}}, the overhead message
          }
          RF rf = 1; // FAPService.{i}.REM.CDMA2000.OneX.Cell.{i}.RF.
          message ControlChannel { // FAPService.{i}.REM.CDMA2000.OneX.Cell.{i}.ControlChannel.
            int32     sid                                      = 1  ; //  System identification. Refer to {{bibref
            int32     nid                                      = 2  ; //  Network identification. Refer to {{bibre
            int32     regzone                                  = 3  ; //  Registration Zone. Refer to {{bibref|3GP
            int32     baselat                                  = 4  ; //  Basestation latitude. Refer to {{bibref|
            int32     baselong                                 = 5  ; //  Basestation longtitude. Refer to {{bibre
            int32     mcc                                      = 6  ; //  Mobile Country Code. Refer to {{bibref|3
            int32     mncimsi1112                              = 7  ; //  the 11th and 12th digits of IMSI, i.e., 
            int32     baseid                                   = 8  ; //  Basestation identification. Refer to {{b
            string    apid                                     = 9  ; //  Access Point Identification. Set to empt
            int32     apidmask                                 = 10 ; //  Access Point Identification Mask. Set to
            string    apidtext                                 = 11 ; //  Access Point Identification Text. Set to
          }
          ControlChannel control_channel = 2; // FAPService.{i}.REM.CDMA2000.OneX.Cell.{i}.ControlChannel.
        }
        repeated Cell cell = 6; // FAPService.{i}.REM.CDMA2000.OneX.Cell.{i}.
      }
      OneX one_x = 13; // FAPService.{i}.REM.CDMA2000.OneX.
      message HRPD { // FAPService.{i}.REM.CDMA2000.HRPD.
        uint32    max_cell_entries                         = 1  ; //  The maximum number of entries available 
        uint32    cell_number_of_entries                   = 2  ; //  {{numentries}}        }        +
        uint32    max_channel_entries                      = 3  ; //  The maximum number of entries in {{objec
        uint32    channel_number_of_entries                = 4  ; //  {{numentries}}        }        +
        message Channel { // FAPService.{i}.REM.CDMA2000.HRPD.Channel.{i}.
          bool      enable                                   = 1  ; //  Enables or disables the {{object}} entry
          string    alias                                    = 2  ; //  {{datatype|expand}}        }        
          uint32    sniffing_band_class                      = 3  ; //  Config parameter to set band class.  Ref
          uint32    sniffing_channel_number                  = 4  ; //  The Radio Frequency Channel Number (RFCN
          string    pnlist                                   = 5  ; //  {{list}} Each item is a (single value) P
        }
        repeated Channel channel = 5; // FAPService.{i}.REM.CDMA2000.HRPD.Channel.{i}.
        message Cell { // FAPService.{i}.REM.CDMA2000.HRPD.Cell.{i}.
          message RF { // FAPService.{i}.REM.CDMA2000.HRPD.Cell.{i}.RF.
            int32     band                                     = 1  ; //  CDMA band for the reported cell.       
            uint32    rfcnfl                                   = 2  ; //  The Radio Frequency Channel Number (RFCN
            int32     io                                       = 3  ; //  The total received power spectral densit
            uint32    pilot_pn                                 = 4  ; //  Pilot PN Offset (in units of {{units}}).
            uint32    pilot_pnphase                            = 5  ; //  Pilot PN phase in {{units}}.        .
            int32     pilot_strength_ecp                       = 6  ; //  The strength estimate of the received pi
            int32     pilot_strength_ecp_io                    = 7  ; //  The strength estimate of the received pi
            bool      overheads_available                      = 8  ; //  If set to {{true}}, the overhead message
          }
          RF rf = 1; // FAPService.{i}.REM.CDMA2000.HRPD.Cell.{i}.RF.
          message ControlChannel { // FAPService.{i}.REM.CDMA2000.HRPD.Cell.{i}.ControlChannel.
            int32     color_code                               = 1  ; //  The color code of the measured sector as
            bytes     sector_id                                = 2  ; //  The sector ID of the measured sector as 
            int32     subnet_mask                              = 3  ; //  The length of the subnet mask in {{units
            int32     country_code                             = 4  ; //  The country code of the measured sector 
            int32     latitude                                 = 5  ; //  The reported lattitude of the cell in un
            int32     longitude                                = 6  ; //  The reported longitude of the cell in un
          }
          ControlChannel control_channel = 2; // FAPService.{i}.REM.CDMA2000.HRPD.Cell.{i}.ControlChannel.
        }
        repeated Cell cell = 6; // FAPService.{i}.REM.CDMA2000.HRPD.Cell.{i}.
      }
      HRPD hrpd = 14; // FAPService.{i}.REM.CDMA2000.HRPD.
      message MacroTiming { // FAPService.{i}.REM.CDMA2000.MacroTiming.
        uint32    admin_state                              = 1  ; //  This is the Admin State of Macro Timing.
        uint32    tracking_channel_number                  = 2  ; //  Channel number of Macro Base Station cur
        uint32    tracking_band_class                      = 3  ; //  BandClass of Macro Base Station currentl
        string    tracking_pnoffset                        = 4  ; //  {{list}} Each item is a (single value) P
        uint32    timing_source                            = 5  ; //  This parameter indicates the timing sour
        uint32    channel_number_of_entries                = 6  ; //  {{numentries}}        }        ing.
        message Channel { // FAPService.{i}.REM.CDMA2000.MacroTiming.Channel.{i}.
          bool      enable                                   = 1  ; //  Enables or disables the {{object}} entry
          string    alias                                    = 2  ; //  {{datatype|expand}}        }        
          uint32    air_interface_type                       = 3  ; //  Air interface type of the configured Ban
          uint32    band_class                               = 4  ; //  Bandclass of the Macro timing channel. 
          uint32    channel_number                           = 5  ; //  Macro timing acquisition channel.      
          uint32    priority                                 = 6  ; //  Priority of the channle to use for acqui
          string    pnlist                                   = 7  ; //  {{list}} Each item is a (single value) P
        }
        repeated Channel channel = 7; // FAPService.{i}.REM.CDMA2000.MacroTiming.Channel.{i}.
      }
      MacroTiming macro_timing = 15; // FAPService.{i}.REM.CDMA2000.MacroTiming.
    }
    CDMA2000 cdma2000 = 3; // FAPService.{i}.REM.CDMA2000.
  }
  REM rem = 8; // FAPService.{i}.REM.
  message Transport { // FAPService.{i}.Transport.
    message SIP { // FAPService.{i}.Transport.SIP.
      bool      enable                                   = 1  ; //  Enables or disables the whole SIP object
      message FCS { // FAPService.{i}.Transport.SIP.FCS.
        string    fcsuri                                   = 1  ; //  The request URI for MESSAGE method sent 
        string    out_going_proxy_uri                      = 2  ; //  The request URI for Outgoing Proxy. The 
        string    paccess_net_info_header                  = 3  ; //  This string will be populated as the val
        string    realm                                    = 4  ; //  The FQDN or IP Address representing the 
        string    impu                                     = 5  ; //  The "IP Multimedia Public User" (IMPU) I
        string    impi                                     = 6  ; //  The "IP Multimedia Private Identity" (IM
        string    sippassword                              = 7  ; //  Password to Authenticate the IMS core. 
        string    sipauth_capability                       = 8  ; //  Represents the SIP authentication mechan
        string    sipauth_method                           = 9  ; //  Represents the authentication method use
        uint32    siplocal_port                            = 10 ; //  Local port number for initiating SIP tra
        uint32    rtpport_low_limit                        = 11 ; //  The low limit of port number for origina
        uint32    rtpport_high_limit                       = 12 ; //  The high limit of port number for origin
        uint32    sipreg_expiry                            = 13 ; //  SIP registration expiry value, as define
        uint32    sipsession_expiry                        = 14 ; //  SIP session timer expiry value, in {{uni
        string    emergency_numbers_list                   = 15 ; //  Indicates the dialed digit pattern match
        uint32    timer_t1                                 = 16 ; //  Value of SIP timer T1, in {{units}}, as 
        uint32    timer_t2                                 = 17 ; //  Value of SIP timer T2, in {{units}}, as 
        uint32    timer_t4                                 = 18 ; //  Value of SIP timer T4, in {{units}}, as 
        uint32    t3210                                    = 19 ; //  This value specifies how much time to wa
      }
      FCS fcs = 2; // FAPService.{i}.Transport.SIP.FCS.
    }
    SIP sip = 1; // FAPService.{i}.Transport.SIP.
    message SCTP { // FAPService.{i}.Transport.SCTP.
      bool      enable                                   = 1  ; //  Enables or disables the whole SCTP objec
      uint32    hbinterval                               = 2  ; //  Heartbeat interval in {{units}}.       
      uint32    max_association_retransmits              = 3  ; //  Maximum number of consecutive retransmis
      uint32    max_init_retransmits                     = 4  ; //  Number of retransmission per connection-
      uint32    max_path_retransmits                     = 5  ; //  Maximum retransmission per destination a
      uint32    rtoinitial                               = 6  ; //  Initial value for Retransmit timeout in 
      uint32    rtomax                                   = 7  ; //  Maximum value for Retransmit timeout in 
      uint32    rtomin                                   = 8  ; //  Minimum value for Retransmit timeout in 
      uint32    val_cookie_life                          = 9  ; //  Valid cookie life in the 4-way start-up 
      uint32    out_of_blues                             = 10 ; //  The number of correctly formed SCTP pack
      uint32    checksum_errors                          = 11 ; //  The number of SCTP packets received with
      uint32    out_ctrl_chunks                          = 12 ; //  The number of SCTP control chunks sent (
      uint32    out_order_chunks                         = 13 ; //  The number of SCTP ordered data chunks s
      uint32    out_unorder_chunks                       = 14 ; //  The number of SCTP unordered chunks (dat
      uint32    in_ctrl_chunks                           = 15 ; //  The number of SCTP control chunks receiv
      uint32    in_order_chunks                          = 16 ; //  The number of SCTP ordered data chunks r
      uint32    in_unorder_chunks                        = 17 ; //  The number of SCTP unordered chunks (dat
      uint32    frag_usr_msgs                            = 18 ; //  The number of user messages that have be
      uint32    reasm_usr_msgs                           = 19 ; //  The number of user messages that have be
      uint32    out_sctppacks                            = 20 ; //  The number of SCTP packets sent. Retrans
      uint32    in_sctppacks                             = 21 ; //  The number of SCTP packets received. Dup
      string    discontinuity                            = 22 ; //  The time of the last discontinuity.    
      uint32    assoc_number_of_entries                  = 23 ; //  {{numentries}}        }        ing.
      message Assoc { // FAPService.{i}.Transport.SCTP.Assoc.{i}.
        string    status                                   = 1  ; //  The status of this SCTP association entr
        string    primary_peer_address                     = 2  ; //  The primary IP address of the peer SCTP 
        uint32    local_port                               = 3  ; //  The local SCTP port number used for this
        uint32    in_streams                               = 4  ; //  The number of Inbound Streams according 
        uint32    out_streams                              = 5  ; //  The number of Outbound Streams according
        string    start_time                               = 6  ; //  The start Time for the present SCTP asso
        string    discontinuity                            = 7  ; //  The time of the last discontinuity.    
      }
      repeated Assoc assoc = 24; // FAPService.{i}.Transport.SCTP.Assoc.{i}.
    }
    SCTP sctp = 2; // FAPService.{i}.Transport.SCTP.
    message RealTime { // FAPService.{i}.Transport.RealTime.
      bool      rtcpenable                               = 1  ; //  Enable or disable RTCP.        .     
      uint32    sent_packets                             = 2  ; //  The number of sent RTP packets.        
      uint32    rcv_packets                              = 3  ; //  The number of received RTP packets.    
      uint32    bytes_sent                               = 4  ; //  Total number of RTP payload bytes sent.
      uint32    bytes_received                           = 5  ; //  Total number of RTP payload bytes receiv
      message Perf { // FAPService.{i}.Transport.RealTime.Perf.
        uint32    lost_rcv_packets                         = 1  ; //  The number of Lost RTP packets in recept
        uint32    lost_far_end_packets                     = 2  ; //  The number of Far End Lost RTP packets.
        uint32    overruns                                 = 3  ; //  Total number of times the receive jitter
        uint32    underruns                                = 4  ; //  Total number of times the receive jitter
        uint32    mean_rtt                                 = 5  ; //  The mean Round Trip Time in {{units}} as
        uint32    max_rtt                                  = 6  ; //  The maximum Round Trip Time in {{units}}
        uint32    mean_receive_jitter                      = 7  ; //  The mean receive jitter in {{units}} as 
        uint32    max_receive_jitter                       = 8  ; //  The maximum receive jitter in {{units}} 
        uint32    mean_far_end_jitter                      = 9  ; //  The mean far end jitter in {{units}} as 
        uint32    max_far_end_jitter                       = 10 ; //  The maximum far end jitter in {{units}} 
      }
      Perf perf = 6; // FAPService.{i}.Transport.RealTime.Perf.
    }
    RealTime real_time = 3; // FAPService.{i}.Transport.RealTime.
    message Packet { // FAPService.{i}.Transport.Packet.
      uint32    echo_interval                            = 1  ; //  Echo interval in {{units}}.  An Echo int
      uint32    sent_packets                             = 2  ; //  The number of sent GTP-U packets.      
      uint32    rcv_packets                              = 3  ; //  The number of received GTP-U packets.  
    }
    Packet packet = 4; // FAPService.{i}.Transport.Packet.
    message Security { // FAPService.{i}.Transport.Security.
      uint32    secret_number_of_entries                 = 1  ; //  {{numentries}}        }        rf.
      message Secret { // FAPService.{i}.Transport.Security.Secret.{i}.
        bool      enable                                   = 1  ; //  Enable or disable this Shared Secret ent
        string    type                                     = 2  ; //  The type of this Shared Secret entry.  
        string    status                                   = 3  ; //  The status of this Shared Secret entry.
        string    uicccard_id                              = 4  ; //  The UICC Card Identifier (UICCID), only 
      }
      repeated Secret secret = 2; // FAPService.{i}.Transport.Security.Secret.{i}.
    }
    Security security = 5; // FAPService.{i}.Transport.Security.
  }
  Transport transport = 9; // FAPService.{i}.Transport.
}

message FAPRequest { int32 unused = 1; }

message FAPReply { int32 unused = 1; }

message X_012345_Message { int32 unused = 1;  } // Vendor extensions X_{OUI}_{NameOfNewThing}

service FAP {
  rpc GetFAPService(FAPRequest) returns (tr196.FAPService) {}
  rpc SetFAPService(tr196.FAPService) returns (FAPReply) {}

  rpc GetCapabilities(FAPRequest) returns (tr196.FAPService.Capabilities) {}
  rpc SetCapabilities(tr196.FAPService.Capabilities) returns (FAPReply) {}

  rpc GetUMTS(FAPRequest) returns (tr196.FAPService.Capabilities.UMTS) {}
  rpc SetUMTS(tr196.FAPService.Capabilities.UMTS) returns (FAPReply) {}

  rpc GetSelfConfig(FAPRequest) returns (tr196.FAPService.Capabilities.UMTS.SelfConfig) {}
  rpc SetSelfConfig(tr196.FAPService.Capabilities.UMTS.SelfConfig) returns (FAPReply) {}

  rpc GetLTE(FAPRequest) returns (tr196.FAPService.Capabilities.LTE) {}
  rpc SetLTE(tr196.FAPService.Capabilities.LTE) returns (FAPReply) {}

  rpc GetCDMA2000(FAPRequest) returns (tr196.FAPService.Capabilities.CDMA2000) {}
  rpc SetCDMA2000(tr196.FAPService.Capabilities.CDMA2000) returns (FAPReply) {}

  rpc GetOneX(FAPRequest) returns (tr196.FAPService.Capabilities.CDMA2000.OneX) {}
  rpc SetOneX(tr196.FAPService.Capabilities.CDMA2000.OneX) returns (FAPReply) {}

  //?? rpc GetSelfConfig(FAPRequest) returns (tr196.FAPService.Capabilities.CDMA2000.OneX.SelfConfig) {}
  //?? rpc SetSelfConfig(tr196.FAPService.Capabilities.CDMA2000.OneX.SelfConfig) returns (FAPReply) {}

  rpc GetHRPD(FAPRequest) returns (tr196.FAPService.Capabilities.CDMA2000.HRPD) {}
  rpc SetHRPD(tr196.FAPService.Capabilities.CDMA2000.HRPD) returns (FAPReply) {}

  //?? rpc GetSelfConfig(FAPRequest) returns (tr196.FAPService.Capabilities.CDMA2000.HRPD.SelfConfig) {}
  //?? rpc SetSelfConfig(tr196.FAPService.Capabilities.CDMA2000.HRPD.SelfConfig) returns (FAPReply) {}

  rpc GetFAPControl(FAPRequest) returns (tr196.FAPService.FAPControl) {}
  rpc SetFAPControl(tr196.FAPService.FAPControl) returns (FAPReply) {}

  //?? rpc GetUMTS(FAPRequest) returns (tr196.FAPService.FAPControl.UMTS) {}
  //?? rpc SetUMTS(tr196.FAPService.FAPControl.UMTS) returns (FAPReply) {}

  //?? rpc GetSelfConfig(FAPRequest) returns (tr196.FAPService.FAPControl.UMTS.SelfConfig) {}
  //?? rpc SetSelfConfig(tr196.FAPService.FAPControl.UMTS.SelfConfig) returns (FAPReply) {}

  rpc GetGateway(FAPRequest) returns (tr196.FAPService.FAPControl.UMTS.Gateway) {}
  rpc SetGateway(tr196.FAPService.FAPControl.UMTS.Gateway) returns (FAPReply) {}

  //?? rpc GetLTE(FAPRequest) returns (tr196.FAPService.FAPControl.LTE) {}
  //?? rpc SetLTE(tr196.FAPService.FAPControl.LTE) returns (FAPReply) {}

  //?? rpc GetGateway(FAPRequest) returns (tr196.FAPService.FAPControl.LTE.Gateway) {}
  //?? rpc SetGateway(tr196.FAPService.FAPControl.LTE.Gateway) returns (FAPReply) {}

  //?? rpc GetCDMA2000(FAPRequest) returns (tr196.FAPService.FAPControl.CDMA2000) {}
  //?? rpc SetCDMA2000(tr196.FAPService.FAPControl.CDMA2000) returns (FAPReply) {}

  rpc GetTime(FAPRequest) returns (tr196.FAPService.FAPControl.CDMA2000.Time) {}
  rpc SetTime(tr196.FAPService.FAPControl.CDMA2000.Time) returns (FAPReply) {}

  //?? rpc GetOneX(FAPRequest) returns (tr196.FAPService.FAPControl.CDMA2000.OneX) {}
  //?? rpc SetOneX(tr196.FAPService.FAPControl.CDMA2000.OneX) returns (FAPReply) {}

  rpc GetActiveHandinMeasurement(FAPRequest) returns (tr196.FAPService.FAPControl.CDMA2000.OneX.ActiveHandinMeasurement) {}
  rpc SetActiveHandinMeasurement(tr196.FAPService.FAPControl.CDMA2000.OneX.ActiveHandinMeasurement) returns (FAPReply) {}

  //?? rpc GetSelfConfig(FAPRequest) returns (tr196.FAPService.FAPControl.CDMA2000.OneX.SelfConfig) {}
  //?? rpc SetSelfConfig(tr196.FAPService.FAPControl.CDMA2000.OneX.SelfConfig) returns (FAPReply) {}

  //?? rpc GetGateway(FAPRequest) returns (tr196.FAPService.FAPControl.CDMA2000.Gateway) {}
  //?? rpc SetGateway(tr196.FAPService.FAPControl.CDMA2000.Gateway) returns (FAPReply) {}

  //?? rpc GetHRPD(FAPRequest) returns (tr196.FAPService.FAPControl.CDMA2000.HRPD) {}
  //?? rpc SetHRPD(tr196.FAPService.FAPControl.CDMA2000.HRPD) returns (FAPReply) {}

  //?? rpc GetSelfConfig(FAPRequest) returns (tr196.FAPService.FAPControl.CDMA2000.HRPD.SelfConfig) {}
  //?? rpc SetSelfConfig(tr196.FAPService.FAPControl.CDMA2000.HRPD.SelfConfig) returns (FAPReply) {}

  rpc GetA13(FAPRequest) returns (tr196.FAPService.FAPControl.CDMA2000.HRPD.A13) {}
  rpc SetA13(tr196.FAPService.FAPControl.CDMA2000.HRPD.A13) returns (FAPReply) {}

  rpc GetColorCodeToUATI104(FAPRequest) returns (stream tr196.FAPService.FAPControl.CDMA2000.HRPD.A13.ColorCodeToUATI104) {}
  rpc SetColorCodeToUATI104(stream tr196.FAPService.FAPControl.CDMA2000.HRPD.A13.ColorCodeToUATI104) returns (FAPReply) {}

  rpc GetHRPDSubnetToIP(FAPRequest) returns (stream tr196.FAPService.FAPControl.CDMA2000.HRPD.A13.HRPDSubnetToIP) {}
  rpc SetHRPDSubnetToIP(stream tr196.FAPService.FAPControl.CDMA2000.HRPD.A13.HRPDSubnetToIP) returns (FAPReply) {}

  rpc GetAccessMgmt(FAPRequest) returns (tr196.FAPService.AccessMgmt) {}
  rpc SetAccessMgmt(tr196.FAPService.AccessMgmt) returns (FAPReply) {}

  //?? rpc GetUMTS(FAPRequest) returns (tr196.FAPService.AccessMgmt.UMTS) {}
  //?? rpc SetUMTS(tr196.FAPService.AccessMgmt.UMTS) returns (FAPReply) {}

  rpc GetMemberDetail(FAPRequest) returns (stream tr196.FAPService.AccessMgmt.UMTS.MemberDetail) {}
  rpc SetMemberDetail(stream tr196.FAPService.AccessMgmt.UMTS.MemberDetail) returns (FAPReply) {}

  rpc GetLocalIPAccess(FAPRequest) returns (tr196.FAPService.AccessMgmt.UMTS.LocalIPAccess) {}
  rpc SetLocalIPAccess(tr196.FAPService.AccessMgmt.UMTS.LocalIPAccess) returns (FAPReply) {}

  //?? rpc GetLTE(FAPRequest) returns (tr196.FAPService.AccessMgmt.LTE) {}
  //?? rpc SetLTE(tr196.FAPService.AccessMgmt.LTE) returns (FAPReply) {}

  //?? rpc GetLocalIPAccess(FAPRequest) returns (tr196.FAPService.AccessMgmt.LTE.LocalIPAccess) {}
  //?? rpc SetLocalIPAccess(tr196.FAPService.AccessMgmt.LTE.LocalIPAccess) returns (FAPReply) {}

  //?? rpc GetCDMA2000(FAPRequest) returns (tr196.FAPService.AccessMgmt.CDMA2000) {}
  //?? rpc SetCDMA2000(tr196.FAPService.AccessMgmt.CDMA2000) returns (FAPReply) {}

  //?? rpc GetMemberDetail(FAPRequest) returns (stream tr196.FAPService.AccessMgmt.CDMA2000.MemberDetail) {}
  //?? rpc SetMemberDetail(stream tr196.FAPService.AccessMgmt.CDMA2000.MemberDetail) returns (FAPReply) {}

  //?? rpc GetLocalIPAccess(FAPRequest) returns (tr196.FAPService.AccessMgmt.CDMA2000.LocalIPAccess) {}
  //?? rpc SetLocalIPAccess(tr196.FAPService.AccessMgmt.CDMA2000.LocalIPAccess) returns (FAPReply) {}

  //?? rpc GetHRPD(FAPRequest) returns (tr196.FAPService.AccessMgmt.CDMA2000.LocalIPAccess.HRPD) {}
  //?? rpc SetHRPD(tr196.FAPService.AccessMgmt.CDMA2000.LocalIPAccess.HRPD) returns (FAPReply) {}

  rpc GetEgressFilter(FAPRequest) returns (stream tr196.FAPService.AccessMgmt.CDMA2000.LocalIPAccess.HRPD.EgressFilter) {}
  rpc SetEgressFilter(stream tr196.FAPService.AccessMgmt.CDMA2000.LocalIPAccess.HRPD.EgressFilter) returns (FAPReply) {}

  rpc GetLegacy(FAPRequest) returns (tr196.FAPService.AccessMgmt.Legacy) {}
  rpc SetLegacy(tr196.FAPService.AccessMgmt.Legacy) returns (FAPReply) {}

  //?? rpc GetLocalIPAccess(FAPRequest) returns (tr196.FAPService.AccessMgmt.Legacy.LocalIPAccess) {}
  //?? rpc SetLocalIPAccess(tr196.FAPService.AccessMgmt.Legacy.LocalIPAccess) returns (FAPReply) {}

  rpc GetRule(FAPRequest) returns (stream tr196.FAPService.AccessMgmt.Legacy.LocalIPAccess.Rule) {}
  rpc SetRule(stream tr196.FAPService.AccessMgmt.Legacy.LocalIPAccess.Rule) returns (FAPReply) {}

  rpc GetCellConfig(FAPRequest) returns (tr196.FAPService.CellConfig) {}
  rpc SetCellConfig(tr196.FAPService.CellConfig) returns (FAPReply) {}

  //?? rpc GetUMTS(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS) {}
  //?? rpc SetUMTS(tr196.FAPService.CellConfig.UMTS) returns (FAPReply) {}

  rpc GetCN(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS.CN) {}
  rpc SetCN(tr196.FAPService.CellConfig.UMTS.CN) returns (FAPReply) {}

  rpc GetCSDomain(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS.CN.CSDomain) {}
  rpc SetCSDomain(tr196.FAPService.CellConfig.UMTS.CN.CSDomain) returns (FAPReply) {}

  rpc GetRAB(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS.CN.CSDomain.RAB) {}
  rpc SetRAB(tr196.FAPService.CellConfig.UMTS.CN.CSDomain.RAB) returns (FAPReply) {}

  rpc GetStats(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS.CN.CSDomain.RAB.Stats) {}
  rpc SetStats(tr196.FAPService.CellConfig.UMTS.CN.CSDomain.RAB.Stats) returns (FAPReply) {}

  rpc GetHHO(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS.CN.CSDomain.HHO) {}
  rpc SetHHO(tr196.FAPService.CellConfig.UMTS.CN.CSDomain.HHO) returns (FAPReply) {}

  //?? rpc GetStats(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS.CN.CSDomain.HHO.Stats) {}
  //?? rpc SetStats(tr196.FAPService.CellConfig.UMTS.CN.CSDomain.HHO.Stats) returns (FAPReply) {}

  rpc GetPSDomain(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS.CN.PSDomain) {}
  rpc SetPSDomain(tr196.FAPService.CellConfig.UMTS.CN.PSDomain) returns (FAPReply) {}

  //?? rpc GetRAB(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS.CN.PSDomain.RAB) {}
  //?? rpc SetRAB(tr196.FAPService.CellConfig.UMTS.CN.PSDomain.RAB) returns (FAPReply) {}

  //?? rpc GetStats(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS.CN.PSDomain.RAB.Stats) {}
  //?? rpc SetStats(tr196.FAPService.CellConfig.UMTS.CN.PSDomain.RAB.Stats) returns (FAPReply) {}

  rpc GetLGW(FAPRequest) returns (stream tr196.FAPService.CellConfig.UMTS.CN.PSDomain.RAB.Stats.LGW) {}
  rpc SetLGW(stream tr196.FAPService.CellConfig.UMTS.CN.PSDomain.RAB.Stats.LGW) returns (FAPReply) {}

  //?? rpc GetHHO(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS.CN.HHO) {}
  //?? rpc SetHHO(tr196.FAPService.CellConfig.UMTS.CN.HHO) returns (FAPReply) {}

  //?? rpc GetStats(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS.CN.HHO.Stats) {}
  //?? rpc SetStats(tr196.FAPService.CellConfig.UMTS.CN.HHO.Stats) returns (FAPReply) {}

  rpc GetRAN(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS.RAN) {}
  rpc SetRAN(tr196.FAPService.CellConfig.UMTS.RAN) returns (FAPReply) {}

  rpc GetCSG(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS.RAN.CSG) {}
  rpc SetCSG(tr196.FAPService.CellConfig.UMTS.RAN.CSG) returns (FAPReply) {}

  rpc GetCSGPSCSplitInfo(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS.RAN.CSG.CSGPSCSplitInfo) {}
  rpc SetCSGPSCSplitInfo(tr196.FAPService.CellConfig.UMTS.RAN.CSG.CSGPSCSplitInfo) returns (FAPReply) {}

  rpc GetCellSelection(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS.RAN.CellSelection) {}
  rpc SetCellSelection(tr196.FAPService.CellConfig.UMTS.RAN.CellSelection) returns (FAPReply) {}

  rpc GetRRCTimers(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS.RAN.RRCTimers) {}
  rpc SetRRCTimers(tr196.FAPService.CellConfig.UMTS.RAN.RRCTimers) returns (FAPReply) {}

  rpc GetDRX(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS.RAN.DRX) {}
  rpc SetDRX(tr196.FAPService.CellConfig.UMTS.RAN.DRX) returns (FAPReply) {}

  rpc GetPowerControl(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS.RAN.PowerControl) {}
  rpc SetPowerControl(tr196.FAPService.CellConfig.UMTS.RAN.PowerControl) returns (FAPReply) {}

  rpc GetCellRestriction(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS.RAN.CellRestriction) {}
  rpc SetCellRestriction(tr196.FAPService.CellConfig.UMTS.RAN.CellRestriction) returns (FAPReply) {}

  rpc GetIntraFreqMeas(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS.RAN.IntraFreqMeas) {}
  rpc SetIntraFreqMeas(tr196.FAPService.CellConfig.UMTS.RAN.IntraFreqMeas) returns (FAPReply) {}

  rpc GetInstance(FAPRequest) returns (stream tr196.FAPService.CellConfig.UMTS.RAN.IntraFreqMeas.Instance) {}
  rpc SetInstance(stream tr196.FAPService.CellConfig.UMTS.RAN.IntraFreqMeas.Instance) returns (FAPReply) {}

  rpc GetInterFreqMeas(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS.RAN.InterFreqMeas) {}
  rpc SetInterFreqMeas(tr196.FAPService.CellConfig.UMTS.RAN.InterFreqMeas) returns (FAPReply) {}

  //?? rpc GetInstance(FAPRequest) returns (stream tr196.FAPService.CellConfig.UMTS.RAN.InterFreqMeas.Instance) {}
  //?? rpc SetInstance(stream tr196.FAPService.CellConfig.UMTS.RAN.InterFreqMeas.Instance) returns (FAPReply) {}

  rpc GetInterRATMeas(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS.RAN.InterRATMeas) {}
  rpc SetInterRATMeas(tr196.FAPService.CellConfig.UMTS.RAN.InterRATMeas) returns (FAPReply) {}

  //?? rpc GetInstance(FAPRequest) returns (stream tr196.FAPService.CellConfig.UMTS.RAN.InterRATMeas.Instance) {}
  //?? rpc SetInstance(stream tr196.FAPService.CellConfig.UMTS.RAN.InterRATMeas.Instance) returns (FAPReply) {}

  rpc GetUEInternalMeas(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS.RAN.UEInternalMeas) {}
  rpc SetUEInternalMeas(tr196.FAPService.CellConfig.UMTS.RAN.UEInternalMeas) returns (FAPReply) {}

  rpc GetRF(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS.RAN.RF) {}
  rpc SetRF(tr196.FAPService.CellConfig.UMTS.RAN.RF) returns (FAPReply) {}

  rpc GetNeighborList(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS.RAN.NeighborList) {}
  rpc SetNeighborList(tr196.FAPService.CellConfig.UMTS.RAN.NeighborList) returns (FAPReply) {}

  rpc GetIntraFreqCell(FAPRequest) returns (stream tr196.FAPService.CellConfig.UMTS.RAN.NeighborList.IntraFreqCell) {}
  rpc SetIntraFreqCell(stream tr196.FAPService.CellConfig.UMTS.RAN.NeighborList.IntraFreqCell) returns (FAPReply) {}

  rpc GetInterFreqCell(FAPRequest) returns (stream tr196.FAPService.CellConfig.UMTS.RAN.NeighborList.InterFreqCell) {}
  rpc SetInterFreqCell(stream tr196.FAPService.CellConfig.UMTS.RAN.NeighborList.InterFreqCell) returns (FAPReply) {}

  rpc GetInterRATCell(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS.RAN.NeighborList.InterRATCell) {}
  rpc SetInterRATCell(tr196.FAPService.CellConfig.UMTS.RAN.NeighborList.InterRATCell) returns (FAPReply) {}

  rpc GetGSM(FAPRequest) returns (stream tr196.FAPService.CellConfig.UMTS.RAN.NeighborList.InterRATCell.GSM) {}
  rpc SetGSM(stream tr196.FAPService.CellConfig.UMTS.RAN.NeighborList.InterRATCell.GSM) returns (FAPReply) {}

  rpc GetNeighborListInUse(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS.RAN.NeighborListInUse) {}
  rpc SetNeighborListInUse(tr196.FAPService.CellConfig.UMTS.RAN.NeighborListInUse) returns (FAPReply) {}

  //?? rpc GetIntraFreqCell(FAPRequest) returns (stream tr196.FAPService.CellConfig.UMTS.RAN.NeighborListInUse.IntraFreqCell) {}
  //?? rpc SetIntraFreqCell(stream tr196.FAPService.CellConfig.UMTS.RAN.NeighborListInUse.IntraFreqCell) returns (FAPReply) {}

  //?? rpc GetInterFreqCell(FAPRequest) returns (stream tr196.FAPService.CellConfig.UMTS.RAN.NeighborListInUse.InterFreqCell) {}
  //?? rpc SetInterFreqCell(stream tr196.FAPService.CellConfig.UMTS.RAN.NeighborListInUse.InterFreqCell) returns (FAPReply) {}

  //?? rpc GetInterRATCell(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS.RAN.NeighborListInUse.InterRATCell) {}
  //?? rpc SetInterRATCell(tr196.FAPService.CellConfig.UMTS.RAN.NeighborListInUse.InterRATCell) returns (FAPReply) {}

  //?? rpc GetGSM(FAPRequest) returns (stream tr196.FAPService.CellConfig.UMTS.RAN.NeighborListInUse.InterRATCell.GSM) {}
  //?? rpc SetGSM(stream tr196.FAPService.CellConfig.UMTS.RAN.NeighborListInUse.InterRATCell.GSM) returns (FAPReply) {}

  rpc GetRRC(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS.RAN.RRC) {}
  rpc SetRRC(tr196.FAPService.CellConfig.UMTS.RAN.RRC) returns (FAPReply) {}

  //?? rpc GetStats(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS.RAN.RRC.Stats) {}
  //?? rpc SetStats(tr196.FAPService.CellConfig.UMTS.RAN.RRC.Stats) returns (FAPReply) {}

  //?? rpc GetRAB(FAPRequest) returns (tr196.FAPService.CellConfig.UMTS.RAB) {}
  //?? rpc SetRAB(tr196.FAPService.CellConfig.UMTS.RAB) returns (FAPReply) {}

  //?? rpc GetLTE(FAPRequest) returns (tr196.FAPService.CellConfig.LTE) {}
  //?? rpc SetLTE(tr196.FAPService.CellConfig.LTE) returns (FAPReply) {}

  rpc GetTunnel(FAPRequest) returns (stream tr196.FAPService.CellConfig.LTE.Tunnel) {}
  rpc SetTunnel(stream tr196.FAPService.CellConfig.LTE.Tunnel) returns (FAPReply) {}

  rpc GetEPC(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.EPC) {}
  rpc SetEPC(tr196.FAPService.CellConfig.LTE.EPC) returns (FAPReply) {}

  rpc GetPLMNList(FAPRequest) returns (stream tr196.FAPService.CellConfig.LTE.EPC.PLMNList) {}
  rpc SetPLMNList(stream tr196.FAPService.CellConfig.LTE.EPC.PLMNList) returns (FAPReply) {}

  rpc GetQoS(FAPRequest) returns (stream tr196.FAPService.CellConfig.LTE.EPC.QoS) {}
  rpc SetQoS(stream tr196.FAPService.CellConfig.LTE.EPC.QoS) returns (FAPReply) {}

  rpc GetHO(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.EPC.HO) {}
  rpc SetHO(tr196.FAPService.CellConfig.LTE.EPC.HO) returns (FAPReply) {}

  //?? rpc GetStats(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.EPC.HO.Stats) {}
  //?? rpc SetStats(tr196.FAPService.CellConfig.LTE.EPC.HO.Stats) returns (FAPReply) {}

  //?? rpc GetRAN(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN) {}
  //?? rpc SetRAN(tr196.FAPService.CellConfig.LTE.RAN) returns (FAPReply) {}

  rpc GetCommon(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.Common) {}
  rpc SetCommon(tr196.FAPService.CellConfig.LTE.RAN.Common) returns (FAPReply) {}

  rpc GetS1AP(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.S1AP) {}
  rpc SetS1AP(tr196.FAPService.CellConfig.LTE.RAN.S1AP) returns (FAPReply) {}

  rpc GetS1U(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.S1U) {}
  rpc SetS1U(tr196.FAPService.CellConfig.LTE.RAN.S1U) returns (FAPReply) {}

  //?? rpc GetRF(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.RF) {}
  //?? rpc SetRF(tr196.FAPService.CellConfig.LTE.RAN.RF) returns (FAPReply) {}

  rpc GetPHY(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.PHY) {}
  rpc SetPHY(tr196.FAPService.CellConfig.LTE.RAN.PHY) returns (FAPReply) {}

  rpc GetAntennaInfo(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.PHY.AntennaInfo) {}
  rpc SetAntennaInfo(tr196.FAPService.CellConfig.LTE.RAN.PHY.AntennaInfo) returns (FAPReply) {}

  rpc GetPDSCH(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.PHY.PDSCH) {}
  rpc SetPDSCH(tr196.FAPService.CellConfig.LTE.RAN.PHY.PDSCH) returns (FAPReply) {}

  rpc GetSRS(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.PHY.SRS) {}
  rpc SetSRS(tr196.FAPService.CellConfig.LTE.RAN.PHY.SRS) returns (FAPReply) {}

  rpc GetPRACH(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.PHY.PRACH) {}
  rpc SetPRACH(tr196.FAPService.CellConfig.LTE.RAN.PHY.PRACH) returns (FAPReply) {}

  rpc GetPUCCH(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.PHY.PUCCH) {}
  rpc SetPUCCH(tr196.FAPService.CellConfig.LTE.RAN.PHY.PUCCH) returns (FAPReply) {}

  rpc GetPUSCH(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.PHY.PUSCH) {}
  rpc SetPUSCH(tr196.FAPService.CellConfig.LTE.RAN.PHY.PUSCH) returns (FAPReply) {}

  rpc GetULRS(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.PHY.PUSCH.ULRS) {}
  rpc SetULRS(tr196.FAPService.CellConfig.LTE.RAN.PHY.PUSCH.ULRS) returns (FAPReply) {}

  rpc GetULPowerControl(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.PHY.ULPowerControl) {}
  rpc SetULPowerControl(tr196.FAPService.CellConfig.LTE.RAN.PHY.ULPowerControl) returns (FAPReply) {}

  rpc GetMBSFN(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.PHY.MBSFN) {}
  rpc SetMBSFN(tr196.FAPService.CellConfig.LTE.RAN.PHY.MBSFN) returns (FAPReply) {}

  rpc GetSFConfigList(FAPRequest) returns (stream tr196.FAPService.CellConfig.LTE.RAN.PHY.MBSFN.SFConfigList) {}
  rpc SetSFConfigList(stream tr196.FAPService.CellConfig.LTE.RAN.PHY.MBSFN.SFConfigList) returns (FAPReply) {}

  rpc GetPRS(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.PHY.PRS) {}
  rpc SetPRS(tr196.FAPService.CellConfig.LTE.RAN.PHY.PRS) returns (FAPReply) {}

  rpc GetTDDFrame(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.PHY.TDDFrame) {}
  rpc SetTDDFrame(tr196.FAPService.CellConfig.LTE.RAN.PHY.TDDFrame) returns (FAPReply) {}

  rpc GetMAC(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.MAC) {}
  rpc SetMAC(tr196.FAPService.CellConfig.LTE.RAN.MAC) returns (FAPReply) {}

  rpc GetRACH(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.MAC.RACH) {}
  rpc SetRACH(tr196.FAPService.CellConfig.LTE.RAN.MAC.RACH) returns (FAPReply) {}

  //?? rpc GetDRX(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.MAC.DRX) {}
  //?? rpc SetDRX(tr196.FAPService.CellConfig.LTE.RAN.MAC.DRX) returns (FAPReply) {}

  rpc GetULSCH(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.MAC.ULSCH) {}
  rpc SetULSCH(tr196.FAPService.CellConfig.LTE.RAN.MAC.ULSCH) returns (FAPReply) {}

  rpc GetRLC(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.RLC) {}
  rpc SetRLC(tr196.FAPService.CellConfig.LTE.RAN.RLC) returns (FAPReply) {}

  rpc GetSRB1(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.RLC.SRB1) {}
  rpc SetSRB1(tr196.FAPService.CellConfig.LTE.RAN.RLC.SRB1) returns (FAPReply) {}

  rpc GetSRB2(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.RLC.SRB2) {}
  rpc SetSRB2(tr196.FAPService.CellConfig.LTE.RAN.RLC.SRB2) returns (FAPReply) {}

  //?? rpc GetRRCTimers(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.RRCTimers) {}
  //?? rpc SetRRCTimers(tr196.FAPService.CellConfig.LTE.RAN.RRCTimers) returns (FAPReply) {}

  //?? rpc GetCellRestriction(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.CellRestriction) {}
  //?? rpc SetCellRestriction(tr196.FAPService.CellConfig.LTE.RAN.CellRestriction) returns (FAPReply) {}

  rpc GetMobility(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.Mobility) {}
  rpc SetMobility(tr196.FAPService.CellConfig.LTE.RAN.Mobility) returns (FAPReply) {}

  rpc GetIdleMode(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.Mobility.IdleMode) {}
  rpc SetIdleMode(tr196.FAPService.CellConfig.LTE.RAN.Mobility.IdleMode) returns (FAPReply) {}

  //?? rpc GetCommon(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.Mobility.IdleMode.Common) {}
  //?? rpc SetCommon(tr196.FAPService.CellConfig.LTE.RAN.Mobility.IdleMode.Common) returns (FAPReply) {}

  rpc GetIntraFreq(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.Mobility.IdleMode.IntraFreq) {}
  rpc SetIntraFreq(tr196.FAPService.CellConfig.LTE.RAN.Mobility.IdleMode.IntraFreq) returns (FAPReply) {}

  rpc GetInterFreq(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.Mobility.IdleMode.InterFreq) {}
  rpc SetInterFreq(tr196.FAPService.CellConfig.LTE.RAN.Mobility.IdleMode.InterFreq) returns (FAPReply) {}

  rpc GetCarrier(FAPRequest) returns (stream tr196.FAPService.CellConfig.LTE.RAN.Mobility.IdleMode.InterFreq.Carrier) {}
  rpc SetCarrier(stream tr196.FAPService.CellConfig.LTE.RAN.Mobility.IdleMode.InterFreq.Carrier) returns (FAPReply) {}

  rpc GetIRAT(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.Mobility.IdleMode.IRAT) {}
  rpc SetIRAT(tr196.FAPService.CellConfig.LTE.RAN.Mobility.IdleMode.IRAT) returns (FAPReply) {}

  rpc GetUTRA(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.Mobility.IdleMode.IRAT.UTRA) {}
  rpc SetUTRA(tr196.FAPService.CellConfig.LTE.RAN.Mobility.IdleMode.IRAT.UTRA) returns (FAPReply) {}

  rpc GetUTRANFDDFreq(FAPRequest) returns (stream tr196.FAPService.CellConfig.LTE.RAN.Mobility.IdleMode.IRAT.UTRA.UTRANFDDFreq) {}
  rpc SetUTRANFDDFreq(stream tr196.FAPService.CellConfig.LTE.RAN.Mobility.IdleMode.IRAT.UTRA.UTRANFDDFreq) returns (FAPReply) {}

  rpc GetGERAN(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.Mobility.IdleMode.IRAT.GERAN) {}
  rpc SetGERAN(tr196.FAPService.CellConfig.LTE.RAN.Mobility.IdleMode.IRAT.GERAN) returns (FAPReply) {}

  rpc GetGERANFreqGroup(FAPRequest) returns (stream tr196.FAPService.CellConfig.LTE.RAN.Mobility.IdleMode.IRAT.GERAN.GERANFreqGroup) {}
  rpc SetGERANFreqGroup(stream tr196.FAPService.CellConfig.LTE.RAN.Mobility.IdleMode.IRAT.GERAN.GERANFreqGroup) returns (FAPReply) {}

  //?? rpc GetCDMA2000(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.Mobility.IdleMode.IRAT.CDMA2000) {}
  //?? rpc SetCDMA2000(tr196.FAPService.CellConfig.LTE.RAN.Mobility.IdleMode.IRAT.CDMA2000) returns (FAPReply) {}

  rpc GetCDMA2000Band(FAPRequest) returns (stream tr196.FAPService.CellConfig.LTE.RAN.Mobility.IdleMode.IRAT.CDMA2000.CDMA2000Band) {}
  rpc SetCDMA2000Band(stream tr196.FAPService.CellConfig.LTE.RAN.Mobility.IdleMode.IRAT.CDMA2000.CDMA2000Band) returns (FAPReply) {}

  rpc GetConnMode(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.Mobility.ConnMode) {}
  rpc SetConnMode(tr196.FAPService.CellConfig.LTE.RAN.Mobility.ConnMode) returns (FAPReply) {}

  rpc GetEUTRA(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.Mobility.ConnMode.EUTRA) {}
  rpc SetEUTRA(tr196.FAPService.CellConfig.LTE.RAN.Mobility.ConnMode.EUTRA) returns (FAPReply) {}

  //?? rpc GetIRAT(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.Mobility.ConnMode.IRAT) {}
  //?? rpc SetIRAT(tr196.FAPService.CellConfig.LTE.RAN.Mobility.ConnMode.IRAT) returns (FAPReply) {}

  //?? rpc GetNeighborList(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.NeighborList) {}
  //?? rpc SetNeighborList(tr196.FAPService.CellConfig.LTE.RAN.NeighborList) returns (FAPReply) {}

  rpc GetLTECell(FAPRequest) returns (stream tr196.FAPService.CellConfig.LTE.RAN.NeighborList.LTECell) {}
  rpc SetLTECell(stream tr196.FAPService.CellConfig.LTE.RAN.NeighborList.LTECell) returns (FAPReply) {}

  //?? rpc GetInterRATCell(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.NeighborList.InterRATCell) {}
  //?? rpc SetInterRATCell(tr196.FAPService.CellConfig.LTE.RAN.NeighborList.InterRATCell) returns (FAPReply) {}

  //?? rpc GetUMTS(FAPRequest) returns (stream tr196.FAPService.CellConfig.LTE.RAN.NeighborList.InterRATCell.UMTS) {}
  //?? rpc SetUMTS(stream tr196.FAPService.CellConfig.LTE.RAN.NeighborList.InterRATCell.UMTS) returns (FAPReply) {}

  //?? rpc GetGSM(FAPRequest) returns (stream tr196.FAPService.CellConfig.LTE.RAN.NeighborList.InterRATCell.GSM) {}
  //?? rpc SetGSM(stream tr196.FAPService.CellConfig.LTE.RAN.NeighborList.InterRATCell.GSM) returns (FAPReply) {}

  //?? rpc GetCDMA2000(FAPRequest) returns (stream tr196.FAPService.CellConfig.LTE.RAN.NeighborList.InterRATCell.CDMA2000) {}
  //?? rpc SetCDMA2000(stream tr196.FAPService.CellConfig.LTE.RAN.NeighborList.InterRATCell.CDMA2000) returns (FAPReply) {}

  //?? rpc GetNeighborListInUse(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.NeighborListInUse) {}
  //?? rpc SetNeighborListInUse(tr196.FAPService.CellConfig.LTE.RAN.NeighborListInUse) returns (FAPReply) {}

  //?? rpc GetLTECell(FAPRequest) returns (stream tr196.FAPService.CellConfig.LTE.RAN.NeighborListInUse.LTECell) {}
  //?? rpc SetLTECell(stream tr196.FAPService.CellConfig.LTE.RAN.NeighborListInUse.LTECell) returns (FAPReply) {}

  //?? rpc GetInterRATCell(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.NeighborListInUse.InterRATCell) {}
  //?? rpc SetInterRATCell(tr196.FAPService.CellConfig.LTE.RAN.NeighborListInUse.InterRATCell) returns (FAPReply) {}

  //?? rpc GetUMTS(FAPRequest) returns (stream tr196.FAPService.CellConfig.LTE.RAN.NeighborListInUse.InterRATCell.UMTS) {}
  //?? rpc SetUMTS(stream tr196.FAPService.CellConfig.LTE.RAN.NeighborListInUse.InterRATCell.UMTS) returns (FAPReply) {}

  //?? rpc GetGSM(FAPRequest) returns (stream tr196.FAPService.CellConfig.LTE.RAN.NeighborListInUse.InterRATCell.GSM) {}
  //?? rpc SetGSM(stream tr196.FAPService.CellConfig.LTE.RAN.NeighborListInUse.InterRATCell.GSM) returns (FAPReply) {}

  //?? rpc GetCDMA2000(FAPRequest) returns (stream tr196.FAPService.CellConfig.LTE.RAN.NeighborListInUse.InterRATCell.CDMA2000) {}
  //?? rpc SetCDMA2000(stream tr196.FAPService.CellConfig.LTE.RAN.NeighborListInUse.InterRATCell.CDMA2000) returns (FAPReply) {}

  //?? rpc GetCSG(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.CSG) {}
  //?? rpc SetCSG(tr196.FAPService.CellConfig.LTE.RAN.CSG) returns (FAPReply) {}

  //?? rpc GetStats(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.CSG.Stats) {}
  //?? rpc SetStats(tr196.FAPService.CellConfig.LTE.RAN.CSG.Stats) returns (FAPReply) {}

  //?? rpc GetRRC(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.RRC) {}
  //?? rpc SetRRC(tr196.FAPService.CellConfig.LTE.RAN.RRC) returns (FAPReply) {}

  //?? rpc GetStats(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.RRC.Stats) {}
  //?? rpc SetStats(tr196.FAPService.CellConfig.LTE.RAN.RRC.Stats) returns (FAPReply) {}

  rpc GetERAB(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.ERAB) {}
  rpc SetERAB(tr196.FAPService.CellConfig.LTE.RAN.ERAB) returns (FAPReply) {}

  //?? rpc GetStats(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.ERAB.Stats) {}
  //?? rpc SetStats(tr196.FAPService.CellConfig.LTE.RAN.ERAB.Stats) returns (FAPReply) {}

  //?? rpc GetLGW(FAPRequest) returns (stream tr196.FAPService.CellConfig.LTE.RAN.ERAB.Stats.LGW) {}
  //?? rpc SetLGW(stream tr196.FAPService.CellConfig.LTE.RAN.ERAB.Stats.LGW) returns (FAPReply) {}

  rpc GetDRB(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.DRB) {}
  rpc SetDRB(tr196.FAPService.CellConfig.LTE.RAN.DRB) returns (FAPReply) {}

  //?? rpc GetStats(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.DRB.Stats) {}
  //?? rpc SetStats(tr196.FAPService.CellConfig.LTE.RAN.DRB.Stats) returns (FAPReply) {}

  rpc GetRRU(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.RRU) {}
  rpc SetRRU(tr196.FAPService.CellConfig.LTE.RAN.RRU) returns (FAPReply) {}

  //?? rpc GetStats(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.RAN.RRU.Stats) {}
  //?? rpc SetStats(tr196.FAPService.CellConfig.LTE.RAN.RRU.Stats) returns (FAPReply) {}

  rpc GetEnergySavings(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.EnergySavings) {}
  rpc SetEnergySavings(tr196.FAPService.CellConfig.LTE.EnergySavings) returns (FAPReply) {}

  rpc GetActivationCandidateCellsLoad(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.EnergySavings.ActivationCandidateCellsLoad) {}
  rpc SetActivationCandidateCellsLoad(tr196.FAPService.CellConfig.LTE.EnergySavings.ActivationCandidateCellsLoad) returns (FAPReply) {}

  rpc GetDeactivationCandidateCellsLoad(FAPRequest) returns (tr196.FAPService.CellConfig.LTE.EnergySavings.DeactivationCandidateCellsLoad) {}
  rpc SetDeactivationCandidateCellsLoad(tr196.FAPService.CellConfig.LTE.EnergySavings.DeactivationCandidateCellsLoad) returns (FAPReply) {}

  rpc GetNotAllowedTimePeriod(FAPRequest) returns (stream tr196.FAPService.CellConfig.LTE.EnergySavings.NotAllowedTimePeriod) {}
  rpc SetNotAllowedTimePeriod(stream tr196.FAPService.CellConfig.LTE.EnergySavings.NotAllowedTimePeriod) returns (FAPReply) {}

  //?? rpc GetCDMA2000(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000) {}
  //?? rpc SetCDMA2000(tr196.FAPService.CellConfig.CDMA2000) returns (FAPReply) {}

  //?? rpc GetOneX(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.OneX) {}
  //?? rpc SetOneX(tr196.FAPService.CellConfig.CDMA2000.OneX) returns (FAPReply) {}

  //?? rpc GetRAN(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.OneX.RAN) {}
  //?? rpc SetRAN(tr196.FAPService.CellConfig.CDMA2000.OneX.RAN) returns (FAPReply) {}

  //?? rpc GetRF(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.OneX.RAN.RF) {}
  //?? rpc SetRF(tr196.FAPService.CellConfig.CDMA2000.OneX.RAN.RF) returns (FAPReply) {}

  rpc GetNetworkListenModeConfig(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.OneX.RAN.NetworkListenModeConfig) {}
  rpc SetNetworkListenModeConfig(tr196.FAPService.CellConfig.CDMA2000.OneX.RAN.NetworkListenModeConfig) returns (FAPReply) {}

  rpc GetAccessParameters(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.OneX.RAN.AccessParameters) {}
  rpc SetAccessParameters(tr196.FAPService.CellConfig.CDMA2000.OneX.RAN.AccessParameters) returns (FAPReply) {}

  rpc GetSystemParameters(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.OneX.RAN.SystemParameters) {}
  rpc SetSystemParameters(tr196.FAPService.CellConfig.CDMA2000.OneX.RAN.SystemParameters) returns (FAPReply) {}

  rpc GetExtendedSystemParameters(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.OneX.RAN.ExtendedSystemParameters) {}
  rpc SetExtendedSystemParameters(tr196.FAPService.CellConfig.CDMA2000.OneX.RAN.ExtendedSystemParameters) returns (FAPReply) {}

  rpc GetForwardPwrCtr(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.OneX.RAN.ForwardPwrCtr) {}
  rpc SetForwardPwrCtr(tr196.FAPService.CellConfig.CDMA2000.OneX.RAN.ForwardPwrCtr) returns (FAPReply) {}

  rpc GetHardHandoff(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.OneX.RAN.HardHandoff) {}
  rpc SetHardHandoff(tr196.FAPService.CellConfig.CDMA2000.OneX.RAN.HardHandoff) returns (FAPReply) {}

  //?? rpc GetStats(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.OneX.RAN.HardHandoff.Stats) {}
  //?? rpc SetStats(tr196.FAPService.CellConfig.CDMA2000.OneX.RAN.HardHandoff.Stats) returns (FAPReply) {}

  //?? rpc GetPowerControl(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.OneX.RAN.PowerControl) {}
  //?? rpc SetPowerControl(tr196.FAPService.CellConfig.CDMA2000.OneX.RAN.PowerControl) returns (FAPReply) {}

  //?? rpc GetNeighborList(FAPRequest) returns (stream tr196.FAPService.CellConfig.CDMA2000.OneX.RAN.NeighborList) {}
  //?? rpc SetNeighborList(stream tr196.FAPService.CellConfig.CDMA2000.OneX.RAN.NeighborList) returns (FAPReply) {}

  rpc GetAPIDM(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.OneX.RAN.APIDM) {}
  rpc SetAPIDM(tr196.FAPService.CellConfig.CDMA2000.OneX.RAN.APIDM) returns (FAPReply) {}

  rpc GetAPIDTM(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.OneX.RAN.APIDTM) {}
  rpc SetAPIDTM(tr196.FAPService.CellConfig.CDMA2000.OneX.RAN.APIDTM) returns (FAPReply) {}

  rpc GetAPPIM(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.OneX.RAN.APPIM) {}
  rpc SetAPPIM(tr196.FAPService.CellConfig.CDMA2000.OneX.RAN.APPIM) returns (FAPReply) {}

  rpc GetAPPIREC(FAPRequest) returns (stream tr196.FAPService.CellConfig.CDMA2000.OneX.RAN.APPIM.APPIREC) {}
  rpc SetAPPIREC(stream tr196.FAPService.CellConfig.CDMA2000.OneX.RAN.APPIM.APPIREC) returns (FAPReply) {}

  rpc GetPCFConfig(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.OneX.PCFConfig) {}
  rpc SetPCFConfig(tr196.FAPService.CellConfig.CDMA2000.OneX.PCFConfig) returns (FAPReply) {}

  rpc GetPCFPerformanceStats(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.OneX.PCFConfig.PCFPerformanceStats) {}
  rpc SetPCFPerformanceStats(tr196.FAPService.CellConfig.CDMA2000.OneX.PCFConfig.PCFPerformanceStats) returns (FAPReply) {}

  rpc GetBatchPCFPDSN(FAPRequest) returns (stream tr196.FAPService.CellConfig.CDMA2000.OneX.BatchPCFPDSN) {}
  rpc SetBatchPCFPDSN(stream tr196.FAPService.CellConfig.CDMA2000.OneX.BatchPCFPDSN) returns (FAPReply) {}

  rpc GetPCFPDSN(FAPRequest) returns (stream tr196.FAPService.CellConfig.CDMA2000.OneX.PCFPDSN) {}
  rpc SetPCFPDSN(stream tr196.FAPService.CellConfig.CDMA2000.OneX.PCFPDSN) returns (FAPReply) {}

  rpc GetA11RegUpdateStats(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.OneX.PCFPDSN.A11RegUpdateStats) {}
  rpc SetA11RegUpdateStats(tr196.FAPService.CellConfig.CDMA2000.OneX.PCFPDSN.A11RegUpdateStats) returns (FAPReply) {}

  rpc GetPCFPDSNStats(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.OneX.PCFPDSN.PCFPDSNStats) {}
  rpc SetPCFPDSNStats(tr196.FAPService.CellConfig.CDMA2000.OneX.PCFPDSN.PCFPDSNStats) returns (FAPReply) {}

  //?? rpc GetStats(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.OneX.Stats) {}
  //?? rpc SetStats(tr196.FAPService.CellConfig.CDMA2000.OneX.Stats) returns (FAPReply) {}

  rpc GetRedirect(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.OneX.Redirect) {}
  rpc SetRedirect(tr196.FAPService.CellConfig.CDMA2000.OneX.Redirect) returns (FAPReply) {}

  //?? rpc GetHRPD(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.HRPD) {}
  //?? rpc SetHRPD(tr196.FAPService.CellConfig.CDMA2000.HRPD) returns (FAPReply) {}

  //?? rpc GetRAN(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.HRPD.RAN) {}
  //?? rpc SetRAN(tr196.FAPService.CellConfig.CDMA2000.HRPD.RAN) returns (FAPReply) {}

  //?? rpc GetRF(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.HRPD.RAN.RF) {}
  //?? rpc SetRF(tr196.FAPService.CellConfig.CDMA2000.HRPD.RAN.RF) returns (FAPReply) {}

  //?? rpc GetPCFConfig(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.HRPD.PCFConfig) {}
  //?? rpc SetPCFConfig(tr196.FAPService.CellConfig.CDMA2000.HRPD.PCFConfig) returns (FAPReply) {}

  //?? rpc GetPCFPerformanceStats(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.HRPD.PCFConfig.PCFPerformanceStats) {}
  //?? rpc SetPCFPerformanceStats(tr196.FAPService.CellConfig.CDMA2000.HRPD.PCFConfig.PCFPerformanceStats) returns (FAPReply) {}

  //?? rpc GetBatchPCFPDSN(FAPRequest) returns (stream tr196.FAPService.CellConfig.CDMA2000.HRPD.BatchPCFPDSN) {}
  //?? rpc SetBatchPCFPDSN(stream tr196.FAPService.CellConfig.CDMA2000.HRPD.BatchPCFPDSN) returns (FAPReply) {}

  //?? rpc GetPCFPDSN(FAPRequest) returns (stream tr196.FAPService.CellConfig.CDMA2000.HRPD.PCFPDSN) {}
  //?? rpc SetPCFPDSN(stream tr196.FAPService.CellConfig.CDMA2000.HRPD.PCFPDSN) returns (FAPReply) {}

  rpc GetA11SessionUpdateStats(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.HRPD.PCFPDSN.A11SessionUpdateStats) {}
  rpc SetA11SessionUpdateStats(tr196.FAPService.CellConfig.CDMA2000.HRPD.PCFPDSN.A11SessionUpdateStats) returns (FAPReply) {}

  //?? rpc GetA11RegUpdateStats(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.HRPD.PCFPDSN.A11RegUpdateStats) {}
  //?? rpc SetA11RegUpdateStats(tr196.FAPService.CellConfig.CDMA2000.HRPD.PCFPDSN.A11RegUpdateStats) returns (FAPReply) {}

  rpc GetAuxA10Stats(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.HRPD.PCFPDSN.AuxA10Stats) {}
  rpc SetAuxA10Stats(tr196.FAPService.CellConfig.CDMA2000.HRPD.PCFPDSN.AuxA10Stats) returns (FAPReply) {}

  //?? rpc GetPCFPDSNStats(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.HRPD.PCFPDSN.PCFPDSNStats) {}
  //?? rpc SetPCFPDSNStats(tr196.FAPService.CellConfig.CDMA2000.HRPD.PCFPDSN.PCFPDSNStats) returns (FAPReply) {}

  //?? rpc GetRedirect(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.HRPD.Redirect) {}
  //?? rpc SetRedirect(tr196.FAPService.CellConfig.CDMA2000.HRPD.Redirect) returns (FAPReply) {}

  rpc GetCallControlStats(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.HRPD.CallControlStats) {}
  rpc SetCallControlStats(tr196.FAPService.CellConfig.CDMA2000.HRPD.CallControlStats) returns (FAPReply) {}

  rpc GetQoSStats(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.HRPD.QoSStats) {}
  rpc SetQoSStats(tr196.FAPService.CellConfig.CDMA2000.HRPD.QoSStats) returns (FAPReply) {}

  rpc GetRNCSigAppsStats(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.HRPD.RNCSigAppsStats) {}
  rpc SetRNCSigAppsStats(tr196.FAPService.CellConfig.CDMA2000.HRPD.RNCSigAppsStats) returns (FAPReply) {}

  rpc GetAccessAuthConfig(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.HRPD.AccessAuthConfig) {}
  rpc SetAccessAuthConfig(tr196.FAPService.CellConfig.CDMA2000.HRPD.AccessAuthConfig) returns (FAPReply) {}

  rpc GetAccessAuthStats(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.HRPD.AccessAuthStats) {}
  rpc SetAccessAuthStats(tr196.FAPService.CellConfig.CDMA2000.HRPD.AccessAuthStats) returns (FAPReply) {}

  rpc GetBeacon(FAPRequest) returns (tr196.FAPService.CellConfig.CDMA2000.Beacon) {}
  rpc SetBeacon(tr196.FAPService.CellConfig.CDMA2000.Beacon) returns (FAPReply) {}

  rpc GetBeaconList(FAPRequest) returns (stream tr196.FAPService.CellConfig.CDMA2000.Beacon.BeaconList) {}
  rpc SetBeaconList(stream tr196.FAPService.CellConfig.CDMA2000.Beacon.BeaconList) returns (FAPReply) {}

  rpc GetHRPDBeaconList(FAPRequest) returns (stream tr196.FAPService.CellConfig.CDMA2000.Beacon.HRPDBeaconList) {}
  rpc SetHRPDBeaconList(stream tr196.FAPService.CellConfig.CDMA2000.Beacon.HRPDBeaconList) returns (FAPReply) {}

  rpc GetREM(FAPRequest) returns (tr196.FAPService.REM) {}
  rpc SetREM(tr196.FAPService.REM) returns (FAPReply) {}

  //?? rpc GetUMTS(FAPRequest) returns (tr196.FAPService.REM.UMTS) {}
  //?? rpc SetUMTS(tr196.FAPService.REM.UMTS) returns (FAPReply) {}

  rpc GetWCDMA(FAPRequest) returns (tr196.FAPService.REM.UMTS.WCDMA) {}
  rpc SetWCDMA(tr196.FAPService.REM.UMTS.WCDMA) returns (FAPReply) {}

  rpc GetCell(FAPRequest) returns (stream tr196.FAPService.REM.UMTS.WCDMA.Cell) {}
  rpc SetCell(stream tr196.FAPService.REM.UMTS.WCDMA.Cell) returns (FAPReply) {}

  //?? rpc GetRF(FAPRequest) returns (tr196.FAPService.REM.UMTS.WCDMA.Cell.RF) {}
  //?? rpc SetRF(tr196.FAPService.REM.UMTS.WCDMA.Cell.RF) returns (FAPReply) {}

  rpc GetBCCH(FAPRequest) returns (tr196.FAPService.REM.UMTS.WCDMA.Cell.BCCH) {}
  rpc SetBCCH(tr196.FAPService.REM.UMTS.WCDMA.Cell.BCCH) returns (FAPReply) {}

  //?? rpc GetCSGPSCSplitInfo(FAPRequest) returns (tr196.FAPService.REM.UMTS.WCDMA.Cell.BCCH.CSGPSCSplitInfo) {}
  //?? rpc SetCSGPSCSplitInfo(tr196.FAPService.REM.UMTS.WCDMA.Cell.BCCH.CSGPSCSplitInfo) returns (FAPReply) {}

  rpc GetReferencePosition(FAPRequest) returns (tr196.FAPService.REM.UMTS.WCDMA.Cell.BCCH.ReferencePosition) {}
  rpc SetReferencePosition(tr196.FAPService.REM.UMTS.WCDMA.Cell.BCCH.ReferencePosition) returns (FAPReply) {}

  //?? rpc GetGSM(FAPRequest) returns (tr196.FAPService.REM.UMTS.GSM) {}
  //?? rpc SetGSM(tr196.FAPService.REM.UMTS.GSM) returns (FAPReply) {}

  //?? rpc GetCell(FAPRequest) returns (stream tr196.FAPService.REM.UMTS.GSM.Cell) {}
  //?? rpc SetCell(stream tr196.FAPService.REM.UMTS.GSM.Cell) returns (FAPReply) {}

  //?? rpc GetLTE(FAPRequest) returns (tr196.FAPService.REM.LTE) {}
  //?? rpc SetLTE(tr196.FAPService.REM.LTE) returns (FAPReply) {}

  //?? rpc GetCell(FAPRequest) returns (stream tr196.FAPService.REM.LTE.Cell) {}
  //?? rpc SetCell(stream tr196.FAPService.REM.LTE.Cell) returns (FAPReply) {}

  //?? rpc GetRF(FAPRequest) returns (tr196.FAPService.REM.LTE.Cell.RF) {}
  //?? rpc SetRF(tr196.FAPService.REM.LTE.Cell.RF) returns (FAPReply) {}

  //?? rpc GetBCCH(FAPRequest) returns (tr196.FAPService.REM.LTE.Cell.BCCH) {}
  //?? rpc SetBCCH(tr196.FAPService.REM.LTE.Cell.BCCH) returns (FAPReply) {}

  //?? rpc GetPLMNList(FAPRequest) returns (stream tr196.FAPService.REM.LTE.Cell.BCCH.PLMNList) {}
  //?? rpc SetPLMNList(stream tr196.FAPService.REM.LTE.Cell.BCCH.PLMNList) returns (FAPReply) {}

  rpc GetCarrierMeas(FAPRequest) returns (stream tr196.FAPService.REM.LTE.CarrierMeas) {}
  rpc SetCarrierMeas(stream tr196.FAPService.REM.LTE.CarrierMeas) returns (FAPReply) {}

  //?? rpc GetCDMA2000(FAPRequest) returns (tr196.FAPService.REM.CDMA2000) {}
  //?? rpc SetCDMA2000(tr196.FAPService.REM.CDMA2000) returns (FAPReply) {}

  //?? rpc GetOneX(FAPRequest) returns (tr196.FAPService.REM.CDMA2000.OneX) {}
  //?? rpc SetOneX(tr196.FAPService.REM.CDMA2000.OneX) returns (FAPReply) {}

  rpc GetChannel(FAPRequest) returns (stream tr196.FAPService.REM.CDMA2000.OneX.Channel) {}
  rpc SetChannel(stream tr196.FAPService.REM.CDMA2000.OneX.Channel) returns (FAPReply) {}

  //?? rpc GetCell(FAPRequest) returns (stream tr196.FAPService.REM.CDMA2000.OneX.Cell) {}
  //?? rpc SetCell(stream tr196.FAPService.REM.CDMA2000.OneX.Cell) returns (FAPReply) {}

  //?? rpc GetRF(FAPRequest) returns (tr196.FAPService.REM.CDMA2000.OneX.Cell.RF) {}
  //?? rpc SetRF(tr196.FAPService.REM.CDMA2000.OneX.Cell.RF) returns (FAPReply) {}

  rpc GetControlChannel(FAPRequest) returns (tr196.FAPService.REM.CDMA2000.OneX.Cell.ControlChannel) {}
  rpc SetControlChannel(tr196.FAPService.REM.CDMA2000.OneX.Cell.ControlChannel) returns (FAPReply) {}

  //?? rpc GetHRPD(FAPRequest) returns (tr196.FAPService.REM.CDMA2000.HRPD) {}
  //?? rpc SetHRPD(tr196.FAPService.REM.CDMA2000.HRPD) returns (FAPReply) {}

  //?? rpc GetChannel(FAPRequest) returns (stream tr196.FAPService.REM.CDMA2000.HRPD.Channel) {}
  //?? rpc SetChannel(stream tr196.FAPService.REM.CDMA2000.HRPD.Channel) returns (FAPReply) {}

  //?? rpc GetCell(FAPRequest) returns (stream tr196.FAPService.REM.CDMA2000.HRPD.Cell) {}
  //?? rpc SetCell(stream tr196.FAPService.REM.CDMA2000.HRPD.Cell) returns (FAPReply) {}

  //?? rpc GetRF(FAPRequest) returns (tr196.FAPService.REM.CDMA2000.HRPD.Cell.RF) {}
  //?? rpc SetRF(tr196.FAPService.REM.CDMA2000.HRPD.Cell.RF) returns (FAPReply) {}

  //?? rpc GetControlChannel(FAPRequest) returns (tr196.FAPService.REM.CDMA2000.HRPD.Cell.ControlChannel) {}
  //?? rpc SetControlChannel(tr196.FAPService.REM.CDMA2000.HRPD.Cell.ControlChannel) returns (FAPReply) {}

  rpc GetMacroTiming(FAPRequest) returns (tr196.FAPService.REM.CDMA2000.MacroTiming) {}
  rpc SetMacroTiming(tr196.FAPService.REM.CDMA2000.MacroTiming) returns (FAPReply) {}

  //?? rpc GetChannel(FAPRequest) returns (stream tr196.FAPService.REM.CDMA2000.MacroTiming.Channel) {}
  //?? rpc SetChannel(stream tr196.FAPService.REM.CDMA2000.MacroTiming.Channel) returns (FAPReply) {}

  rpc GetTransport(FAPRequest) returns (tr196.FAPService.Transport) {}
  rpc SetTransport(tr196.FAPService.Transport) returns (FAPReply) {}

  rpc GetSIP(FAPRequest) returns (tr196.FAPService.Transport.SIP) {}
  rpc SetSIP(tr196.FAPService.Transport.SIP) returns (FAPReply) {}

  rpc GetFCS(FAPRequest) returns (tr196.FAPService.Transport.SIP.FCS) {}
  rpc SetFCS(tr196.FAPService.Transport.SIP.FCS) returns (FAPReply) {}

  rpc GetSCTP(FAPRequest) returns (tr196.FAPService.Transport.SCTP) {}
  rpc SetSCTP(tr196.FAPService.Transport.SCTP) returns (FAPReply) {}

  rpc GetAssoc(FAPRequest) returns (stream tr196.FAPService.Transport.SCTP.Assoc) {}
  rpc SetAssoc(stream tr196.FAPService.Transport.SCTP.Assoc) returns (FAPReply) {}

  rpc GetRealTime(FAPRequest) returns (tr196.FAPService.Transport.RealTime) {}
  rpc SetRealTime(tr196.FAPService.Transport.RealTime) returns (FAPReply) {}

  rpc GetPerf(FAPRequest) returns (tr196.FAPService.Transport.RealTime.Perf) {}
  rpc SetPerf(tr196.FAPService.Transport.RealTime.Perf) returns (FAPReply) {}

  rpc GetPacket(FAPRequest) returns (tr196.FAPService.Transport.Packet) {}
  rpc SetPacket(tr196.FAPService.Transport.Packet) returns (FAPReply) {}

  rpc GetSecurity(FAPRequest) returns (tr196.FAPService.Transport.Security) {}
  rpc SetSecurity(tr196.FAPService.Transport.Security) returns (FAPReply) {}

  rpc GetSecret(FAPRequest) returns (stream tr196.FAPService.Transport.Security.Secret) {}
  rpc SetSecret(stream tr196.FAPService.Transport.Security.Secret) returns (FAPReply) {}

}
