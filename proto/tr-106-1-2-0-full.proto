// Generated by cwmp_proto_to_grpc.cc
// source: tr-106-1-2-0-full.proto
// 1st top-level message: Device
// Added service 

// tr-106-1-2-0-full.proto
// Generated by cwmp_xml_to_proto.cc
// source: tr-106-1-2-0-full.xml

syntax = "proto3";

package tr106; //!! renamed

message Device { // Device.
  string    device_summary                           = 1  ; //  See {{bibref|TR-106|section 3.7}}.     
  message Services { // Device.Services.
  }
  Services services = 2; // Device.Services.
  message Capabilities { // Device.Capabilities.
    message PerformanceDiagnostic { // Device.Capabilities.PerformanceDiagnostic.
      string    download_transports                      = 1  ; //  Supported ''DownloadDiagnostics'' transp
      string    upload_transports                        = 2  ; //  Supported ''UploadDiagnostics'' transpor
    }
    PerformanceDiagnostic performance_diagnostic = 1; // Device.Capabilities.PerformanceDiagnostic.
  }
  Capabilities capabilities = 3; // Device.Capabilities.
  message DeviceInfo { // Device.DeviceInfo.
    string    manufacturer                             = 1  ; //  The manufacturer of the CPE (human reada
    string    manufacturer_oui                         = 2  ; //  Organizationally unique identifier of th
    string    model_name                               = 3  ; //  Model name of the CPE (human readable st
    string    description                              = 4  ; //  A full description of the CPE device (hu
    string    product_class                            = 5  ; //  Identifier of the class of product for w
    string    serial_number                            = 6  ; //  Serial number of the CPE.          This
    string    hardware_version                         = 7  ; //  A string identifying the particular CPE 
    string    software_version                         = 8  ; //  A string identifying the software versio
    string    enabled_options                          = 9  ; //  Comma-separated list of the OptionName o
    string    additional_hardware_version              = 10 ; //  A comma-separated list of any additional
    string    additional_software_version              = 11 ; //  A comma-separated list of any additional
    string    provisioning_code                        = 12 ; //  Identifier of the primary service provid
    string    device_status                            = 13 ; //  Current operational status of the device
    uint32    up_time                                  = 14 ; //  Time in seconds since the CPE was last r
    string    first_use_date                           = 15 ; //  Date and time in UTC that the CPE first 
    string    device_log                               = 16 ; //  Vendor-specific log(s).        .     
  }
  DeviceInfo device_info = 4; // Device.DeviceInfo.
  message ManagementServer { // Device.ManagementServer.
    string    url                                      = 1  ; //  URL, as defined in {{bibref|RFC3986}}, f
    string    username                                 = 2  ; //  Username used to authenticate the CPE wh
    string    password                                 = 3  ; //  Password used to authenticate the CPE wh
    bool      periodic_inform_enable                   = 4  ; //  Whether or not the CPE MUST periodically
    uint32    periodic_inform_interval                 = 5  ; //  The duration in seconds of the interval 
    string    periodic_inform_time                     = 6  ; //  An absolute time reference in UTC to det
    string    parameter_key                            = 7  ; //  {{param}} provides the ACS a reliable an
    string    connection_request_url                   = 8  ; //  HTTP URL, as defined in {{bibref|RFC3986
    string    connection_request_username              = 9  ; //  Username used to authenticate an ACS mak
    string    connection_request_password              = 10 ; //  Password used to authenticate an ACS mak
    bool      upgrades_managed                         = 11 ; //  Indicates whether or not the ACS will ma
    string    kick_url                                 = 12 ; //  Present only for a CPE that supports the
    string    download_progress_url                    = 13 ; //  Present only for a CPE that provides a L
    string    udpconnection_request_address            = 14 ; //  Address and port to which an ACS MAY sen
    uint32    udpconnection_request_address_notification_limit = 15 ; //  The minimum time, in seconds, between Ac
    bool      stunenable                               = 16 ; //  Enables or disables the use of STUN by t
    string    stunserver_address                       = 17 ; //  Host name or IP address of the STUN serv
    uint32    stunserver_port                          = 18 ; //  Port number of the STUN server for the C
    string    stunusername                             = 19 ; //  If is not {{empty}}, the value of the ST
    string    stunpassword                             = 20 ; //  The value of the STUN Password to be use
    int32     stunmaximum_keep_alive_period            = 21 ; //  If STUN Is enabled, the maximum period, 
    uint32    stunminimum_keep_alive_period            = 22 ; //  If STUN Is enabled, the minimum period, 
    bool      natdetected                              = 23 ; //  When STUN is enabled, this parameter ind
  }
  ManagementServer management_server = 5; // Device.ManagementServer.
  message GatewayInfo { // Device.GatewayInfo.
    string    manufacturer_oui                         = 1  ; //  Organizationally unique identifier of th
    string    product_class                            = 2  ; //  Identifier of the product class of the a
    string    serial_number                            = 3  ; //  Serial number of the associated Internet
  }
  GatewayInfo gateway_info = 6; // Device.GatewayInfo.
  message Config { // Device.Config.
    string    persistent_data                          = 1  ; //  Arbitrary user data that MUST persist ac
    string    config_file                              = 2  ; //  A dump of the currently running configur
  }
  Config config = 7; // Device.Config.
  message Time { // Device.Time.
    string    ntpserver1                               = 1  ; //  First NTP timeserver.  Either a host nam
    string    ntpserver2                               = 2  ; //  Second NTP timeserver.  Either a host na
    string    ntpserver3                               = 3  ; //  Third NTP timeserver.  Either a host nam
    string    ntpserver4                               = 4  ; //  Fourth NTP timeserver.  Either a host na
    string    ntpserver5                               = 5  ; //  Fifth NTP timeserver.  Either a host nam
    string    current_local_time                       = 6  ; //  The current date and time in the CPE's l
    string    local_time_zone                          = 7  ; //  The local time zone definition, encoded 
  }
  Time time = 8; // Device.Time.
  message UserInterface { // Device.UserInterface.
    bool      password_required                        = 1  ; //  Present only if the CPE provides a passw
    bool      password_user_selectable                 = 2  ; //  Present only if the CPE provides a passw
    bool      upgrade_available                        = 3  ; //  Indicates that a CPE upgrade is availabl
    string    warranty_date                            = 4  ; //  Indicates the date and time in UTC that 
    string    ispname                                  = 5  ; //  The name of the customer's ISP.        
    string    isphelp_desk                             = 6  ; //  The help desk phone number of the ISP. 
    string    isphome_page                             = 7  ; //  The URL of the ISP's home page.        
    string    isphelp_page                             = 8  ; //  The URL of the ISP's on-line support pag
    bytes     isplogo                                  = 9  ; //  Base64 encoded GIF or JPEG image. The bi
    uint32    isplogo_size                             = 10 ; //  Un-encoded binary image size in bytes. 
    string    ispmail_server                           = 11 ; //  The URL of the ISP's mail server.      
    string    ispnews_server                           = 12 ; //  The URL of the ISP's news server.      
    string    text_color                               = 13 ; //  The color of text on the GUI screens in 
    string    background_color                         = 14 ; //  The color of the GUI screen backgrounds 
    string    button_color                             = 15 ; //  The color of buttons on the GUI screens 
    string    button_text_color                        = 16 ; //  The color of text on buttons on the GUI 
    string    auto_update_server                       = 17 ; //  The server the CPE can check to see if a
    string    user_update_server                       = 18 ; //  The server where a user can check via a 
    string    available_languages                      = 19 ; //  Comma-separated list of user-interface l
    string    current_language                         = 20 ; //  Current user-interface language, specifi
  }
  UserInterface user_interface = 9; // Device.UserInterface.
  message LAN { // Device.LAN.
    string    addressing_type                          = 1  ; //  The method used to assign an address to 
    string    ipaddress                                = 2  ; //  The current IP address assigned to this 
    string    subnet_mask                              = 3  ; //  The current subnet mask.          The a
    string    default_gateway                          = 4  ; //  The IP address of the current default ga
    string    dnsservers                               = 5  ; //  Comma-separated list of IP address of th
    string    macaddress                               = 6  ; //  The physical address of this interface. 
    bool      macaddress_override                      = 7  ; //  Whether the value of MACAddress paramete
    uint32    dhcpoption_number_of_entries             = 8  ; //  Number of entries in the DHCP option tab
    message DHCPOption { // Device.LAN.DHCPOption.{i}.
      bool      request                                  = 1  ; //  Whether this entry represents a request 
      uint32    tag                                      = 2  ; //  Tag of the DHCP option as defined in RFC
      bytes     value                                    = 3  ; //  Base64 encoded octet string to be used a
    }
    repeated DHCPOption dhcpoption = 9; // Device.LAN.DHCPOption.{i}.
    message Stats { // Device.LAN.Stats.
      uint32    connection_up_time                       = 1  ; //  The time in seconds that this IP interfa
      uint32    total_bytes_sent                         = 2  ; //  Total number of IP payload bytes sent ov
      uint32    total_bytes_received                     = 3  ; //  Total number of IP payload bytes receive
      uint32    total_packets_sent                       = 4  ; //  Total number of IP packets sent over thi
      uint32    total_packets_received                   = 5  ; //  Total number of IP packets received over
      uint32    current_day_interval                     = 6  ; //  Number of seconds since the beginning of
      uint32    current_day_bytes_sent                   = 7  ; //  Total number of IP payload bytes sent ov
      uint32    current_day_bytes_received               = 8  ; //  Total number of IP payload bytes receive
      uint32    current_day_packets_sent                 = 9  ; //  Total number of IP packets sent over thi
      uint32    current_day_packets_received             = 10 ; //  Total number of IP packets received over
      uint32    quarter_hour_interval                    = 11 ; //  Number of seconds since the beginning of
      uint32    quarter_hour_bytes_sent                  = 12 ; //  Total number of IP payload bytes sent ov
      uint32    quarter_hour_bytes_received              = 13 ; //  Total number of IP payload bytes receive
      uint32    quarter_hour_packets_sent                = 14 ; //  Total number of IP packets sent over thi
      uint32    quarter_hour_packets_received            = 15 ; //  Total number of IP packets received over
    }
    Stats stats = 10; // Device.LAN.Stats.
    message IPPingDiagnostics { // Device.LAN.IPPingDiagnostics.
      string    diagnostics_state                        = 1  ; //  Indicates availability of diagnostic dat
      string    host                                     = 2  ; //  Host name or address of the host to ping
      uint32    number_of_repetitions                    = 3  ; //  Number of repetitions of the ping test t
      uint32    timeout                                  = 4  ; //  Timeout in milliseconds for the ping tes
      uint32    data_block_size                          = 5  ; //  Size of the data block in bytes to be se
      uint32    dscp                                     = 6  ; //  DiffServ codepoint to be used for the te
      uint32    success_count                            = 7  ; //  Result parameter indicating the number o
      uint32    failure_count                            = 8  ; //  Result parameter indicating the number o
      uint32    average_response_time                    = 9  ; //  Result parameter indicating the average 
      uint32    minimum_response_time                    = 10 ; //  Result parameter indicating the minimum 
      uint32    maximum_response_time                    = 11 ; //  Result parameter indicating the maximum 
    }
    IPPingDiagnostics ipping_diagnostics = 11; // Device.LAN.IPPingDiagnostics.
    message TraceRouteDiagnostics { // Device.LAN.TraceRouteDiagnostics.
      string    diagnostics_state                        = 1  ; //  Indicates availability of diagnostic dat
      string    host                                     = 2  ; //  Host name or address of the host to find
      uint32    timeout                                  = 3  ; //  Timeout in milliseconds for the trace ro
      uint32    data_block_size                          = 4  ; //  Size of the data block in bytes to be se
      uint32    max_hop_count                            = 5  ; //  The maximum number of hop used in outgoi
      uint32    dscp                                     = 6  ; //  DiffServ codepoint to be used for the te
      uint32    response_time                            = 7  ; //  Result parameter indicating the response
      uint32    number_of_route_hops                     = 8  ; //  Result parameter indicating the number o
      message RouteHops { // Device.LAN.TraceRouteDiagnostics.RouteHops.{i}.
        string    hop_host                                 = 1  ; //  Result parameter indicating the Host Nam
      }
      repeated RouteHops route_hops = 9; // Device.LAN.TraceRouteDiagnostics.RouteHops.{i}.
    }
    TraceRouteDiagnostics trace_route_diagnostics = 12; // Device.LAN.TraceRouteDiagnostics.
  }
  LAN lan = 10; // Device.LAN.
  message DownloadDiagnostics { // Device.DownloadDiagnostics.
    string    diagnostics_state                        = 1  ; //  Indicate the availability of diagnostic 
    string    interface                                = 2  ; //  {{reference|the IP-layer interface over 
    string    download_url                             = 3  ; //  The URL, as defined in {{bibref|RFC3986}
    uint32    dscp                                     = 4  ; //  The DiffServ code point for marking pack
    uint32    ethernet_priority                        = 5  ; //  Ethernet priority code for marking packe
    string    romtime                                  = 6  ; //  Request time in UTC, which MUST be speci
    string    bomtime                                  = 7  ; //  Begin of transmission time in UTC, which
    string    eomtime                                  = 8  ; //  End of transmission in UTC, which MUST b
    uint32    test_bytes_received                      = 9  ; //  The test traffic received in bytes durin
    uint32    total_bytes_received                     = 10 ; //  The total number of bytes received on th
    string    tcpopen_request_time                     = 11 ; //  Request time in UTC, which MUST be speci
    string    tcpopen_response_time                    = 12 ; //  Response time in UTC, which MUST be spec
  }
  DownloadDiagnostics download_diagnostics = 11; // Device.DownloadDiagnostics.
  message UploadDiagnostics { // Device.UploadDiagnostics.
    string    diagnostics_state                        = 1  ; //  Indicate the availability of diagnostic 
    string    interface                                = 2  ; //  {{reference|the IP-layer interface over 
    string    upload_url                               = 3  ; //  The URL, as defined in {{bibref|RFC3986}
    uint32    dscp                                     = 4  ; //  DiffServ code point for marking packets 
    uint32    ethernet_priority                        = 5  ; //  Ethernet priority code for marking packe
    uint32    test_file_length                         = 6  ; //  The size of the file (in bytes) to be up
    string    romtime                                  = 7  ; //  Request time in UTC, which MUST be speci
    string    bomtime                                  = 8  ; //  Begin of transmission time in UTC, which
    string    eomtime                                  = 9  ; //  End of transmission in UTC, which MUST b
    uint32    total_bytes_sent                         = 10 ; //  The total number of bytes sent on the In
    string    tcpopen_request_time                     = 11 ; //  Request time in UTC, which MUST be speci
    string    tcpopen_response_time                    = 12 ; //  Response time in UTC, which MUST be spec
  }
  UploadDiagnostics upload_diagnostics = 12; // Device.UploadDiagnostics.
  message UDPEchoConfig { // Device.UDPEchoConfig.
    bool      enable                                   = 1  ; //  MUST be enabled to receive UDP echo. Whe
    string    interface                                = 2  ; //  {{reference|IP-layer interface over whic
    string    source_ipaddress                         = 3  ; //  The Source IP address of the UDP echo pa
    uint32    udpport                                  = 4  ; //  The UDP port on which the UDP server MUS
    bool      echo_plus_enabled                        = 5  ; //  If {{true}} the CPE will perform necessa
    bool      echo_plus_supported                      = 6  ; //  {{true}} if UDP Echo Plus is supported.
    uint32    packets_received                         = 7  ; //  Incremented upon each valid UDP echo pac
    uint32    packets_responded                        = 8  ; //  Incremented for each UDP echo response s
    uint32    bytes_received                           = 9  ; //  The number of UDP received bytes includi
    uint32    bytes_responded                          = 10 ; //  The number of UDP responded bytes, inclu
    string    time_first_packet_received               = 11 ; //  Time in UTC, which MUST be specified to 
    string    time_last_packet_received                = 12 ; //  Time in UTC, which MUST be specified to 
  }
  UDPEchoConfig udpecho_config = 13; // Device.UDPEchoConfig.
}

message BoardRequest { int32 unused = 1; }

message BoardReply { int32 unused = 1; }

message X_012345_Message { int32 unused = 1;  } // Vendor extensions X_{OUI}_{NameOfNewThing}

service Board {
  rpc GetDevice(BoardRequest) returns (tr106.Device) {}
  rpc SetDevice(tr106.Device) returns (BoardReply) {}

  rpc GetServices(BoardRequest) returns (tr106.Device.Services) {}
  rpc SetServices(tr106.Device.Services) returns (BoardReply) {}

  rpc GetCapabilities(BoardRequest) returns (tr106.Device.Capabilities) {}
  rpc SetCapabilities(tr106.Device.Capabilities) returns (BoardReply) {}

  rpc GetPerformanceDiagnostic(BoardRequest) returns (tr106.Device.Capabilities.PerformanceDiagnostic) {}
  rpc SetPerformanceDiagnostic(tr106.Device.Capabilities.PerformanceDiagnostic) returns (BoardReply) {}

  rpc GetDeviceInfo(BoardRequest) returns (tr106.Device.DeviceInfo) {}
  rpc SetDeviceInfo(tr106.Device.DeviceInfo) returns (BoardReply) {}

  rpc GetManagementServer(BoardRequest) returns (tr106.Device.ManagementServer) {}
  rpc SetManagementServer(tr106.Device.ManagementServer) returns (BoardReply) {}

  rpc GetGatewayInfo(BoardRequest) returns (tr106.Device.GatewayInfo) {}
  rpc SetGatewayInfo(tr106.Device.GatewayInfo) returns (BoardReply) {}

  rpc GetConfig(BoardRequest) returns (tr106.Device.Config) {}
  rpc SetConfig(tr106.Device.Config) returns (BoardReply) {}

  rpc GetTime(BoardRequest) returns (tr106.Device.Time) {}
  rpc SetTime(tr106.Device.Time) returns (BoardReply) {}

  rpc GetUserInterface(BoardRequest) returns (tr106.Device.UserInterface) {}
  rpc SetUserInterface(tr106.Device.UserInterface) returns (BoardReply) {}

  rpc GetLAN(BoardRequest) returns (tr106.Device.LAN) {}
  rpc SetLAN(tr106.Device.LAN) returns (BoardReply) {}

  rpc GetDHCPOption(BoardRequest) returns (stream tr106.Device.LAN.DHCPOption) {}
  rpc SetDHCPOption(stream tr106.Device.LAN.DHCPOption) returns (BoardReply) {}

  rpc GetStats(BoardRequest) returns (tr106.Device.LAN.Stats) {}
  rpc SetStats(tr106.Device.LAN.Stats) returns (BoardReply) {}

  rpc GetIPPingDiagnostics(BoardRequest) returns (tr106.Device.LAN.IPPingDiagnostics) {}
  rpc SetIPPingDiagnostics(tr106.Device.LAN.IPPingDiagnostics) returns (BoardReply) {}

  rpc GetTraceRouteDiagnostics(BoardRequest) returns (tr106.Device.LAN.TraceRouteDiagnostics) {}
  rpc SetTraceRouteDiagnostics(tr106.Device.LAN.TraceRouteDiagnostics) returns (BoardReply) {}

  rpc GetRouteHops(BoardRequest) returns (stream tr106.Device.LAN.TraceRouteDiagnostics.RouteHops) {}
  rpc SetRouteHops(stream tr106.Device.LAN.TraceRouteDiagnostics.RouteHops) returns (BoardReply) {}

  rpc GetDownloadDiagnostics(BoardRequest) returns (tr106.Device.DownloadDiagnostics) {}
  rpc SetDownloadDiagnostics(tr106.Device.DownloadDiagnostics) returns (BoardReply) {}

  rpc GetUploadDiagnostics(BoardRequest) returns (tr106.Device.UploadDiagnostics) {}
  rpc SetUploadDiagnostics(tr106.Device.UploadDiagnostics) returns (BoardReply) {}

  rpc GetUDPEchoConfig(BoardRequest) returns (tr106.Device.UDPEchoConfig) {}
  rpc SetUDPEchoConfig(tr106.Device.UDPEchoConfig) returns (BoardReply) {}

}
