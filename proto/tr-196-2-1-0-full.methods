// Generated by cwmp_proto_to_grpc.cc
// source: tr-196-2-1-0-full.proto
// Use this file to implement gRPC server's service methods.

  Status GetFAPService(ServerContext* context, const FAPRequest* request, tr196::FAPService* reply) override { return Status::OK; }
  Status SetFAPService(ServerContext* context, const tr196::FAPService* request, FAPReply* reply) override { return Status::OK; }

  Status GetCapabilities(ServerContext* context, const FAPRequest* request, tr196::FAPService::Capabilities* reply) override { return Status::OK; }
  Status SetCapabilities(ServerContext* context, const tr196::FAPService::Capabilities* request, FAPReply* reply) override { return Status::OK; }

  Status GetUMTS(ServerContext* context, const FAPRequest* request, tr196::FAPService::Capabilities::UMTS* reply) override { return Status::OK; }
  Status SetUMTS(ServerContext* context, const tr196::FAPService::Capabilities::UMTS* request, FAPReply* reply) override { return Status::OK; }

  Status GetSelfConfig(ServerContext* context, const FAPRequest* request, tr196::FAPService::Capabilities::UMTS::SelfConfig* reply) override { return Status::OK; }
  Status SetSelfConfig(ServerContext* context, const tr196::FAPService::Capabilities::UMTS::SelfConfig* request, FAPReply* reply) override { return Status::OK; }

  Status GetLTE(ServerContext* context, const FAPRequest* request, tr196::FAPService::Capabilities::LTE* reply) override { return Status::OK; }
  Status SetLTE(ServerContext* context, const tr196::FAPService::Capabilities::LTE* request, FAPReply* reply) override { return Status::OK; }

  Status GetCDMA2000(ServerContext* context, const FAPRequest* request, tr196::FAPService::Capabilities::CDMA2000* reply) override { return Status::OK; }
  Status SetCDMA2000(ServerContext* context, const tr196::FAPService::Capabilities::CDMA2000* request, FAPReply* reply) override { return Status::OK; }

  Status GetOneX(ServerContext* context, const FAPRequest* request, tr196::FAPService::Capabilities::CDMA2000::OneX* reply) override { return Status::OK; }
  Status SetOneX(ServerContext* context, const tr196::FAPService::Capabilities::CDMA2000::OneX* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetSelfConfig(ServerContext* context, const FAPRequest* request, tr196::FAPService::Capabilities::CDMA2000::OneX::SelfConfig* reply) override { return Status::OK; }
  //?? Status SetSelfConfig(ServerContext* context, const tr196::FAPService::Capabilities::CDMA2000::OneX::SelfConfig* request, FAPReply* reply) override { return Status::OK; }

  Status GetHRPD(ServerContext* context, const FAPRequest* request, tr196::FAPService::Capabilities::CDMA2000::HRPD* reply) override { return Status::OK; }
  Status SetHRPD(ServerContext* context, const tr196::FAPService::Capabilities::CDMA2000::HRPD* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetSelfConfig(ServerContext* context, const FAPRequest* request, tr196::FAPService::Capabilities::CDMA2000::HRPD::SelfConfig* reply) override { return Status::OK; }
  //?? Status SetSelfConfig(ServerContext* context, const tr196::FAPService::Capabilities::CDMA2000::HRPD::SelfConfig* request, FAPReply* reply) override { return Status::OK; }

  Status GetFAPControl(ServerContext* context, const FAPRequest* request, tr196::FAPService::FAPControl* reply) override { return Status::OK; }
  Status SetFAPControl(ServerContext* context, const tr196::FAPService::FAPControl* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetUMTS(ServerContext* context, const FAPRequest* request, tr196::FAPService::FAPControl::UMTS* reply) override { return Status::OK; }
  //?? Status SetUMTS(ServerContext* context, const tr196::FAPService::FAPControl::UMTS* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetSelfConfig(ServerContext* context, const FAPRequest* request, tr196::FAPService::FAPControl::UMTS::SelfConfig* reply) override { return Status::OK; }
  //?? Status SetSelfConfig(ServerContext* context, const tr196::FAPService::FAPControl::UMTS::SelfConfig* request, FAPReply* reply) override { return Status::OK; }

  Status GetGateway(ServerContext* context, const FAPRequest* request, tr196::FAPService::FAPControl::UMTS::Gateway* reply) override { return Status::OK; }
  Status SetGateway(ServerContext* context, const tr196::FAPService::FAPControl::UMTS::Gateway* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetLTE(ServerContext* context, const FAPRequest* request, tr196::FAPService::FAPControl::LTE* reply) override { return Status::OK; }
  //?? Status SetLTE(ServerContext* context, const tr196::FAPService::FAPControl::LTE* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetGateway(ServerContext* context, const FAPRequest* request, tr196::FAPService::FAPControl::LTE::Gateway* reply) override { return Status::OK; }
  //?? Status SetGateway(ServerContext* context, const tr196::FAPService::FAPControl::LTE::Gateway* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetCDMA2000(ServerContext* context, const FAPRequest* request, tr196::FAPService::FAPControl::CDMA2000* reply) override { return Status::OK; }
  //?? Status SetCDMA2000(ServerContext* context, const tr196::FAPService::FAPControl::CDMA2000* request, FAPReply* reply) override { return Status::OK; }

  Status GetTime(ServerContext* context, const FAPRequest* request, tr196::FAPService::FAPControl::CDMA2000::Time* reply) override { return Status::OK; }
  Status SetTime(ServerContext* context, const tr196::FAPService::FAPControl::CDMA2000::Time* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetOneX(ServerContext* context, const FAPRequest* request, tr196::FAPService::FAPControl::CDMA2000::OneX* reply) override { return Status::OK; }
  //?? Status SetOneX(ServerContext* context, const tr196::FAPService::FAPControl::CDMA2000::OneX* request, FAPReply* reply) override { return Status::OK; }

  Status GetActiveHandinMeasurement(ServerContext* context, const FAPRequest* request, tr196::FAPService::FAPControl::CDMA2000::OneX::ActiveHandinMeasurement* reply) override { return Status::OK; }
  Status SetActiveHandinMeasurement(ServerContext* context, const tr196::FAPService::FAPControl::CDMA2000::OneX::ActiveHandinMeasurement* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetSelfConfig(ServerContext* context, const FAPRequest* request, tr196::FAPService::FAPControl::CDMA2000::OneX::SelfConfig* reply) override { return Status::OK; }
  //?? Status SetSelfConfig(ServerContext* context, const tr196::FAPService::FAPControl::CDMA2000::OneX::SelfConfig* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetGateway(ServerContext* context, const FAPRequest* request, tr196::FAPService::FAPControl::CDMA2000::Gateway* reply) override { return Status::OK; }
  //?? Status SetGateway(ServerContext* context, const tr196::FAPService::FAPControl::CDMA2000::Gateway* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetHRPD(ServerContext* context, const FAPRequest* request, tr196::FAPService::FAPControl::CDMA2000::HRPD* reply) override { return Status::OK; }
  //?? Status SetHRPD(ServerContext* context, const tr196::FAPService::FAPControl::CDMA2000::HRPD* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetSelfConfig(ServerContext* context, const FAPRequest* request, tr196::FAPService::FAPControl::CDMA2000::HRPD::SelfConfig* reply) override { return Status::OK; }
  //?? Status SetSelfConfig(ServerContext* context, const tr196::FAPService::FAPControl::CDMA2000::HRPD::SelfConfig* request, FAPReply* reply) override { return Status::OK; }

  Status GetA13(ServerContext* context, const FAPRequest* request, tr196::FAPService::FAPControl::CDMA2000::HRPD::A13* reply) override { return Status::OK; }
  Status SetA13(ServerContext* context, const tr196::FAPService::FAPControl::CDMA2000::HRPD::A13* request, FAPReply* reply) override { return Status::OK; }

  Status GetColorCodeToUATI104(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::FAPControl::CDMA2000::HRPD::A13::ColorCodeToUATI104>* reply) override { return Status::OK; }
  Status SetColorCodeToUATI104(ServerContext* context, ServerReader<tr196::FAPService::FAPControl::CDMA2000::HRPD::A13::ColorCodeToUATI104>* request, FAPReply* reply) override { return Status::OK; }

  Status GetHRPDSubnetToIP(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::FAPControl::CDMA2000::HRPD::A13::HRPDSubnetToIP>* reply) override { return Status::OK; }
  Status SetHRPDSubnetToIP(ServerContext* context, ServerReader<tr196::FAPService::FAPControl::CDMA2000::HRPD::A13::HRPDSubnetToIP>* request, FAPReply* reply) override { return Status::OK; }

  Status GetAccessMgmt(ServerContext* context, const FAPRequest* request, tr196::FAPService::AccessMgmt* reply) override { return Status::OK; }
  Status SetAccessMgmt(ServerContext* context, const tr196::FAPService::AccessMgmt* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetUMTS(ServerContext* context, const FAPRequest* request, tr196::FAPService::AccessMgmt::UMTS* reply) override { return Status::OK; }
  //?? Status SetUMTS(ServerContext* context, const tr196::FAPService::AccessMgmt::UMTS* request, FAPReply* reply) override { return Status::OK; }

  Status GetMemberDetail(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::AccessMgmt::UMTS::MemberDetail>* reply) override { return Status::OK; }
  Status SetMemberDetail(ServerContext* context, ServerReader<tr196::FAPService::AccessMgmt::UMTS::MemberDetail>* request, FAPReply* reply) override { return Status::OK; }

  Status GetLocalIPAccess(ServerContext* context, const FAPRequest* request, tr196::FAPService::AccessMgmt::UMTS::LocalIPAccess* reply) override { return Status::OK; }
  Status SetLocalIPAccess(ServerContext* context, const tr196::FAPService::AccessMgmt::UMTS::LocalIPAccess* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetLTE(ServerContext* context, const FAPRequest* request, tr196::FAPService::AccessMgmt::LTE* reply) override { return Status::OK; }
  //?? Status SetLTE(ServerContext* context, const tr196::FAPService::AccessMgmt::LTE* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetLocalIPAccess(ServerContext* context, const FAPRequest* request, tr196::FAPService::AccessMgmt::LTE::LocalIPAccess* reply) override { return Status::OK; }
  //?? Status SetLocalIPAccess(ServerContext* context, const tr196::FAPService::AccessMgmt::LTE::LocalIPAccess* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetCDMA2000(ServerContext* context, const FAPRequest* request, tr196::FAPService::AccessMgmt::CDMA2000* reply) override { return Status::OK; }
  //?? Status SetCDMA2000(ServerContext* context, const tr196::FAPService::AccessMgmt::CDMA2000* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetMemberDetail(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::AccessMgmt::CDMA2000::MemberDetail>* reply) override { return Status::OK; }
  //?? Status SetMemberDetail(ServerContext* context, ServerReader<tr196::FAPService::AccessMgmt::CDMA2000::MemberDetail>* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetLocalIPAccess(ServerContext* context, const FAPRequest* request, tr196::FAPService::AccessMgmt::CDMA2000::LocalIPAccess* reply) override { return Status::OK; }
  //?? Status SetLocalIPAccess(ServerContext* context, const tr196::FAPService::AccessMgmt::CDMA2000::LocalIPAccess* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetHRPD(ServerContext* context, const FAPRequest* request, tr196::FAPService::AccessMgmt::CDMA2000::LocalIPAccess::HRPD* reply) override { return Status::OK; }
  //?? Status SetHRPD(ServerContext* context, const tr196::FAPService::AccessMgmt::CDMA2000::LocalIPAccess::HRPD* request, FAPReply* reply) override { return Status::OK; }

  Status GetEgressFilter(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::AccessMgmt::CDMA2000::LocalIPAccess::HRPD::EgressFilter>* reply) override { return Status::OK; }
  Status SetEgressFilter(ServerContext* context, ServerReader<tr196::FAPService::AccessMgmt::CDMA2000::LocalIPAccess::HRPD::EgressFilter>* request, FAPReply* reply) override { return Status::OK; }

  Status GetLegacy(ServerContext* context, const FAPRequest* request, tr196::FAPService::AccessMgmt::Legacy* reply) override { return Status::OK; }
  Status SetLegacy(ServerContext* context, const tr196::FAPService::AccessMgmt::Legacy* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetLocalIPAccess(ServerContext* context, const FAPRequest* request, tr196::FAPService::AccessMgmt::Legacy::LocalIPAccess* reply) override { return Status::OK; }
  //?? Status SetLocalIPAccess(ServerContext* context, const tr196::FAPService::AccessMgmt::Legacy::LocalIPAccess* request, FAPReply* reply) override { return Status::OK; }

  Status GetRule(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::AccessMgmt::Legacy::LocalIPAccess::Rule>* reply) override { return Status::OK; }
  Status SetRule(ServerContext* context, ServerReader<tr196::FAPService::AccessMgmt::Legacy::LocalIPAccess::Rule>* request, FAPReply* reply) override { return Status::OK; }

  Status GetCellConfig(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig* reply) override { return Status::OK; }
  Status SetCellConfig(ServerContext* context, const tr196::FAPService::CellConfig* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetUMTS(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS* reply) override { return Status::OK; }
  //?? Status SetUMTS(ServerContext* context, const tr196::FAPService::CellConfig::UMTS* request, FAPReply* reply) override { return Status::OK; }

  Status GetCN(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS::CN* reply) override { return Status::OK; }
  Status SetCN(ServerContext* context, const tr196::FAPService::CellConfig::UMTS::CN* request, FAPReply* reply) override { return Status::OK; }

  Status GetCSDomain(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS::CN::CSDomain* reply) override { return Status::OK; }
  Status SetCSDomain(ServerContext* context, const tr196::FAPService::CellConfig::UMTS::CN::CSDomain* request, FAPReply* reply) override { return Status::OK; }

  Status GetRAB(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS::CN::CSDomain::RAB* reply) override { return Status::OK; }
  Status SetRAB(ServerContext* context, const tr196::FAPService::CellConfig::UMTS::CN::CSDomain::RAB* request, FAPReply* reply) override { return Status::OK; }

  Status GetStats(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS::CN::CSDomain::RAB::Stats* reply) override { return Status::OK; }
  Status SetStats(ServerContext* context, const tr196::FAPService::CellConfig::UMTS::CN::CSDomain::RAB::Stats* request, FAPReply* reply) override { return Status::OK; }

  Status GetHHO(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS::CN::CSDomain::HHO* reply) override { return Status::OK; }
  Status SetHHO(ServerContext* context, const tr196::FAPService::CellConfig::UMTS::CN::CSDomain::HHO* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetStats(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS::CN::CSDomain::HHO::Stats* reply) override { return Status::OK; }
  //?? Status SetStats(ServerContext* context, const tr196::FAPService::CellConfig::UMTS::CN::CSDomain::HHO::Stats* request, FAPReply* reply) override { return Status::OK; }

  Status GetPSDomain(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS::CN::PSDomain* reply) override { return Status::OK; }
  Status SetPSDomain(ServerContext* context, const tr196::FAPService::CellConfig::UMTS::CN::PSDomain* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetRAB(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS::CN::PSDomain::RAB* reply) override { return Status::OK; }
  //?? Status SetRAB(ServerContext* context, const tr196::FAPService::CellConfig::UMTS::CN::PSDomain::RAB* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetStats(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS::CN::PSDomain::RAB::Stats* reply) override { return Status::OK; }
  //?? Status SetStats(ServerContext* context, const tr196::FAPService::CellConfig::UMTS::CN::PSDomain::RAB::Stats* request, FAPReply* reply) override { return Status::OK; }

  Status GetLGW(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::UMTS::CN::PSDomain::RAB::Stats::LGW>* reply) override { return Status::OK; }
  Status SetLGW(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::UMTS::CN::PSDomain::RAB::Stats::LGW>* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetHHO(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS::CN::HHO* reply) override { return Status::OK; }
  //?? Status SetHHO(ServerContext* context, const tr196::FAPService::CellConfig::UMTS::CN::HHO* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetStats(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS::CN::HHO::Stats* reply) override { return Status::OK; }
  //?? Status SetStats(ServerContext* context, const tr196::FAPService::CellConfig::UMTS::CN::HHO::Stats* request, FAPReply* reply) override { return Status::OK; }

  Status GetRAN(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS::RAN* reply) override { return Status::OK; }
  Status SetRAN(ServerContext* context, const tr196::FAPService::CellConfig::UMTS::RAN* request, FAPReply* reply) override { return Status::OK; }

  Status GetCSG(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS::RAN::CSG* reply) override { return Status::OK; }
  Status SetCSG(ServerContext* context, const tr196::FAPService::CellConfig::UMTS::RAN::CSG* request, FAPReply* reply) override { return Status::OK; }

  Status GetCSGPSCSplitInfo(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS::RAN::CSG::CSGPSCSplitInfo* reply) override { return Status::OK; }
  Status SetCSGPSCSplitInfo(ServerContext* context, const tr196::FAPService::CellConfig::UMTS::RAN::CSG::CSGPSCSplitInfo* request, FAPReply* reply) override { return Status::OK; }

  Status GetCellSelection(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS::RAN::CellSelection* reply) override { return Status::OK; }
  Status SetCellSelection(ServerContext* context, const tr196::FAPService::CellConfig::UMTS::RAN::CellSelection* request, FAPReply* reply) override { return Status::OK; }

  Status GetRRCTimers(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS::RAN::RRCTimers* reply) override { return Status::OK; }
  Status SetRRCTimers(ServerContext* context, const tr196::FAPService::CellConfig::UMTS::RAN::RRCTimers* request, FAPReply* reply) override { return Status::OK; }

  Status GetDRX(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS::RAN::DRX* reply) override { return Status::OK; }
  Status SetDRX(ServerContext* context, const tr196::FAPService::CellConfig::UMTS::RAN::DRX* request, FAPReply* reply) override { return Status::OK; }

  Status GetPowerControl(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS::RAN::PowerControl* reply) override { return Status::OK; }
  Status SetPowerControl(ServerContext* context, const tr196::FAPService::CellConfig::UMTS::RAN::PowerControl* request, FAPReply* reply) override { return Status::OK; }

  Status GetCellRestriction(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS::RAN::CellRestriction* reply) override { return Status::OK; }
  Status SetCellRestriction(ServerContext* context, const tr196::FAPService::CellConfig::UMTS::RAN::CellRestriction* request, FAPReply* reply) override { return Status::OK; }

  Status GetIntraFreqMeas(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS::RAN::IntraFreqMeas* reply) override { return Status::OK; }
  Status SetIntraFreqMeas(ServerContext* context, const tr196::FAPService::CellConfig::UMTS::RAN::IntraFreqMeas* request, FAPReply* reply) override { return Status::OK; }

  Status GetInstance(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::UMTS::RAN::IntraFreqMeas::Instance>* reply) override { return Status::OK; }
  Status SetInstance(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::UMTS::RAN::IntraFreqMeas::Instance>* request, FAPReply* reply) override { return Status::OK; }

  Status GetInterFreqMeas(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS::RAN::InterFreqMeas* reply) override { return Status::OK; }
  Status SetInterFreqMeas(ServerContext* context, const tr196::FAPService::CellConfig::UMTS::RAN::InterFreqMeas* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetInstance(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::UMTS::RAN::InterFreqMeas::Instance>* reply) override { return Status::OK; }
  //?? Status SetInstance(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::UMTS::RAN::InterFreqMeas::Instance>* request, FAPReply* reply) override { return Status::OK; }

  Status GetInterRATMeas(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS::RAN::InterRATMeas* reply) override { return Status::OK; }
  Status SetInterRATMeas(ServerContext* context, const tr196::FAPService::CellConfig::UMTS::RAN::InterRATMeas* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetInstance(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::UMTS::RAN::InterRATMeas::Instance>* reply) override { return Status::OK; }
  //?? Status SetInstance(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::UMTS::RAN::InterRATMeas::Instance>* request, FAPReply* reply) override { return Status::OK; }

  Status GetUEInternalMeas(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS::RAN::UEInternalMeas* reply) override { return Status::OK; }
  Status SetUEInternalMeas(ServerContext* context, const tr196::FAPService::CellConfig::UMTS::RAN::UEInternalMeas* request, FAPReply* reply) override { return Status::OK; }

  Status GetRF(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS::RAN::RF* reply) override { return Status::OK; }
  Status SetRF(ServerContext* context, const tr196::FAPService::CellConfig::UMTS::RAN::RF* request, FAPReply* reply) override { return Status::OK; }

  Status GetNeighborList(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS::RAN::NeighborList* reply) override { return Status::OK; }
  Status SetNeighborList(ServerContext* context, const tr196::FAPService::CellConfig::UMTS::RAN::NeighborList* request, FAPReply* reply) override { return Status::OK; }

  Status GetIntraFreqCell(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::UMTS::RAN::NeighborList::IntraFreqCell>* reply) override { return Status::OK; }
  Status SetIntraFreqCell(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::UMTS::RAN::NeighborList::IntraFreqCell>* request, FAPReply* reply) override { return Status::OK; }

  Status GetInterFreqCell(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::UMTS::RAN::NeighborList::InterFreqCell>* reply) override { return Status::OK; }
  Status SetInterFreqCell(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::UMTS::RAN::NeighborList::InterFreqCell>* request, FAPReply* reply) override { return Status::OK; }

  Status GetInterRATCell(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS::RAN::NeighborList::InterRATCell* reply) override { return Status::OK; }
  Status SetInterRATCell(ServerContext* context, const tr196::FAPService::CellConfig::UMTS::RAN::NeighborList::InterRATCell* request, FAPReply* reply) override { return Status::OK; }

  Status GetGSM(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::UMTS::RAN::NeighborList::InterRATCell::GSM>* reply) override { return Status::OK; }
  Status SetGSM(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::UMTS::RAN::NeighborList::InterRATCell::GSM>* request, FAPReply* reply) override { return Status::OK; }

  Status GetNeighborListInUse(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS::RAN::NeighborListInUse* reply) override { return Status::OK; }
  Status SetNeighborListInUse(ServerContext* context, const tr196::FAPService::CellConfig::UMTS::RAN::NeighborListInUse* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetIntraFreqCell(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::UMTS::RAN::NeighborListInUse::IntraFreqCell>* reply) override { return Status::OK; }
  //?? Status SetIntraFreqCell(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::UMTS::RAN::NeighborListInUse::IntraFreqCell>* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetInterFreqCell(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::UMTS::RAN::NeighborListInUse::InterFreqCell>* reply) override { return Status::OK; }
  //?? Status SetInterFreqCell(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::UMTS::RAN::NeighborListInUse::InterFreqCell>* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetInterRATCell(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS::RAN::NeighborListInUse::InterRATCell* reply) override { return Status::OK; }
  //?? Status SetInterRATCell(ServerContext* context, const tr196::FAPService::CellConfig::UMTS::RAN::NeighborListInUse::InterRATCell* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetGSM(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::UMTS::RAN::NeighborListInUse::InterRATCell::GSM>* reply) override { return Status::OK; }
  //?? Status SetGSM(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::UMTS::RAN::NeighborListInUse::InterRATCell::GSM>* request, FAPReply* reply) override { return Status::OK; }

  Status GetRRC(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS::RAN::RRC* reply) override { return Status::OK; }
  Status SetRRC(ServerContext* context, const tr196::FAPService::CellConfig::UMTS::RAN::RRC* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetStats(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS::RAN::RRC::Stats* reply) override { return Status::OK; }
  //?? Status SetStats(ServerContext* context, const tr196::FAPService::CellConfig::UMTS::RAN::RRC::Stats* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetRAB(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::UMTS::RAB* reply) override { return Status::OK; }
  //?? Status SetRAB(ServerContext* context, const tr196::FAPService::CellConfig::UMTS::RAB* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetLTE(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE* reply) override { return Status::OK; }
  //?? Status SetLTE(ServerContext* context, const tr196::FAPService::CellConfig::LTE* request, FAPReply* reply) override { return Status::OK; }

  Status GetTunnel(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::LTE::Tunnel>* reply) override { return Status::OK; }
  Status SetTunnel(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::LTE::Tunnel>* request, FAPReply* reply) override { return Status::OK; }

  Status GetEPC(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::EPC* reply) override { return Status::OK; }
  Status SetEPC(ServerContext* context, const tr196::FAPService::CellConfig::LTE::EPC* request, FAPReply* reply) override { return Status::OK; }

  Status GetPLMNList(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::LTE::EPC::PLMNList>* reply) override { return Status::OK; }
  Status SetPLMNList(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::LTE::EPC::PLMNList>* request, FAPReply* reply) override { return Status::OK; }

  Status GetQoS(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::LTE::EPC::QoS>* reply) override { return Status::OK; }
  Status SetQoS(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::LTE::EPC::QoS>* request, FAPReply* reply) override { return Status::OK; }

  Status GetHO(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::EPC::HO* reply) override { return Status::OK; }
  Status SetHO(ServerContext* context, const tr196::FAPService::CellConfig::LTE::EPC::HO* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetStats(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::EPC::HO::Stats* reply) override { return Status::OK; }
  //?? Status SetStats(ServerContext* context, const tr196::FAPService::CellConfig::LTE::EPC::HO::Stats* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetRAN(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN* reply) override { return Status::OK; }
  //?? Status SetRAN(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN* request, FAPReply* reply) override { return Status::OK; }

  Status GetCommon(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::Common* reply) override { return Status::OK; }
  Status SetCommon(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::Common* request, FAPReply* reply) override { return Status::OK; }

  Status GetS1AP(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::S1AP* reply) override { return Status::OK; }
  Status SetS1AP(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::S1AP* request, FAPReply* reply) override { return Status::OK; }

  Status GetS1U(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::S1U* reply) override { return Status::OK; }
  Status SetS1U(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::S1U* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetRF(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::RF* reply) override { return Status::OK; }
  //?? Status SetRF(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::RF* request, FAPReply* reply) override { return Status::OK; }

  Status GetPHY(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::PHY* reply) override { return Status::OK; }
  Status SetPHY(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::PHY* request, FAPReply* reply) override { return Status::OK; }

  Status GetAntennaInfo(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::PHY::AntennaInfo* reply) override { return Status::OK; }
  Status SetAntennaInfo(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::PHY::AntennaInfo* request, FAPReply* reply) override { return Status::OK; }

  Status GetPDSCH(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::PHY::PDSCH* reply) override { return Status::OK; }
  Status SetPDSCH(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::PHY::PDSCH* request, FAPReply* reply) override { return Status::OK; }

  Status GetSRS(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::PHY::SRS* reply) override { return Status::OK; }
  Status SetSRS(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::PHY::SRS* request, FAPReply* reply) override { return Status::OK; }

  Status GetPRACH(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::PHY::PRACH* reply) override { return Status::OK; }
  Status SetPRACH(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::PHY::PRACH* request, FAPReply* reply) override { return Status::OK; }

  Status GetPUCCH(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::PHY::PUCCH* reply) override { return Status::OK; }
  Status SetPUCCH(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::PHY::PUCCH* request, FAPReply* reply) override { return Status::OK; }

  Status GetPUSCH(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::PHY::PUSCH* reply) override { return Status::OK; }
  Status SetPUSCH(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::PHY::PUSCH* request, FAPReply* reply) override { return Status::OK; }

  Status GetULRS(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::PHY::PUSCH::ULRS* reply) override { return Status::OK; }
  Status SetULRS(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::PHY::PUSCH::ULRS* request, FAPReply* reply) override { return Status::OK; }

  Status GetULPowerControl(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::PHY::ULPowerControl* reply) override { return Status::OK; }
  Status SetULPowerControl(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::PHY::ULPowerControl* request, FAPReply* reply) override { return Status::OK; }

  Status GetMBSFN(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::PHY::MBSFN* reply) override { return Status::OK; }
  Status SetMBSFN(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::PHY::MBSFN* request, FAPReply* reply) override { return Status::OK; }

  Status GetSFConfigList(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::LTE::RAN::PHY::MBSFN::SFConfigList>* reply) override { return Status::OK; }
  Status SetSFConfigList(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::LTE::RAN::PHY::MBSFN::SFConfigList>* request, FAPReply* reply) override { return Status::OK; }

  Status GetPRS(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::PHY::PRS* reply) override { return Status::OK; }
  Status SetPRS(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::PHY::PRS* request, FAPReply* reply) override { return Status::OK; }

  Status GetTDDFrame(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::PHY::TDDFrame* reply) override { return Status::OK; }
  Status SetTDDFrame(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::PHY::TDDFrame* request, FAPReply* reply) override { return Status::OK; }

  Status GetMAC(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::MAC* reply) override { return Status::OK; }
  Status SetMAC(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::MAC* request, FAPReply* reply) override { return Status::OK; }

  Status GetRACH(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::MAC::RACH* reply) override { return Status::OK; }
  Status SetRACH(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::MAC::RACH* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetDRX(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::MAC::DRX* reply) override { return Status::OK; }
  //?? Status SetDRX(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::MAC::DRX* request, FAPReply* reply) override { return Status::OK; }

  Status GetULSCH(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::MAC::ULSCH* reply) override { return Status::OK; }
  Status SetULSCH(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::MAC::ULSCH* request, FAPReply* reply) override { return Status::OK; }

  Status GetRLC(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::RLC* reply) override { return Status::OK; }
  Status SetRLC(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::RLC* request, FAPReply* reply) override { return Status::OK; }

  Status GetSRB1(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::RLC::SRB1* reply) override { return Status::OK; }
  Status SetSRB1(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::RLC::SRB1* request, FAPReply* reply) override { return Status::OK; }

  Status GetSRB2(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::RLC::SRB2* reply) override { return Status::OK; }
  Status SetSRB2(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::RLC::SRB2* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetRRCTimers(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::RRCTimers* reply) override { return Status::OK; }
  //?? Status SetRRCTimers(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::RRCTimers* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetCellRestriction(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::CellRestriction* reply) override { return Status::OK; }
  //?? Status SetCellRestriction(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::CellRestriction* request, FAPReply* reply) override { return Status::OK; }

  Status GetMobility(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::Mobility* reply) override { return Status::OK; }
  Status SetMobility(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::Mobility* request, FAPReply* reply) override { return Status::OK; }

  Status GetIdleMode(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::Mobility::IdleMode* reply) override { return Status::OK; }
  Status SetIdleMode(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::Mobility::IdleMode* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetCommon(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::Mobility::IdleMode::Common* reply) override { return Status::OK; }
  //?? Status SetCommon(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::Mobility::IdleMode::Common* request, FAPReply* reply) override { return Status::OK; }

  Status GetIntraFreq(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::Mobility::IdleMode::IntraFreq* reply) override { return Status::OK; }
  Status SetIntraFreq(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::Mobility::IdleMode::IntraFreq* request, FAPReply* reply) override { return Status::OK; }

  Status GetInterFreq(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::Mobility::IdleMode::InterFreq* reply) override { return Status::OK; }
  Status SetInterFreq(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::Mobility::IdleMode::InterFreq* request, FAPReply* reply) override { return Status::OK; }

  Status GetCarrier(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::LTE::RAN::Mobility::IdleMode::InterFreq::Carrier>* reply) override { return Status::OK; }
  Status SetCarrier(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::LTE::RAN::Mobility::IdleMode::InterFreq::Carrier>* request, FAPReply* reply) override { return Status::OK; }

  Status GetIRAT(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::Mobility::IdleMode::IRAT* reply) override { return Status::OK; }
  Status SetIRAT(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::Mobility::IdleMode::IRAT* request, FAPReply* reply) override { return Status::OK; }

  Status GetUTRA(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::Mobility::IdleMode::IRAT::UTRA* reply) override { return Status::OK; }
  Status SetUTRA(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::Mobility::IdleMode::IRAT::UTRA* request, FAPReply* reply) override { return Status::OK; }

  Status GetUTRANFDDFreq(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::LTE::RAN::Mobility::IdleMode::IRAT::UTRA::UTRANFDDFreq>* reply) override { return Status::OK; }
  Status SetUTRANFDDFreq(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::LTE::RAN::Mobility::IdleMode::IRAT::UTRA::UTRANFDDFreq>* request, FAPReply* reply) override { return Status::OK; }

  Status GetGERAN(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::Mobility::IdleMode::IRAT::GERAN* reply) override { return Status::OK; }
  Status SetGERAN(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::Mobility::IdleMode::IRAT::GERAN* request, FAPReply* reply) override { return Status::OK; }

  Status GetGERANFreqGroup(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::LTE::RAN::Mobility::IdleMode::IRAT::GERAN::GERANFreqGroup>* reply) override { return Status::OK; }
  Status SetGERANFreqGroup(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::LTE::RAN::Mobility::IdleMode::IRAT::GERAN::GERANFreqGroup>* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetCDMA2000(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::Mobility::IdleMode::IRAT::CDMA2000* reply) override { return Status::OK; }
  //?? Status SetCDMA2000(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::Mobility::IdleMode::IRAT::CDMA2000* request, FAPReply* reply) override { return Status::OK; }

  Status GetCDMA2000Band(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::LTE::RAN::Mobility::IdleMode::IRAT::CDMA2000::CDMA2000Band>* reply) override { return Status::OK; }
  Status SetCDMA2000Band(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::LTE::RAN::Mobility::IdleMode::IRAT::CDMA2000::CDMA2000Band>* request, FAPReply* reply) override { return Status::OK; }

  Status GetConnMode(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::Mobility::ConnMode* reply) override { return Status::OK; }
  Status SetConnMode(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::Mobility::ConnMode* request, FAPReply* reply) override { return Status::OK; }

  Status GetEUTRA(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::Mobility::ConnMode::EUTRA* reply) override { return Status::OK; }
  Status SetEUTRA(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::Mobility::ConnMode::EUTRA* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetIRAT(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::Mobility::ConnMode::IRAT* reply) override { return Status::OK; }
  //?? Status SetIRAT(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::Mobility::ConnMode::IRAT* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetNeighborList(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::NeighborList* reply) override { return Status::OK; }
  //?? Status SetNeighborList(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::NeighborList* request, FAPReply* reply) override { return Status::OK; }

  Status GetLTECell(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::LTE::RAN::NeighborList::LTECell>* reply) override { return Status::OK; }
  Status SetLTECell(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::LTE::RAN::NeighborList::LTECell>* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetInterRATCell(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::NeighborList::InterRATCell* reply) override { return Status::OK; }
  //?? Status SetInterRATCell(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::NeighborList::InterRATCell* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetUMTS(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::LTE::RAN::NeighborList::InterRATCell::UMTS>* reply) override { return Status::OK; }
  //?? Status SetUMTS(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::LTE::RAN::NeighborList::InterRATCell::UMTS>* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetGSM(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::LTE::RAN::NeighborList::InterRATCell::GSM>* reply) override { return Status::OK; }
  //?? Status SetGSM(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::LTE::RAN::NeighborList::InterRATCell::GSM>* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetCDMA2000(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::LTE::RAN::NeighborList::InterRATCell::CDMA2000>* reply) override { return Status::OK; }
  //?? Status SetCDMA2000(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::LTE::RAN::NeighborList::InterRATCell::CDMA2000>* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetNeighborListInUse(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::NeighborListInUse* reply) override { return Status::OK; }
  //?? Status SetNeighborListInUse(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::NeighborListInUse* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetLTECell(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::LTE::RAN::NeighborListInUse::LTECell>* reply) override { return Status::OK; }
  //?? Status SetLTECell(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::LTE::RAN::NeighborListInUse::LTECell>* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetInterRATCell(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::NeighborListInUse::InterRATCell* reply) override { return Status::OK; }
  //?? Status SetInterRATCell(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::NeighborListInUse::InterRATCell* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetUMTS(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::LTE::RAN::NeighborListInUse::InterRATCell::UMTS>* reply) override { return Status::OK; }
  //?? Status SetUMTS(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::LTE::RAN::NeighborListInUse::InterRATCell::UMTS>* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetGSM(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::LTE::RAN::NeighborListInUse::InterRATCell::GSM>* reply) override { return Status::OK; }
  //?? Status SetGSM(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::LTE::RAN::NeighborListInUse::InterRATCell::GSM>* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetCDMA2000(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::LTE::RAN::NeighborListInUse::InterRATCell::CDMA2000>* reply) override { return Status::OK; }
  //?? Status SetCDMA2000(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::LTE::RAN::NeighborListInUse::InterRATCell::CDMA2000>* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetCSG(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::CSG* reply) override { return Status::OK; }
  //?? Status SetCSG(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::CSG* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetStats(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::CSG::Stats* reply) override { return Status::OK; }
  //?? Status SetStats(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::CSG::Stats* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetRRC(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::RRC* reply) override { return Status::OK; }
  //?? Status SetRRC(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::RRC* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetStats(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::RRC::Stats* reply) override { return Status::OK; }
  //?? Status SetStats(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::RRC::Stats* request, FAPReply* reply) override { return Status::OK; }

  Status GetERAB(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::ERAB* reply) override { return Status::OK; }
  Status SetERAB(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::ERAB* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetStats(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::ERAB::Stats* reply) override { return Status::OK; }
  //?? Status SetStats(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::ERAB::Stats* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetLGW(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::LTE::RAN::ERAB::Stats::LGW>* reply) override { return Status::OK; }
  //?? Status SetLGW(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::LTE::RAN::ERAB::Stats::LGW>* request, FAPReply* reply) override { return Status::OK; }

  Status GetDRB(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::DRB* reply) override { return Status::OK; }
  Status SetDRB(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::DRB* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetStats(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::DRB::Stats* reply) override { return Status::OK; }
  //?? Status SetStats(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::DRB::Stats* request, FAPReply* reply) override { return Status::OK; }

  Status GetRRU(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::RRU* reply) override { return Status::OK; }
  Status SetRRU(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::RRU* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetStats(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::RAN::RRU::Stats* reply) override { return Status::OK; }
  //?? Status SetStats(ServerContext* context, const tr196::FAPService::CellConfig::LTE::RAN::RRU::Stats* request, FAPReply* reply) override { return Status::OK; }

  Status GetEnergySavings(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::EnergySavings* reply) override { return Status::OK; }
  Status SetEnergySavings(ServerContext* context, const tr196::FAPService::CellConfig::LTE::EnergySavings* request, FAPReply* reply) override { return Status::OK; }

  Status GetActivationCandidateCellsLoad(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::EnergySavings::ActivationCandidateCellsLoad* reply) override { return Status::OK; }
  Status SetActivationCandidateCellsLoad(ServerContext* context, const tr196::FAPService::CellConfig::LTE::EnergySavings::ActivationCandidateCellsLoad* request, FAPReply* reply) override { return Status::OK; }

  Status GetDeactivationCandidateCellsLoad(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::LTE::EnergySavings::DeactivationCandidateCellsLoad* reply) override { return Status::OK; }
  Status SetDeactivationCandidateCellsLoad(ServerContext* context, const tr196::FAPService::CellConfig::LTE::EnergySavings::DeactivationCandidateCellsLoad* request, FAPReply* reply) override { return Status::OK; }

  Status GetNotAllowedTimePeriod(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::LTE::EnergySavings::NotAllowedTimePeriod>* reply) override { return Status::OK; }
  Status SetNotAllowedTimePeriod(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::LTE::EnergySavings::NotAllowedTimePeriod>* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetCDMA2000(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000* reply) override { return Status::OK; }
  //?? Status SetCDMA2000(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetOneX(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::OneX* reply) override { return Status::OK; }
  //?? Status SetOneX(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::OneX* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetRAN(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::OneX::RAN* reply) override { return Status::OK; }
  //?? Status SetRAN(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::OneX::RAN* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetRF(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::OneX::RAN::RF* reply) override { return Status::OK; }
  //?? Status SetRF(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::OneX::RAN::RF* request, FAPReply* reply) override { return Status::OK; }

  Status GetNetworkListenModeConfig(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::OneX::RAN::NetworkListenModeConfig* reply) override { return Status::OK; }
  Status SetNetworkListenModeConfig(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::OneX::RAN::NetworkListenModeConfig* request, FAPReply* reply) override { return Status::OK; }

  Status GetAccessParameters(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::OneX::RAN::AccessParameters* reply) override { return Status::OK; }
  Status SetAccessParameters(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::OneX::RAN::AccessParameters* request, FAPReply* reply) override { return Status::OK; }

  Status GetSystemParameters(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::OneX::RAN::SystemParameters* reply) override { return Status::OK; }
  Status SetSystemParameters(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::OneX::RAN::SystemParameters* request, FAPReply* reply) override { return Status::OK; }

  Status GetExtendedSystemParameters(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::OneX::RAN::ExtendedSystemParameters* reply) override { return Status::OK; }
  Status SetExtendedSystemParameters(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::OneX::RAN::ExtendedSystemParameters* request, FAPReply* reply) override { return Status::OK; }

  Status GetForwardPwrCtr(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::OneX::RAN::ForwardPwrCtr* reply) override { return Status::OK; }
  Status SetForwardPwrCtr(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::OneX::RAN::ForwardPwrCtr* request, FAPReply* reply) override { return Status::OK; }

  Status GetHardHandoff(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::OneX::RAN::HardHandoff* reply) override { return Status::OK; }
  Status SetHardHandoff(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::OneX::RAN::HardHandoff* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetStats(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::OneX::RAN::HardHandoff::Stats* reply) override { return Status::OK; }
  //?? Status SetStats(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::OneX::RAN::HardHandoff::Stats* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetPowerControl(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::OneX::RAN::PowerControl* reply) override { return Status::OK; }
  //?? Status SetPowerControl(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::OneX::RAN::PowerControl* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetNeighborList(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::CDMA2000::OneX::RAN::NeighborList>* reply) override { return Status::OK; }
  //?? Status SetNeighborList(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::CDMA2000::OneX::RAN::NeighborList>* request, FAPReply* reply) override { return Status::OK; }

  Status GetAPIDM(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::OneX::RAN::APIDM* reply) override { return Status::OK; }
  Status SetAPIDM(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::OneX::RAN::APIDM* request, FAPReply* reply) override { return Status::OK; }

  Status GetAPIDTM(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::OneX::RAN::APIDTM* reply) override { return Status::OK; }
  Status SetAPIDTM(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::OneX::RAN::APIDTM* request, FAPReply* reply) override { return Status::OK; }

  Status GetAPPIM(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::OneX::RAN::APPIM* reply) override { return Status::OK; }
  Status SetAPPIM(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::OneX::RAN::APPIM* request, FAPReply* reply) override { return Status::OK; }

  Status GetAPPIREC(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::CDMA2000::OneX::RAN::APPIM::APPIREC>* reply) override { return Status::OK; }
  Status SetAPPIREC(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::CDMA2000::OneX::RAN::APPIM::APPIREC>* request, FAPReply* reply) override { return Status::OK; }

  Status GetPCFConfig(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::OneX::PCFConfig* reply) override { return Status::OK; }
  Status SetPCFConfig(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::OneX::PCFConfig* request, FAPReply* reply) override { return Status::OK; }

  Status GetPCFPerformanceStats(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::OneX::PCFConfig::PCFPerformanceStats* reply) override { return Status::OK; }
  Status SetPCFPerformanceStats(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::OneX::PCFConfig::PCFPerformanceStats* request, FAPReply* reply) override { return Status::OK; }

  Status GetBatchPCFPDSN(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::CDMA2000::OneX::BatchPCFPDSN>* reply) override { return Status::OK; }
  Status SetBatchPCFPDSN(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::CDMA2000::OneX::BatchPCFPDSN>* request, FAPReply* reply) override { return Status::OK; }

  Status GetPCFPDSN(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::CDMA2000::OneX::PCFPDSN>* reply) override { return Status::OK; }
  Status SetPCFPDSN(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::CDMA2000::OneX::PCFPDSN>* request, FAPReply* reply) override { return Status::OK; }

  Status GetA11RegUpdateStats(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::OneX::PCFPDSN::A11RegUpdateStats* reply) override { return Status::OK; }
  Status SetA11RegUpdateStats(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::OneX::PCFPDSN::A11RegUpdateStats* request, FAPReply* reply) override { return Status::OK; }

  Status GetPCFPDSNStats(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::OneX::PCFPDSN::PCFPDSNStats* reply) override { return Status::OK; }
  Status SetPCFPDSNStats(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::OneX::PCFPDSN::PCFPDSNStats* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetStats(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::OneX::Stats* reply) override { return Status::OK; }
  //?? Status SetStats(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::OneX::Stats* request, FAPReply* reply) override { return Status::OK; }

  Status GetRedirect(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::OneX::Redirect* reply) override { return Status::OK; }
  Status SetRedirect(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::OneX::Redirect* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetHRPD(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::HRPD* reply) override { return Status::OK; }
  //?? Status SetHRPD(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::HRPD* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetRAN(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::HRPD::RAN* reply) override { return Status::OK; }
  //?? Status SetRAN(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::HRPD::RAN* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetRF(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::HRPD::RAN::RF* reply) override { return Status::OK; }
  //?? Status SetRF(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::HRPD::RAN::RF* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetPCFConfig(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::HRPD::PCFConfig* reply) override { return Status::OK; }
  //?? Status SetPCFConfig(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::HRPD::PCFConfig* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetPCFPerformanceStats(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::HRPD::PCFConfig::PCFPerformanceStats* reply) override { return Status::OK; }
  //?? Status SetPCFPerformanceStats(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::HRPD::PCFConfig::PCFPerformanceStats* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetBatchPCFPDSN(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::CDMA2000::HRPD::BatchPCFPDSN>* reply) override { return Status::OK; }
  //?? Status SetBatchPCFPDSN(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::CDMA2000::HRPD::BatchPCFPDSN>* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetPCFPDSN(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::CDMA2000::HRPD::PCFPDSN>* reply) override { return Status::OK; }
  //?? Status SetPCFPDSN(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::CDMA2000::HRPD::PCFPDSN>* request, FAPReply* reply) override { return Status::OK; }

  Status GetA11SessionUpdateStats(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::HRPD::PCFPDSN::A11SessionUpdateStats* reply) override { return Status::OK; }
  Status SetA11SessionUpdateStats(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::HRPD::PCFPDSN::A11SessionUpdateStats* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetA11RegUpdateStats(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::HRPD::PCFPDSN::A11RegUpdateStats* reply) override { return Status::OK; }
  //?? Status SetA11RegUpdateStats(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::HRPD::PCFPDSN::A11RegUpdateStats* request, FAPReply* reply) override { return Status::OK; }

  Status GetAuxA10Stats(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::HRPD::PCFPDSN::AuxA10Stats* reply) override { return Status::OK; }
  Status SetAuxA10Stats(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::HRPD::PCFPDSN::AuxA10Stats* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetPCFPDSNStats(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::HRPD::PCFPDSN::PCFPDSNStats* reply) override { return Status::OK; }
  //?? Status SetPCFPDSNStats(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::HRPD::PCFPDSN::PCFPDSNStats* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetRedirect(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::HRPD::Redirect* reply) override { return Status::OK; }
  //?? Status SetRedirect(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::HRPD::Redirect* request, FAPReply* reply) override { return Status::OK; }

  Status GetCallControlStats(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::HRPD::CallControlStats* reply) override { return Status::OK; }
  Status SetCallControlStats(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::HRPD::CallControlStats* request, FAPReply* reply) override { return Status::OK; }

  Status GetQoSStats(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::HRPD::QoSStats* reply) override { return Status::OK; }
  Status SetQoSStats(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::HRPD::QoSStats* request, FAPReply* reply) override { return Status::OK; }

  Status GetRNCSigAppsStats(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::HRPD::RNCSigAppsStats* reply) override { return Status::OK; }
  Status SetRNCSigAppsStats(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::HRPD::RNCSigAppsStats* request, FAPReply* reply) override { return Status::OK; }

  Status GetAccessAuthConfig(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::HRPD::AccessAuthConfig* reply) override { return Status::OK; }
  Status SetAccessAuthConfig(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::HRPD::AccessAuthConfig* request, FAPReply* reply) override { return Status::OK; }

  Status GetAccessAuthStats(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::HRPD::AccessAuthStats* reply) override { return Status::OK; }
  Status SetAccessAuthStats(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::HRPD::AccessAuthStats* request, FAPReply* reply) override { return Status::OK; }

  Status GetBeacon(ServerContext* context, const FAPRequest* request, tr196::FAPService::CellConfig::CDMA2000::Beacon* reply) override { return Status::OK; }
  Status SetBeacon(ServerContext* context, const tr196::FAPService::CellConfig::CDMA2000::Beacon* request, FAPReply* reply) override { return Status::OK; }

  Status GetBeaconList(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::CDMA2000::Beacon::BeaconList>* reply) override { return Status::OK; }
  Status SetBeaconList(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::CDMA2000::Beacon::BeaconList>* request, FAPReply* reply) override { return Status::OK; }

  Status GetHRPDBeaconList(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::CellConfig::CDMA2000::Beacon::HRPDBeaconList>* reply) override { return Status::OK; }
  Status SetHRPDBeaconList(ServerContext* context, ServerReader<tr196::FAPService::CellConfig::CDMA2000::Beacon::HRPDBeaconList>* request, FAPReply* reply) override { return Status::OK; }

  Status GetREM(ServerContext* context, const FAPRequest* request, tr196::FAPService::REM* reply) override { return Status::OK; }
  Status SetREM(ServerContext* context, const tr196::FAPService::REM* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetUMTS(ServerContext* context, const FAPRequest* request, tr196::FAPService::REM::UMTS* reply) override { return Status::OK; }
  //?? Status SetUMTS(ServerContext* context, const tr196::FAPService::REM::UMTS* request, FAPReply* reply) override { return Status::OK; }

  Status GetWCDMA(ServerContext* context, const FAPRequest* request, tr196::FAPService::REM::UMTS::WCDMA* reply) override { return Status::OK; }
  Status SetWCDMA(ServerContext* context, const tr196::FAPService::REM::UMTS::WCDMA* request, FAPReply* reply) override { return Status::OK; }

  Status GetCell(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::REM::UMTS::WCDMA::Cell>* reply) override { return Status::OK; }
  Status SetCell(ServerContext* context, ServerReader<tr196::FAPService::REM::UMTS::WCDMA::Cell>* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetRF(ServerContext* context, const FAPRequest* request, tr196::FAPService::REM::UMTS::WCDMA::Cell::RF* reply) override { return Status::OK; }
  //?? Status SetRF(ServerContext* context, const tr196::FAPService::REM::UMTS::WCDMA::Cell::RF* request, FAPReply* reply) override { return Status::OK; }

  Status GetBCCH(ServerContext* context, const FAPRequest* request, tr196::FAPService::REM::UMTS::WCDMA::Cell::BCCH* reply) override { return Status::OK; }
  Status SetBCCH(ServerContext* context, const tr196::FAPService::REM::UMTS::WCDMA::Cell::BCCH* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetCSGPSCSplitInfo(ServerContext* context, const FAPRequest* request, tr196::FAPService::REM::UMTS::WCDMA::Cell::BCCH::CSGPSCSplitInfo* reply) override { return Status::OK; }
  //?? Status SetCSGPSCSplitInfo(ServerContext* context, const tr196::FAPService::REM::UMTS::WCDMA::Cell::BCCH::CSGPSCSplitInfo* request, FAPReply* reply) override { return Status::OK; }

  Status GetReferencePosition(ServerContext* context, const FAPRequest* request, tr196::FAPService::REM::UMTS::WCDMA::Cell::BCCH::ReferencePosition* reply) override { return Status::OK; }
  Status SetReferencePosition(ServerContext* context, const tr196::FAPService::REM::UMTS::WCDMA::Cell::BCCH::ReferencePosition* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetGSM(ServerContext* context, const FAPRequest* request, tr196::FAPService::REM::UMTS::GSM* reply) override { return Status::OK; }
  //?? Status SetGSM(ServerContext* context, const tr196::FAPService::REM::UMTS::GSM* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetCell(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::REM::UMTS::GSM::Cell>* reply) override { return Status::OK; }
  //?? Status SetCell(ServerContext* context, ServerReader<tr196::FAPService::REM::UMTS::GSM::Cell>* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetLTE(ServerContext* context, const FAPRequest* request, tr196::FAPService::REM::LTE* reply) override { return Status::OK; }
  //?? Status SetLTE(ServerContext* context, const tr196::FAPService::REM::LTE* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetCell(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::REM::LTE::Cell>* reply) override { return Status::OK; }
  //?? Status SetCell(ServerContext* context, ServerReader<tr196::FAPService::REM::LTE::Cell>* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetRF(ServerContext* context, const FAPRequest* request, tr196::FAPService::REM::LTE::Cell::RF* reply) override { return Status::OK; }
  //?? Status SetRF(ServerContext* context, const tr196::FAPService::REM::LTE::Cell::RF* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetBCCH(ServerContext* context, const FAPRequest* request, tr196::FAPService::REM::LTE::Cell::BCCH* reply) override { return Status::OK; }
  //?? Status SetBCCH(ServerContext* context, const tr196::FAPService::REM::LTE::Cell::BCCH* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetPLMNList(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::REM::LTE::Cell::BCCH::PLMNList>* reply) override { return Status::OK; }
  //?? Status SetPLMNList(ServerContext* context, ServerReader<tr196::FAPService::REM::LTE::Cell::BCCH::PLMNList>* request, FAPReply* reply) override { return Status::OK; }

  Status GetCarrierMeas(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::REM::LTE::CarrierMeas>* reply) override { return Status::OK; }
  Status SetCarrierMeas(ServerContext* context, ServerReader<tr196::FAPService::REM::LTE::CarrierMeas>* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetCDMA2000(ServerContext* context, const FAPRequest* request, tr196::FAPService::REM::CDMA2000* reply) override { return Status::OK; }
  //?? Status SetCDMA2000(ServerContext* context, const tr196::FAPService::REM::CDMA2000* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetOneX(ServerContext* context, const FAPRequest* request, tr196::FAPService::REM::CDMA2000::OneX* reply) override { return Status::OK; }
  //?? Status SetOneX(ServerContext* context, const tr196::FAPService::REM::CDMA2000::OneX* request, FAPReply* reply) override { return Status::OK; }

  Status GetChannel(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::REM::CDMA2000::OneX::Channel>* reply) override { return Status::OK; }
  Status SetChannel(ServerContext* context, ServerReader<tr196::FAPService::REM::CDMA2000::OneX::Channel>* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetCell(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::REM::CDMA2000::OneX::Cell>* reply) override { return Status::OK; }
  //?? Status SetCell(ServerContext* context, ServerReader<tr196::FAPService::REM::CDMA2000::OneX::Cell>* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetRF(ServerContext* context, const FAPRequest* request, tr196::FAPService::REM::CDMA2000::OneX::Cell::RF* reply) override { return Status::OK; }
  //?? Status SetRF(ServerContext* context, const tr196::FAPService::REM::CDMA2000::OneX::Cell::RF* request, FAPReply* reply) override { return Status::OK; }

  Status GetControlChannel(ServerContext* context, const FAPRequest* request, tr196::FAPService::REM::CDMA2000::OneX::Cell::ControlChannel* reply) override { return Status::OK; }
  Status SetControlChannel(ServerContext* context, const tr196::FAPService::REM::CDMA2000::OneX::Cell::ControlChannel* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetHRPD(ServerContext* context, const FAPRequest* request, tr196::FAPService::REM::CDMA2000::HRPD* reply) override { return Status::OK; }
  //?? Status SetHRPD(ServerContext* context, const tr196::FAPService::REM::CDMA2000::HRPD* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetChannel(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::REM::CDMA2000::HRPD::Channel>* reply) override { return Status::OK; }
  //?? Status SetChannel(ServerContext* context, ServerReader<tr196::FAPService::REM::CDMA2000::HRPD::Channel>* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetCell(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::REM::CDMA2000::HRPD::Cell>* reply) override { return Status::OK; }
  //?? Status SetCell(ServerContext* context, ServerReader<tr196::FAPService::REM::CDMA2000::HRPD::Cell>* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetRF(ServerContext* context, const FAPRequest* request, tr196::FAPService::REM::CDMA2000::HRPD::Cell::RF* reply) override { return Status::OK; }
  //?? Status SetRF(ServerContext* context, const tr196::FAPService::REM::CDMA2000::HRPD::Cell::RF* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetControlChannel(ServerContext* context, const FAPRequest* request, tr196::FAPService::REM::CDMA2000::HRPD::Cell::ControlChannel* reply) override { return Status::OK; }
  //?? Status SetControlChannel(ServerContext* context, const tr196::FAPService::REM::CDMA2000::HRPD::Cell::ControlChannel* request, FAPReply* reply) override { return Status::OK; }

  Status GetMacroTiming(ServerContext* context, const FAPRequest* request, tr196::FAPService::REM::CDMA2000::MacroTiming* reply) override { return Status::OK; }
  Status SetMacroTiming(ServerContext* context, const tr196::FAPService::REM::CDMA2000::MacroTiming* request, FAPReply* reply) override { return Status::OK; }

  //?? Status GetChannel(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::REM::CDMA2000::MacroTiming::Channel>* reply) override { return Status::OK; }
  //?? Status SetChannel(ServerContext* context, ServerReader<tr196::FAPService::REM::CDMA2000::MacroTiming::Channel>* request, FAPReply* reply) override { return Status::OK; }

  Status GetTransport(ServerContext* context, const FAPRequest* request, tr196::FAPService::Transport* reply) override { return Status::OK; }
  Status SetTransport(ServerContext* context, const tr196::FAPService::Transport* request, FAPReply* reply) override { return Status::OK; }

  Status GetSIP(ServerContext* context, const FAPRequest* request, tr196::FAPService::Transport::SIP* reply) override { return Status::OK; }
  Status SetSIP(ServerContext* context, const tr196::FAPService::Transport::SIP* request, FAPReply* reply) override { return Status::OK; }

  Status GetFCS(ServerContext* context, const FAPRequest* request, tr196::FAPService::Transport::SIP::FCS* reply) override { return Status::OK; }
  Status SetFCS(ServerContext* context, const tr196::FAPService::Transport::SIP::FCS* request, FAPReply* reply) override { return Status::OK; }

  Status GetSCTP(ServerContext* context, const FAPRequest* request, tr196::FAPService::Transport::SCTP* reply) override { return Status::OK; }
  Status SetSCTP(ServerContext* context, const tr196::FAPService::Transport::SCTP* request, FAPReply* reply) override { return Status::OK; }

  Status GetAssoc(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::Transport::SCTP::Assoc>* reply) override { return Status::OK; }
  Status SetAssoc(ServerContext* context, ServerReader<tr196::FAPService::Transport::SCTP::Assoc>* request, FAPReply* reply) override { return Status::OK; }

  Status GetRealTime(ServerContext* context, const FAPRequest* request, tr196::FAPService::Transport::RealTime* reply) override { return Status::OK; }
  Status SetRealTime(ServerContext* context, const tr196::FAPService::Transport::RealTime* request, FAPReply* reply) override { return Status::OK; }

  Status GetPerf(ServerContext* context, const FAPRequest* request, tr196::FAPService::Transport::RealTime::Perf* reply) override { return Status::OK; }
  Status SetPerf(ServerContext* context, const tr196::FAPService::Transport::RealTime::Perf* request, FAPReply* reply) override { return Status::OK; }

  Status GetPacket(ServerContext* context, const FAPRequest* request, tr196::FAPService::Transport::Packet* reply) override { return Status::OK; }
  Status SetPacket(ServerContext* context, const tr196::FAPService::Transport::Packet* request, FAPReply* reply) override { return Status::OK; }

  Status GetSecurity(ServerContext* context, const FAPRequest* request, tr196::FAPService::Transport::Security* reply) override { return Status::OK; }
  Status SetSecurity(ServerContext* context, const tr196::FAPService::Transport::Security* request, FAPReply* reply) override { return Status::OK; }

  Status GetSecret(ServerContext* context, const FAPRequest* request, ServerWriter<tr196::FAPService::Transport::Security::Secret>* reply) override { return Status::OK; }
  Status SetSecret(ServerContext* context, ServerReader<tr196::FAPService::Transport::Security::Secret>* request, FAPReply* reply) override { return Status::OK; }

