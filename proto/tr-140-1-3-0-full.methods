// Generated by cwmp_proto_to_grpc.cc
// source: tr-140-1-3-0-full.proto
// Use this file to implement gRPC server's service methods.

  Status GetStorageService(ServerContext* context, const StorageRequest* request, tr140::StorageService* reply) override { return Status::OK; }
  Status SetStorageService(ServerContext* context, const tr140::StorageService* request, StorageReply* reply) override { return Status::OK; }

  Status GetCapabilities(ServerContext* context, const StorageRequest* request, tr140::StorageService::Capabilities* reply) override { return Status::OK; }
  Status SetCapabilities(ServerContext* context, const tr140::StorageService::Capabilities* request, StorageReply* reply) override { return Status::OK; }

  Status GetNetInfo(ServerContext* context, const StorageRequest* request, tr140::StorageService::NetInfo* reply) override { return Status::OK; }
  Status SetNetInfo(ServerContext* context, const tr140::StorageService::NetInfo* request, StorageReply* reply) override { return Status::OK; }

  Status GetUserGroup(ServerContext* context, const StorageRequest* request, ServerWriter<tr140::StorageService::UserGroup>* reply) override { return Status::OK; }
  Status SetUserGroup(ServerContext* context, ServerReader<tr140::StorageService::UserGroup>* request, StorageReply* reply) override { return Status::OK; }

  Status GetUserAccount(ServerContext* context, const StorageRequest* request, ServerWriter<tr140::StorageService::UserAccount>* reply) override { return Status::OK; }
  Status SetUserAccount(ServerContext* context, ServerReader<tr140::StorageService::UserAccount>* request, StorageReply* reply) override { return Status::OK; }

  Status GetNetworkServer(ServerContext* context, const StorageRequest* request, tr140::StorageService::NetworkServer* reply) override { return Status::OK; }
  Status SetNetworkServer(ServerContext* context, const tr140::StorageService::NetworkServer* request, StorageReply* reply) override { return Status::OK; }

  Status GetFTPServer(ServerContext* context, const StorageRequest* request, tr140::StorageService::FTPServer* reply) override { return Status::OK; }
  Status SetFTPServer(ServerContext* context, const tr140::StorageService::FTPServer* request, StorageReply* reply) override { return Status::OK; }

  Status GetAnonymousUser(ServerContext* context, const StorageRequest* request, tr140::StorageService::FTPServer::AnonymousUser* reply) override { return Status::OK; }
  Status SetAnonymousUser(ServerContext* context, const tr140::StorageService::FTPServer::AnonymousUser* request, StorageReply* reply) override { return Status::OK; }

  Status GetSFTPServer(ServerContext* context, const StorageRequest* request, tr140::StorageService::SFTPServer* reply) override { return Status::OK; }
  Status SetSFTPServer(ServerContext* context, const tr140::StorageService::SFTPServer* request, StorageReply* reply) override { return Status::OK; }

  Status GetHTTPServer(ServerContext* context, const StorageRequest* request, tr140::StorageService::HTTPServer* reply) override { return Status::OK; }
  Status SetHTTPServer(ServerContext* context, const tr140::StorageService::HTTPServer* request, StorageReply* reply) override { return Status::OK; }

  Status GetHTTPSServer(ServerContext* context, const StorageRequest* request, tr140::StorageService::HTTPSServer* reply) override { return Status::OK; }
  Status SetHTTPSServer(ServerContext* context, const tr140::StorageService::HTTPSServer* request, StorageReply* reply) override { return Status::OK; }

  Status GetPhysicalMedium(ServerContext* context, const StorageRequest* request, ServerWriter<tr140::StorageService::PhysicalMedium>* reply) override { return Status::OK; }
  Status SetPhysicalMedium(ServerContext* context, ServerReader<tr140::StorageService::PhysicalMedium>* request, StorageReply* reply) override { return Status::OK; }

  Status GetSMART(ServerContext* context, const StorageRequest* request, tr140::StorageService::PhysicalMedium::SMART* reply) override { return Status::OK; }
  Status SetSMART(ServerContext* context, const tr140::StorageService::PhysicalMedium::SMART* request, StorageReply* reply) override { return Status::OK; }

  Status GetStorageArray(ServerContext* context, const StorageRequest* request, ServerWriter<tr140::StorageService::StorageArray>* reply) override { return Status::OK; }
  Status SetStorageArray(ServerContext* context, ServerReader<tr140::StorageService::StorageArray>* request, StorageReply* reply) override { return Status::OK; }

  Status GetLogicalVolume(ServerContext* context, const StorageRequest* request, ServerWriter<tr140::StorageService::LogicalVolume>* reply) override { return Status::OK; }
  Status SetLogicalVolume(ServerContext* context, ServerReader<tr140::StorageService::LogicalVolume>* request, StorageReply* reply) override { return Status::OK; }

  Status GetFolder(ServerContext* context, const StorageRequest* request, ServerWriter<tr140::StorageService::LogicalVolume::Folder>* reply) override { return Status::OK; }
  Status SetFolder(ServerContext* context, ServerReader<tr140::StorageService::LogicalVolume::Folder>* request, StorageReply* reply) override { return Status::OK; }

  Status GetUserAccess(ServerContext* context, const StorageRequest* request, ServerWriter<tr140::StorageService::LogicalVolume::Folder::UserAccess>* reply) override { return Status::OK; }
  Status SetUserAccess(ServerContext* context, ServerReader<tr140::StorageService::LogicalVolume::Folder::UserAccess>* request, StorageReply* reply) override { return Status::OK; }

  Status GetGroupAccess(ServerContext* context, const StorageRequest* request, ServerWriter<tr140::StorageService::LogicalVolume::Folder::GroupAccess>* reply) override { return Status::OK; }
  Status SetGroupAccess(ServerContext* context, ServerReader<tr140::StorageService::LogicalVolume::Folder::GroupAccess>* request, StorageReply* reply) override { return Status::OK; }

  Status GetQuota(ServerContext* context, const StorageRequest* request, tr140::StorageService::LogicalVolume::Folder::Quota* reply) override { return Status::OK; }
  Status SetQuota(ServerContext* context, const tr140::StorageService::LogicalVolume::Folder::Quota* request, StorageReply* reply) override { return Status::OK; }

