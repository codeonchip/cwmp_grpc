// Generated by cwmp_proto_to_grpc.cc
// source: tr-098-1-8-0-full.proto
// 1st top-level message: InternetGatewayDevice
// Added service 

// tr-098-1-8-0-full.proto
// Generated by cwmp_xml_to_proto.cc
// source: tr-098-1-8-0-full.xml

syntax = "proto3";

package tr098; //!! renamed

message InternetGatewayDevice { // InternetGatewayDevice.
  string    device_summary                           = 1  ; //  As defined in {{bibref|TR-106a1}}.     
  uint32    landevice_number_of_entries              = 2  ; //  Number of instances of {{object|LANDevic
  uint32    wandevice_number_of_entries              = 3  ; //  Number of instances of {{object|WANDevic
  uint32    user_number_of_entries                   = 4  ; //  {{numentries}}        }        be 
  uint32    smart_card_reader_number_of_entries      = 5  ; //  {{numentries}}        }        be 
  message Services { // InternetGatewayDevice.Services.
  }
  Services services = 6; // InternetGatewayDevice.Services.
  message Capabilities { // InternetGatewayDevice.Capabilities.
    message PerformanceDiagnostic { // InternetGatewayDevice.Capabilities.PerformanceDiagnostic.
      string    download_transports                      = 1  ; //  Supported ''DownloadDiagnostics'' transp
      string    upload_transports                        = 2  ; //  Supported ''UploadDiagnostics'' transpor
    }
    PerformanceDiagnostic performance_diagnostic = 1; // InternetGatewayDevice.Capabilities.PerformanceDiagnostic.
  }
  Capabilities capabilities = 7; // InternetGatewayDevice.Capabilities.
  message DeviceInfo { // InternetGatewayDevice.DeviceInfo.
    string    device_category                          = 1  ; //  Each list item is a device category (e.g
    string    manufacturer                             = 2  ; //  The manufacturer of the CPE (human reada
    string    manufacturer_oui                         = 3  ; //  Organizationally unique identifier of th
    string    model_name                               = 4  ; //  Model name of the CPE (human readable st
    string    model_number                             = 5  ; //  The model number of the device (human re
    string    description                              = 6  ; //  A full description of the CPE device (hu
    string    product_class                            = 7  ; //  Identifier of the class of product for w
    string    serial_number                            = 8  ; //  Identifier of the particular device that
    string    hardware_version                         = 9  ; //  A string identifying the particular CPE 
    string    software_version                         = 10 ; //  A string identifying the software versio
    string    modem_firmware_version                   = 11 ; //  A string identifying the version of the 
    string    enabled_options                          = 12 ; //  This parameter is DEPRECATED because the
    string    additional_hardware_version              = 13 ; //  Any additional hardware version informat
    string    additional_software_version              = 14 ; //  Any additional software version informat
    string    spec_version                             = 15 ; //  Represents the version of the specificat
    string    provisioning_code                        = 16 ; //  Identifier of the primary service provid
    uint32    up_time                                  = 17 ; //  Time in seconds since the CPE was last r
    string    first_use_date                           = 18 ; //  Date and time in UTC that the CPE first 
    string    device_log                               = 19 ; //  Vendor-specific log(s).        .     
    uint32    vendor_config_file_number_of_entries     = 20 ; //  Number of instances of {{object|VendorCo
    uint32    supported_data_model_number_of_entries   = 21 ; //  {{numentries}}        }           
    uint32    processor_number_of_entries              = 22 ; //  {{numentries}}        }           
    uint32    vendor_log_file_number_of_entries        = 23 ; //  {{numentries}}        }           
    uint32    location_number_of_entries               = 24 ; //  {{numentries}}        }           
    message VendorConfigFile { // InternetGatewayDevice.DeviceInfo.VendorConfigFile.{i}.
      string    alias                                    = 1  ; //  {{datatype|expand}}        }        
      string    name                                     = 2  ; //  Name of the vendor configuration file. 
      string    version                                  = 3  ; //  A string identifying the configuration f
      string    date                                     = 4  ; //  Date and time when the content of the cu
      string    description                              = 5  ; //  A description of the vendor configuratio
    }
    repeated VendorConfigFile vendor_config_file = 25; // InternetGatewayDevice.DeviceInfo.VendorConfigFile.{i}.
    message MemoryStatus { // InternetGatewayDevice.DeviceInfo.MemoryStatus.
      uint32    total                                    = 1  ; //  The total physical RAM, in {{units}}, in
      uint32    free                                     = 2  ; //  The free physical RAM, in {{units}}, cur
    }
    MemoryStatus memory_status = 26; // InternetGatewayDevice.DeviceInfo.MemoryStatus.
    message ProcessStatus { // InternetGatewayDevice.DeviceInfo.ProcessStatus.
      uint32    cpuusage                                 = 1  ; //  The total amount of the CPU, in {{units}
      uint32    process_number_of_entries                = 2  ; //  {{numentries}}          Since a Process
      message Process { // InternetGatewayDevice.DeviceInfo.ProcessStatus.Process.{i}.
        uint32    pid                                      = 1  ; //  The Process Identifier.        .     
        string    command                                  = 2  ; //  The name of the command that has caused 
        uint32    size                                     = 3  ; //  The size in {{units}} of the memory occu
        uint32    priority                                 = 4  ; //  The priority of the process where 0 is h
        uint32    cputime                                  = 5  ; //  The amount of time in {{units}} that the
        string    state                                    = 6  ; //  The current state that the process is in
      }
      repeated Process process = 3; // InternetGatewayDevice.DeviceInfo.ProcessStatus.Process.{i}.
    }
    ProcessStatus process_status = 27; // InternetGatewayDevice.DeviceInfo.ProcessStatus.
    message TemperatureStatus { // InternetGatewayDevice.DeviceInfo.TemperatureStatus.
      uint32    temperature_sensor_number_of_entries     = 1  ; //  {{numentries}}        }        cess
      message TemperatureSensor { // InternetGatewayDevice.DeviceInfo.TemperatureStatus.TemperatureSensor.{i}.
        string    alias                                    = 1  ; //  {{datatype|expand}}        }        
        bool      enable                                   = 2  ; //  Indicates whether or not the temperature
        string    status                                   = 3  ; //  The status of this temperature sensor. 
        bool      reset                                    = 4  ; //  When set to {{true}}, resets the tempera
        string    reset_time                               = 5  ; //  The time at which this temperature senso
        string    name                                     = 6  ; //  Name of this temperature sensor. This te
        int32     value                                    = 7  ; //  This temperature sensor's last good read
        string    last_update                              = 8  ; //  The time at which this temperature senso
        int32     min_value                                = 9  ; //  This temperature sensor's lowest value  
        string    min_time                                 = 10 ; //  The time at which this temperature senso
        int32     max_value                                = 11 ; //  This temperature sensor's highest value 
        string    max_time                                 = 12 ; //  The time at which this temperature senso
        int32     low_alarm_value                          = 13 ; //  This temperature sensor's low alarm valu
        string    low_alarm_time                           = 14 ; //  Initial time at which this temperature s
        int32     high_alarm_value                         = 15 ; //  This temperature sensor's high alarm val
        uint32    polling_interval                         = 16 ; //  The interval, measured in {{units}}, in 
        string    high_alarm_time                          = 17 ; //  Initial time at which this temperature s
      }
      repeated TemperatureSensor temperature_sensor = 2; // InternetGatewayDevice.DeviceInfo.TemperatureStatus.TemperatureSensor.{i}.
    }
    TemperatureStatus temperature_status = 28; // InternetGatewayDevice.DeviceInfo.TemperatureStatus.
    message NetworkProperties { // InternetGatewayDevice.DeviceInfo.NetworkProperties.
      uint32    max_tcpwindow_size                       = 1  ; //  The maximum number of {{units}} of outst
      string    tcpimplementation                        = 2  ; //  {{list}} Indicates the TCP congestion co
    }
    NetworkProperties network_properties = 29; // InternetGatewayDevice.DeviceInfo.NetworkProperties.
    message SupportedDataModel { // InternetGatewayDevice.DeviceInfo.SupportedDataModel.{i}.
      string    alias                                    = 1  ; //  {{datatype|expand}}        }        
      string    url                                      = 2  ; //  URL ({{bibref|RFC3986}}) that describes 
      string    uuid                                     = 3  ; //  UUID ({{bibref|RFC4122}}) that is the va
      string    urn                                      = 4  ; //  URN ({{bibref|RFC3986}}) that is the val
      string    features                                 = 5  ; //  This parameter MUST list exactly the fea
    }
    repeated SupportedDataModel supported_data_model = 30; // InternetGatewayDevice.DeviceInfo.SupportedDataModel.{i}.
    message Processor { // InternetGatewayDevice.DeviceInfo.Processor.{i}.
      string    alias                                    = 1  ; //  {{datatype|expand}}        }        
      string    architecture                             = 2  ; //  The architecture of the processor on the
    }
    repeated Processor processor = 31; // InternetGatewayDevice.DeviceInfo.Processor.{i}.
    message VendorLogFile { // InternetGatewayDevice.DeviceInfo.VendorLogFile.{i}.
      string    alias                                    = 1  ; //  {{datatype|expand}}        }        
      string    name                                     = 2  ; //  Name of the log file.          Typicall
      uint32    maximum_size                             = 3  ; //  The maximum size of the log file in {{un
      bool      persistent                               = 4  ; //  When {{true}}, the log file contents are
    }
    repeated VendorLogFile vendor_log_file = 32; // InternetGatewayDevice.DeviceInfo.VendorLogFile.{i}.
    message ProxierInfo { // InternetGatewayDevice.DeviceInfo.ProxierInfo.
      string    manufacturer_oui                         = 1  ; //  Organizationally unique identifier of th
      string    product_class                            = 2  ; //  Identifier of the class of product of th
      string    serial_number                            = 3  ; //  Serial number of the associated CPE Prox
      string    proxy_protocol                           = 4  ; //  The protocol being used to communicate b
    }
    ProxierInfo proxier_info = 33; // InternetGatewayDevice.DeviceInfo.ProxierInfo.
    message Location { // InternetGatewayDevice.DeviceInfo.Location.{i}.
      string    source                                   = 1  ; //  Identifies the source of the location da
      string    acquired_time                            = 2  ; //  The time when the location was acquired.
      string    external_source                          = 3  ; //  URL, MAC address, or other identifier th
      string    external_protocol                        = 4  ; //  Protocol used to acquire a location from
      string    data_object                              = 5  ; //  The currently valid location information
    }
    repeated Location location = 34; // InternetGatewayDevice.DeviceInfo.Location.{i}.
  }
  DeviceInfo device_info = 8; // InternetGatewayDevice.DeviceInfo.
  message DeviceConfig { // InternetGatewayDevice.DeviceConfig.
    string    persistent_data                          = 1  ; //  Arbitrary user data that MUST persist ac
    string    config_file                              = 2  ; //  A dump of the currently running configur
  }
  DeviceConfig device_config = 9; // InternetGatewayDevice.DeviceConfig.
  message ManagementServer { // InternetGatewayDevice.ManagementServer.
    bool      enable_cwmp                              = 1  ; //  Enables and disables the CPE's support f
    string    url                                      = 2  ; //  URL, as defined in {{bibref|RFC3986}}, f
    string    username                                 = 3  ; //  Username used to authenticate the CPE wh
    string    password                                 = 4  ; //  Password used to authenticate the CPE wh
    bool      periodic_inform_enable                   = 5  ; //  Whether or not the CPE MUST periodically
    uint32    periodic_inform_interval                 = 6  ; //  The duration in seconds of the interval 
    string    periodic_inform_time                     = 7  ; //  An absolute time reference in UTC to det
    string    parameter_key                            = 8  ; //  {{param}} provides the ACS a reliable an
    string    connection_request_url                   = 9  ; //  HTTP URL, as defined in {{bibref|RFC3986
    string    connection_request_username              = 10 ; //  Username used to authenticate an ACS mak
    string    connection_request_password              = 11 ; //  Password used to authenticate an ACS mak
    bool      upgrades_managed                         = 12 ; //  Indicates whether or not the ACS will ma
    string    kick_url                                 = 13 ; //  Present only for a CPE that supports the
    string    download_progress_url                    = 14 ; //  Present only for a CPE that provides a L
    uint32    default_active_notification_throttle     = 15 ; //  This parameter is used to control thrott
    string    udpconnection_request_address            = 16 ; //  Address and port to which an ACS MAY sen
    uint32    udpconnection_request_address_notification_limit = 17 ; //  The minimum time, in seconds, between Ac
    bool      stunenable                               = 18 ; //  Enables or disables the use of STUN by t
    string    stunserver_address                       = 19 ; //  Host name or IP address of the STUN serv
    uint32    stunserver_port                          = 20 ; //  Port number of the STUN server for the C
    string    stunusername                             = 21 ; //  If not {{empty}}, the value of the STUN 
    string    stunpassword                             = 22 ; //  The value of the STUN Password to be use
    int32     stunmaximum_keep_alive_period            = 23 ; //  If STUN Is enabled, the maximum period, 
    uint32    stunminimum_keep_alive_period            = 24 ; //  If STUN Is enabled, the minimum period, 
    bool      natdetected                              = 25 ; //  When STUN is enabled, this parameter ind
    bool      alias_based_addressing                   = 26 ; //  Indicates whether or not the Alias-Based
    string    instance_mode                            = 27 ; //  Instance identification mode as defined 
    bool      auto_create_instances                    = 28 ; //  Enable or disable the Auto-Create Instan
    uint32    cwmpretry_minimum_wait_interval          = 29 ; //  Configures the first session retry wait 
    uint32    cwmpretry_interval_multiplier            = 30 ; //  Configures the retry interval multiplier
    uint32    manageable_device_number_of_entries      = 31 ; //  Number of entries in the {{object|Manage
    uint32    manageable_device_notification_limit     = 32 ; //  The minimum time, in seconds, between Ac
    uint32    embedded_device_number_of_entries        = 33 ; //  {{numentries}}        }        er.
    uint32    virtual_device_number_of_entries         = 34 ; //  {{numentries}}        }        er.
    string    supported_conn_req_methods               = 35 ; //  The connection request methods supported
    string    conn_req_xmppconnection                  = 36 ; //  {{reference|the {{object|.XMPP.Connectio
    string    conn_req_allowed_jabber_ids              = 37 ; //  When an XMPP Connection Request is sent 
    string    conn_req_jabber_id                       = 38 ; //  The value MUST be the value of the {{par
    string    httpcompression_supported                = 39 ; //  Indicates the HTTP Compression mechanism
    string    httpcompression                          = 40 ; //  The value of this parameter represents t
    string    lightweight_notification_protocols_supported = 41 ; //  Indicates the Lightweight Notification P
    string    lightweight_notification_protocols_used  = 42 ; //  The value of this parameter represents t
    string    udplightweight_notification_host         = 43 ; //  Host name or address to be used when sen
    uint32    udplightweight_notification_port         = 44 ; //  The port number to be used when sending 
    uint32    inform_parameter_number_of_entries       = 45 ; //  {{numentries}}        }        er.
    message ManageableDevice { // InternetGatewayDevice.ManagementServer.ManageableDevice.{i}.
      string    manufacturer_oui                         = 1  ; //  Organizationally unique identifier of th
      string    serial_number                            = 2  ; //  Serial number of the Device as provided 
      string    product_class                            = 3  ; //  Identifier of the class of product for w
      string    host                                     = 4  ; //  {{reference|a ''Host'' table row}}  This
    }
    repeated ManageableDevice manageable_device = 46; // InternetGatewayDevice.ManagementServer.ManageableDevice.{i}.
    message AutonomousTransferCompletePolicy { // InternetGatewayDevice.ManagementServer.AutonomousTransferCompletePolicy.
      bool      enable                                   = 1  ; //  Enable/disable CPE notification of AUTON
      string    transfer_type_filter                     = 2  ; //  Indicates the transfer types that MUST b
      string    result_type_filter                       = 3  ; //  Indicates the transfer results that MUST
      string    file_type_filter                         = 4  ; //  {{list}} Indicates the file types that M
    }
    AutonomousTransferCompletePolicy autonomous_transfer_complete_policy = 47; // InternetGatewayDevice.ManagementServer.AutonomousTransferCompletePolicy.
    message DUStateChangeComplPolicy { // InternetGatewayDevice.ManagementServer.DUStateChangeComplPolicy.
      bool      enable                                   = 1  ; //  Enables/Disables CPE notification of "12
      string    operation_type_filter                    = 2  ; //  Indicates the Deployment Unit operations
      string    result_type_filter                       = 3  ; //  Indicates the Deployment Unit state chan
      string    fault_code_filter                        = 4  ; //  Indicates the Deployment Unit state chan
    }
    DUStateChangeComplPolicy dustate_change_compl_policy = 48; // InternetGatewayDevice.ManagementServer.DUStateChangeComplPolicy.
    message EmbeddedDevice { // InternetGatewayDevice.ManagementServer.EmbeddedDevice.{i}.
      string    controller_id                            = 1  ; //  Identifier of the controller that is res
      string    proxied_device_id                        = 2  ; //  Idenitfier of the Proxied Device.      
      string    reference                                = 3  ; //  {{noreference}}The value MUST be the pat
      string    supported_data_model                     = 4  ; //  Represents the CWMP-DT schema instance(s
      string    host                                     = 5  ; //  References the {{object|.LANDevice.{i}.H
      string    proxy_protocol                           = 6  ; //  The protocol being used to communicate b
      string    proxy_protocol_reference                 = 7  ; //  {{reference|a protocol object that uses 
      string    discovery_protocol                       = 8  ; //  {{list|that represents the discovery pro
      string    discovery_protocol_reference             = 9  ; //  {{list}} {{reference|an object discovere
      string    command_processed                        = 10 ; //  Whether or not the CPE Proxier has succe
      string    command_processing_err_msg               = 11 ; //  Detailed {{param|CommandProcessed}} erro
      string    last_sync_time                           = 12 ; //  The last time that the CPE Proxier synch
    }
    repeated EmbeddedDevice embedded_device = 49; // InternetGatewayDevice.ManagementServer.EmbeddedDevice.{i}.
    message VirtualDevice { // InternetGatewayDevice.ManagementServer.VirtualDevice.{i}.
      string    manufacturer_oui                         = 1  ; //  Organizationally unique identifier of th
      string    product_class                            = 2  ; //  Identifier of the class of product of th
      string    serial_number                            = 3  ; //  Serial number of the associated Proxied 
      string    host                                     = 4  ; //  {{list}} {{reference}}  References all t
      string    proxy_protocol                           = 5  ; //  The protocol being used to communicate b
      string    proxy_protocol_reference                 = 6  ; //  {{reference|a protocol object that uses 
      string    discovery_protocol                       = 7  ; //  {{list|that represents the discovery pro
      string    discovery_protocol_reference             = 8  ; //  {{list}} {{reference|an object discovere
    }
    repeated VirtualDevice virtual_device = 50; // InternetGatewayDevice.ManagementServer.VirtualDevice.{i}.
    message StandbyPolicy { // InternetGatewayDevice.ManagementServer.StandbyPolicy.
      int32     crunawareness_max_duration               = 1  ; //  When waking up from a non CR-Aware Stand
      int32     max_missed_periodic                      = 2  ; //  When waking up from a non fully Timer-Aw
      bool      notify_missed_scheduled                  = 3  ; //  When waking up from a non fully Timer-Aw
      bool      network_awareness_capable                = 4  ; //  Indicates that the CPE is capable of CR-
      bool      self_timer_capable                       = 5  ; //  Indicates that the CPE is capable of Tim
      bool      crawareness_requested                    = 6  ; //  If {{param|NetworkAwarenessCapable}} and
      bool      periodic_awareness_requested             = 7  ; //  If {{param|SelfTimerCapable}} and this p
      bool      scheduled_awareness_requested            = 8  ; //  If this parameter is true, the CPE MUST 
    }
    StandbyPolicy standby_policy = 51; // InternetGatewayDevice.ManagementServer.StandbyPolicy.
    message InformParameter { // InternetGatewayDevice.ManagementServer.InformParameter.{i}.
      bool      enable                                   = 1  ; //  Enables or disables this {{object}}.   
      string    alias                                    = 2  ; //  {{datatype|expand}}        }        
      string    parameter_name                           = 3  ; //  A pattern that describes the Parameter(s
      string    event_list                               = 4  ; //  Each entry in this list represents an Ev
    }
    repeated InformParameter inform_parameter = 52; // InternetGatewayDevice.ManagementServer.InformParameter.{i}.
  }
  ManagementServer management_server = 10; // InternetGatewayDevice.ManagementServer.
  message Time { // InternetGatewayDevice.Time.
    bool      enable                                   = 1  ; //  Enables or disables the NTP or SNTP time
    string    status                                   = 2  ; //  Status of Time support on the CPE.  {{en
    string    ntpserver1                               = 3  ; //  First NTP timeserver.  Either a host nam
    string    ntpserver2                               = 4  ; //  Second NTP timeserver.  Either a host na
    string    ntpserver3                               = 5  ; //  Third NTP timeserver.  Either a host nam
    string    ntpserver4                               = 6  ; //  Fourth NTP timeserver.  Either a host na
    string    ntpserver5                               = 7  ; //  Fifth NTP timeserver.  Either a host nam
    string    current_local_time                       = 8  ; //  The current date and time in the CPE's l
    string    local_time_zone                          = 9  ; //  The local time zone offset from UTC, ign
    string    local_time_zone_name                     = 10 ; //  Name of the local time zone (human reada
    bool      daylight_savings_used                    = 11 ; //  Whether or not daylight savings time is 
    string    daylight_savings_start                   = 12 ; //  Current local date and time at which the
    string    daylight_savings_end                     = 13 ; //  Current local date and time at which the
  }
  Time time = 11; // InternetGatewayDevice.Time.
  message UserInterface { // InternetGatewayDevice.UserInterface.
    bool      user_database_supported                  = 1  ; //  Present only if the CPE provides a passw
    bool      shared_password                          = 2  ; //  Present only if the CPE provides a passw
    bool      password_required                        = 3  ; //  Present only if the CPE provides a passw
    bool      password_user_selectable                 = 4  ; //  Present only if the CPE provides a passw
    bool      upgrade_available                        = 5  ; //  Indicates that a CPE upgrade is availabl
    string    warranty_date                            = 6  ; //  Indicates the date and time in UTC that 
    string    ispname                                  = 7  ; //  The name of the customer's ISP.        
    string    isphelp_desk                             = 8  ; //  The help desk phone number of the ISP. 
    string    isphome_page                             = 9  ; //  The URL of the ISP's home page.        
    string    isphelp_page                             = 10 ; //  The URL of the ISP's on-line support pag
    bytes     isplogo                                  = 11 ; //  Base64 encoded GIF or JPEG image. The bi
    uint32    isplogo_size                             = 12 ; //  Un-encoded binary image size in bytes. 
    string    ispmail_server                           = 13 ; //  The URL of the ISP's mail server.      
    string    ispnews_server                           = 14 ; //  The URL of the ISP's news server.      
    string    text_color                               = 15 ; //  The color of text on the GUI screens in 
    string    background_color                         = 16 ; //  The color of the GUI screen backgrounds 
    string    button_color                             = 17 ; //  The color of buttons on the GUI screens 
    string    button_text_color                        = 18 ; //  The color of text on buttons on the GUI 
    string    auto_update_server                       = 19 ; //  The server the CPE can check to see if a
    string    user_update_server                       = 20 ; //  The server where a user can check via a 
    string    example_login                            = 21 ; //  An example of a correct login, according
    string    example_password                         = 22 ; //  An example of a correct password, accord
    string    available_languages                      = 23 ; //  Available user-interface languages, wher
    string    current_language                         = 24 ; //  Current user-interface language, specifi
    message RemoteAccess { // InternetGatewayDevice.UserInterface.RemoteAccess.
      bool      enable                                   = 1  ; //  Enables/Disables remotely accessing the 
      uint32    port                                     = 2  ; //  Destination TCP port required for remote
      string    supported_protocols                      = 3  ; //  {{list}} Indicates the protocols that ar
      string    protocol                                 = 4  ; //  This is the protocol currently being use
    }
    RemoteAccess remote_access = 25; // InternetGatewayDevice.UserInterface.RemoteAccess.
    message LocalDisplay { // InternetGatewayDevice.UserInterface.LocalDisplay.
      bool      movable                                  = 1  ; //  Controls whether the user is allowed to 
      bool      resizable                                = 2  ; //  Controls whether the user is allowed to 
      int32     pos_x                                    = 3  ; //  The horizontal position of the User Inte
      int32     pos_y                                    = 4  ; //  The vertical position of the User Interf
      uint32    width                                    = 5  ; //  The width of the user interface within t
      uint32    height                                   = 6  ; //  The height of the user interface within 
      uint32    display_width                            = 7  ; //  The width of the local CPE's display, ex
      uint32    display_height                           = 8  ; //  The height of the local CPE's display, e
    }
    LocalDisplay local_display = 26; // InternetGatewayDevice.UserInterface.LocalDisplay.
  }
  UserInterface user_interface = 12; // InternetGatewayDevice.UserInterface.
  message Layer3Forwarding { // InternetGatewayDevice.Layer3Forwarding.
    string    default_connection_service               = 1  ; //  Specifies the default WAN interface.  Th
    uint32    forward_number_of_entries                = 2  ; //  Number of forwarding instances.        
    message Forwarding { // InternetGatewayDevice.Layer3Forwarding.Forwarding.{i}.
      bool      enable                                   = 1  ; //  Enables or disables the forwarding entry
      string    status                                   = 2  ; //  Indicates the status of the forwarding e
      string    alias                                    = 3  ; //  {{datatype|expand}}          This param
      bool      static_route                             = 4  ; //  If {{true}}, this route is a Static rout
      string    type                                     = 5  ; //  Indicates the type of route.  {{enum}} 
      string    dest_ipaddress                           = 6  ; //  Destination address.  {{empty}} or a val
      string    dest_subnet_mask                         = 7  ; //  Destination subnet mask.  {{empty}} or a
      string    source_ipaddress                         = 8  ; //  Source address.  {{empty}} or a value of
      string    source_subnet_mask                       = 9  ; //  Source subnet mask.  {{empty}} or a valu
      int32     forwarding_policy                        = 10 ; //  Identifier of a set of classes or flows 
      string    gateway_ipaddress                        = 11 ; //  IP address of the gateway.          Onl
      string    interface                                = 12 ; //  Specifies the egress interface associate
      int32     forwarding_metric                        = 13 ; //  Forwarding metric.  A value of -1 indica
      uint32    mtu                                      = 14 ; //  The maximum allowed size of an Ethernet 
    }
    repeated Forwarding forwarding = 3; // InternetGatewayDevice.Layer3Forwarding.Forwarding.{i}.
  }
  Layer3Forwarding layer3forwarding = 13; // InternetGatewayDevice.Layer3Forwarding.
  message Layer2Bridging { // InternetGatewayDevice.Layer2Bridging.
    uint32    max_bridge_entries                       = 1  ; //  The maximum number of entries available 
    uint32    max_dbridge_entries                      = 2  ; //  The maximum number of 802.1D {{bibref|80
    uint32    max_qbridge_entries                      = 3  ; //  The maximum number of 802.1Q {{bibref|80
    uint32    max_vlanentries                          = 4  ; //  The maximum number of 802.1Q {{bibref|80
    uint32    max_filter_entries                       = 5  ; //  The maximum number of entries available 
    uint32    max_marking_entries                      = 6  ; //  The maximum number of entries available 
    uint32    bridge_number_of_entries                 = 7  ; //  Number of entries in the {{object|Bridge
    uint32    filter_number_of_entries                 = 8  ; //  Number of entries in the {{object|Filter
    uint32    marking_number_of_entries                = 9  ; //  Number of entries in the {{object|Markin
    uint32    available_interface_number_of_entries    = 10 ; //  Number of entries in the {{object|Availa
    message Bridge { // InternetGatewayDevice.Layer2Bridging.Bridge.{i}.
      string    alias                                    = 1  ; //  {{datatype|expand}}        }        
      uint32    bridge_key                               = 2  ; //  Unique key for each Bridge table entry.
      string    bridge_standard                          = 3  ; //  Selects the standard supported by this B
      bool      bridge_enable                            = 4  ; //  Enables or disables this Bridge table en
      string    bridge_status                            = 5  ; //  The status of this Bridge table entry.  
      string    bridge_name                              = 6  ; //  Human-readable name for this Bridge tabl
      uint32    vlanid                                   = 7  ; //  For an 802.1D {{bibref|802.1D-2004}} Bri
      uint32    port_number_of_entries                   = 8  ; //  Number of entries in the Bridge {{object
      uint32    vlannumber_of_entries                    = 9  ; //  Number of entries in the Bridge {{object
      message Port { // InternetGatewayDevice.Layer2Bridging.Bridge.{i}.Port.{i}.
        bool      port_enable                              = 1  ; //  Enables or disables this Bridge Port tab
        string    alias                                    = 2  ; //  {{datatype|expand}}        }        
        string    port_interface                           = 3  ; //  The interface associated with this Bridg
        string    port_state                               = 4  ; //  Bridge Port state as defined in 802.1D {
        int32     pvid                                     = 5  ; //  Default Port VLAN ID as defined in 802.1
        string    acceptable_frame_types                   = 6  ; //  Bridge Port acceptable frame types as de
        bool      ingress_filtering                        = 7  ; //  Enables or disables Ingress Filtering as
      }
      repeated Port port = 10; // InternetGatewayDevice.Layer2Bridging.Bridge.{i}.Port.{i}.
      message VLAN { // InternetGatewayDevice.Layer2Bridging.Bridge.{i}.VLAN.{i}.
        bool      vlanenable                               = 1  ; //  Enables or disables this VLAN table entr
        string    alias                                    = 2  ; //  {{datatype|expand}}        }        
        string    vlanname                                 = 3  ; //  Human-readable name for this VLAN table 
        int32     vlanid                                   = 4  ; //  VLAN ID of the entry,        ,       
      }
      repeated VLAN vlan = 11; // InternetGatewayDevice.Layer2Bridging.Bridge.{i}.VLAN.{i}.
    }
    repeated Bridge bridge = 11; // InternetGatewayDevice.Layer2Bridging.Bridge.{i}.
    message Filter { // InternetGatewayDevice.Layer2Bridging.Filter.{i}.
      string    alias                                    = 1  ; //  {{datatype|expand}}        }        
      uint32    filter_key                               = 2  ; //  Unique key for each Filter table entry.
      bool      filter_enable                            = 3  ; //  Enables or disables this Filter table en
      string    filter_status                            = 4  ; //  The status of this Filter table entry.  
      int32     filter_bridge_reference                  = 5  ; //  The ''BridgeKey'' value of the ''Bridge'
      uint32    exclusivity_order                        = 6  ; //  Whether or not the Filter definition is 
      string    filter_interface                         = 7  ; //  The interface or interfaces associated w
      int32     vlanidfilter                             = 8  ; //  The 802.1Q {{bibref|802.1Q-2005}} VLAN I
      bool      admit_only_vlantagged                    = 9  ; //  802.1Q {{bibref|802.1Q-2005}} Acceptable
      string    ethertype_filter_list                    = 10 ; //  Classification criterion.          {{li
      bool      ethertype_filter_exclude                 = 11 ; //  If {{false}}, on ingress to the interfac
      string    source_macaddress_filter_list            = 12 ; //  Classification criterion.          {{li
      bool      source_macaddress_filter_exclude         = 13 ; //  If {{false}}, on ingress to the interfac
      string    dest_macaddress_filter_list              = 14 ; //  Classification criterion.          {{li
      bool      dest_macaddress_filter_exclude           = 15 ; //  If {{false}}, on ingress to the interfac
      string    source_macfrom_vendor_class_idfilter     = 16 ; //  Classification criterion.          A st
      bool      source_macfrom_vendor_class_idfilter_exclude = 17 ; //  If {{false}}, on ingress to the interfac
      string    source_macfrom_vendor_class_idmode       = 18 ; //  {{param|SourceMACFromVendorClassIDFilter
      string    dest_macfrom_vendor_class_idfilter       = 19 ; //  Classification criterion.          A st
      bool      dest_macfrom_vendor_class_idfilter_exclude = 20 ; //  If {{false}}, on ingress to the interfac
      string    dest_macfrom_vendor_class_idmode         = 21 ; //  {{param|DestMACFromVendorClassIDFilter}}
      string    source_macfrom_client_idfilter           = 22 ; //  Classification criterion.          A st
      bool      source_macfrom_client_idfilter_exclude   = 23 ; //  If {{false}}, on ingress to the interfac
      string    dest_macfrom_client_idfilter             = 24 ; //  Classification criterion.          A st
      bool      dest_macfrom_client_idfilter_exclude     = 25 ; //  If {{false}}, on ingress to the interfac
      string    source_macfrom_user_class_idfilter       = 26 ; //  Classification criterion.          A st
      bool      source_macfrom_user_class_idfilter_exclude = 27 ; //  If {{false}}, on ingress to the interfac
      string    dest_macfrom_user_class_idfilter         = 28 ; //  Classification criterion.          A st
      bool      dest_macfrom_user_class_idfilter_exclude = 29 ; //  If {{false}}, on ingress to the interfac
    }
    repeated Filter filter = 12; // InternetGatewayDevice.Layer2Bridging.Filter.{i}.
    message Marking { // InternetGatewayDevice.Layer2Bridging.Marking.{i}.
      string    alias                                    = 1  ; //  {{datatype|expand}}        }        
      uint32    marking_key                              = 2  ; //  Unique key for each Marking table entry.
      bool      marking_enable                           = 3  ; //  Enables or disables this Marking table e
      string    marking_status                           = 4  ; //  The status of this Marking table entry. 
      int32     marking_bridge_reference                 = 5  ; //  The ''BridgeKey'' value of the Bridge ta
      string    marking_interface                        = 6  ; //  The interface or interfaces associated w
      bool      vlaniduntag                              = 7  ; //  If {{true}}, on egress to the interfaces
      int32     vlanidmark                               = 8  ; //  The 802.1Q {{bibref|802.1Q-2005}} VLAN I
      bool      vlanidmark_override                      = 9  ; //  If {{false}}, on egress to the interface
      int32     ethernet_priority_mark                   = 10 ; //  Ethernet priority code (as defined in 80
      bool      ethernet_priority_override               = 11 ; //  If {{false}}, on egress to the interface
    }
    repeated Marking marking = 13; // InternetGatewayDevice.Layer2Bridging.Marking.{i}.
    message AvailableInterface { // InternetGatewayDevice.Layer2Bridging.AvailableInterface.{i}.
      string    alias                                    = 1  ; //  {{datatype|expand}}        }        
      uint32    available_interface_key                  = 2  ; //  Unique key for each Interface entry.   
      string    interface_type                           = 3  ; //  Whether the interface is a LAN-side or W
      string    interface_reference                      = 4  ; //  {{reference|an available LAN or WAN inte
    }
    repeated AvailableInterface available_interface = 14; // InternetGatewayDevice.Layer2Bridging.AvailableInterface.{i}.
  }
  Layer2Bridging layer2bridging = 14; // InternetGatewayDevice.Layer2Bridging.
  message QueueManagement { // InternetGatewayDevice.QueueManagement.
    bool      enable                                   = 1  ; //  Enables or disables all queuing operatio
    uint32    max_queues                               = 2  ; //  The maximum number of queues supported b
    uint32    max_classification_entries               = 3  ; //  The maximum number of entries available 
    uint32    classification_number_of_entries         = 4  ; //  The number of entries in the {{object|Cl
    uint32    max_app_entries                          = 5  ; //  The maximum number of entries available 
    uint32    app_number_of_entries                    = 6  ; //  The number of entries in the {{object|Ap
    uint32    max_flow_entries                         = 7  ; //  The maximum number of entries available 
    uint32    flow_number_of_entries                   = 8  ; //  The number of entries in the {{object|Fl
    uint32    max_policer_entries                      = 9  ; //  The maximum number of entries available 
    uint32    policer_number_of_entries                = 10 ; //  The number of entries in the {{object|Po
    uint32    max_queue_entries                        = 11 ; //  The maximum number of entries available 
    uint32    queue_number_of_entries                  = 12 ; //  The number of entries in the {{object|Qu
    uint32    queue_stats_number_of_entries            = 13 ; //  The number of entries in the {{object|Qu
    uint32    default_forwarding_policy                = 14 ; //  Identifier of the forwarding policy asso
    int32     default_traffic_class                    = 15 ; //  Identifier of the traffic class associat
    int32     default_policer                          = 16 ; //  Instance number of the Policer table ent
    uint32    default_queue                            = 17 ; //  Instance number of the {{object|Queue}} 
    int32     default_dscpmark                         = 18 ; //  DSCP to mark traffic not associated with
    int32     default_ethernet_priority_mark           = 19 ; //  Ethernet priority code (as defined in 80
    string    available_app_list                       = 20 ; //  URNs, each indicating a protocol support
    message Classification { // InternetGatewayDevice.QueueManagement.Classification.{i}.
      uint32    classification_key                       = 1  ; //  Unique key for each classification entry
      bool      classification_enable                    = 2  ; //  Enables or disables this classifier.   
      string    classification_status                    = 3  ; //  The status of this classifier.  {{enum}}
      string    alias                                    = 4  ; //  {{datatype|expand}}        }        
      uint32    classification_order                     = 5  ; //  Position of the classification entry in 
      string    class_interface                          = 6  ; //  Classification criterion.          Spec
      string    dest_ip                                  = 7  ; //  Classification criterion.          Dest
      string    dest_mask                                = 8  ; //  Destination IP address mask.  If not {{e
      bool      dest_ipexclude                           = 9  ; //  If {{false}}, the class includes only th
      string    source_ip                                = 10 ; //  Classification criterion.          Sour
      string    source_mask                              = 11 ; //  Source IP address mask.  If not {{empty}
      bool      source_ipexclude                         = 12 ; //  If {{false}}, the class includes only th
      int32     protocol                                 = 13 ; //  Classification criterion.          Prot
      bool      protocol_exclude                         = 14 ; //  If {{false}}, the class includes only th
      int32     dest_port                                = 15 ; //  Classification criterion.          Dest
      int32     dest_port_range_max                      = 16 ; //  Classification criterion.          If s
      bool      dest_port_exclude                        = 17 ; //  If {{false}}, the class includes only th
      int32     source_port                              = 18 ; //  Classification criterion.          Sour
      int32     source_port_range_max                    = 19 ; //  Classification criterion.          If s
      bool      source_port_exclude                      = 20 ; //  If {{false}}, the class includes only th
      string    source_macaddress                        = 21 ; //  Classification criterion.          Sour
      string    source_macmask                           = 22 ; //  Bit-mask for the MAC address, where matc
      bool      source_macexclude                        = 23 ; //  If {{false}}, the class includes only th
      string    dest_macaddress                          = 24 ; //  Classification criterion.          Dest
      string    dest_macmask                             = 25 ; //  Bit-mask for the MAC address, where matc
      bool      dest_macexclude                          = 26 ; //  If {{false}}, the class includes only th
      int32     ethertype                                = 27 ; //  Classification criterion.          Ethe
      bool      ethertype_exclude                        = 28 ; //  If {{false}}, the class includes only th
      int32     ssap                                     = 29 ; //  Classification criterion.          SSAP
      bool      ssapexclude                              = 30 ; //  If {{false}}, the class includes only th
      int32     dsap                                     = 31 ; //  Classification criterion.          DSAP
      bool      dsapexclude                              = 32 ; //  If {{false}}, the class includes only th
      int32     llccontrol                               = 33 ; //  Classification criterion.          Cont
      bool      llccontrol_exclude                       = 34 ; //  If {{false}}, the class includes only th
      int32     snapoui                                  = 35 ; //  Classification criterion.          OUI 
      bool      snapouiexclude                           = 36 ; //  If {{false}}, the class includes only th
      string    source_vendor_class_id                   = 37 ; //  Classification criterion.           Use
      bool      source_vendor_class_idexclude            = 38 ; //  If {{false}}, the class includes only th
      string    source_vendor_class_idmode               = 39 ; //  SourceVendorClassID pattern match criter
      string    dest_vendor_class_id                     = 40 ; //  Classification criterion.           Use
      bool      dest_vendor_class_idexclude              = 41 ; //  If {{false}}, the class includes only th
      string    dest_vendor_class_idmode                 = 42 ; //  DestVendorClassID pattern match criterio
      string    source_client_id                         = 43 ; //  Classification criterion.           Use
      bool      source_client_idexclude                  = 44 ; //  If {{false}}, the class includes only th
      string    dest_client_id                           = 45 ; //  Classification criterion.           Use
      bool      dest_client_idexclude                    = 46 ; //  If {{false}}, the class includes only th
      string    source_user_class_id                     = 47 ; //  Classification criterion.           Use
      bool      source_user_class_idexclude              = 48 ; //  If {{false}}, the class includes only th
      string    dest_user_class_id                       = 49 ; //  Classification criterion.           Use
      bool      dest_user_class_idexclude                = 50 ; //  If {{false}}, the class includes only th
      string    source_vendor_specific_info              = 51 ; //  Classification criterion.           Use
      bool      source_vendor_specific_info_exclude      = 52 ; //  If {{false}}, the class includes only th
      uint32    source_vendor_specific_info_enterprise   = 53 ; //  {{param|SourceVendorSpecificInfo}} Enter
      int32     source_vendor_specific_info_sub_option   = 54 ; //  {{param|SourceVendorSpecificInfo}} Sub O
      string    source_vendor_specific_info_mode         = 55 ; //  {{param|SourceVendorSpecificInfo}} patte
      string    dest_vendor_specific_info                = 56 ; //  Classification criterion.           Use
      bool      dest_vendor_specific_info_exclude        = 57 ; //  If {{false}}, the class includes only th
      uint32    dest_vendor_specific_info_enterprise     = 58 ; //  {{param|DestVendorSpecificInfo}} Enterpr
      int32     dest_vendor_specific_info_sub_option     = 59 ; //  {{param|DestVendorSpecificInfo}} Sub Opt
      string    dest_vendor_specific_info_mode           = 60 ; //  {{param|DestVendorSpecificInfo}} pattern
      bool      tcpack                                   = 61 ; //  Classification criterion.          If {
      bool      tcpackexclude                            = 62 ; //  If {{false}}, the class includes only th
      uint32    iplength_min                             = 63 ; //  Classification criterion.          Mini
      uint32    iplength_max                             = 64 ; //  Classification criterion.          Maxi
      bool      iplength_exclude                         = 65 ; //  If {{false}}, the class includes only th
      int32     dscpcheck                                = 66 ; //  Classification criterion.          Diff
      bool      dscpexclude                              = 67 ; //  If {{false}}, the class includes only th
      int32     dscpmark                                 = 68 ; //  Classification result.          DSCP to
      int32     ethernet_priority_check                  = 69 ; //  Classification criterion.          Curr
      bool      ethernet_priority_exclude                = 70 ; //  If {{false}}, the class includes only th
      int32     ethernet_priority_mark                   = 71 ; //  Classification result.          Etherne
      int32     vlanidcheck                              = 72 ; //  Classification criterion.          Curr
      bool      vlanidexclude                            = 73 ; //  If {{false}}, the class includes only th
      int32     out_of_band_info                         = 74 ; //  Classification criterion.          Allo
      uint32    forwarding_policy                        = 75 ; //  Classification result.          Identif
      int32     traffic_class                            = 76 ; //  Classification result.          Identif
      int32     class_policer                            = 77 ; //  Classification result.          Instanc
      int32     class_queue                              = 78 ; //  Classification result.          Instanc
      int32     class_app                                = 79 ; //  Classification result.          Instanc
    }
    repeated Classification classification = 21; // InternetGatewayDevice.QueueManagement.Classification.{i}.
    message App { // InternetGatewayDevice.QueueManagement.App.{i}.
      uint32    app_key                                  = 1  ; //  Unique key for each App table entry.   
      bool      app_enable                               = 2  ; //  Enables or disables this App table entry
      string    app_status                               = 3  ; //  The status of this App table entry.  {{e
      string    alias                                    = 4  ; //  {{datatype|expand}}        }        
      string    protocol_identifier                      = 5  ; //  URN identifying the protocol associated 
      string    app_name                                 = 6  ; //  Human-readable name associated with this
      uint32    app_default_forwarding_policy            = 7  ; //  Identifier of the forwarding policy asso
      int32     app_default_traffic_class                = 8  ; //  Identifier of the traffic class associat
      int32     app_default_policer                      = 9  ; //  Instance number of the Policer table ent
      int32     app_default_queue                        = 10 ; //  Instance number of the Queue table entry
      int32     app_default_dscpmark                     = 11 ; //  DSCP to mark traffic associated with thi
      int32     app_default_ethernet_priority_mark       = 12 ; //  Ethernet priority code (as defined in 80
    }
    repeated App app = 22; // InternetGatewayDevice.QueueManagement.App.{i}.
    message Flow { // InternetGatewayDevice.QueueManagement.Flow.{i}.
      uint32    flow_key                                 = 1  ; //  Unique key for each Flow table entry.  
      bool      flow_enable                              = 2  ; //  Enables or disables this Flow table entr
      string    flow_status                              = 3  ; //  The status of this Flow table entry.  {{
      string    alias                                    = 4  ; //  {{datatype|expand}}        }        
      string    flow_type                                = 5  ; //  URN identifying the type of flow to be a
      string    flow_type_parameters                     = 6  ; //  List of name-value pairs representing ad
      string    flow_name                                = 7  ; //  Human-readable name associated with this
      int32     app_identifier                           = 8  ; //  Instance number of the App table entry a
      uint32    flow_forwarding_policy                   = 9  ; //  Identifier of the forwarding policy asso
      int32     flow_traffic_class                       = 10 ; //  Identifier of the traffic class associat
      int32     flow_policer                             = 11 ; //  Instance number of the Policer table ent
      int32     flow_queue                               = 12 ; //  Instance number of the Queue table entry
      int32     flow_dscpmark                            = 13 ; //  DSCP to mark traffic with that falls int
      int32     flow_ethernet_priority_mark              = 14 ; //  Ethernet priority code (as defined in 80
    }
    repeated Flow flow = 23; // InternetGatewayDevice.QueueManagement.Flow.{i}.
    message Policer { // InternetGatewayDevice.QueueManagement.Policer.{i}.
      uint32    policer_key                              = 1  ; //  Unique key for each policer entry.     
      bool      policer_enable                           = 2  ; //  Enables or disables this policer.      
      string    policer_status                           = 3  ; //  The status of this policer.  {{enum}}  
      string    alias                                    = 4  ; //  {{datatype|expand}}        }        
      uint32    committed_rate                           = 5  ; //  Committed rate allowed for this policer 
      uint32    committed_burst_size                     = 6  ; //  Committed Burstsize in bytes.        .
      uint32    excess_burst_size                        = 7  ; //  Excess Burstsize in bytes.          App
      uint32    peak_rate                                = 8  ; //  Peak rate allowed for this Meter in bits
      uint32    peak_burst_size                          = 9  ; //  Peak Burstsize in bytes.          Appli
      string    meter_type                               = 10 ; //  Identifies the method of traffic measure
      string    possible_meter_types                     = 11 ; //  Supported meter types.        .      
      string    conforming_action                        = 12 ; //  Instructions for how to handle traffic t
      string    partial_conforming_action                = 13 ; //  Instructions for how to handle traffic t
      string    non_conforming_action                    = 14 ; //  Instructions for how to handle traffic t
      uint32    counted_packets                          = 15 ; //  Number of Packets counted as result of a
      uint32    counted_bytes                            = 16 ; //  Number of Bytes counted as result of a '
      uint32    total_counted_packets                    = 17 ; //  Total number of Packets counted by this 
      uint32    total_counted_bytes                      = 18 ; //  Total number of Bytes counted by this po
      uint32    conforming_counted_packets               = 19 ; //  Number of conforming Packets counted by 
      uint32    conforming_counted_bytes                 = 20 ; //  Number of conforming Bytes counted by th
      uint32    partially_conforming_counted_packets     = 21 ; //  Number of partially conforming Packets c
      uint32    partially_conforming_counted_bytes       = 22 ; //  Number of partially conforming Bytes cou
      uint32    non_conforming_counted_packets           = 23 ; //  Number of non-conforming Packets counted
      uint32    non_conforming_counted_bytes             = 24 ; //  Number of non-conforming Bytes counted b
    }
    repeated Policer policer = 24; // InternetGatewayDevice.QueueManagement.Policer.{i}.
    message Queue { // InternetGatewayDevice.QueueManagement.Queue.{i}.
      uint32    queue_key                                = 1  ; //  Unique key for each queue entry.       
      bool      queue_enable                             = 2  ; //  Enables or disables this queue.        
      string    queue_status                             = 3  ; //  The status of this queue.  {{enum}}    
      string    alias                                    = 4  ; //  {{datatype|expand}}        }        
      string    traffic_classes                          = 5  ; //  Identifies the set of traffic classes as
      string    queue_interface                          = 6  ; //  Egress interfaces for which the specifie
      uint32    queue_buffer_length                      = 7  ; //  Number of bytes in the buffer.         
      uint32    queue_weight                             = 8  ; //  Weight of this queue in case of {{enum|W
      uint32    queue_precedence                         = 9  ; //  Precedence of this queue relative to oth
      uint32    redthreshold                             = 10 ; //  Random Early Detection threshold, used o
      uint32    redpercentage                            = 11 ; //  Random Early Detection percentage, used 
      string    drop_algorithm                           = 12 ; //  Dropping algorithm used for this queue i
      string    scheduler_algorithm                      = 13 ; //  Scheduling Algorithm used by scheduler.
      int32     shaping_rate                             = 14 ; //  Rate to shape this queue's traffic to.  
      uint32    shaping_burst_size                       = 15 ; //  Burst size in bytes.  For both leaky buc
    }
    repeated Queue queue = 25; // InternetGatewayDevice.QueueManagement.Queue.{i}.
    message QueueStats { // InternetGatewayDevice.QueueManagement.QueueStats.{i}.
      bool      enable                                   = 1  ; //  Enables or disables this object.       
      string    status                                   = 2  ; //  The status of this object.        .  
      string    alias                                    = 3  ; //  {{datatype|expand}}        }        
      uint32    queue                                    = 4  ; //  Instance number of the Queue table entry
      string    interface                                = 5  ; //  Egress interface for which this object c
      uint32    output_packets                           = 6  ; //  Number of packets output through the que
      uint32    output_bytes                             = 7  ; //  Number of bytes output through the queue
      uint32    dropped_packets                          = 8  ; //  Number of packets dropped by the queue.
      uint32    dropped_bytes                            = 9  ; //  Number of bytes dropped by the queue.  
      uint32    queue_occupancy_packets                  = 10 ; //  Queue occupancy in packets (gives a meas
      uint32    queue_occupancy_percentage               = 11 ; //  Queue occupancy as a percentage, i.e. 10
    }
    repeated QueueStats queue_stats = 26; // InternetGatewayDevice.QueueManagement.QueueStats.{i}.
  }
  QueueManagement queue_management = 15; // InternetGatewayDevice.QueueManagement.
  message LANConfigSecurity { // InternetGatewayDevice.LANConfigSecurity.
    string    config_password                          = 1  ; //  A password to allow LAN access to protec
  }
  LANConfigSecurity lanconfig_security = 16; // InternetGatewayDevice.LANConfigSecurity.
  message IPPingDiagnostics { // InternetGatewayDevice.IPPingDiagnostics.
    string    diagnostics_state                        = 1  ; //  Indicates availability of diagnostic dat
    string    interface                                = 2  ; //  {{reference|the WAN or LAN IP-layer inte
    string    host                                     = 3  ; //  Host name or address of the host to ping
    uint32    number_of_repetitions                    = 4  ; //  Number of repetitions of the ping test t
    uint32    timeout                                  = 5  ; //  Timeout in milliseconds for the ping tes
    uint32    data_block_size                          = 6  ; //  Size of the data block in bytes to be se
    uint32    dscp                                     = 7  ; //  DiffServ codepoint to be used for the te
    uint32    success_count                            = 8  ; //  Result parameter indicating the number o
    uint32    failure_count                            = 9  ; //  Result parameter indicating the number o
    uint32    average_response_time                    = 10 ; //  Result parameter indicating the average 
    uint32    minimum_response_time                    = 11 ; //  Result parameter indicating the minimum 
    uint32    maximum_response_time                    = 12 ; //  Result parameter indicating the maximum 
  }
  IPPingDiagnostics ipping_diagnostics = 17; // InternetGatewayDevice.IPPingDiagnostics.
  message DownloadDiagnostics { // InternetGatewayDevice.DownloadDiagnostics.
    string    diagnostics_state                        = 1  ; //  Indicate the availability of diagnostic 
    string    interface                                = 2  ; //  {{reference|the IP-layer interface over 
    string    download_url                             = 3  ; //  The URL, as defined in {{bibref|RFC3986}
    uint32    dscp                                     = 4  ; //  The DiffServ code point for marking pack
    uint32    ethernet_priority                        = 5  ; //  Ethernet priority code for marking packe
    string    romtime                                  = 6  ; //  Request time in UTC, which MUST be speci
    string    bomtime                                  = 7  ; //  Begin of transmission time in UTC, which
    string    eomtime                                  = 8  ; //  End of transmission in UTC, which MUST b
    uint32    test_bytes_received                      = 9  ; //  The test traffic received in bytes durin
    uint32    total_bytes_received                     = 10 ; //  The total number of bytes received on th
    string    tcpopen_request_time                     = 11 ; //  Request time in UTC, which MUST be speci
    string    tcpopen_response_time                    = 12 ; //  Response time in UTC, which MUST be spec
  }
  DownloadDiagnostics download_diagnostics = 18; // InternetGatewayDevice.DownloadDiagnostics.
  message UploadDiagnostics { // InternetGatewayDevice.UploadDiagnostics.
    string    diagnostics_state                        = 1  ; //  Indicate the availability of diagnostic 
    string    interface                                = 2  ; //  {{reference|the IP-layer interface over 
    string    upload_url                               = 3  ; //  The URL, as defined in {{bibref|RFC3986}
    uint32    dscp                                     = 4  ; //  DiffServ code point for marking packets 
    uint32    ethernet_priority                        = 5  ; //  Ethernet priority code for marking packe
    uint32    test_file_length                         = 6  ; //  The size of the file (in bytes) to be up
    string    romtime                                  = 7  ; //  Request time in UTC, which MUST be speci
    string    bomtime                                  = 8  ; //  Begin of transmission time in UTC, which
    string    eomtime                                  = 9  ; //  End of transmission in UTC, which MUST b
    uint32    total_bytes_sent                         = 10 ; //  The total number of bytes sent on the In
    string    tcpopen_request_time                     = 11 ; //  Request time in UTC, which MUST be speci
    string    tcpopen_response_time                    = 12 ; //  Response time in UTC, which MUST be spec
  }
  UploadDiagnostics upload_diagnostics = 19; // InternetGatewayDevice.UploadDiagnostics.
  message UDPEchoConfig { // InternetGatewayDevice.UDPEchoConfig.
    bool      enable                                   = 1  ; //  MUST be enabled to receive UDP echo. Whe
    string    interface                                = 2  ; //  {{reference|IP-layer interface over whic
    string    source_ipaddress                         = 3  ; //  The Source IP address of the UDP echo pa
    uint32    udpport                                  = 4  ; //  The UDP port on which the UDP server MUS
    bool      echo_plus_enabled                        = 5  ; //  If {{true}} the CPE will perform necessa
    bool      echo_plus_supported                      = 6  ; //  {{true}} if UDP Echo Plus is supported.
    uint32    packets_received                         = 7  ; //  Incremented upon each valid UDP echo pac
    uint32    packets_responded                        = 8  ; //  Incremented for each UDP echo response s
    uint32    bytes_received                           = 9  ; //  The number of UDP received bytes includi
    uint32    bytes_responded                          = 10 ; //  The number of UDP responded bytes, inclu
    string    time_first_packet_received               = 11 ; //  Time in UTC, which MUST be specified to 
    string    time_last_packet_received                = 12 ; //  Time in UTC, which MUST be specified to 
  }
  UDPEchoConfig udpecho_config = 20; // InternetGatewayDevice.UDPEchoConfig.
  message LANDevice { // InternetGatewayDevice.LANDevice.{i}.
    string    alias                                    = 1  ; //  {{datatype|expand}}        }        
    uint32    lanethernet_interface_number_of_entries  = 2  ; //  Number of instances of {{object|LANEther
    uint32    lanusbinterface_number_of_entries        = 3  ; //  Number of instances of {{object|LANUSBIn
    uint32    lanwlanconfiguration_number_of_entries   = 4  ; //  Number of instances of {{object|WLANConf
    message LANHostConfigManagement { // InternetGatewayDevice.LANDevice.{i}.LANHostConfigManagement.
      string    macaddress                               = 1  ; //  The MAC address associated with the IP i
      bool      dhcpserver_configurable                  = 2  ; //  Enables the configuration of the DHCP se
      bool      dhcpserver_enable                        = 3  ; //  Enables or disables the DHCP server on t
      bool      dhcprelay                                = 4  ; //  Indicates if the DHCP server performs th
      string    min_address                              = 5  ; //  Specifies first address in the pool to b
      string    max_address                              = 6  ; //  Specifies last address in the pool to be
      string    reserved_addresses                       = 7  ; //  Addresses marked reserved from the addre
      string    subnet_mask                              = 8  ; //  Specifies the client's network subnet ma
      string    dnsservers                               = 9  ; //  DNS servers offered to DHCP clients.  Su
      string    domain_name                              = 10 ; //  Sets the domain name to provide to clien
      string    iprouters                                = 11 ; //  IP addresses of routers on this subnet. 
      int32     dhcplease_time                           = 12 ; //  Specifies the lease time in seconds of c
      string    use_allocated_wan                        = 13 ; //  Controls use of addresses from the assoc
      string    associated_connection                    = 14 ; //  {{reference|the connection instance to b
      uint32    passthrough_lease                        = 15 ; //  DHCP lease time in seconds given to the 
      string    passthrough_macaddress                   = 16 ; //  Hardware address of the LAN Host that is
      string    allowed_macaddresses                     = 17 ; //  Hardware addresses that are allowed to c
      uint32    ipinterface_number_of_entries            = 18 ; //  The number of entries in the {{object|IP
      uint32    dhcpstatic_address_number_of_entries     = 19 ; //  The number of entries in the {{object|DH
      uint32    dhcpoption_number_of_entries             = 20 ; //  The number of entries in the {{object|DH
      uint32    dhcpconditional_pool_number_of_entries   = 21 ; //  The number of entries in the  {{object|D
      message IPInterface { // InternetGatewayDevice.LANDevice.{i}.LANHostConfigManagement.IPInterface.{i}.
        bool      enable                                   = 1  ; //  Enables or disables this entry.  On crea
        string    alias                                    = 2  ; //  {{datatype|expand}}        }        
        string    ipinterface_ipaddress                    = 3  ; //  IP address of the LAN-side interface of 
        string    ipinterface_subnet_mask                  = 4  ; //  Subnet mask of the LAN-side interface of
        string    ipinterface_addressing_type              = 5  ; //  Represents the addressing method used to
      }
      repeated IPInterface ipinterface = 22; // InternetGatewayDevice.LANDevice.{i}.LANHostConfigManagement.IPInterface.{i}.
      message DHCPStaticAddress { // InternetGatewayDevice.LANDevice.{i}.LANHostConfigManagement.DHCPStaticAddress.{i}.
        bool      enable                                   = 1  ; //  Enables or disables the DHCPStaticAddres
        string    alias                                    = 2  ; //  {{datatype|expand}}        }        
        string    chaddr                                   = 3  ; //  Hardware address (MAC address) of the ph
        string    yiaddr                                   = 4  ; //  IP address to be assigned by the DHCP se
      }
      repeated DHCPStaticAddress dhcpstatic_address = 23; // InternetGatewayDevice.LANDevice.{i}.LANHostConfigManagement.DHCPStaticAddress.{i}.
      message DHCPOption { // InternetGatewayDevice.LANDevice.{i}.LANHostConfigManagement.DHCPOption.{i}.
        bool      enable                                   = 1  ; //  Enables or disables this DHCPOption tabl
        string    alias                                    = 2  ; //  {{datatype|expand}}        }        
        uint32    tag                                      = 3  ; //  Option tag as defined in RFC 2132 {{bibr
        bytes     value                                    = 4  ; //  Base64 encoded option value.        .
      }
      repeated DHCPOption dhcpoption = 24; // InternetGatewayDevice.LANDevice.{i}.LANHostConfigManagement.DHCPOption.{i}.
      message DHCPConditionalServingPool { // InternetGatewayDevice.LANDevice.{i}.LANHostConfigManagement.DHCPConditionalServingPool.{i}.
        bool      enable                                   = 1  ; //  Enables or disables the DHCPConditionalS
        string    alias                                    = 2  ; //  {{datatype|expand}}        }        
        uint32    pool_order                               = 3  ; //  Position of the pool entry in the order 
        string    source_interface                         = 4  ; //  Pool association criterion.          {{
        string    vendor_class_id                          = 5  ; //  Pool association criterion.           U
        bool      vendor_class_idexclude                   = 6  ; //  If {{false}}, matching packets are those
        string    vendor_class_idmode                      = 7  ; //  {{param|VendorClassID}} pattern match cr
        string    client_id                                = 8  ; //  Pool association criterion.           U
        bool      client_idexclude                         = 9  ; //  If {{false}}, matching packets are those
        string    user_class_id                            = 10 ; //  Pool association criterion.           U
        bool      user_class_idexclude                     = 11 ; //  If {{false}}, matching packets are those
        string    chaddr                                   = 12 ; //  Pool association criterion.          Ha
        string    chaddr_mask                              = 13 ; //  Bit-mask for the MAC address, where matc
        bool      chaddr_exclude                           = 14 ; //  If {{false}}, matching packets are those
        bool      locally_served                           = 15 ; //  If {{true}}, then the local DHCP server 
        string    min_address                              = 16 ; //  Specifies first address in the pool to b
        string    max_address                              = 17 ; //  Specifies last address in the pool to be
        string    reserved_addresses                       = 18 ; //  IP addresses marked reserved from the ad
        string    subnet_mask                              = 19 ; //  Specifies the client's network subnet ma
        string    dnsservers                               = 20 ; //  DNS servers offered to DHCP clients.  Su
        string    domain_name                              = 21 ; //  Sets the domain name to provide to clien
        string    iprouters                                = 22 ; //  IP addresses of routers on this subnet. 
        int32     dhcplease_time                           = 23 ; //  Specifies the lease time in seconds of c
        string    use_allocated_wan                        = 24 ; //  Controls whether the {{param|MinAddress}
        string    associated_connection                    = 25 ; //  {{reference|the connection instance to b
        string    dhcpserver_ipaddress                     = 26 ; //  IP address of the DHCP server, where the
        uint32    dhcpstatic_address_number_of_entries     = 27 ; //  The number of entries in the {{object|DH
        uint32    dhcpoption_number_of_entries             = 28 ; //  The number of entries in the {{object|DH
        message DHCPStaticAddress { // InternetGatewayDevice.LANDevice.{i}.LANHostConfigManagement.DHCPConditionalServingPool.{i}.DHCPStaticAddress.{i}.
          bool      enable                                   = 1  ; //  Enables or disables the DHCPStaticAddres
          string    alias                                    = 2  ; //  {{datatype|expand}}        }        
          string    chaddr                                   = 3  ; //  Hardware address (MAC address) of the ph
          string    yiaddr                                   = 4  ; //  IP address to be assigned by the DHCP se
        }
        repeated DHCPStaticAddress dhcpstatic_address = 29; // InternetGatewayDevice.LANDevice.{i}.LANHostConfigManagement.DHCPConditionalServingPool.{i}.DHCPStaticAddress.{i}.
        message DHCPOption { // InternetGatewayDevice.LANDevice.{i}.LANHostConfigManagement.DHCPConditionalServingPool.{i}.DHCPOption.{i}.
          bool      enable                                   = 1  ; //  Enables or disables this DHCPOption tabl
          string    alias                                    = 2  ; //  {{datatype|expand}}        }        
          uint32    tag                                      = 3  ; //  Option tag as defined in RFC 2132 {{bibr
          bytes     value                                    = 4  ; //  Base64 encoded option value.        .
        }
        repeated DHCPOption dhcpoption = 30; // InternetGatewayDevice.LANDevice.{i}.LANHostConfigManagement.DHCPConditionalServingPool.{i}.DHCPOption.{i}.
      }
      repeated DHCPConditionalServingPool dhcpconditional_serving_pool = 25; // InternetGatewayDevice.LANDevice.{i}.LANHostConfigManagement.DHCPConditionalServingPool.{i}.
    }
    LANHostConfigManagement lanhost_config_management = 5; // InternetGatewayDevice.LANDevice.{i}.LANHostConfigManagement.
    message LANEthernetInterfaceConfig { // InternetGatewayDevice.LANDevice.{i}.LANEthernetInterfaceConfig.{i}.
      bool      enable                                   = 1  ; //  Enables or disables this interface.    
      string    status                                   = 2  ; //  Indicates the status of this interface. 
      string    alias                                    = 3  ; //  {{datatype|expand}}        }        
      string    name                                     = 4  ; //  The name of this layer 2 interface, chos
      string    macaddress                               = 5  ; //  The physical address of the interface. 
      bool      macaddress_control_enabled               = 6  ; //  Indicates whether MAC Address Control is
      string    max_bit_rate                             = 7  ; //  The maximum upstream and downstream bit 
      string    duplex_mode                              = 8  ; //  The duplex mode available to this connec
      message Stats { // InternetGatewayDevice.LANDevice.{i}.LANEthernetInterfaceConfig.{i}.Stats.
        uint32    bytes_sent                               = 1  ; //  The total number of bytes transmitted ou
        uint32    bytes_received                           = 2  ; //  The total number of bytes received on th
        uint32    packets_sent                             = 3  ; //  The total number of packets transmitted 
        uint32    packets_received                         = 4  ; //  The total number of packets which were r
        uint32    errors_sent                              = 5  ; //  The total number of outbound packets tha
        uint32    errors_received                          = 6  ; //  The total number of inbound packets that
        uint32    unicast_packets_sent                     = 7  ; //  The total number of packets requested fo
        uint32    unicast_packets_received                 = 8  ; //  The total number of received packets whi
        uint32    discard_packets_sent                     = 9  ; //  The total number of outbound packets whi
        uint32    discard_packets_received                 = 10 ; //  The total number of inbound packets whic
        uint32    multicast_packets_sent                   = 11 ; //  The total number of packets requested fo
        uint32    multicast_packets_received               = 12 ; //  The total number of received packets whi
        uint32    broadcast_packets_sent                   = 13 ; //  The total number of packets requested fo
        uint32    broadcast_packets_received               = 14 ; //  The total number of received packets whi
        uint32    unknown_proto_packets_received           = 15 ; //  The total number of packets received via
      }
      Stats stats = 9; // InternetGatewayDevice.LANDevice.{i}.LANEthernetInterfaceConfig.{i}.Stats.
    }
    repeated LANEthernetInterfaceConfig lanethernet_interface_config = 6; // InternetGatewayDevice.LANDevice.{i}.LANEthernetInterfaceConfig.{i}.
    message LANUSBInterfaceConfig { // InternetGatewayDevice.LANDevice.{i}.LANUSBInterfaceConfig.{i}.
      bool      enable                                   = 1  ; //  Enables or disables this interface.    
      string    status                                   = 2  ; //  Indicates the status of this interface. 
      string    alias                                    = 3  ; //  {{datatype|expand}}        }        
      string    name                                     = 4  ; //  The name of this layer 2 interface, chos
      string    macaddress                               = 5  ; //  The physical address of the interface. 
      bool      macaddress_control_enabled               = 6  ; //  Indicates whether MAC Address Control is
      string    standard                                 = 7  ; //  USB version supported by the device.   
      string    type                                     = 8  ; //  Type of the USB interface.        .  
      string    rate                                     = 9  ; //  Speed of the USB interface.        . 
      string    power                                    = 10 ; //  Power configuration of the USB interface
      message Stats { // InternetGatewayDevice.LANDevice.{i}.LANUSBInterfaceConfig.{i}.Stats.
        uint32    bytes_sent                               = 1  ; //  The total number of bytes transmitted ou
        uint32    bytes_received                           = 2  ; //  The total number of bytes received on th
        uint32    cells_sent                               = 3  ; //  The total number of packets (cells) tran
        uint32    cells_received                           = 4  ; //  The total number of packets (cells) whic
        uint32    errors_sent                              = 5  ; //  The total number of outbound packets tha
        uint32    errors_received                          = 6  ; //  The total number of inbound packets that
        uint32    unicast_packets_sent                     = 7  ; //  The total number of packets requested fo
        uint32    unicast_packets_received                 = 8  ; //  The total number of received packets whi
        uint32    discard_packets_sent                     = 9  ; //  The total number of outbound packets whi
        uint32    discard_packets_received                 = 10 ; //  The total number of inbound packets whic
        uint32    multicast_packets_sent                   = 11 ; //  The total number of packets requested fo
        uint32    multicast_packets_received               = 12 ; //  The total number of received packets whi
        uint32    broadcast_packets_sent                   = 13 ; //  The total number of packets requested fo
        uint32    broadcast_packets_received               = 14 ; //  The total number of received packets whi
        uint32    unknown_proto_packets_received           = 15 ; //  The total number of packets received via
      }
      Stats stats = 11; // InternetGatewayDevice.LANDevice.{i}.LANUSBInterfaceConfig.{i}.Stats.
    }
    repeated LANUSBInterfaceConfig lanusbinterface_config = 7; // InternetGatewayDevice.LANDevice.{i}.LANUSBInterfaceConfig.{i}.
    message WLANConfiguration { // InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.
      bool      enable                                   = 1  ; //  Enables or disables this interface.    
      string    status                                   = 2  ; //  Indicates the status of this interface. 
      string    alias                                    = 3  ; //  {{datatype|expand}}        }        
      string    name                                     = 4  ; //  The name of this layer 2 interface, chos
      string    bssid                                    = 5  ; //  The MAC address of the interface.      
      string    max_bit_rate                             = 6  ; //  The maximum upstream and downstream bit 
      uint32    channel                                  = 7  ; //  The current radio channel used by the co
      bool      auto_channel_enable                      = 8  ; //  Enable or disable automatic channel sele
      string    ssid                                     = 9  ; //  The current service set identifier in us
      string    beacon_type                              = 10 ; //  The capabilities that are currently enab
      bool      macaddress_control_enabled               = 11 ; //  Indicates whether MAC Address Control is
      string    standard                                 = 12 ; //  Indicates which IEEE 802.11 standard thi
      uint32    wepkey_index                             = 13 ; //  The index of the default WEP key.      
      string    key_passphrase                           = 14 ; //  A passphrase from which the WEP keys are
      string    wepencryption_level                      = 15 ; //  Supported key lengths.  {{enum}}       
      string    basic_encryption_modes                   = 16 ; //  Encryption modes that are available when
      string    basic_authentication_mode                = 17 ; //  Authentication modes that are available 
      string    wpaencryption_modes                      = 18 ; //  Encryption modes that are available when
      string    wpaauthentication_mode                   = 19 ; //  Authentication modes that are available 
      string    ieee11i_encryption_modes                 = 20 ; //  Encryption modes that are available when
      string    ieee11i_authentication_mode              = 21 ; //  Authentication modes that are available 
      string    possible_channels                        = 22 ; //  Possible radio channels for the wireless
      string    basic_data_transmit_rates                = 23 ; //  Maximum access point data transmit rates
      string    operational_data_transmit_rates          = 24 ; //  Maximum access point data transmit rates
      string    possible_data_transmit_rates             = 25 ; //  Data transmit rates for unicast frames a
      bool      insecure_oobaccess_enabled               = 26 ; //  Indicates whether insecure write access 
      bool      beacon_advertisement_enabled             = 27 ; //  Indicates whether or not the access poin
      bool      ssidadvertisement_enabled                = 28 ; //  Indicates whether or not beacons include
      bool      radio_enabled                            = 29 ; //  Indicates whether or not the access poin
      string    transmit_power_supported                 = 30 ; //  Supported transmit power levels as perce
      uint32    transmit_power                           = 31 ; //  Indicates the current transmit power lev
      bool      auto_rate_fall_back_enabled              = 32 ; //  Indicates whether the access point can a
      string    location_description                     = 33 ; //  An XML description of information used t
      string    regulatory_domain                        = 34 ; //  802.11d Regulatory Domain String.  First
      uint32    total_pskfailures                        = 35 ; //  The number of times pre-shared key (PSK)
      uint32    total_integrity_failures                 = 36 ; //  The number of times the MICHAEL integrit
      string    channels_in_use                          = 37 ; //  Channels that the access point determine
      string    device_operation_mode                    = 38 ; //  The current access-point operating mode.
      uint32    distance_from_root                       = 39 ; //  The number of hops from the root access 
      string    peer_bssid                               = 40 ; //  The MAC address of the peer in wireless 
      string    authentication_service_mode              = 41 ; //  Indicates whether another service is inv
      bool      wmmsupported                             = 42 ; //  Indicates whether this interface support
      bool      uapsdsupported                           = 43 ; //  Indicates whether this interface support
      bool      wmmenable                                = 44 ; //  Whether WMM support is currently enabled
      bool      uapsdenable                              = 45 ; //  Whether U-APSD support is currently enab
      uint32    total_bytes_sent                         = 46 ; //  The total number of bytes transmitted ou
      uint32    total_bytes_received                     = 47 ; //  The total number of bytes received on th
      uint32    total_packets_sent                       = 48 ; //  The total number of packets transmitted 
      uint32    total_packets_received                   = 49 ; //  The total number of packets which were r
      uint32    total_associations                       = 50 ; //  The number of devices currently associat
      message AssociatedDevice { // InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.AssociatedDevice.{i}.
        string    associated_device_macaddress             = 1  ; //  The MAC address of an associated device.
        string    associated_device_ipaddress              = 2  ; //  The IP address or DNS name of an associa
        bool      associated_device_authentication_state   = 3  ; //  Whether an associated device has authent
        string    last_requested_unicast_cipher            = 4  ; //  The unicast cipher that was most recentl
        string    last_requested_multicast_cipher          = 5  ; //  The multicast cipher that was most recen
        string    last_pmkid                               = 6  ; //  The pairwise master key (PMK) that was m
        string    last_data_transmit_rate                  = 7  ; //  The data transmit rate that was most rec
      }
      repeated AssociatedDevice associated_device = 51; // InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.AssociatedDevice.{i}.
      message WEPKey { // InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.WEPKey.{i}.
        string    alias                                    = 1  ; //  {{datatype|expand}}        }        
        string    wepkey                                   = 2  ; //  A WEP key expressed as a hexadecimal str
      }
      repeated WEPKey wepkey = 52; // InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.WEPKey.{i}.
      message PreSharedKey { // InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.PreSharedKey.{i}.
        string    alias                                    = 1  ; //  {{datatype|expand}}        }        
        string    pre_shared_key                           = 2  ; //  A literal WPA PSK expressed as a hexadec
        string    key_passphrase                           = 3  ; //  A passphrase from which the PSK is to be
        string    associated_device_macaddress             = 4  ; //  The MAC address associated with a presha
      }
      repeated PreSharedKey pre_shared_key = 53; // InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.PreSharedKey.{i}.
      message Stats { // InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.Stats.
        uint32    errors_sent                              = 1  ; //  The total number of outbound packets tha
        uint32    errors_received                          = 2  ; //  The total number of inbound packets that
        uint32    unicast_packets_sent                     = 3  ; //  The total number of packets requested fo
        uint32    unicast_packets_received                 = 4  ; //  The total number of received packets whi
        uint32    discard_packets_sent                     = 5  ; //  The total number of outbound packets whi
        uint32    discard_packets_received                 = 6  ; //  The total number of inbound packets whic
        uint32    multicast_packets_sent                   = 7  ; //  The total number of packets requested fo
        uint32    multicast_packets_received               = 8  ; //  The total number of received packets whi
        uint32    broadcast_packets_sent                   = 9  ; //  The total number of packets requested fo
        uint32    broadcast_packets_received               = 10 ; //  The total number of received packets whi
        uint32    unknown_proto_packets_received           = 11 ; //  The total number of packets received via
      }
      Stats stats = 54; // InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.Stats.
      message WPS { // InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.WPS.
        bool      enable                                   = 1  ; //  Enables or disables WPS functionality fo
        string    device_name                              = 2  ; //  User-friendly description of the device.
        uint32    device_password                          = 3  ; //  Represents the DevicePassword used (comm
        string    uuid                                     = 4  ; //  UUID of the device. This is represented 
        uint32    version                                  = 5  ; //  The Wi-Fi Protected Setup version suppor
        string    config_methods_supported                 = 6  ; //  WPS configuration methods supported by t
        string    config_methods_enabled                   = 7  ; //  WPS configuration methods enabled on the
        string    setup_locked_state                       = 8  ; //  Indicates if the AP Setup mode is enable
        bool      setup_lock                               = 9  ; //  When set to {{true}}, the Access Point w
        string    configuration_state                      = 10 ; //  Description of the WPS status on the Wir
        string    last_configuration_error                 = 11 ; //  Shows the result of the last external re
        uint32    registrar_number_of_entries              = 12 ; //  Number of entries in the Registrar table
        bool      registrar_established                    = 13 ; //  {{true}} if the Access Point has ever pr
        message Registrar { // InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.WPS.Registrar.{i}.
          bool      enable                                   = 1  ; //  If {{true}}, the registrar can be used b
          string    alias                                    = 2  ; //  {{datatype|expand}}        }        
          string    uuid                                     = 3  ; //  UUID of the registrar. This is represent
          string    device_name                              = 4  ; //  Device Name of the registrar.          
        }
        repeated Registrar registrar = 14; // InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.WPS.Registrar.{i}.
      }
      WPS wps = 55; // InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.WPS.
      message APWMMParameter { // InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.APWMMParameter.{i}.
        string    alias                                    = 1  ; //  {{datatype|expand}}        }        
        uint32    aifsn                                    = 2  ; //  Arbitration Inter Frame Spacing (Number)
        uint32    ecwmin                                   = 3  ; //  Exponent of Contention Window (Minimum).
        uint32    ecwmax                                   = 4  ; //  Exponent of Contention Window (Maximum).
        uint32    txop                                     = 5  ; //  Transmit Opportunity, in multiples of 32
        bool      ack_policy                               = 6  ; //  Ack Policy, where {{false}}=''Do Not Ack
      }
      repeated APWMMParameter apwmmparameter = 56; // InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.APWMMParameter.{i}.
      message STAWMMParameter { // InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.STAWMMParameter.{i}.
        string    alias                                    = 1  ; //  {{datatype|expand}}        }        
        uint32    aifsn                                    = 2  ; //  Arbitration Inter Frame Spacing (Number)
        uint32    ecwmin                                   = 3  ; //  Exponent of Contention Window (Minimum).
        uint32    ecwmax                                   = 4  ; //  Exponent of Contention Window (Maximum).
        uint32    txop                                     = 5  ; //  Transmit Opportunity, in multiples of 32
        bool      ack_policy                               = 6  ; //  Ack Policy, where {{false}}=''Do Not Ack
      }
      repeated STAWMMParameter stawmmparameter = 57; // InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.STAWMMParameter.{i}.
    }
    repeated WLANConfiguration wlanconfiguration = 8; // InternetGatewayDevice.LANDevice.{i}.WLANConfiguration.{i}.
    message Hosts { // InternetGatewayDevice.LANDevice.{i}.Hosts.
      uint32    host_number_of_entries                   = 1  ; //  Number of entries in the {{object|Host}}
      message Host { // InternetGatewayDevice.LANDevice.{i}.Hosts.Host.{i}.
        string    ipaddress                                = 1  ; //  Current IP Address of the host.        
        string    address_source                           = 2  ; //  Indicates whether the IP address of the 
        int32     lease_time_remaining                     = 3  ; //  DHCP lease time remaining in seconds.  A
        string    macaddress                               = 4  ; //  MAC address of the host.        .    
        string    layer2interface                          = 5  ; //  This parameter is the full hierarchical 
        string    vendor_class_id                          = 6  ; //  Vendor Class Identifier DHCP option (Opt
        string    client_id                                = 7  ; //  Client Identifier DHCP option (Option 61
        string    user_class_id                            = 8  ; //  User Class Identifier DHCP option (Optio
        string    host_name                                = 9  ; //  The device's host name or {{empty}} if u
        string    interface_type                           = 10 ; //  Type of physical interface through which
        bool      active                                   = 11 ; //  Whether or not the host is currently pre
      }
      repeated Host host = 2; // InternetGatewayDevice.LANDevice.{i}.Hosts.Host.{i}.
    }
    Hosts hosts = 9; // InternetGatewayDevice.LANDevice.{i}.Hosts.
  }
  repeated LANDevice landevice = 21; // InternetGatewayDevice.LANDevice.{i}.
  message LANInterfaces { // InternetGatewayDevice.LANInterfaces.
    uint32    lanethernet_interface_number_of_entries  = 1  ; //  Number of instances of {{object|LANEther
    uint32    lanusbinterface_number_of_entries        = 2  ; //  Number of instances of {{object|LANUSBIn
    uint32    lanwlanconfiguration_number_of_entries   = 3  ; //  Number of instances of {{object|WLANConf
    message LANEthernetInterfaceConfig { // InternetGatewayDevice.LANInterfaces.LANEthernetInterfaceConfig.{i}.
      string    alias                                    = 1  ; //  {{datatype|expand}}        }        
    }
    repeated LANEthernetInterfaceConfig lanethernet_interface_config = 4; // InternetGatewayDevice.LANInterfaces.LANEthernetInterfaceConfig.{i}.
    message LANUSBInterfaceConfig { // InternetGatewayDevice.LANInterfaces.LANUSBInterfaceConfig.{i}.
      string    alias                                    = 1  ; //  {{datatype|expand}}        }        
    }
    repeated LANUSBInterfaceConfig lanusbinterface_config = 5; // InternetGatewayDevice.LANInterfaces.LANUSBInterfaceConfig.{i}.
    message WLANConfiguration { // InternetGatewayDevice.LANInterfaces.WLANConfiguration.{i}.
      string    alias                                    = 1  ; //  {{datatype|expand}}        }        
    }
    repeated WLANConfiguration wlanconfiguration = 6; // InternetGatewayDevice.LANInterfaces.WLANConfiguration.{i}.
  }
  LANInterfaces laninterfaces = 22; // InternetGatewayDevice.LANInterfaces.
  message WANDevice { // InternetGatewayDevice.WANDevice.{i}.
    string    alias                                    = 1  ; //  {{datatype|expand}}        }        
    uint32    wanconnection_number_of_entries          = 2  ; //  Number of instances of {{object|WANConne
    message WANCommonInterfaceConfig { // InternetGatewayDevice.WANDevice.{i}.WANCommonInterfaceConfig.
      bool      enabled_for_internet                     = 1  ; //  Used to enable or disable access to and 
      string    wanaccess_type                           = 2  ; //  Specifies the WAN access (modem) type. 
      uint32    layer1upstream_max_bit_rate              = 3  ; //  Specifies the maximum upstream theoretic
      uint32    layer1downstream_max_bit_rate            = 4  ; //  Specifies the maximum downstream theoret
      string    physical_link_status                     = 5  ; //  Indicates the state of the physical conn
      string    wanaccess_provider                       = 6  ; //  Name of the Service Provider providing l
      uint32    total_bytes_sent                         = 7  ; //  The cumulative counter for total number 
      uint32    total_bytes_received                     = 8  ; //  The cumulative counter for total number 
      uint32    total_packets_sent                       = 9  ; //  The cumulative counter for total number 
      uint32    total_packets_received                   = 10 ; //  The cumulative counter for total number 
      uint32    maximum_active_connections               = 11 ; //  Indicates the maximum number of active c
      uint32    number_of_active_connections             = 12 ; //  Number of WAN connection service instanc
      message Connection { // InternetGatewayDevice.WANDevice.{i}.WANCommonInterfaceConfig.Connection.{i}.
        string    alias                                    = 1  ; //  {{datatype|expand}}        }        
        string    active_connection_device_container       = 2  ; //  Specifies a WAN connection device object
        string    active_connection_service_id             = 3  ; //  Specifies a WAN connection object associ
      }
      repeated Connection connection = 13; // InternetGatewayDevice.WANDevice.{i}.WANCommonInterfaceConfig.Connection.{i}.
    }
    WANCommonInterfaceConfig wancommon_interface_config = 3; // InternetGatewayDevice.WANDevice.{i}.WANCommonInterfaceConfig.
    message WANDSLInterfaceConfig { // InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.
      bool      enable                                   = 1  ; //  Enables or disables the link.        .
      string    status                                   = 2  ; //  Status of the DSL physical link.  {{enum
      string    link_encapsulation_supported             = 3  ; //  Indicates which link encapsulation stand
      string    link_encapsulation_requested             = 4  ; //  Indicates the link encapsulation standar
      string    link_encapsulation_used                  = 5  ; //  Indicates the link encapsulation standar
      string    modulation_type                          = 6  ; //  Indicates the type of modulation used on
      string    standards_supported                      = 7  ; //  Indicates which DSL standards and recomm
      string    standard_used                            = 8  ; //  Indicates the standard that the B-NT is 
      string    line_encoding                            = 9  ; //  The line encoding method used in establi
      string    allowed_profiles                         = 10 ; //  Indicates which VDSL2 profiles are allow
      string    current_profile                          = 11 ; //  Indicates which VDSL2 profile is current
      string    power_management_state                   = 12 ; //  The power management state of the line.
      uint32    success_failure_cause                    = 13 ; //  The success failure cause of the initial
      uint32    last_state_transmitted_downstream        = 14 ; //  This parameter represents the last succe
      uint32    last_state_transmitted_upstream          = 15 ; //  This parameter represents the last succe
      uint32    upbokle                                  = 16 ; //  This parameter contains the estimated el
      bytes     mrefpsdds                                = 17 ; //  This parameter SHALL contain the set of 
      bytes     mrefpsdus                                = 18 ; //  This parameter SHALL contain the set of 
      uint32    limitmask                                = 19 ; //  Indicates the enabled VDSL2 Limit PSD ma
      uint32    us0mask                                  = 20 ; //  Indicates the allowed VDSL2 US0 PSD mask
      string    data_path                                = 21 ; //  Indicates whether the data path is fast 
      uint32    interleave_depth                         = 22 ; //  ADSL1 Interleaved depth.  This variable 
      uint32    lpath                                    = 23 ; //  Reports the index of the latency path su
      int32     intlvdepth                               = 24 ; //  Reports the interleaver depth D for the 
      int32     intlvblock                               = 25 ; //  Reports the interleaver block length in 
      uint32    actual_interleaving_delay                = 26 ; //  Reports the actual delay, in millisecond
      int32     actinp                                   = 27 ; //  Reports the actual impulse noise protect
      bool      inpreport                                = 28 ; //  Reports whether the value reported in AC
      int32     nfec                                     = 29 ; //  Reports the size, in octets, of the Reed
      int32     rfec                                     = 30 ; //  Reports the number of redundancy bytes p
      int32     lsymb                                    = 31 ; //  Reports the number of bits per symbol as
      int32     trellisds                                = 32 ; //  Reports whether trellis coding is enable
      int32     trellisus                                = 33 ; //  Reports whether trellis coding is enable
      uint32    actsnrmodeds                             = 34 ; //  Reports whether the OPTIONAL virtual noi
      uint32    actsnrmodeus                             = 35 ; //  Reports whether the OPTIONAL virtual noi
      bytes     virtual_noise_psdds                      = 36 ; //  Reports the virtual noise PSD for the do
      bytes     virtual_noise_psdus                      = 37 ; //  Reports the virtual noise PSD for the up
      uint32    actualce                                 = 38 ; //  Reports the actual cyclic extension, as 
      int32     line_number                              = 39 ; //  Signifies the line pair that the modem i
      uint32    upstream_curr_rate                       = 40 ; //  The current physical layer aggregate dat
      uint32    downstream_curr_rate                     = 41 ; //  The current physical layer aggregate dat
      uint32    upstream_max_rate                        = 42 ; //  The current attainable rate (expressed i
      uint32    downstream_max_rate                      = 43 ; //  The current attainable rate (expressed i
      int32     upstream_noise_margin                    = 44 ; //  The current signal-to-noise ratio margin
      int32     downstream_noise_margin                  = 45 ; //  The current signal-to-noise ratio margin
      string    snrmpbus                                 = 46 ; //  The current signal-to-noise ratio margin
      string    snrmpbds                                 = 47 ; //  The current signal-to-noise ratio margin
      uint32    inmiatods                                = 48 ; //  The Impulse Noise Monitoring (INM) Inter
      uint32    inmiatsds                                = 49 ; //  The Impulse Noise Monitoring (INM)  Inte
      uint32    inmccds                                  = 50 ; //  The Impulse Noise Monitoring (INM) Clust
      uint32    inminpeqmodeds                           = 51 ; //  The Impulse Noise Monitoring (INM) Equiv
      int32     upstream_attenuation                     = 52 ; //  The current upstream signal loss (expres
      int32     downstream_attenuation                   = 53 ; //  The current downstream signal loss (expr
      int32     upstream_power                           = 54 ; //  The current output power at the CPE's DS
      int32     downstream_power                         = 55 ; //  The current received power at the CPE's 
      string    aturvendor                               = 56 ; //  ATU-R vendor identifier as defined in G.
      string    aturcountry                              = 57 ; //  T.35 country code of the ATU-R vendor as
      uint32    aturansistd                              = 58 ; //  ATU-R T1.413 Revision Number as defined 
      uint32    aturansirev                              = 59 ; //  ATU-R Vendor Revision Number as defined 
      string    atucvendor                               = 60 ; //  ATU-C vendor identifier as defined in G.
      string    atuccountry                              = 61 ; //  T.35 country code of the ATU-C vendor as
      uint32    atucansistd                              = 62 ; //  ATU-C T1.413 Revision Number as defined 
      uint32    atucansirev                              = 63 ; //  ATU-C Vendor Revision Number as defined 
      uint32    total_start                              = 64 ; //  Number of seconds since the beginning of
      uint32    showtime_start                           = 65 ; //  Number of seconds since the most recent 
      uint32    last_showtime_start                      = 66 ; //  Number of seconds since the second most 
      uint32    current_day_start                        = 67 ; //  Number of seconds since the beginning of
      uint32    quarter_hour_start                       = 68 ; //  Number of seconds since the beginning of
      message Stats { // InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.
        message Total { // InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.Total.
          uint32    receive_blocks                           = 1  ; //  Total number of successfully received bl
          uint32    transmit_blocks                          = 2  ; //  Total number of successfully transmitted
          uint32    cell_delin                               = 3  ; //  Total number of cell-delineation errors 
          uint32    link_retrain                             = 4  ; //  Total number of link-retrain errors (Ful
          uint32    init_errors                              = 5  ; //  Total number of initialization errors (L
          bool      linit                                    = 6  ; //  LInit is a flag to signal that a failure
          uint32    init_timeouts                            = 7  ; //  Total number of initialization timeout e
          uint32    loss_of_framing                          = 8  ; //  Total number of loss-of-framing errors (
          bool      lof                                      = 9  ; //  This parameter corresponds to LOF as def
          uint32    errored_secs                             = 10 ; //  Total number of errored seconds (ES-L as
          uint32    atucerrored_secs                         = 11 ; //  Total number of errored seconds detected
          uint32    severely_errored_secs                    = 12 ; //  Total number of severely errored seconds
          uint32    atucseverely_errored_secs                = 13 ; //  Total number of severely errored seconds
          uint32    fecerrors                                = 14 ; //  Total number of FEC errors detected (FEC
          uint32    atucfecerrors                            = 15 ; //  Total number of FEC errors detected by t
          uint32    hecerrors                                = 16 ; //  Total number of HEC errors detected (HEC
          uint32    atuchecerrors                            = 17 ; //  Total number of HEC errors detected by t
          uint32    crcerrors                                = 18 ; //  Total number of CRC errors detected (CV-
          uint32    atuccrcerrors                            = 19 ; //  Total number of CRC errors detected by t
        }
        Total total = 1; // InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.Total.
        message Showtime { // InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.Showtime.
          uint32    receive_blocks                           = 1  ; //  Number of successfully received blocks s
          uint32    transmit_blocks                          = 2  ; //  Number of successfully transmitted block
          uint32    cell_delin                               = 3  ; //  Number of cell-delineation errors since 
          uint32    link_retrain                             = 4  ; //  Number of link-retrain errors since the 
          uint32    init_errors                              = 5  ; //  Number of initialization errors since th
          bool      linit                                    = 6  ; //  LInit is a flag to signal that a failure
          uint32    init_timeouts                            = 7  ; //  Number of initialization timeout errors 
          uint32    loss_of_framing                          = 8  ; //  Number of loss-of-framing errors since t
          bool      lof                                      = 9  ; //  This parameter corresponds to LOF as def
          uint32    errored_secs                             = 10 ; //  Number of errored seconds since the most
          uint32    atucerrored_secs                         = 11 ; //  Number of errored seconds since the most
          uint32    severely_errored_secs                    = 12 ; //  Number of severely errored seconds since
          uint32    atucseverely_errored_secs                = 13 ; //  Number of severely errored seconds since
          uint32    fecerrors                                = 14 ; //  Number of FEC errors detected since the 
          uint32    atucfecerrors                            = 15 ; //  Number of FEC errors detected by the ATU
          uint32    hecerrors                                = 16 ; //  Number of HEC errors detected since the 
          uint32    atuchecerrors                            = 17 ; //  Number of HEC errors detected by the ATU
          uint32    crcerrors                                = 18 ; //  Number of CRC errors detected since the 
          uint32    atuccrcerrors                            = 19 ; //  Number of CRC errors detected by the ATU
        }
        Showtime showtime = 2; // InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.Showtime.
        message LastShowtime { // InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.LastShowtime.
          uint32    receive_blocks                           = 1  ; //  Number of successfully received blocks s
          uint32    transmit_blocks                          = 2  ; //  Number of successfully transmitted block
          uint32    cell_delin                               = 3  ; //  Number of cell-delineation errors since 
          uint32    link_retrain                             = 4  ; //  Number of link-retrain errors since the 
          uint32    init_errors                              = 5  ; //  Number of initialization errors since th
          bool      linit                                    = 6  ; //  LInit is a flag to signal that a failure
          uint32    init_timeouts                            = 7  ; //  Number of initialization timeout errors 
          uint32    loss_of_framing                          = 8  ; //  Number of loss-of-framing errors since t
          bool      lof                                      = 9  ; //  This parameter corresponds to LOF as def
          uint32    errored_secs                             = 10 ; //  Number of errored seconds since the seco
          uint32    atucerrored_secs                         = 11 ; //  Number of errored seconds since the seco
          uint32    severely_errored_secs                    = 12 ; //  Number of severely errored seconds since
          uint32    atucseverely_errored_secs                = 13 ; //  Number of severely errored seconds since
          uint32    fecerrors                                = 14 ; //  Number of FEC errors detected since the 
          uint32    atucfecerrors                            = 15 ; //  Number of FEC errors detected by the ATU
          uint32    hecerrors                                = 16 ; //  Number of HEC errors detected since the 
          uint32    atuchecerrors                            = 17 ; //  Number of HEC errors detected by the ATU
          uint32    crcerrors                                = 18 ; //  Number of CRC errors detected since the 
          uint32    atuccrcerrors                            = 19 ; //  Number of CRC errors detected by the ATU
        }
        LastShowtime last_showtime = 3; // InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.LastShowtime.
        message CurrentDay { // InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.CurrentDay.
          uint32    receive_blocks                           = 1  ; //  Number of successfully received blocks d
          uint32    transmit_blocks                          = 2  ; //  Number of successfully transmitted block
          uint32    cell_delin                               = 3  ; //  Number of cell-delineation errors during
          uint32    link_retrain                             = 4  ; //  Number of link-retrain errors during the
          uint32    init_errors                              = 5  ; //  Number of initialization errors during t
          bool      linit                                    = 6  ; //  LInit is a flag to signal that a failure
          uint32    init_timeouts                            = 7  ; //  Number of initialization timeout errors 
          uint32    loss_of_framing                          = 8  ; //  Number of loss-of-framing errors during 
          bool      lof                                      = 9  ; //  This parameter corresponds to LOF as def
          uint32    errored_secs                             = 10 ; //  Number of errored seconds during the cur
          uint32    atucerrored_secs                         = 11 ; //  Number of errored seconds during the cur
          uint32    severely_errored_secs                    = 12 ; //  Number of severely errored seconds durin
          uint32    atucseverely_errored_secs                = 13 ; //  Number of severely errored seconds durin
          uint32    fecerrors                                = 14 ; //  Number of FEC errors detected during the
          uint32    atucfecerrors                            = 15 ; //  Number of FEC errors detected by the ATU
          uint32    hecerrors                                = 16 ; //  Number of HEC errors detected during the
          uint32    atuchecerrors                            = 17 ; //  Number of HEC errors detected by the ATU
          uint32    crcerrors                                = 18 ; //  Number of CRC errors detected during the
          uint32    atuccrcerrors                            = 19 ; //  Number of CRC errors detected by the ATU
        }
        CurrentDay current_day = 4; // InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.CurrentDay.
        message QuarterHour { // InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.QuarterHour.
          uint32    receive_blocks                           = 1  ; //  Number of successfully received blocks d
          uint32    transmit_blocks                          = 2  ; //  Number of successfully transmitted block
          uint32    cell_delin                               = 3  ; //  Number of cell-delineation errors during
          uint32    link_retrain                             = 4  ; //  Number of link-retrain errors during the
          uint32    init_errors                              = 5  ; //  Number of initialization errors during t
          bool      linit                                    = 6  ; //  LInit is a flag to signal that a failure
          uint32    init_timeouts                            = 7  ; //  Number of initialization timeout errors 
          uint32    loss_of_framing                          = 8  ; //  Number of loss-of-framing errors during 
          bool      lof                                      = 9  ; //  This parameter corresponds to LOF as def
          uint32    errored_secs                             = 10 ; //  Number of errored seconds during the cur
          uint32    atucerrored_secs                         = 11 ; //  Number of errored seconds during the cur
          uint32    severely_errored_secs                    = 12 ; //  Number of severely errored seconds durin
          uint32    atucseverely_errored_secs                = 13 ; //  Number of severely errored seconds durin
          uint32    fecerrors                                = 14 ; //  Number of FEC errors detected during the
          uint32    atucfecerrors                            = 15 ; //  Number of FEC errors detected by the ATU
          uint32    hecerrors                                = 16 ; //  Number of HEC errors detected during the
          uint32    atuchecerrors                            = 17 ; //  Number of HEC errors detected by the ATU
          uint32    crcerrors                                = 18 ; //  Number of CRC errors detected during the
          uint32    atuccrcerrors                            = 19 ; //  Number of CRC errors detected by the ATU
        }
        QuarterHour quarter_hour = 5; // InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.QuarterHour.
      }
      Stats stats = 69; // InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.Stats.
      message TestParams { // InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.TestParams.
        uint32    hloggds                                  = 1  ; //  Number of sub-carriers per sub-carrier g
        uint32    hloggus                                  = 2  ; //  Number of sub-carriers per sub-carrier g
        string    hlogpsds                                 = 3  ; //  Downstream logarithmic channel character
        string    hlogpsus                                 = 4  ; //  Upstream logarithmic channel characteris
        uint32    hlogmtds                                 = 5  ; //  Indicates the number of symbols over whi
        uint32    hlogmtus                                 = 6  ; //  Indicates the number of symbols over whi
        uint32    qlngds                                   = 7  ; //  Number of sub-carriers per sub-carrier g
        uint32    qlngus                                   = 8  ; //  Number of sub-carriers per sub-carrier g
        string    qlnpsds                                  = 9  ; //  Downstream quiet line noise per subcarri
        string    qlnpsus                                  = 10 ; //  Upstream quiet line noise per subcarrier
        uint32    qlnmtds                                  = 11 ; //  Indicates the number of symbols over whi
        uint32    qlnmtus                                  = 12 ; //  Indicates the number of symbols over whi
        uint32    snrgds                                   = 13 ; //  Number of sub-carriers per sub-carrier g
        uint32    snrgus                                   = 14 ; //  Number of sub-carriers per sub-carrier g
        string    snrpsds                                  = 15 ; //  Downstream SNR per subcarrier group.  Th
        string    snrpsus                                  = 16 ; //  Upstream SNR per subcarrier group.  The 
        uint32    snrmtds                                  = 17 ; //  Indicates the number of symbols over whi
        uint32    snrmtus                                  = 18 ; //  Indicates the number of symbols over whi
        string    latnds                                   = 19 ; //  Downstream line attenuation per usable b
        string    latnus                                   = 20 ; //  Upstream line attenuation per usable ban
        string    satnds                                   = 21 ; //  Downstream signal attenuation per usable
        string    satnus                                   = 22 ; //  Upstream signal attenuation per usable b
      }
      TestParams test_params = 70; // InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.TestParams.
    }
    WANDSLInterfaceConfig wandslinterface_config = 4; // InternetGatewayDevice.WANDevice.{i}.WANDSLInterfaceConfig.
    message WANEthernetInterfaceConfig { // InternetGatewayDevice.WANDevice.{i}.WANEthernetInterfaceConfig.
      bool      enable                                   = 1  ; //  Enables or disables this interface.    
      string    status                                   = 2  ; //  Indicates the status of this interface. 
      string    macaddress                               = 3  ; //  The physical address of the interface. 
      string    max_bit_rate                             = 4  ; //  The maximum upstream and downstream bit 
      string    duplex_mode                              = 5  ; //  The duplex mode available to this connec
      int32     shaping_rate                             = 6  ; //  Rate to shape this connection's egress t
      uint32    shaping_burst_size                       = 7  ; //  Burst size in bytes.  For both leaky buc
      message Stats { // InternetGatewayDevice.WANDevice.{i}.WANEthernetInterfaceConfig.Stats.
        uint32    bytes_sent                               = 1  ; //  Total number of bytes sent over the inte
        uint32    bytes_received                           = 2  ; //  Total number of bytes received over the 
        uint32    packets_sent                             = 3  ; //  Total number of packets sent over the in
        uint32    packets_received                         = 4  ; //  Total number of packets received over th
      }
      Stats stats = 8; // InternetGatewayDevice.WANDevice.{i}.WANEthernetInterfaceConfig.Stats.
    }
    WANEthernetInterfaceConfig wanethernet_interface_config = 5; // InternetGatewayDevice.WANDevice.{i}.WANEthernetInterfaceConfig.
    message WANDSLConnectionManagement { // InternetGatewayDevice.WANDevice.{i}.WANDSLConnectionManagement.
      uint32    connection_service_number_of_entries     = 1  ; //  Number of table entries in the Connectio
      message ConnectionService { // InternetGatewayDevice.WANDevice.{i}.WANDSLConnectionManagement.ConnectionService.{i}.
        string    wanconnection_device                     = 1  ; //  Specifies a WAN connection device object
        string    wanconnection_service                    = 2  ; //  Specifies a WAN connection object associ
        string    destination_address                      = 3  ; //  Destination address of the WANConnection
        string    link_type                                = 4  ; //  Link Type of the ''WANConnectionDevice''
        string    connection_type                          = 5  ; //  Connection Type of the ''WANPPPConnectio
        string    name                                     = 6  ; //  User-readable name of the connection.  
      }
      repeated ConnectionService connection_service = 2; // InternetGatewayDevice.WANDevice.{i}.WANDSLConnectionManagement.ConnectionService.{i}.
    }
    WANDSLConnectionManagement wandslconnection_management = 6; // InternetGatewayDevice.WANDevice.{i}.WANDSLConnectionManagement.
    message WANDSLDiagnostics { // InternetGatewayDevice.WANDevice.{i}.WANDSLDiagnostics.
      string    loop_diagnostics_state                   = 1  ; //  Indicates availability of diagnostic dat
      int32     actpsdds                                 = 2  ; //  Downstream actual power spectral density
      int32     actpsdus                                 = 3  ; //  Upstream actual power spectral density. 
      int32     actatpds                                 = 4  ; //  Downstream actual aggregate transmitter 
      int32     actatpus                                 = 5  ; //  Upstream actual aggregate transmitter po
      int32     hlinscds                                 = 6  ; //  Downstream linear representation scale. 
      int32     hlinscus                                 = 7  ; //  Scaling used to represent the upstream l
      uint32    hlingds                                  = 8  ; //  Number of sub-carriers per sub-carrier g
      uint32    hlingus                                  = 9  ; //  Number of sub-carriers per sub-carrier g
      uint32    hloggds                                  = 10 ; //  Number of sub-carriers per sub-carrier g
      uint32    hloggus                                  = 11 ; //  Number of sub-carriers per sub-carrier g
      string    hlogpsds                                 = 12 ; //  Downstream logarithmic channel character
      string    hlogpsus                                 = 13 ; //  Upstream logarithmic channel characteris
      uint32    hlogmtds                                 = 14 ; //  Indicates the number of symbols over whi
      uint32    hlogmtus                                 = 15 ; //  Indicates the number of symbols over whi
      string    latnpbds                                 = 16 ; //  Downstream line attenuation per usable b
      string    latnpbus                                 = 17 ; //  Upstream line attenuation per usable ban
      string    satnds                                   = 18 ; //  Downstream signal attenuation per usable
      string    satnus                                   = 19 ; //  Upstream signal attenuation per usable b
      string    hlinpsds                                 = 20 ; //  Downstream linear channel characteristic
      string    hlinpsus                                 = 21 ; //  Upstream linear channel characteristics 
      uint32    qlngds                                   = 22 ; //  Number of sub-carriers per sub-carrier g
      uint32    qlngus                                   = 23 ; //  Number of sub-carriers per sub-carrier g
      string    qlnpsds                                  = 24 ; //  Downstream quiet line noise per subcarri
      string    qlnpsus                                  = 25 ; //  Upstream quiet line noise per subcarrier
      uint32    qlnmtds                                  = 26 ; //  Indicates the number of symbols over whi
      uint32    qlnmtus                                  = 27 ; //  Indicates the number of symbols over whi
      uint32    snrgds                                   = 28 ; //  Number of sub-carriers per sub-carrier g
      uint32    snrgus                                   = 29 ; //  Number of sub-carriers per sub-carrier g
      string    snrpsds                                  = 30 ; //  Downstream SNR per subcarrier group.  Ma
      string    snrpsus                                  = 31 ; //  Upstream SNR per subcarrier group.  The 
      uint32    snrmtds                                  = 32 ; //  Indicates the number of symbols over whi
      uint32    snrmtus                                  = 33 ; //  Indicates the number of symbols over whi
      string    bitspsds                                 = 34 ; //  Downstream bit allocation per subcarrier
      string    bitspsus                                 = 35 ; //  Upstream bit allocation per subcarrier g
      string    gainspsds                                = 36 ; //  Downstream gain allocation per subcarrie
    }
    WANDSLDiagnostics wandsldiagnostics = 7; // InternetGatewayDevice.WANDevice.{i}.WANDSLDiagnostics.
    message WANConnectionDevice { // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.
      string    alias                                    = 1  ; //  {{datatype|expand}}        }        
      uint32    wanipconnection_number_of_entries        = 2  ; //  Number of instances of {{object|WANIPCon
      uint32    wanpppconnection_number_of_entries       = 3  ; //  Number of instances of {{object|WANPPPCo
      message WANDSLLinkConfig { // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANDSLLinkConfig.
        bool      enable                                   = 1  ; //  Enables or disables the link.  On creati
        string    link_status                              = 2  ; //  Status of the link.        .        
        string    link_type                                = 3  ; //  Indicates the type of DSL connection and
        bool      auto_config                              = 4  ; //  Indicates if the CPE is currently using 
        string    modulation_type                          = 5  ; //  Indicates the type of DSL modulation use
        string    destination_address                      = 6  ; //  Destination address of this link.  One o
        string    atmencapsulation                         = 7  ; //  Identifies the connection encapsulation 
        bool      fcspreserved                             = 8  ; //  This flag tells if a checksum SHOULD be 
        string    vcsearch_list                            = 9  ; //  Ordered list of VPI/VCI pairs to search 
        string    atmaal                                   = 10 ; //  Describes the ATM Adaptation Layer (AAL)
        uint32    atmtransmitted_blocks                    = 11 ; //  The current count of successfully transm
        uint32    atmreceived_blocks                       = 12 ; //  The current count of successfully receiv
        string    atmqo_s                                  = 13 ; //  Describes the ATM Quality Of Service (Qo
        uint32    atmpeak_cell_rate                        = 14 ; //  Specifies the upstream peak cell rate in
        uint32    atmmaximum_burst_size                    = 15 ; //  Specifies the upstream maximum burst siz
        uint32    atmsustainable_cell_rate                 = 16 ; //  Specifies the upstream sustainable cell 
        uint32    aal5crcerrors                            = 17 ; //  Count of the AAL5 layer cyclic redundanc
        uint32    atmcrcerrors                             = 18 ; //  Count of the ATM layer cyclic redundancy
        uint32    atmhecerrors                             = 19 ; //  Count of the number of Header Error Chec
      }
      WANDSLLinkConfig wandsllink_config = 4; // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANDSLLinkConfig.
      message WANATMF5LoopbackDiagnostics { // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANATMF5LoopbackDiagnostics.
        string    diagnostics_state                        = 1  ; //  Indicates availability of diagnostic dat
        uint32    number_of_repetitions                    = 2  ; //  Number of repetitions of the ping test t
        uint32    timeout                                  = 3  ; //  Timeout in milliseconds for the ping tes
        uint32    success_count                            = 4  ; //  Result parameter indicating the number o
        uint32    failure_count                            = 5  ; //  Result parameter indicating the number o
        uint32    average_response_time                    = 6  ; //  Result parameter indicating the average 
        uint32    minimum_response_time                    = 7  ; //  Result parameter indicating the minimum 
        uint32    maximum_response_time                    = 8  ; //  Result parameter indicating the maximum 
      }
      WANATMF5LoopbackDiagnostics wanatmf5loopback_diagnostics = 5; // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANATMF5LoopbackDiagnostics.
      message WANPTMLinkConfig { // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANPTMLinkConfig.
        bool      enable                                   = 1  ; //  Enables or disables the link.  On creati
        string    link_status                              = 2  ; //  Status of the link.        .        
        string    macaddress                               = 3  ; //  The physical address of the interface. 
        message Stats { // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANPTMLinkConfig.Stats.
          uint32    bytes_sent                               = 1  ; //  The total number of bytes transmitted ou
          uint32    bytes_received                           = 2  ; //  The total number of bytes received on th
          uint32    frames_sent                              = 3  ; //  The total number of packets (frames) tra
          uint32    frames_received                          = 4  ; //  The total number of packets (frames) whi
          bool      oosnear_end                              = 5  ; //  Indication that the CPE has detected the
          bool      oosfar_end                               = 6  ; //  Indication that the remote device has de
          uint32    errors_sent                              = 7  ; //  The total number of outbound packets tha
          uint32    errors_received                          = 8  ; //  The total number of inbound packets that
          uint32    unicast_packets_sent                     = 9  ; //  The total number of packets requested fo
          uint32    unicast_packets_received                 = 10 ; //  The total number of received packets whi
          uint32    discard_packets_sent                     = 11 ; //  The total number of outbound packets whi
          uint32    discard_packets_received                 = 12 ; //  The total number of inbound packets whic
          uint32    multicast_packets_sent                   = 13 ; //  The total number of packets requested fo
          uint32    multicast_packets_received               = 14 ; //  The total number of received packets whi
          uint32    broadcast_packets_sent                   = 15 ; //  The total number of packets requested fo
          uint32    broadcast_packets_received               = 16 ; //  The total number of received packets whi
          uint32    unknown_proto_packets_received           = 17 ; //  The total number of packets received via
        }
        Stats stats = 4; // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANPTMLinkConfig.Stats.
      }
      WANPTMLinkConfig wanptmlink_config = 6; // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANPTMLinkConfig.
      message WANEthernetLinkConfig { // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANEthernetLinkConfig.
        string    ethernet_link_status                     = 1  ; //  Status of the Ethernet link.        .
      }
      WANEthernetLinkConfig wanethernet_link_config = 7; // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANEthernetLinkConfig.
      message WANPOTSLinkConfig { // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANPOTSLinkConfig.
        bool      enable                                   = 1  ; //  Enables or disables the link.  On creati
        string    link_status                              = 2  ; //  Status of the link.        .        
        string    ispphone_number                          = 3  ; //  Specifies a list of strings separated by
        string    ispinfo                                  = 4  ; //  Information identifying the Internet Ser
        string    link_type                                = 5  ; //  This variable indicates the type of POTS
        uint32    number_of_retries                        = 6  ; //  The number of times the CPE SHOULD attem
        uint32    delay_between_retries                    = 7  ; //  The number of seconds the CPE SHOULD wai
        string    fclass                                   = 8  ; //  Specifies capabilities of the POTS modem
        string    data_modulation_supported                = 9  ; //  The modulation standard currently being 
        string    data_protocol                            = 10 ; //  The protocol standard currently being us
        string    data_compression                         = 11 ; //  The compression technology implemented o
        bool      plus_vtrcommand_supported                = 12 ; //  Capability for full duplex operation wit
      }
      WANPOTSLinkConfig wanpotslink_config = 8; // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANPOTSLinkConfig.
      message WANIPConnection { // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection.{i}.
        bool      enable                                   = 1  ; //  Enables or disables the connection insta
        string    alias                                    = 2  ; //  {{datatype|expand}}        }        
        bool      reset                                    = 3  ; //  When set to {{true}}, the device MUST te
        string    connection_status                        = 4  ; //  Current status of the connection.  {{enu
        string    possible_connection_types                = 5  ; //  Types of connections possible for this c
        string    connection_type                          = 6  ; //  Specifies the connection type of the con
        string    name                                     = 7  ; //  User-readable name of this connection. 
        uint32    uptime                                   = 8  ; //  The time in seconds that this connection
        string    last_connection_error                    = 9  ; //  The cause of failure for the last connec
        uint32    auto_disconnect_time                     = 10 ; //  The time in seconds since the establishm
        uint32    idle_disconnect_time                     = 11 ; //  The time in seconds that if the connecti
        uint32    warn_disconnect_delay                    = 12 ; //  Time in seconds the Status remains in th
        bool      rsipavailable                            = 13 ; //  Indicates if Realm-specific IP (RSIP) is
        bool      natenabled                               = 14 ; //  Indicates if Network Address Translation
        string    addressing_type                          = 15 ; //  The method used to assign an address to 
        string    external_ipaddress                       = 16 ; //  This is the external IP address used by 
        string    subnet_mask                              = 17 ; //  Subnet mask of the WAN interface.  This 
        string    default_gateway                          = 18 ; //  The IP address of the default gateway fo
        bool      dnsenabled                               = 19 ; //  Whether or not the device SHOULD attempt
        bool      dnsoverride_allowed                      = 20 ; //  Whether or not a manually set, non-empty
        string    dnsservers                               = 21 ; //  DNS server IP addresses for this connect
        uint32    max_mtusize                              = 22 ; //  The maximum allowed size of an Ethernet 
        string    macaddress                               = 23 ; //  The physical address of the ''WANIPConne
        bool      macaddress_override                      = 24 ; //  Whether the value of {{param|MACAddress}
        string    connection_trigger                       = 25 ; //  Trigger used to establish the IP connect
        string    route_protocol_rx                        = 26 ; //  Defines the Rx protocol to be used.    
        int32     shaping_rate                             = 27 ; //  Rate to shape this connection's egress t
        uint32    shaping_burst_size                       = 28 ; //  Burst size in bytes.  For both leaky buc
        uint32    port_mapping_number_of_entries           = 29 ; //  Total number of port mapping entries.  
        message DHCPClient { // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection.{i}.DHCPClient.
          uint32    sent_dhcpoption_number_of_entries        = 1  ; //  The number of entries in the {{object|Se
          uint32    req_dhcpoption_number_of_entries         = 2  ; //  The number of entries in the {{object|Re
          message SentDHCPOption { // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection.{i}.DHCPClient.SentDHCPOption.{i}.
            bool      enable                                   = 1  ; //  Enables or disables this SentDHCPOption 
            string    alias                                    = 2  ; //  {{datatype|expand}}        }        
            uint32    tag                                      = 3  ; //  Option tag as defined in RFC 2132 {{bibr
            bytes     value                                    = 4  ; //  Base64 encoded option value.        .
          }
          repeated SentDHCPOption sent_dhcpoption = 3; // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection.{i}.DHCPClient.SentDHCPOption.{i}.
          message ReqDHCPOption { // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection.{i}.DHCPClient.ReqDHCPOption.{i}.
            bool      enable                                   = 1  ; //  Enables or disables this ReqDHCPOption t
            string    alias                                    = 2  ; //  {{datatype|expand}}        }        
            uint32    order                                    = 3  ; //  Position of the option in the DHCP clien
            uint32    tag                                      = 4  ; //  Option tag as defined in RFC 2132 {{bibr
            bytes     value                                    = 5  ; //  Base64 encoded most recently received DH
          }
          repeated ReqDHCPOption req_dhcpoption = 4; // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection.{i}.DHCPClient.ReqDHCPOption.{i}.
        }
        DHCPClient dhcpclient = 30; // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection.{i}.DHCPClient.
        message PortMapping { // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection.{i}.PortMapping.{i}.
          bool      port_mapping_enabled                     = 1  ; //  Enables or disables the port mapping ins
          string    alias                                    = 2  ; //  {{datatype|expand}}          Note: Ther
          uint32    port_mapping_lease_duration              = 3  ; //  Determines the time to live, in seconds,
          string    remote_host                              = 4  ; //  This parameter is the IP address of the 
          uint32    external_port                            = 5  ; //  The external port (or the first port of 
          uint32    external_port_end_range                  = 6  ; //  Indicates the last port of the external 
          uint32    internal_port                            = 7  ; //  The port on {{param|InternalClient}} tha
          string    port_mapping_protocol                    = 8  ; //  The protocol of the port mapping.  {{enu
          string    internal_client                          = 9  ; //  The IP address or DNS host name of an in
          string    port_mapping_description                 = 10 ; //  User-readable description of this port m
        }
        repeated PortMapping port_mapping = 31; // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection.{i}.PortMapping.{i}.
        message Stats { // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection.{i}.Stats.
          uint32    ethernet_bytes_sent                      = 1  ; //  The total number of bytes transmitted, i
          uint32    ethernet_bytes_received                  = 2  ; //  The total number of bytes received, incl
          uint32    ethernet_packets_sent                    = 3  ; //  The total number of packets transmitted 
          uint32    ethernet_packets_received                = 4  ; //  The total number of packets which were r
          uint32    ethernet_errors_sent                     = 5  ; //  The total number of outbound packets tha
          uint32    ethernet_errors_received                 = 6  ; //  The total number of inbound packets that
          uint32    ethernet_unicast_packets_sent            = 7  ; //  The total number of packets requested fo
          uint32    ethernet_unicast_packets_received        = 8  ; //  The total number of received packets whi
          uint32    ethernet_discard_packets_sent            = 9  ; //  The total number of outbound packets whi
          uint32    ethernet_discard_packets_received        = 10 ; //  The total number of inbound packets whic
          uint32    ethernet_multicast_packets_sent          = 11 ; //  The total number of packets requested fo
          uint32    ethernet_multicast_packets_received      = 12 ; //  The total number of received packets whi
          uint32    ethernet_broadcast_packets_sent          = 13 ; //  The total number of packets requested fo
          uint32    ethernet_broadcast_packets_received      = 14 ; //  The total number of received packets whi
          uint32    ethernet_unknown_proto_packets_received  = 15 ; //  The total number of packets which were d
        }
        Stats stats = 32; // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection.{i}.Stats.
      }
      repeated WANIPConnection wanipconnection = 9; // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection.{i}.
      message WANPPPConnection { // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANPPPConnection.{i}.
        bool      enable                                   = 1  ; //  Enables or disables the connection insta
        string    alias                                    = 2  ; //  {{datatype|expand}}        }        
        bool      reset                                    = 3  ; //  When set to {{true}}, the device MUST te
        string    connection_status                        = 4  ; //  Current status of the connection.      
        string    possible_connection_types                = 5  ; //  Types of connections possible for this c
        string    connection_type                          = 6  ; //  Specifies the connection type of the con
        uint32    pppo_esession_id                         = 7  ; //  Represents the PPPoE Session ID.       
        string    default_gateway                          = 8  ; //  Represents the IP Address of the remote 
        string    name                                     = 9  ; //  User-readable name of this connection. 
        uint32    uptime                                   = 10 ; //  The time in seconds that this connection
        string    last_connection_error                    = 11 ; //  The cause of failure for the last connec
        uint32    auto_disconnect_time                     = 12 ; //  The time in seconds since the establishm
        uint32    idle_disconnect_time                     = 13 ; //  The time in seconds that if the connecti
        uint32    warn_disconnect_delay                    = 14 ; //  Time in seconds the Status remains in th
        bool      rsipavailable                            = 15 ; //  Indicates if Realm-specific IP (RSIP) is
        bool      natenabled                               = 16 ; //  Indicates if Network Address Translation
        string    username                                 = 17 ; //  Username to be used for authentication.
        string    password                                 = 18 ; //  Password to be usef for authentication.
        string    pppencryption_protocol                   = 19 ; //  Describes the PPP encryption protocol us
        string    pppcompression_protocol                  = 20 ; //  Describes the PPP compression protocol u
        string    pppauthentication_protocol               = 21 ; //  Describes the PPP authentication protoco
        string    external_ipaddress                       = 22 ; //  This is the external IP address used by 
        string    remote_ipaddress                         = 23 ; //  The remote IP address for this connectio
        uint32    max_mrusize                              = 24 ; //  The maximum allowed size of frames sent 
        uint32    current_mrusize                          = 25 ; //  The current MRU in use over this connect
        bool      dnsenabled                               = 26 ; //  Whether or not the device SHOULD attempt
        bool      dnsoverride_allowed                      = 27 ; //  Whether or not a manually set, non-empty
        string    dnsservers                               = 28 ; //  DNS server IP addresses for this connect
        string    macaddress                               = 29 ; //  The physical address of the ''WANPPPConn
        bool      macaddress_override                      = 30 ; //  Whether the value of {{param|MACAddress}
        string    transport_type                           = 31 ; //  PPP transport type of the connection.  
        string    pppo_eacname                             = 32 ; //  PPPoE Access Concentrator.        .  
        string    pppo_eservice_name                       = 33 ; //  PPPoE Service Name.        .        
        string    connection_trigger                       = 34 ; //  Trigger used to establish the PPP connec
        string    route_protocol_rx                        = 35 ; //  Defines the Rx protocol to be used.    
        uint32    ppplcpecho                               = 36 ; //  PPP LCP Echo period in seconds.        
        uint32    ppplcpecho_retry                         = 37 ; //  Number of PPP LCP Echo retries within an
        int32     shaping_rate                             = 38 ; //  Rate to shape this connection's egress t
        uint32    shaping_burst_size                       = 39 ; //  Burst size in bytes.  For both leaky buc
        uint32    port_mapping_number_of_entries           = 40 ; //  Total number of port mapping entries.  
        message PortMapping { // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANPPPConnection.{i}.PortMapping.{i}.
          bool      port_mapping_enabled                     = 1  ; //  Enables or disables the port mapping ins
          string    alias                                    = 2  ; //  {{datatype|expand}}          Note: Ther
          uint32    port_mapping_lease_duration              = 3  ; //  Determines the time to live, in seconds,
          string    remote_host                              = 4  ; //  This parameter is the IP address of the 
          uint32    external_port                            = 5  ; //  The external port (or the first port of 
          uint32    external_port_end_range                  = 6  ; //  Indicates the last port of the external 
          uint32    internal_port                            = 7  ; //  The port on {{param|InternalClient}} tha
          string    port_mapping_protocol                    = 8  ; //  The protocol of the port mapping.  {{enu
          string    internal_client                          = 9  ; //  The IP address or DNS host name of an in
          string    port_mapping_description                 = 10 ; //  User-readable description of this port m
        }
        repeated PortMapping port_mapping = 41; // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANPPPConnection.{i}.PortMapping.{i}.
        message Stats { // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANPPPConnection.{i}.Stats.
          uint32    ethernet_bytes_sent                      = 1  ; //  The total number of bytes transmitted, i
          uint32    ethernet_bytes_received                  = 2  ; //  The total number of bytes received, incl
          uint32    ethernet_packets_sent                    = 3  ; //  The total number of packets transmitted 
          uint32    ethernet_packets_received                = 4  ; //  The total number of packets which were r
          uint32    ethernet_errors_sent                     = 5  ; //  The total number of outbound packets tha
          uint32    ethernet_errors_received                 = 6  ; //  The total number of inbound packets that
          uint32    ethernet_unicast_packets_sent            = 7  ; //  The total number of packets requested fo
          uint32    ethernet_unicast_packets_received        = 8  ; //  The total number of received packets whi
          uint32    ethernet_discard_packets_sent            = 9  ; //  The total number of outbound packets whi
          uint32    ethernet_discard_packets_received        = 10 ; //  The total number of inbound packets whic
          uint32    ethernet_multicast_packets_sent          = 11 ; //  The total number of packets requested fo
          uint32    ethernet_multicast_packets_received      = 12 ; //  The total number of received packets whi
          uint32    ethernet_broadcast_packets_sent          = 13 ; //  The total number of packets requested fo
          uint32    ethernet_broadcast_packets_received      = 14 ; //  The total number of received packets whi
          uint32    ethernet_unknown_proto_packets_received  = 15 ; //  The total number of packets which were d
        }
        Stats stats = 42; // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANPPPConnection.{i}.Stats.
      }
      repeated WANPPPConnection wanpppconnection = 10; // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANPPPConnection.{i}.
    }
    repeated WANConnectionDevice wanconnection_device = 8; // InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.
  }
  repeated WANDevice wandevice = 23; // InternetGatewayDevice.WANDevice.{i}.
  message CaptivePortal { // InternetGatewayDevice.CaptivePortal.
    bool      enable                                   = 1  ; //  Enables or disables the captive portal.
    string    status                                   = 2  ; //  Indicates the status of the captive port
    string    allowed_list                             = 3  ; //  IP addresses to which HTTP (port 80) tra
    string    captive_portal_url                       = 4  ; //  Captive portal URL to which WAN-destined
  }
  CaptivePortal captive_portal = 24; // InternetGatewayDevice.CaptivePortal.
  message TraceRouteDiagnostics { // InternetGatewayDevice.TraceRouteDiagnostics.
    string    diagnostics_state                        = 1  ; //  Indicates availability of diagnostic dat
    string    interface                                = 2  ; //  {{reference|the WAN or LAN IP-layer inte
    string    host                                     = 3  ; //  Host name or address of the host to find
    uint32    number_of_tries                          = 4  ; //  Number of tries per hop. Set prior to ru
    uint32    timeout                                  = 5  ; //  Timeout in milliseconds for the trace ro
    uint32    data_block_size                          = 6  ; //  Size of the data block in bytes to be se
    uint32    dscp                                     = 7  ; //  DiffServ codepoint to be used for the te
    uint32    max_hop_count                            = 8  ; //  The maximum number of hop used in outgoi
    uint32    response_time                            = 9  ; //  Result parameter indicating the response
    uint32    route_hops_number_of_entries             = 10 ; //  Number of entries in the {{object|RouteH
    message RouteHops { // InternetGatewayDevice.TraceRouteDiagnostics.RouteHops.{i}.
      string    hop_host                                 = 1  ; //  Result parameter indicating the Host Nam
      string    hop_host_address                         = 2  ; //  If this parameter is not {{empty}} it wi
      uint32    hop_error_code                           = 3  ; //  Contains the error code returned for thi
      string    hop_rttimes                              = 4  ; //  Contains one or more round trip times in
    }
    repeated RouteHops route_hops = 11; // InternetGatewayDevice.TraceRouteDiagnostics.RouteHops.{i}.
  }
  TraceRouteDiagnostics trace_route_diagnostics = 25; // InternetGatewayDevice.TraceRouteDiagnostics.
  message User { // InternetGatewayDevice.User.{i}.
    string    alias                                    = 1  ; //  {{datatype|expand}}        }        
    bool      enable                                   = 2  ; //  Enables/disables this user object instan
    bool      remote_access_capable                    = 3  ; //  Allows this user to remotely access the 
    string    username                                 = 4  ; //  Name of the current user. MUST NOT be {{
    string    password                                 = 5  ; //  The user's password.        .        
    string    language                                 = 6  ; //  String describing the default language f
  }
  repeated User user = 26; // InternetGatewayDevice.User.{i}.
  message UPnP { // InternetGatewayDevice.UPnP.
    message Device { // InternetGatewayDevice.UPnP.Device.
      bool      enable                                   = 1  ; //  Enables/Disables UPnP support.        
      bool      upn_pmedia_server                        = 2  ; //  Enables/Disables UPnP Media Server.    
      bool      upn_pmedia_renderer                      = 3  ; //  Enables/Disables UPnP Media Renderer.  
      bool      upn_pwlanaccess_point                    = 4  ; //  Enables/Disables UPnP Wireless Access Po
      bool      upn_pqo_sdevice                          = 5  ; //  Enables/Disables UPnP QoS Device.      
      bool      upn_pqo_spolicy_holder                   = 6  ; //  Enables/Disables UPnP QoS Policy Holder.
      bool      upn_pigd                                 = 7  ; //  Enables/Disables UPnP IGD.        .  
      bool      upn_pdmbasic_mgmt                        = 8  ; //  Enables/Disables UPnP-DM Basic Managemen
      bool      upn_pdmconfiguration_mgmt                = 9  ; //  Enables/Disables UPnP-DM Configuration M
      bool      upn_pdmsoftware_mgmt                     = 10 ; //  Enables/Disables UPnP-DM Software Manage
      message Capabilities { // InternetGatewayDevice.UPnP.Device.Capabilities.
        uint32    upn_parchitecture                        = 1  ; //  Numeric value indicating the major versi
        uint32    upn_parchitecture_minor_ver              = 2  ; //  Numeric value indicating the minor versi
        uint32    upn_pmedia_server                        = 3  ; //  Numeric value indicating the supported r
        uint32    upn_pmedia_renderer                      = 4  ; //  Numeric value indicating the supported r
        uint32    upn_pwlanaccess_point                    = 5  ; //  Numeric value indicating the supported r
        uint32    upn_pbasic_device                        = 6  ; //  Numeric value indicating the supported r
        uint32    upn_pqo_sdevice                          = 7  ; //  Numeric value indicating the supported r
        uint32    upn_pqo_spolicy_holder                   = 8  ; //  Numeric value indicating the supported r
        uint32    upn_pigd                                 = 9  ; //  Numeric value indicating the supported r
        uint32    upn_pdmbasic_mgmt                        = 10 ; //  Numeric value indicating the supported r
        uint32    upn_pdmconfiguration_mgmt                = 11 ; //  Numeric value indicating the supported r
        uint32    upn_pdmsoftware_mgmt                     = 12 ; //  Numeric value indicating the supported r
      }
      Capabilities capabilities = 11; // InternetGatewayDevice.UPnP.Device.Capabilities.
    }
    Device device = 1; // InternetGatewayDevice.UPnP.Device.
    message Discovery { // InternetGatewayDevice.UPnP.Discovery.
      uint32    root_device_number_of_entries            = 1  ; //  {{numentries}}        }        pabi
      uint32    device_number_of_entries                 = 2  ; //  {{numentries}}        }        .bi
      uint32    service_number_of_entries                = 3  ; //  {{numentries}}        }        .bi
      message RootDevice { // InternetGatewayDevice.UPnP.Discovery.RootDevice.{i}.
        string    status                                   = 1  ; //  The status of the UPnP root device. {{en
        string    uuid                                     = 2  ; //  This UPnP root device's UUID (Universall
        string    usn                                      = 3  ; //  The value of the USN (Unique Service Nam
        uint32    lease_time                               = 4  ; //  The UPnP root device lease time in {{uni
        string    location                                 = 5  ; //  The value of the LOCATION header for thi
        string    server                                   = 6  ; //  The value of the SERVER header for this 
        string    host                                     = 7  ; //  {{list}} Indicates the full path names o
        string    last_update                              = 8  ; //  The date and time at which the last adve
      }
      repeated RootDevice root_device = 4; // InternetGatewayDevice.UPnP.Discovery.RootDevice.{i}.
      message Device { // InternetGatewayDevice.UPnP.Discovery.Device.{i}.
        string    status                                   = 1  ; //  The status of the UPnP embedded device. 
        string    uuid                                     = 2  ; //  This UPnP embedded device's UUID (Univer
        string    usn                                      = 3  ; //  The value of the USN (Unique Service Nam
        uint32    lease_time                               = 4  ; //  The UPnP embedded device lease time in {
        string    location                                 = 5  ; //  The value of the LOCATION header for thi
        string    server                                   = 6  ; //  The value of the SERVER header for this 
        string    host                                     = 7  ; //  {{list}} Indicates the full path names o
        string    last_update                              = 8  ; //  The date and time at which the last adve
      }
      repeated Device device = 5; // InternetGatewayDevice.UPnP.Discovery.Device.{i}.
      message Service { // InternetGatewayDevice.UPnP.Discovery.Service.{i}.
        string    status                                   = 1  ; //  The status of the UPnP embedded service.
        string    usn                                      = 2  ; //  The value of the USN (Unique Service Nam
        uint32    lease_time                               = 3  ; //  The UPnP embedded service lease time in 
        string    location                                 = 4  ; //  The value of the LOCATION header for thi
        string    server                                   = 5  ; //  The value of the SERVER header for this 
        string    host                                     = 6  ; //  {{list}} Indicates the full path names o
        string    last_update                              = 7  ; //  The date and time at which the last adve
        string    parent_device                            = 8  ; //  {{reference|the {{object|#.RootDevice}} 
      }
      repeated Service service = 6; // InternetGatewayDevice.UPnP.Discovery.Service.{i}.
    }
    Discovery discovery = 2; // InternetGatewayDevice.UPnP.Discovery.
    message Description { // InternetGatewayDevice.UPnP.Description.
      uint32    device_description_number_of_entries     = 1  ; //  {{numentries}}        }        .bi
      uint32    device_instance_number_of_entries        = 2  ; //  {{numentries}}        }        .bi
      uint32    service_instance_number_of_entries       = 3  ; //  {{numentries}}        }        on.
      message DeviceDescription { // InternetGatewayDevice.UPnP.Description.DeviceDescription.{i}.
        string    urlbase                                  = 1  ; //  The value extracted from the URLBase ele
        string    spec_version                             = 2  ; //  The UPnP Device Architecture version ext
        string    host                                     = 3  ; //  {{list}} {{reference|the Host table entr
      }
      repeated DeviceDescription device_description = 4; // InternetGatewayDevice.UPnP.Description.DeviceDescription.{i}.
      message DeviceInstance { // InternetGatewayDevice.UPnP.Description.DeviceInstance.{i}.
        string    udn                                      = 1  ; //  Unique Device Name of this device repres
        string    parent_device                            = 2  ; //  {{reference|a {{object}} table entry (if
        string    discovery_device                         = 3  ; //  {{reference|a {{object|##.Discovery.Root
        string    device_type                              = 4  ; //  The value of the UPnP deviceType element
        string    friendly_name                            = 5  ; //  The value of the UPnP friendlyName eleme
        string    device_category                          = 6  ; //  Each list item is the value of an elemen
        string    manufacturer                             = 7  ; //  The value of the UPnP manufacturer eleme
        string    manufacturer_oui                         = 8  ; //  The value of an element in the Device De
        string    manufacturer_url                         = 9  ; //  The value of the UPnP manufacturerURL el
        string    model_description                        = 10 ; //  The value of the UPnP modelDescription e
        string    model_name                               = 11 ; //  The value of the UPnP modelName element 
        string    model_number                             = 12 ; //  The value of the UPnP modelNumber elemen
        string    model_url                                = 13 ; //  The value of the UPnP modelURL element i
        string    serial_number                            = 14 ; //  The value of the UPnP serialNumber eleme
        string    upc                                      = 15 ; //  The value of the UPnP UPC element in the
        string    presentation_url                         = 16 ; //  The value of the UPnP presentationURL el
      }
      repeated DeviceInstance device_instance = 5; // InternetGatewayDevice.UPnP.Description.DeviceInstance.{i}.
      message ServiceInstance { // InternetGatewayDevice.UPnP.Description.ServiceInstance.{i}.
        string    parent_device                            = 1  ; //  {{reference|a {{object|#.DeviceInstance}
        string    service_id                               = 2  ; //  The value of the UPnP serviceId element 
        string    service_discovery                        = 3  ; //  {{reference|a {{object|##.Discovery.Serv
        string    service_type                             = 4  ; //  The value of the UPnP serviceType elemen
        string    scpdurl                                  = 5  ; //  The value of the UPnP SCPDURL element in
        string    control_url                              = 6  ; //  The value of the UPnP controlURL element
        string    event_sub_url                            = 7  ; //  The value of the UPnP eventSubURL elemen
      }
      repeated ServiceInstance service_instance = 6; // InternetGatewayDevice.UPnP.Description.ServiceInstance.{i}.
    }
    Description description = 3; // InternetGatewayDevice.UPnP.Description.
  }
  UPnP upn_p = 27; // InternetGatewayDevice.UPnP.
  message DLNA { // InternetGatewayDevice.DLNA.
    message Capabilities { // InternetGatewayDevice.DLNA.Capabilities.
      string    hnddevice_class                          = 1  ; //  {{list}} Indicates the supported DLNA Ho
      string    device_capability                        = 2  ; //  {{list}} Indicates the supported DLNA De
      string    hiddevice_class                          = 3  ; //  {{list}} Indicates the supported DLNA Ho
      string    image_class_profile_id                   = 4  ; //  {{list}} Indicates the DLNA Image Class 
      string    audio_class_profile_id                   = 5  ; //  {{list}} Indicates the DLNA Audio Class 
      string    avclass_profile_id                       = 6  ; //  {{list}} Indicates the DLNA AV Class Pro
      string    media_collection_profile_id              = 7  ; //  {{list}} Indicates the DLNA Media Collec
      string    printer_class_profile_id                 = 8  ; //  {{list}} Indicates the DLNA Printer Clas
    }
    Capabilities capabilities = 1; // InternetGatewayDevice.DLNA.Capabilities.
  }
  DLNA dlna = 28; // InternetGatewayDevice.DLNA.
  message SmartCardReader { // InternetGatewayDevice.SmartCardReader.{i}.
    string    alias                                    = 1  ; //  {{datatype|expand}}        }        
    bool      enable                                   = 2  ; //  Enables or disables this smart card read
    string    status                                   = 3  ; //  Indicates the status of this smart card 
    string    name                                     = 4  ; //  Human-readable name associated with this
    bool      reset                                    = 5  ; //  When set to {{true}}, resets the SmartCa
    string    reset_time                               = 6  ; //  The time at which this SmartCard Reader 
    uint32    decryption_failed_counter                = 7  ; //  Counter incremented once each time decry
    uint32    decryption_failed_no_key_counter         = 8  ; //  Counter incremented once each time the k
    message SmartCard { // InternetGatewayDevice.SmartCardReader.{i}.SmartCard.
      string    status                                   = 1  ; //  Status of the Smart Card.        .   
      string    type                                     = 2  ; //  Smart Card Type. {{enum}}          Vend
      string    application                              = 3  ; //  {{list}} Indicates Smart Card Applicatio
      string    serial_number                            = 4  ; //  The Smart Card Serial Number or {{empty}
      string    atr                                      = 5  ; //  The Smart Card answer to a reset action.
    }
    SmartCard smart_card = 9; // InternetGatewayDevice.SmartCardReader.{i}.SmartCard.
  }
  repeated SmartCardReader smart_card_reader = 29; // InternetGatewayDevice.SmartCardReader.{i}.
  message SelfTestDiagnostics { // InternetGatewayDevice.SelfTestDiagnostics.
    string    diagnostics_state                        = 1  ; //  Indicates availability of diagnostic dat
    string    results                                  = 2  ; //  Results of self-test (vendor specific).
  }
  SelfTestDiagnostics self_test_diagnostics = 30; // InternetGatewayDevice.SelfTestDiagnostics.
  message NSLookupDiagnostics { // InternetGatewayDevice.NSLookupDiagnostics.
    string    diagnostics_state                        = 1  ; //  Indicates availability of diagnostic dat
    string    interface                                = 2  ; //  {{reference}} This parameter specifies t
    string    host_name                                = 3  ; //  Specifies the Host Name that NS Lookup i
    string    dnsserver                                = 4  ; //  Specifies the DNS Server name or IP addr
    uint32    timeout                                  = 5  ; //  Timeout in {{units}} that indicates that
    uint32    number_of_repetitions                    = 6  ; //  The number of times the device SHOULD re
    uint32    success_count                            = 7  ; //  Number of successfully executed repetiti
    uint32    result_number_of_entries                 = 8  ; //  {{numentries}}          Total number of
    message Result { // InternetGatewayDevice.NSLookupDiagnostics.Result.{i}.
      string    status                                   = 1  ; //  Result Parameter to represent whether th
      string    answer_type                              = 2  ; //  Result parameter to represent whether th
      string    host_name_returned                       = 3  ; //  Result parameter to represent the fully 
      string    ipaddresses                              = 4  ; //  {{list}} Indicates the IP Address result
      string    dnsserver_ip                             = 5  ; //  Result parameter to represent the actual
      uint32    response_time                            = 6  ; //  Response time (for the first response pa
    }
    repeated Result result = 9; // InternetGatewayDevice.NSLookupDiagnostics.Result.{i}.
  }
  NSLookupDiagnostics nslookup_diagnostics = 31; // InternetGatewayDevice.NSLookupDiagnostics.
  message Firewall { // InternetGatewayDevice.Firewall.
    string    config                                   = 1  ; //  How this firewall is configured. {{enum}
    string    version                                  = 2  ; //  A string identifying the firewall settin
    string    last_change                              = 3  ; //  The time at which the firewall settings 
  }
  Firewall firewall = 32; // InternetGatewayDevice.Firewall.
  message USBHosts { // InternetGatewayDevice.USBHosts.
    uint32    host_number_of_entries                   = 1  ; //  {{numentries}}        }        ..
    message Host { // InternetGatewayDevice.USBHosts.Host.{i}.
      string    alias                                    = 1  ; //  {{datatype|expand}}        }        
      bool      enable                                   = 2  ; //  Enables or disables the USB Host control
      string    name                                     = 3  ; //  User-readable host controller name.    
      string    type                                     = 4  ; //  Type of USB Host        t        i}.
      bool      reset                                    = 5  ; //  When set to {{true}}, reset the Host Con
      bool      power_management_enable                  = 6  ; //  When set to {{true}}, {{param}} enables 
      string    usbversion                               = 7  ; //  USB specification version with which the
      uint32    device_number_of_entries                 = 8  ; //  {{numentries}}        }        {i}.
      message Device { // InternetGatewayDevice.USBHosts.Host.{i}.Device.{i}.
        uint32    device_number                            = 1  ; //  Device number on USB bus.        .   
        string    usbversion                               = 2  ; //  USB specification version with which the
        bytes     device_class                             = 3  ; //  Class Code as assigned by USB-IF.      
        bytes     device_sub_class                         = 4  ; //  Subclass code (assigned by USB-IF).    
        uint32    device_version                           = 5  ; //  Device release number.        .      
        bytes     device_protocol                          = 6  ; //  Protocol code (assigned by USB-IF).    
        uint32    product_id                               = 7  ; //  Product ID (assigned by manufacturer). 
        uint32    vendor_id                                = 8  ; //  Vendor ID (assigned by USB-IF).        
        string    manufacturer                             = 9  ; //  Device Manufacturer string descriptor. 
        string    product_class                            = 10 ; //  Device Product Class string descriptor.
        string    serial_number                            = 11 ; //  Device SerialNumber string descriptor. 
        uint32    port                                     = 12 ; //  Hub port on parent device.          0 w
        string    rate                                     = 13 ; //  Speed of the USB device. {{enum}}      
        string    parent                                   = 14 ; //  {{reference}} This is a reference to the
        uint32    max_children                             = 15 ; //  Number of ports.  Only applies for hub d
        bool      is_suspended                             = 16 ; //  When {{true}} the associated Device is i
        bool      is_self_powered                          = 17 ; //  When {{true}} the associated device is a
        uint32    configuration_number_of_entries          = 18 ; //  {{numentries}}        }            
        message Configuration { // InternetGatewayDevice.USBHosts.Host.{i}.Device.{i}.Configuration.{i}.
          uint32    configuration_number                     = 1  ; //  The identifier for each Device Configura
          uint32    interface_number_of_entries              = 2  ; //  {{numentries}}        }        
          message Interface { // InternetGatewayDevice.USBHosts.Host.{i}.Device.{i}.Configuration.{i}.Interface.{i}.
            uint32    interface_number                         = 1  ; //  Number of this interface (from USB inter
            bytes     interface_class                          = 2  ; //  Class Code as assigned by USB-IF.      
            bytes     interface_sub_class                      = 3  ; //  Subclass code (assigned by USB-IF).    
            bytes     interface_protocol                       = 4  ; //  Protocol code (assigned by USB-IF).    
          }
          repeated Interface interface = 3; // InternetGatewayDevice.USBHosts.Host.{i}.Device.{i}.Configuration.{i}.Interface.{i}.
        }
        repeated Configuration configuration = 19; // InternetGatewayDevice.USBHosts.Host.{i}.Device.{i}.Configuration.{i}.
      }
      repeated Device device = 9; // InternetGatewayDevice.USBHosts.Host.{i}.Device.{i}.
    }
    repeated Host host = 2; // InternetGatewayDevice.USBHosts.Host.{i}.
  }
  USBHosts usbhosts = 33; // InternetGatewayDevice.USBHosts.
  message PeriodicStatistics { // InternetGatewayDevice.PeriodicStatistics.
    uint32    min_sample_interval                      = 1  ; //  Minimum sample interval in {{units}} tha
    uint32    max_report_samples                       = 2  ; //  Maximum number of samples of each statis
    uint32    sample_set_number_of_entries             = 3  ; //  {{numentries}}        }        tics
    message SampleSet { // InternetGatewayDevice.PeriodicStatistics.SampleSet.{i}.
      string    alias                                    = 1  ; //  {{datatype|expand}}        }        
      bool      enable                                   = 2  ; //  Enables or disables collection of period
      string    status                                   = 3  ; //  Indicates availability of Sample statist
      string    name                                     = 4  ; //  The name of this sample set, which uniqu
      uint32    sample_interval                          = 5  ; //  The sample interval in {{units}}. Each s
      uint32    report_samples                           = 6  ; //  The number of samples that the CPE will 
      string    time_reference                           = 7  ; //  An absolute time reference in UTC to det
      uint32    fetch_samples                            = 8  ; //  The number of sample intervals to be col
      bool      force_sample                             = 9  ; //  When set to {{true}}, forces statistics 
      string    report_start_time                        = 10 ; //  The absolute time at which the sample in
      string    report_end_time                          = 11 ; //  The absolute time at which the sample in
      string    sample_seconds                           = 12 ; //  {{list}} Each entry indicates the number
      uint32    parameter_number_of_entries              = 13 ; //  {{numentries}}        }            
      message Parameter { // InternetGatewayDevice.PeriodicStatistics.SampleSet.{i}.Parameter.{i}.
        string    alias                                    = 1  ; //  {{datatype|expand}}        }        
        bool      enable                                   = 2  ; //  Enables or disables this object instance
        string    reference                                = 3  ; //  {{reference}} This is the parameter bein
        string    sample_mode                              = 4  ; //  Controls how this parameter's value is s
        string    calculation_mode                         = 5  ; //  Controls how this parameter's statistic 
        int32     low_threshold                            = 6  ; //  The low threshold value that controls th
        int32     high_threshold                           = 7  ; //  The high threshold value that controls t
        string    sample_seconds                           = 8  ; //  {{list}} Each entry indicates the number
        string    suspect_data                             = 9  ; //  {{list}} Each entry is 0 if the sampled 
        string    values                                   = 10 ; //  {{list}} Each entry indicates the value 
        uint32    failures                                 = 11 ; //  Counts the number of times (since this o
      }
      repeated Parameter parameter = 14; // InternetGatewayDevice.PeriodicStatistics.SampleSet.{i}.Parameter.{i}.
    }
    repeated SampleSet sample_set = 4; // InternetGatewayDevice.PeriodicStatistics.SampleSet.{i}.
  }
  PeriodicStatistics periodic_statistics = 34; // InternetGatewayDevice.PeriodicStatistics.
  message DownloadAvailability { // InternetGatewayDevice.DownloadAvailability.
    message Announcement { // InternetGatewayDevice.DownloadAvailability.Announcement.
      bool      enable                                   = 1  ; //  Enable/disable CPE ability to receive an
      string    status                                   = 2  ; //  The status of the announcement service.
      uint32    group_number_of_entries                  = 3  ; //  {{numentries}}        }        t va
      message Group { // InternetGatewayDevice.DownloadAvailability.Announcement.Group.{i}.
        string    alias                                    = 1  ; //  {{datatype|expand}}        }        
        bool      enable                                   = 2  ; //  Enable/disable listening to this multica
        string    status                                   = 3  ; //  The status of this group table entry.  
        string    url                                      = 4  ; //  URL {{bibref|RFC3986}} encoding the grou
      }
      repeated Group group = 4; // InternetGatewayDevice.DownloadAvailability.Announcement.Group.{i}.
    }
    Announcement announcement = 1; // InternetGatewayDevice.DownloadAvailability.Announcement.
    message Query { // InternetGatewayDevice.DownloadAvailability.Query.
      bool      enable                                   = 1  ; //  Enable/disable CPE ability to autonomous
      string    status                                   = 2  ; //  The status of the query service.       
      string    url                                      = 3  ; //  URL {{bibref|RFC3986}} of the query resp
    }
    Query query = 2; // InternetGatewayDevice.DownloadAvailability.Query.
  }
  DownloadAvailability download_availability = 35; // InternetGatewayDevice.DownloadAvailability.
  message SoftwareModules { // InternetGatewayDevice.SoftwareModules.
    uint32    exec_env_number_of_entries               = 1  ; //  {{numentries}}        }        bili
    uint32    deployment_unit_number_of_entries        = 2  ; //  {{numentries}}        }        s.i
    uint32    execution_unit_number_of_entries         = 3  ; //  {{numentries}}        }        s.i
    message ExecEnv { // InternetGatewayDevice.SoftwareModules.ExecEnv.{i}.
      bool      enable                                   = 1  ; //  Indicates whether or not this {{object}}
      string    status                                   = 2  ; //  Indicates the status of this {{object}}.
      bool      reset                                    = 3  ; //  Setting this parameter to {{true}} cause
      string    alias                                    = 4  ; //  {{datatype|expand}}        }        
      string    name                                     = 5  ; //  A Name provided by the CPE that adequate
      string    type                                     = 6  ; //  Indicates the complete type and specific
      uint32    initial_run_level                        = 7  ; //  The run level that this {{object}} will 
      int32     requested_run_level                      = 8  ; //  Provides a mechanism to remotely manipul
      int32     current_run_level                        = 9  ; //  The run level that this {{object}} is cu
      int32     initial_execution_unit_run_level         = 10 ; //  Indicates the initial value on creation 
      string    vendor                                   = 11 ; //  The vendor that produced this {{object}}
      string    version                                  = 12 ; //  The Version of this {{object}} as specif
      string    parent_exec_env                          = 13 ; //  Represents the parent {{object}} of this
      int32     allocated_disk_space                     = 14 ; //  The amount of disk space measured in {{u
      int32     available_disk_space                     = 15 ; //  The amount of disk space measured in {{u
      int32     allocated_memory                         = 16 ; //  The amount of physical RAM measured in {
      int32     available_memory                         = 17 ; //  The amount of physical RAM measured in {
      string    active_execution_units                   = 18 ; //  Represents the {{object|#.ExecutionUnit}
      string    processor_ref_list                       = 19 ; //  Represents the processors that this {{ob
    }
    repeated ExecEnv exec_env = 4; // InternetGatewayDevice.SoftwareModules.ExecEnv.{i}.
    message DeploymentUnit { // InternetGatewayDevice.SoftwareModules.DeploymentUnit.{i}.
      string    uuid                                     = 1  ; //  A Universally Unique Identifier either p
      string    duid                                     = 2  ; //  Deployment Unit Identifier chosen by the
      string    alias                                    = 3  ; //  {{datatype|expand}}        }        
      string    name                                     = 4  ; //  Indicates the Name of this {{object}}, w
      string    status                                   = 5  ; //  Indicates the status of this {{object}}.
      bool      resolved                                 = 6  ; //  Indicates whether or not this {{object}}
      string    url                                      = 7  ; //  Contains the URL used by the most recent
      string    description                              = 8  ; //  Textual description of this {{object}}. 
      string    vendor                                   = 9  ; //  The author of this {{object}} formatted 
      string    version                                  = 10 ; //  Version of this {{object}}.  The format 
      string    vendor_log_list                          = 11 ; //  Represents the vendor log files that hav
      string    vendor_config_list                       = 12 ; //  Represents the vendor config files that 
      string    execution_unit_list                      = 13 ; //  Represents the {{object|#.ExecutionUnit}
      string    execution_env_ref                        = 14 ; //  Represents the {{object|#.ExecEnv}} inst
    }
    repeated DeploymentUnit deployment_unit = 5; // InternetGatewayDevice.SoftwareModules.DeploymentUnit.{i}.
    message ExecutionUnit { // InternetGatewayDevice.SoftwareModules.ExecutionUnit.{i}.
      string    euid                                     = 1  ; //  Execution Unit Identifier chosen by the 
      string    alias                                    = 2  ; //  {{datatype|expand}}        }        
      string    name                                     = 3  ; //  The name of this {{object}} as it pertai
      string    exec_env_label                           = 4  ; //  The name of this {{object}} as provided 
      string    status                                   = 5  ; //  Indicates the status of this {{object}}.
      string    requested_state                          = 6  ; //  Indicates the state transition that the 
      string    execution_fault_code                     = 7  ; //  If while running or transitioning betwee
      string    execution_fault_message                  = 8  ; //  If while running or transitioning betwee
      bool      auto_start                               = 9  ; //  If {{true}} and the {{param|RunLevel}} v
      uint32    run_level                                = 10 ; //  Determines when this {{object}} will be 
      string    vendor                                   = 11 ; //  Vendor of this {{object}}.        .  
      string    version                                  = 12 ; //  Version of the {{object}}.  The format o
      string    description                              = 13 ; //  Textual description of this {{object}}. 
      int32     disk_space_in_use                        = 14 ; //  The amount of disk space measured in {{u
      int32     memory_in_use                            = 15 ; //  The amount of physical RAM measured in {
      string    references                               = 16 ; //  Represents the instances of multi-instan
      string    associated_process_list                  = 17 ; //  Represents the system processes that are
      string    vendor_log_list                          = 18 ; //  Represents the vendor log files that hav
      string    vendor_config_list                       = 19 ; //  Represents the vendor config files that 
      string    supported_data_model_list                = 20 ; //  Represents the CWMP-DT schema instances 
      string    execution_env_ref                        = 21 ; //  Represents the {{object|#.ExecEnv}} that
      message Extensions { // InternetGatewayDevice.SoftwareModules.ExecutionUnit.{i}.Extensions.
      }
      Extensions extensions = 22; // InternetGatewayDevice.SoftwareModules.ExecutionUnit.{i}.Extensions.
    }
    repeated ExecutionUnit execution_unit = 6; // InternetGatewayDevice.SoftwareModules.ExecutionUnit.{i}.
  }
  SoftwareModules software_modules = 36; // InternetGatewayDevice.SoftwareModules.
  message Security { // InternetGatewayDevice.Security.
    uint32    certificate_number_of_entries            = 1  ; //  {{numentries}}        }        s.u
    message Certificate { // InternetGatewayDevice.Security.Certificate.{i}.
      bool      enable                                   = 1  ; //  Enables or disables this certificate.  
      string    last_modif                               = 2  ; //  The last modification time of this certi
      string    serial_number                            = 3  ; //  The Serial Number field in an X.509 cert
      string    issuer                                   = 4  ; //  The Issuer field in an X.509 certificate
      string    not_before                               = 5  ; //  The beginning of the certificate validit
      string    not_after                                = 6  ; //  The end of the certificate validity peri
      string    subject                                  = 7  ; //  The Distinguished Name (DN) of the entit
      string    subject_alt                              = 8  ; //  {{list}} Each item is a DNS Name.      
      string    signature_algorithm                      = 9  ; //  The algorithm used in signing the certif
    }
    repeated Certificate certificate = 2; // InternetGatewayDevice.Security.Certificate.{i}.
  }
  Security security = 37; // InternetGatewayDevice.Security.
  message FaultMgmt { // InternetGatewayDevice.FaultMgmt.
    uint32    supported_alarm_number_of_entries        = 1  ; //  {{numentries}}        }        fica
    uint32    max_current_alarm_entries                = 2  ; //  The maximum number of entries allowed in
    uint32    current_alarm_number_of_entries          = 3  ; //  {{numentries}}        }        fica
    uint32    history_event_number_of_entries          = 4  ; //  {{numentries}}        }        fica
    uint32    expedited_event_number_of_entries        = 5  ; //  {{numentries}}        }        fica
    uint32    queued_event_number_of_entries           = 6  ; //  {{numentries}}        }        fica
    message SupportedAlarm { // InternetGatewayDevice.FaultMgmt.SupportedAlarm.{i}.
      string    event_type                               = 1  ; //  Indicates the type of event.        .
      string    probable_cause                           = 2  ; //  Qualifies the alarm and provides further
      string    specific_problem                         = 3  ; //  Provides further qualification on the al
      string    perceived_severity                       = 4  ; //  Indicates the relative level of urgency 
      string    reporting_mechanism                      = 5  ; //  Indicates the reporting mechanism settin
    }
    repeated SupportedAlarm supported_alarm = 7; // InternetGatewayDevice.FaultMgmt.SupportedAlarm.{i}.
    message CurrentAlarm { // InternetGatewayDevice.FaultMgmt.CurrentAlarm.{i}.
      string    alarm_identifier                         = 1  ; //  Identifies one Alarm Entry in the Alarm 
      string    alarm_raised_time                        = 2  ; //  Indicates the date and time when the ala
      string    alarm_changed_time                       = 3  ; //  Indicates the date and time when the ala
      string    managed_object_instance                  = 4  ; //  Specifies the instance of the Informatio
      string    event_type                               = 5  ; //  Indicates the type of event.        .
      string    probable_cause                           = 6  ; //  Qualifies the alarm and provides further
      string    specific_problem                         = 7  ; //  Provides further qualification on the al
      string    perceived_severity                       = 8  ; //  Indicates the relative level of urgency 
      string    additional_text                          = 9  ; //  This provides a textual string which is 
      string    additional_information                   = 10 ; //  This contains additional information abo
    }
    repeated CurrentAlarm current_alarm = 8; // InternetGatewayDevice.FaultMgmt.CurrentAlarm.{i}.
    message HistoryEvent { // InternetGatewayDevice.FaultMgmt.HistoryEvent.{i}.
      string    event_time                               = 1  ; //  Indicates the date and time when the ala
      string    alarm_identifier                         = 2  ; //  Identifies one Alarm Entry in the Alarm 
      string    notification_type                        = 3  ; //  Indicates the reason for the specific al
      string    managed_object_instance                  = 4  ; //  Specifies the instance of the Informatio
      string    event_type                               = 5  ; //  Indicates the type of event.        .
      string    probable_cause                           = 6  ; //  Qualifies the alarm and provides further
      string    specific_problem                         = 7  ; //  Provides further qualification on the al
      string    perceived_severity                       = 8  ; //  Indicates the relative level of urgency 
      string    additional_text                          = 9  ; //  This provides a textual string which is 
      string    additional_information                   = 10 ; //  This contains additional information abo
    }
    repeated HistoryEvent history_event = 9; // InternetGatewayDevice.FaultMgmt.HistoryEvent.{i}.
    message ExpeditedEvent { // InternetGatewayDevice.FaultMgmt.ExpeditedEvent.{i}.
      string    event_time                               = 1  ; //  Indicates the date and time when the ala
      string    alarm_identifier                         = 2  ; //  Identifies one Alarm Entry in the Alarm 
      string    notification_type                        = 3  ; //  Indicates the reason for the specific al
      string    managed_object_instance                  = 4  ; //  Specifies the instance of the Informatio
      string    event_type                               = 5  ; //  Indicates the type of event.        .
      string    probable_cause                           = 6  ; //  Qualifies the alarm and provides further
      string    specific_problem                         = 7  ; //  Provides further qualification on the al
      string    perceived_severity                       = 8  ; //  Indicates the relative level of urgency 
      string    additional_text                          = 9  ; //  This provides a textual string which is 
      string    additional_information                   = 10 ; //  This contains additional information abo
    }
    repeated ExpeditedEvent expedited_event = 10; // InternetGatewayDevice.FaultMgmt.ExpeditedEvent.{i}.
    message QueuedEvent { // InternetGatewayDevice.FaultMgmt.QueuedEvent.{i}.
      string    event_time                               = 1  ; //  Indicates the date and time when the ala
      string    alarm_identifier                         = 2  ; //  Identifies one Alarm Entry in the Alarm 
      string    notification_type                        = 3  ; //  Indicates the reason for the specific al
      string    managed_object_instance                  = 4  ; //  Specifies the instance of the Informatio
      string    event_type                               = 5  ; //  Indicates the type of event.        .
      string    probable_cause                           = 6  ; //  Qualifies the alarm and provides further
      string    specific_problem                         = 7  ; //  Provides further qualification on the al
      string    perceived_severity                       = 8  ; //  Indicates the relative level of urgency 
      string    additional_text                          = 9  ; //  This provides a textual string which is 
      string    additional_information                   = 10 ; //  This contains additional information abo
    }
    repeated QueuedEvent queued_event = 11; // InternetGatewayDevice.FaultMgmt.QueuedEvent.{i}.
  }
  FaultMgmt fault_mgmt = 38; // InternetGatewayDevice.FaultMgmt.
  message FAP { // InternetGatewayDevice.FAP.
    message GPS { // InternetGatewayDevice.FAP.GPS.
      bool      scan_on_boot                             = 1  ; //  Enables or disables GPS scans during the
      bool      scan_periodically                        = 2  ; //  Enables or disables periodic GPS scans.
      uint32    periodic_interval                        = 3  ; //  When {{param|ScanPeriodically}} is {{tru
      string    periodic_time                            = 4  ; //  An absolute time reference in UTC to det
      bool      continuous_gps                           = 5  ; //  Whether or not the device SHOULD maintai
      uint32    scan_timeout                             = 6  ; //  Specifies the time-out value in {{units}
      string    scan_status                              = 7  ; //  Indicates the current status of this sca
      string    error_details                            = 8  ; //  Provides more detail when the {{param|Sc
      string    last_scan_time                           = 9  ; //  The date and time when the last GPS scan
      string    last_successful_scan_time                = 10 ; //  Specifies the date and time, when the GP
      int32     locked_latitude                          = 11 ; //  This parameter specifies the latitude of
      int32     locked_longitude                         = 12 ; //  This parameter specifies the longitude o
      uint32    number_of_satellites                     = 13 ; //  The number of satellites that were locke
      bool      gpsreset                                 = 14 ; //  Setting this to {{true}} will cause a re
      message ContinuousGPSStatus { // InternetGatewayDevice.FAP.GPS.ContinuousGPSStatus.
        bool      current_fix                              = 1  ; //  The value is {{true}} if the location fi
        bool      got_fix                                  = 2  ; //  The value is {{true}} if {{param|Current
        bool      timing_good                              = 3  ; //  The value is {{true}} if the timing sync
        int32     latitude                                 = 4  ; //  This parameter represents the most recen
        int32     longitude                                = 5  ; //  This parameter represents the most recen
        int32     elevation                                = 6  ; //  This parameter represents the most recen
        string    last_fix_time                            = 7  ; //  Represents the date and time when the la
        uint32    last_fix_duration                        = 8  ; //  Number of {{units}} of continuous GPS fi
        int32     first_fix_timeout                        = 9  ; //  Number of {{units}} to wait for first GP
        uint32    satellites_tracked                       = 10 ; //  The number of satellites the receiver is
        uint32    satellite_tracking_interval              = 11 ; //  The interval in {{units}} at which the G
        string    receiver_status                          = 12 ; //  The output of the GPS receiver's status.
        string    location_type                            = 13 ; //  Indicates whether the {{param|Latitude}}
        uint32    lock_time_out_duration                   = 14 ; //  The timer duration, in {{units}}, for wh
      }
      ContinuousGPSStatus continuous_gpsstatus = 15; // InternetGatewayDevice.FAP.GPS.ContinuousGPSStatus.
      message AGPSServerConfig { // InternetGatewayDevice.FAP.GPS.AGPSServerConfig.
        bool      enable                                   = 1  ; //  Enables or disables the {{object}} entry
        string    server_url                               = 2  ; //  A-GPS server host name or IP address.  
        uint32    server_port                              = 3  ; //  The port to use when communicating to th
        string    username                                 = 4  ; //  Username to be used by the device to aut
        string    password                                 = 5  ; //  Password to be used by the device to aut
        int32     reference_latitude                       = 6  ; //  This parameter specifies the reference l
        int32     reference_longitude                      = 7  ; //  This parameter specifies the reference l
        bool      server_in_use                            = 8  ; //  The value is {{true}} if the device has 
      }
      AGPSServerConfig agpsserver_config = 16; // InternetGatewayDevice.FAP.GPS.AGPSServerConfig.
    }
    GPS gps = 1; // InternetGatewayDevice.FAP.GPS.
    message Tunnel { // InternetGatewayDevice.FAP.Tunnel.
      uint32    crypto_profile_number_of_entries         = 1  ; //  {{numentries}}        }        rver
      uint32    ikesanumber_of_entries                   = 2  ; //  {{numentries}}        }        rver
      uint32    child_sanumber_of_entries                = 3  ; //  {{numentries}}        }        rver
      uint32    max_virtual_interfaces                   = 4  ; //  The maximum number of  virtual interface
      uint32    virtual_interface_number_of_entries      = 5  ; //  {{numentries}}        }        rver
      bool      use_for_cwmp                             = 6  ; //  If the SecGW parameters are configured t
      uint32    max_child_saper_ike                      = 7  ; //  Indicates the maximum number of child SA
      uint32    max_ikesessions                          = 8  ; //  Indicates the maximum number of IKE sess
      message CryptoProfile { // InternetGatewayDevice.FAP.Tunnel.CryptoProfile.{i}.
        bool      enable                                   = 1  ; //  Enables and disables this entry.       
        string    alias                                    = 2  ; //  {{datatype|expand}}        }        
        string    auth_method                              = 3  ; //  Specifies the Security mechanism and set
        uint32    max_child_sa                             = 4  ; //  Controls the maximum number of child SAs
        string    ikeencrypt                               = 5  ; //  IKEv2 encryption algorithm. {{bibref|RFC
        string    ikeprf                                   = 6  ; //  IKEv2 pseudo-random function. {{bibref|R
        string    ikeintegrity                             = 7  ; //  IKEv2 integrity function. {{bibref|RFC43
        string    ikedh                                    = 8  ; //  IKEv2 pseudo-random function. {{bibref|R
        string    espencrypt                               = 9  ; //  IPsec encryption algorithm. {{bibref|RFC
        string    espintegrity                             = 10 ; //  IPsec integrity function. {{bibref|RFC48
        uint32    ipsec_window_size                        = 11 ; //  The size of the Anti-Replay Window.    
        uint32    ikerekey_lifetime                        = 12 ; //  IKEv2 SA rekey timeout in {{units}}.   
        uint32    ipsec_rekey_lifetime_byte                = 13 ; //  IPsec SA rekey timeout in {{units}}.   
        uint32    ipsec_rekey_lifetime_time                = 14 ; //  IPsec SA rekey timeout in {{units}}.   
        uint32    dpdtimer                                 = 15 ; //  DPD timeout in {{units}}.          For 
        uint32    nattkeepalive_timer                      = 16 ; //  NAT-T keepalive timeout in {{units}}.  
        uint32    sec_max_frag_size                        = 17 ; //  Maximum fragment size, in {{units}}, fro
        string    sec_dfbit                                = 18 ; //  Indicates if the 'Do Not Fragment' bit n
      }
      repeated CryptoProfile crypto_profile = 9; // InternetGatewayDevice.FAP.Tunnel.CryptoProfile.{i}.
      message IKESA { // InternetGatewayDevice.FAP.Tunnel.IKESA.{i}.
        string    status                                   = 1  ; //  The status of this IKE SA entry.       
        string    peer_address                             = 2  ; //  The IP address of the peer SecGW.      
        string    creation_time                            = 3  ; //  The time that the current IKE SA was set
        string    ipaddress                                = 4  ; //  The current IP address assigned to this 
        string    subnet_mask                              = 5  ; //  The current subnet mask assigned to this
        string    dnsservers                               = 6  ; //  {{list}} Each item is an IP Address of a
        string    dhcpservers                              = 7  ; //  {{list}} Each item is an IP address of a
        uint32    integrity_errors                         = 8  ; //  The number of inbound packets discarded 
        uint32    other_errors                             = 9  ; //  The number of inbound packets discarded 
        uint32    auth_errors                              = 10 ; //  The number of inbound packets discarded 
      }
      repeated IKESA ikesa = 10; // InternetGatewayDevice.FAP.Tunnel.IKESA.{i}.
      message ChildSA { // InternetGatewayDevice.FAP.Tunnel.ChildSA.{i}.
        string    parent_id                                = 1  ; //  {{reference}}        }        SA.{
        uint32    spi                                      = 2  ; //  SPI value of the Child SA.        .  
        bool      direction_outbound                       = 3  ; //  Traffic Direction.          If {{true}}
        string    creation_time                            = 4  ; //  The time that the current Child SA was s
        uint32    traffic                                  = 5  ; //  The measured traffic in {{units}} transf
        uint32    integrity_errors                         = 6  ; //  The number of inbound {{units}} discarde
        uint32    replay_errors                            = 7  ; //  The number of inbound {{units}} discarde
      }
      repeated ChildSA child_sa = 11; // InternetGatewayDevice.FAP.Tunnel.ChildSA.{i}.
      message VirtualInterface { // InternetGatewayDevice.FAP.Tunnel.VirtualInterface.{i}.
        bool      enable                                   = 1  ; //  Enables and disables this entry.       
        string    alias                                    = 2  ; //  {{datatype|expand}}        }        
        string    crypto_profile                           = 3  ; //  {{reference}} If multiple instances of V
        int32     dscpmark_policy                          = 4  ; //  DSCP to mark the outer IP header for tra
      }
      repeated VirtualInterface virtual_interface = 12; // InternetGatewayDevice.FAP.Tunnel.VirtualInterface.{i}.
    }
    Tunnel tunnel = 2; // InternetGatewayDevice.FAP.Tunnel.
    message PerfMgmt { // InternetGatewayDevice.FAP.PerfMgmt.
      uint32    config_number_of_entries                 = 1  ; //  {{numentries}}        }        1+
      message Config { // InternetGatewayDevice.FAP.PerfMgmt.Config.{i}.
        bool      enable                                   = 1  ; //  Enables or disables this entry.  If this
        string    alias                                    = 2  ; //  {{datatype|expand}}        }        
        string    url                                      = 3  ; //  URL specifying the destination file loca
        string    username                                 = 4  ; //  Username to be used by the device to aut
        string    password                                 = 5  ; //  Password to be used by the device to aut
        uint32    periodic_upload_interval                 = 6  ; //  The duration in {{units}} of the interva
        string    periodic_upload_time                     = 7  ; //  An absolute time reference in UTC to det
      }
      repeated Config config = 2; // InternetGatewayDevice.FAP.PerfMgmt.Config.{i}.
    }
    PerfMgmt perf_mgmt = 3; // InternetGatewayDevice.FAP.PerfMgmt.
    message ApplicationPlatform { // InternetGatewayDevice.FAP.ApplicationPlatform.
      string    version                                  = 1  ; //  Version of Femto Application Platform ru
      bool      enable                                   = 2  ; //  Enable or disable the Femto ApplicationP
      string    status                                   = 3  ; //  Current state of the Femto Application P
      uint32    max_number_of_applications               = 4  ; //  Determines how many Femtozone Applicatio
      uint32    current_numberof_applications            = 5  ; //  Specifies how many Femtozone Application
      message Capabilities { // InternetGatewayDevice.FAP.ApplicationPlatform.Capabilities.
        bool      presence_application_support             = 1  ; //  Specifies whether the Femto Application 
        bool      femto_awareness_apisupport               = 2  ; //  Specifies whether the Femto Awareness AP
        bool      smsapisupport                            = 3  ; //  Specifies whether the SMS API is support
        bool      subscribe_to_notifications_of_smssent_to_application_support = 4  ; //  Specifies whether the SubscribeToNotific
        bool      query_smsdelivery_status_support         = 5  ; //  Specifies whether the QuerySMSDeliverySt
        bool      mmsapisupport                            = 6  ; //  Specifies whether the MMS API is support
        bool      query_mmsdelivery_status_support         = 7  ; //  Specifies whether the QueryMMSDeliverySt
        bool      subscribe_to_notifications_of_mmssent_to_application_support = 8  ; //  Specifies whether the SubscribeToNotific
        bool      terminal_location_apisupport             = 9  ; //  Specifies whether the Terminal Location 
        string    authentication_methods_supported         = 10 ; //  Specifies the supported methods that 3rd
        string    access_levels_supported                  = 11 ; //  Specifies the supported access levels th
        string    send_smstarget_address_type              = 12 ; //  Specifies the supported types of address
        string    send_mmstarget_address_type              = 13 ; //  Specifies the supported types of address
      }
      Capabilities capabilities = 6; // InternetGatewayDevice.FAP.ApplicationPlatform.Capabilities.
      message Control { // InternetGatewayDevice.FAP.ApplicationPlatform.Control.
        string    authentication_method                    = 1  ; //  Specifies how 3rd Party Applications hav
        string    tunnel_inst                              = 2  ; //  This is the reference to the IPsec tunne
        message FemtoAwareness { // InternetGatewayDevice.FAP.ApplicationPlatform.Control.FemtoAwareness.
          bool      apienable                                = 1  ; //  Enable or disable FemtoAwareness API exp
          bool      queue_enable                             = 2  ; //  Enable or disable Request queueing for t
          string    queueing                                 = 3  ; //  Determines how FAP handles simultaneous 
          uint32    max_apiusers_number                      = 4  ; //  Determines the Max Number of different A
          string    femtozone_id                             = 5  ; //  Specifies Identifier of the Femtozone. 
          bool      notifications_user_identifier_msisdn     = 6  ; //  Specifies whether the Mobile Station Int
          bool      subscribe_to_notifications_response_callback_data = 7  ; //  Specifies whether the OPTIONAL Argument 
          bool      query_femtocell_response_timezone        = 8  ; //  Specifies whether the OPTIONAL Argument 
        }
        FemtoAwareness femto_awareness = 3; // InternetGatewayDevice.FAP.ApplicationPlatform.Control.FemtoAwareness.
        message SMS { // InternetGatewayDevice.FAP.ApplicationPlatform.Control.SMS.
          bool      apienable                                = 1  ; //  Enable or disable SMS API exposure on FA
          bool      queue_enable                             = 2  ; //  Enable or disable Request queueing for t
          string    queueing                                 = 3  ; //  Determines how FAP handles simultaneous 
          uint32    max_apiusers_number                      = 4  ; //  Determines the Max Number of different A
          uint32    min_send_smstime_interval                = 5  ; //  Determines the Minimum Time Interval in 
          bool      enable_query_smsdelivery_status          = 6  ; //  Enable or disable "QuerySMSDeliveryStatu
          bool      enable_subscribe_to_notifications_of_message_sent_to_application = 7  ; //  Enable or disable "SubscribeToNotificati
        }
        SMS sms = 4; // InternetGatewayDevice.FAP.ApplicationPlatform.Control.SMS.
        message MMS { // InternetGatewayDevice.FAP.ApplicationPlatform.Control.MMS.
          bool      apienable                                = 1  ; //  Enable or disable MMS API exposure on FA
          bool      queue_enable                             = 2  ; //  Enable or disable Request queueing for t
          string    queueing                                 = 3  ; //  Determines how FAP handles simultaneous 
          uint32    max_apiusers_number                      = 4  ; //  Determines the Max Number of different A
          uint32    min_send_mmstime_interval                = 5  ; //  Determines the Minimum Time Interval in 
          bool      enable_query_mmsdelivery_status          = 6  ; //  Enable or disable "QuerySMSDeliveryStatu
          bool      enable_subscribe_to_notifications_of_message_sent_to_application = 7  ; //  Enable or disable "SubscribeTo Notificat
        }
        MMS mms = 5; // InternetGatewayDevice.FAP.ApplicationPlatform.Control.MMS.
        message TerminalLocation { // InternetGatewayDevice.FAP.ApplicationPlatform.Control.TerminalLocation.
          bool      apienable                                = 1  ; //  Enable or disable TerminalLocation API e
          bool      queue_enable                             = 2  ; //  Enable or disable Request queueing for t
          string    queueing                                 = 3  ; //  Determines how FAP handles simultaneous 
          uint32    max_apiusers_number                      = 4  ; //  Determines the Max Number of different A
          string    query_mobile_location_response_address   = 5  ; //  Specifies Terminal Address  Format to be
          bool      query_mobile_location_response_longitude_latitude = 6  ; //  Include or exclude FAP Longitude and Lat
          bool      query_mobile_location_response_altitude  = 7  ; //  Include or exclude FAP Altitude argument
          uint32    query_mobile_location_response_timestamp = 8  ; //  Specifies Response Timestamp in {{units}
        }
        TerminalLocation terminal_location = 6; // InternetGatewayDevice.FAP.ApplicationPlatform.Control.TerminalLocation.
      }
      Control control = 7; // InternetGatewayDevice.FAP.ApplicationPlatform.Control.
      message Monitoring { // InternetGatewayDevice.FAP.ApplicationPlatform.Monitoring.
        bool      enable                                   = 1  ; //  Enables and disables this entry.       
        uint32    monitoring_interval                      = 2  ; //  Specifies the interval in {{units}} used
        uint32    authentication_requests_received         = 3  ; //  Specifies the total number of authentica
        uint32    authentication_requests_rejected         = 4  ; //  Specifies the number of authentication r
        message FemtoAwareness { // InternetGatewayDevice.FAP.ApplicationPlatform.Monitoring.FemtoAwareness.
          bool      apiavailable                             = 1  ; //  Specifies whether the FemtoAwareness API
          uint32    apiusers                                 = 2  ; //  Specifies the current number of Applicat
          string    queue_state                              = 3  ; //  Specifies the state of the Femto Awarene
          uint32    queue_num                                = 4  ; //  Specifies the current number of requests
          uint32    queue_received                           = 5  ; //  Specifies the number of requests in the 
          uint32    queue_discarded                          = 6  ; //  Specifies the number of requests in the 
        }
        FemtoAwareness femto_awareness = 5; // InternetGatewayDevice.FAP.ApplicationPlatform.Monitoring.FemtoAwareness.
        message SMS { // InternetGatewayDevice.FAP.ApplicationPlatform.Monitoring.SMS.
          bool      apiavailable                             = 1  ; //  Specifies whether the SMS API is current
          uint32    apiusers                                 = 2  ; //  Specifies the current number of Applicat
          string    queue_state                              = 3  ; //  Specifies the state of the SMS API Queue
          uint32    queue_num                                = 4  ; //  Specifies the current number of requests
          uint32    queue_received                           = 5  ; //  Specifies the number of requests in the 
          uint32    queue_discarded                          = 6  ; //  Specifies the number of requests in the 
        }
        SMS sms = 6; // InternetGatewayDevice.FAP.ApplicationPlatform.Monitoring.SMS.
        message MMS { // InternetGatewayDevice.FAP.ApplicationPlatform.Monitoring.MMS.
          bool      apiavailable                             = 1  ; //  Specifies whether the MMS API is current
          uint32    apiusers                                 = 2  ; //  Specifies the current number of Applicat
          string    queue_state                              = 3  ; //  Specifies the state of the MMS API Queue
          uint32    queue_num                                = 4  ; //  Specifies the current number of requests
          uint32    queue_received                           = 5  ; //  Specifies the number of requests in the 
          uint32    queue_discarded                          = 6  ; //  Specifies the number of requests in the 
        }
        MMS mms = 7; // InternetGatewayDevice.FAP.ApplicationPlatform.Monitoring.MMS.
        message TerminalLocation { // InternetGatewayDevice.FAP.ApplicationPlatform.Monitoring.TerminalLocation.
          bool      apiavailable                             = 1  ; //  Specifies whether the TerminalLocation A
          uint32    apiusers                                 = 2  ; //  Specifies the current number of Applicat
          string    queue_state                              = 3  ; //  Specifies the state of the Terminal Loca
          uint32    queue_num                                = 4  ; //  Specifies the current number of requests
          uint32    queue_received                           = 5  ; //  Specifies the number of requests in the 
          uint32    queue_discarded                          = 6  ; //  Specifies the number of requests in the 
        }
        TerminalLocation terminal_location = 8; // InternetGatewayDevice.FAP.ApplicationPlatform.Monitoring.TerminalLocation.
      }
      Monitoring monitoring = 8; // InternetGatewayDevice.FAP.ApplicationPlatform.Monitoring.
    }
    ApplicationPlatform application_platform = 4; // InternetGatewayDevice.FAP.ApplicationPlatform.
  }
  FAP fap = 39; // InternetGatewayDevice.FAP.
  message BulkData { // InternetGatewayDevice.BulkData.
    bool      enable                                   = 1  ; //  Enables or disables all collection profi
    string    status                                   = 2  ; //  Indicates the status of the Bulk Data Co
    uint32    min_reporting_interval                   = 3  ; //  Minimum reporting interval in {{units}} 
    string    protocols                                = 4  ; //  Represents the IPDR Protocols that this 
    string    encoding_types                           = 5  ; //  Represents the IPDR Encoding Types that 
    int32     max_number_of_profiles                   = 6  ; //  The maximum number of profiles that can 
    int32     max_number_of_parameter_references       = 7  ; //  The maximum number of parameters that ca
    uint32    profile_number_of_entries                = 8  ; //  {{numentries}}        }        nPla
    message Profile { // InternetGatewayDevice.BulkData.Profile.{i}.
      bool      enable                                   = 1  ; //  Enables or disables this specific bulk d
      string    alias                                    = 2  ; //  {{datatype|expand}}        }        
      string    protocol                                 = 3  ; //  The IPDR Protocol being used for this co
      string    encoding_type                            = 4  ; //  The IPDR Encoding Type being used for th
      uint32    reporting_interval                       = 5  ; //  The reporting interval in {{units}}. Eac
      string    time_reference                           = 6  ; //  An absolute time reference in UTC to det
      string    streaming_host                           = 7  ; //  This is the host name or IP Address of t
      uint32    streaming_port                           = 8  ; //  This is the port number of the IPDR Coll
      uint32    streaming_session_id                     = 9  ; //  This is the unique identification of an 
      string    file_transfer_url                        = 10 ; //  This is the URL within the CPE that is u
      string    file_transfer_username                   = 11 ; //  Username used for authentication of the 
      string    file_transfer_password                   = 12 ; //  Password used for authentication of the 
      string    control_file_format                      = 13 ; //  If this collection profile is configured
      uint32    parameter_number_of_entries              = 14 ; //  {{numentries}}        }        le.{
      message Parameter { // InternetGatewayDevice.BulkData.Profile.{i}.Parameter.{i}.
        string    reference                                = 1  ; //  Represents the parameter(s) that are par
      }
      repeated Parameter parameter = 15; // InternetGatewayDevice.BulkData.Profile.{i}.Parameter.{i}.
    }
    repeated Profile profile = 9; // InternetGatewayDevice.BulkData.Profile.{i}.
  }
  BulkData bulk_data = 40; // InternetGatewayDevice.BulkData.
  message DNS { // InternetGatewayDevice.DNS.
    message SD { // InternetGatewayDevice.DNS.SD.
      bool      enable                                   = 1  ; //  The parameter, when {{true}}, enables th
      uint32    service_number_of_entries                = 2  ; //  {{numentries}}        }        le.{
      message Service { // InternetGatewayDevice.DNS.SD.Service.{i}.
        string    instance_name                            = 1  ; //  Human-readable instance name {{bibref|DN
        string    application_protocol                     = 2  ; //  The Application Protocol, without the le
        string    transport_protocol                       = 3  ; //  The Transport Protocol associated with t
        string    domain                                   = 4  ; //  The value extracted from the Name field 
        uint32    port                                     = 5  ; //  The value extracted from the Port field 
        string    target                                   = 6  ; //  The fully qualified domain name (FQDN) w
        string    status                                   = 7  ; //  The status of the discovered {{object}} 
        string    last_update                              = 8  ; //  The date and time at which the last adve
        string    host                                     = 9  ; //  {{list}} {{reference|all Host table entr
        uint32    time_to_live                             = 10 ; //  The value extracted from the TTL field o
        uint32    priority                                 = 11 ; //  The value extracted from the Priority fi
        uint32    weight                                   = 12 ; //  A server selection mechanism. The value 
        uint32    text_record_number_of_entries            = 13 ; //  {{numentries}}        }        .{i}
        message TextRecord { // InternetGatewayDevice.DNS.SD.Service.{i}.TextRecord.{i}.
          string    key                                      = 1  ; //  The key that identifies the text record
          string    value                                    = 2  ; //  The value of the text record.        .
        }
        repeated TextRecord text_record = 14; // InternetGatewayDevice.DNS.SD.Service.{i}.TextRecord.{i}.
      }
      repeated Service service = 3; // InternetGatewayDevice.DNS.SD.Service.{i}.
    }
    SD sd = 1; // InternetGatewayDevice.DNS.SD.
  }
  DNS dns = 41; // InternetGatewayDevice.DNS.
  message XMPP { // InternetGatewayDevice.XMPP.
    uint32    connection_number_of_entries             = 1  ; //  {{numentries}}        }        .{i}
    message Connection { // InternetGatewayDevice.XMPP.Connection.{i}.
      bool      enable                                   = 1  ; //  Enables or disables this {{object}}.   
      string    alias                                    = 2  ; //  {{datatype|expand}}        }        
      string    username                                 = 3  ; //  The proposed local-part of the Jabber ID
      string    password                                 = 4  ; //  Password used to authenticate this {{obj
      string    domain                                   = 5  ; //  The proposed domain-part of the Jabber I
      string    resource                                 = 6  ; //  The proposed resource-part of the Jabber
      string    jabber_id                                = 7  ; //  The complete Jabber ID as determined by 
      string    status                                   = 8  ; //  The current operational state of this {{
      string    last_change_date                         = 9  ; //  The date and time at which this {{object
      string    server_connect_algorithm                 = 10 ; //  The algorithm the {{object}} uses when c
      int64     keep_alive_interval                      = 11 ; //  The number of {{units}} that keep alive 
      uint32    server_connect_attempts                  = 12 ; //  The number of times that this {{object}}
      uint32    server_retry_initial_interval            = 13 ; //  The maximum first reconnection wait inte
      uint32    server_retry_interval_multiplier         = 14 ; //  The reconnection interval multiplier as 
      uint32    server_retry_max_interval                = 15 ; //  The maximum reconnection wait interval, 
      bool      use_tls                                  = 16 ; //  This parameter allows an ACS to configur
      bool      tlsestablished                           = 17 ; //  This parameter represents the TLS state 
      uint32    server_number_of_entries                 = 18 ; //  {{numentries}}        }        n.{i
      message Server { // InternetGatewayDevice.XMPP.Connection.{i}.Server.{i}.
        bool      enable                                   = 1  ; //  Enables or disables this {{object}}.   
        string    alias                                    = 2  ; //  {{datatype|expand}}        }        
        uint32    priority                                 = 3  ; //  The priority of this {{object}} that is 
        int64     weight                                   = 4  ; //  This parameter specifies a relative weig
        string    server_address                           = 5  ; //  Fully Qualified Domain Name (FQDN) or IP
        uint32    port                                     = 6  ; //  Port number of the XMPP server for this 
      }
      repeated Server server = 19; // InternetGatewayDevice.XMPP.Connection.{i}.Server.{i}.
      message Stats { // InternetGatewayDevice.XMPP.Connection.{i}.Stats.
        uint32    received_messages                        = 1  ; //  The number of XMPP stanzas (iq, presence
        uint32    transmitted_messages                     = 2  ; //  The number of XMPP stanzas (iq, presence
        uint32    received_error_messages                  = 3  ; //  The number of XMPP stanzas (iq, presence
        uint32    transmitted_error_messages               = 4  ; //  The number of XMPP stanzas (iq, presence
      }
      Stats stats = 20; // InternetGatewayDevice.XMPP.Connection.{i}.Stats.
    }
    repeated Connection connection = 2; // InternetGatewayDevice.XMPP.Connection.{i}.
  }
  XMPP xmpp = 42; // InternetGatewayDevice.XMPP.
}

message GatewayRequest { int32 unused = 1; }

message GatewayReply { int32 unused = 1; }

message X_012345_Message { int32 unused = 1;  } // Vendor extensions X_{OUI}_{NameOfNewThing}

service Gateway {
  rpc GetInternetGatewayDevice(GatewayRequest) returns (tr098.InternetGatewayDevice) {}
  rpc SetInternetGatewayDevice(tr098.InternetGatewayDevice) returns (GatewayReply) {}

  rpc GetServices(GatewayRequest) returns (tr098.InternetGatewayDevice.Services) {}
  rpc SetServices(tr098.InternetGatewayDevice.Services) returns (GatewayReply) {}

  rpc GetCapabilities(GatewayRequest) returns (tr098.InternetGatewayDevice.Capabilities) {}
  rpc SetCapabilities(tr098.InternetGatewayDevice.Capabilities) returns (GatewayReply) {}

  rpc GetPerformanceDiagnostic(GatewayRequest) returns (tr098.InternetGatewayDevice.Capabilities.PerformanceDiagnostic) {}
  rpc SetPerformanceDiagnostic(tr098.InternetGatewayDevice.Capabilities.PerformanceDiagnostic) returns (GatewayReply) {}

  rpc GetDeviceInfo(GatewayRequest) returns (tr098.InternetGatewayDevice.DeviceInfo) {}
  rpc SetDeviceInfo(tr098.InternetGatewayDevice.DeviceInfo) returns (GatewayReply) {}

  rpc GetVendorConfigFile(GatewayRequest) returns (stream tr098.InternetGatewayDevice.DeviceInfo.VendorConfigFile) {}
  rpc SetVendorConfigFile(stream tr098.InternetGatewayDevice.DeviceInfo.VendorConfigFile) returns (GatewayReply) {}

  rpc GetMemoryStatus(GatewayRequest) returns (tr098.InternetGatewayDevice.DeviceInfo.MemoryStatus) {}
  rpc SetMemoryStatus(tr098.InternetGatewayDevice.DeviceInfo.MemoryStatus) returns (GatewayReply) {}

  rpc GetProcessStatus(GatewayRequest) returns (tr098.InternetGatewayDevice.DeviceInfo.ProcessStatus) {}
  rpc SetProcessStatus(tr098.InternetGatewayDevice.DeviceInfo.ProcessStatus) returns (GatewayReply) {}

  rpc GetProcess(GatewayRequest) returns (stream tr098.InternetGatewayDevice.DeviceInfo.ProcessStatus.Process) {}
  rpc SetProcess(stream tr098.InternetGatewayDevice.DeviceInfo.ProcessStatus.Process) returns (GatewayReply) {}

  rpc GetTemperatureStatus(GatewayRequest) returns (tr098.InternetGatewayDevice.DeviceInfo.TemperatureStatus) {}
  rpc SetTemperatureStatus(tr098.InternetGatewayDevice.DeviceInfo.TemperatureStatus) returns (GatewayReply) {}

  rpc GetTemperatureSensor(GatewayRequest) returns (stream tr098.InternetGatewayDevice.DeviceInfo.TemperatureStatus.TemperatureSensor) {}
  rpc SetTemperatureSensor(stream tr098.InternetGatewayDevice.DeviceInfo.TemperatureStatus.TemperatureSensor) returns (GatewayReply) {}

  rpc GetNetworkProperties(GatewayRequest) returns (tr098.InternetGatewayDevice.DeviceInfo.NetworkProperties) {}
  rpc SetNetworkProperties(tr098.InternetGatewayDevice.DeviceInfo.NetworkProperties) returns (GatewayReply) {}

  rpc GetSupportedDataModel(GatewayRequest) returns (stream tr098.InternetGatewayDevice.DeviceInfo.SupportedDataModel) {}
  rpc SetSupportedDataModel(stream tr098.InternetGatewayDevice.DeviceInfo.SupportedDataModel) returns (GatewayReply) {}

  rpc GetProcessor(GatewayRequest) returns (stream tr098.InternetGatewayDevice.DeviceInfo.Processor) {}
  rpc SetProcessor(stream tr098.InternetGatewayDevice.DeviceInfo.Processor) returns (GatewayReply) {}

  rpc GetVendorLogFile(GatewayRequest) returns (stream tr098.InternetGatewayDevice.DeviceInfo.VendorLogFile) {}
  rpc SetVendorLogFile(stream tr098.InternetGatewayDevice.DeviceInfo.VendorLogFile) returns (GatewayReply) {}

  rpc GetProxierInfo(GatewayRequest) returns (tr098.InternetGatewayDevice.DeviceInfo.ProxierInfo) {}
  rpc SetProxierInfo(tr098.InternetGatewayDevice.DeviceInfo.ProxierInfo) returns (GatewayReply) {}

  rpc GetLocation(GatewayRequest) returns (stream tr098.InternetGatewayDevice.DeviceInfo.Location) {}
  rpc SetLocation(stream tr098.InternetGatewayDevice.DeviceInfo.Location) returns (GatewayReply) {}

  rpc GetDeviceConfig(GatewayRequest) returns (tr098.InternetGatewayDevice.DeviceConfig) {}
  rpc SetDeviceConfig(tr098.InternetGatewayDevice.DeviceConfig) returns (GatewayReply) {}

  rpc GetManagementServer(GatewayRequest) returns (tr098.InternetGatewayDevice.ManagementServer) {}
  rpc SetManagementServer(tr098.InternetGatewayDevice.ManagementServer) returns (GatewayReply) {}

  rpc GetManageableDevice(GatewayRequest) returns (stream tr098.InternetGatewayDevice.ManagementServer.ManageableDevice) {}
  rpc SetManageableDevice(stream tr098.InternetGatewayDevice.ManagementServer.ManageableDevice) returns (GatewayReply) {}

  rpc GetAutonomousTransferCompletePolicy(GatewayRequest) returns (tr098.InternetGatewayDevice.ManagementServer.AutonomousTransferCompletePolicy) {}
  rpc SetAutonomousTransferCompletePolicy(tr098.InternetGatewayDevice.ManagementServer.AutonomousTransferCompletePolicy) returns (GatewayReply) {}

  rpc GetDUStateChangeComplPolicy(GatewayRequest) returns (tr098.InternetGatewayDevice.ManagementServer.DUStateChangeComplPolicy) {}
  rpc SetDUStateChangeComplPolicy(tr098.InternetGatewayDevice.ManagementServer.DUStateChangeComplPolicy) returns (GatewayReply) {}

  rpc GetEmbeddedDevice(GatewayRequest) returns (stream tr098.InternetGatewayDevice.ManagementServer.EmbeddedDevice) {}
  rpc SetEmbeddedDevice(stream tr098.InternetGatewayDevice.ManagementServer.EmbeddedDevice) returns (GatewayReply) {}

  rpc GetVirtualDevice(GatewayRequest) returns (stream tr098.InternetGatewayDevice.ManagementServer.VirtualDevice) {}
  rpc SetVirtualDevice(stream tr098.InternetGatewayDevice.ManagementServer.VirtualDevice) returns (GatewayReply) {}

  rpc GetStandbyPolicy(GatewayRequest) returns (tr098.InternetGatewayDevice.ManagementServer.StandbyPolicy) {}
  rpc SetStandbyPolicy(tr098.InternetGatewayDevice.ManagementServer.StandbyPolicy) returns (GatewayReply) {}

  rpc GetInformParameter(GatewayRequest) returns (stream tr098.InternetGatewayDevice.ManagementServer.InformParameter) {}
  rpc SetInformParameter(stream tr098.InternetGatewayDevice.ManagementServer.InformParameter) returns (GatewayReply) {}

  rpc GetTime(GatewayRequest) returns (tr098.InternetGatewayDevice.Time) {}
  rpc SetTime(tr098.InternetGatewayDevice.Time) returns (GatewayReply) {}

  rpc GetUserInterface(GatewayRequest) returns (tr098.InternetGatewayDevice.UserInterface) {}
  rpc SetUserInterface(tr098.InternetGatewayDevice.UserInterface) returns (GatewayReply) {}

  rpc GetRemoteAccess(GatewayRequest) returns (tr098.InternetGatewayDevice.UserInterface.RemoteAccess) {}
  rpc SetRemoteAccess(tr098.InternetGatewayDevice.UserInterface.RemoteAccess) returns (GatewayReply) {}

  rpc GetLocalDisplay(GatewayRequest) returns (tr098.InternetGatewayDevice.UserInterface.LocalDisplay) {}
  rpc SetLocalDisplay(tr098.InternetGatewayDevice.UserInterface.LocalDisplay) returns (GatewayReply) {}

  rpc GetLayer3Forwarding(GatewayRequest) returns (tr098.InternetGatewayDevice.Layer3Forwarding) {}
  rpc SetLayer3Forwarding(tr098.InternetGatewayDevice.Layer3Forwarding) returns (GatewayReply) {}

  rpc GetForwarding(GatewayRequest) returns (stream tr098.InternetGatewayDevice.Layer3Forwarding.Forwarding) {}
  rpc SetForwarding(stream tr098.InternetGatewayDevice.Layer3Forwarding.Forwarding) returns (GatewayReply) {}

  rpc GetLayer2Bridging(GatewayRequest) returns (tr098.InternetGatewayDevice.Layer2Bridging) {}
  rpc SetLayer2Bridging(tr098.InternetGatewayDevice.Layer2Bridging) returns (GatewayReply) {}

  rpc GetBridge(GatewayRequest) returns (stream tr098.InternetGatewayDevice.Layer2Bridging.Bridge) {}
  rpc SetBridge(stream tr098.InternetGatewayDevice.Layer2Bridging.Bridge) returns (GatewayReply) {}

  rpc GetPort(GatewayRequest) returns (stream tr098.InternetGatewayDevice.Layer2Bridging.Bridge.Port) {}
  rpc SetPort(stream tr098.InternetGatewayDevice.Layer2Bridging.Bridge.Port) returns (GatewayReply) {}

  rpc GetVLAN(GatewayRequest) returns (stream tr098.InternetGatewayDevice.Layer2Bridging.Bridge.VLAN) {}
  rpc SetVLAN(stream tr098.InternetGatewayDevice.Layer2Bridging.Bridge.VLAN) returns (GatewayReply) {}

  rpc GetFilter(GatewayRequest) returns (stream tr098.InternetGatewayDevice.Layer2Bridging.Filter) {}
  rpc SetFilter(stream tr098.InternetGatewayDevice.Layer2Bridging.Filter) returns (GatewayReply) {}

  rpc GetMarking(GatewayRequest) returns (stream tr098.InternetGatewayDevice.Layer2Bridging.Marking) {}
  rpc SetMarking(stream tr098.InternetGatewayDevice.Layer2Bridging.Marking) returns (GatewayReply) {}

  rpc GetAvailableInterface(GatewayRequest) returns (stream tr098.InternetGatewayDevice.Layer2Bridging.AvailableInterface) {}
  rpc SetAvailableInterface(stream tr098.InternetGatewayDevice.Layer2Bridging.AvailableInterface) returns (GatewayReply) {}

  rpc GetQueueManagement(GatewayRequest) returns (tr098.InternetGatewayDevice.QueueManagement) {}
  rpc SetQueueManagement(tr098.InternetGatewayDevice.QueueManagement) returns (GatewayReply) {}

  rpc GetClassification(GatewayRequest) returns (stream tr098.InternetGatewayDevice.QueueManagement.Classification) {}
  rpc SetClassification(stream tr098.InternetGatewayDevice.QueueManagement.Classification) returns (GatewayReply) {}

  rpc GetApp(GatewayRequest) returns (stream tr098.InternetGatewayDevice.QueueManagement.App) {}
  rpc SetApp(stream tr098.InternetGatewayDevice.QueueManagement.App) returns (GatewayReply) {}

  rpc GetFlow(GatewayRequest) returns (stream tr098.InternetGatewayDevice.QueueManagement.Flow) {}
  rpc SetFlow(stream tr098.InternetGatewayDevice.QueueManagement.Flow) returns (GatewayReply) {}

  rpc GetPolicer(GatewayRequest) returns (stream tr098.InternetGatewayDevice.QueueManagement.Policer) {}
  rpc SetPolicer(stream tr098.InternetGatewayDevice.QueueManagement.Policer) returns (GatewayReply) {}

  rpc GetQueue(GatewayRequest) returns (stream tr098.InternetGatewayDevice.QueueManagement.Queue) {}
  rpc SetQueue(stream tr098.InternetGatewayDevice.QueueManagement.Queue) returns (GatewayReply) {}

  rpc GetQueueStats(GatewayRequest) returns (stream tr098.InternetGatewayDevice.QueueManagement.QueueStats) {}
  rpc SetQueueStats(stream tr098.InternetGatewayDevice.QueueManagement.QueueStats) returns (GatewayReply) {}

  rpc GetLANConfigSecurity(GatewayRequest) returns (tr098.InternetGatewayDevice.LANConfigSecurity) {}
  rpc SetLANConfigSecurity(tr098.InternetGatewayDevice.LANConfigSecurity) returns (GatewayReply) {}

  rpc GetIPPingDiagnostics(GatewayRequest) returns (tr098.InternetGatewayDevice.IPPingDiagnostics) {}
  rpc SetIPPingDiagnostics(tr098.InternetGatewayDevice.IPPingDiagnostics) returns (GatewayReply) {}

  rpc GetDownloadDiagnostics(GatewayRequest) returns (tr098.InternetGatewayDevice.DownloadDiagnostics) {}
  rpc SetDownloadDiagnostics(tr098.InternetGatewayDevice.DownloadDiagnostics) returns (GatewayReply) {}

  rpc GetUploadDiagnostics(GatewayRequest) returns (tr098.InternetGatewayDevice.UploadDiagnostics) {}
  rpc SetUploadDiagnostics(tr098.InternetGatewayDevice.UploadDiagnostics) returns (GatewayReply) {}

  rpc GetUDPEchoConfig(GatewayRequest) returns (tr098.InternetGatewayDevice.UDPEchoConfig) {}
  rpc SetUDPEchoConfig(tr098.InternetGatewayDevice.UDPEchoConfig) returns (GatewayReply) {}

  rpc GetLANDevice(GatewayRequest) returns (stream tr098.InternetGatewayDevice.LANDevice) {}
  rpc SetLANDevice(stream tr098.InternetGatewayDevice.LANDevice) returns (GatewayReply) {}

  rpc GetLANHostConfigManagement(GatewayRequest) returns (tr098.InternetGatewayDevice.LANDevice.LANHostConfigManagement) {}
  rpc SetLANHostConfigManagement(tr098.InternetGatewayDevice.LANDevice.LANHostConfigManagement) returns (GatewayReply) {}

  rpc GetIPInterface(GatewayRequest) returns (stream tr098.InternetGatewayDevice.LANDevice.LANHostConfigManagement.IPInterface) {}
  rpc SetIPInterface(stream tr098.InternetGatewayDevice.LANDevice.LANHostConfigManagement.IPInterface) returns (GatewayReply) {}

  rpc GetDHCPStaticAddress(GatewayRequest) returns (stream tr098.InternetGatewayDevice.LANDevice.LANHostConfigManagement.DHCPStaticAddress) {}
  rpc SetDHCPStaticAddress(stream tr098.InternetGatewayDevice.LANDevice.LANHostConfigManagement.DHCPStaticAddress) returns (GatewayReply) {}

  rpc GetDHCPOption(GatewayRequest) returns (stream tr098.InternetGatewayDevice.LANDevice.LANHostConfigManagement.DHCPOption) {}
  rpc SetDHCPOption(stream tr098.InternetGatewayDevice.LANDevice.LANHostConfigManagement.DHCPOption) returns (GatewayReply) {}

  rpc GetDHCPConditionalServingPool(GatewayRequest) returns (stream tr098.InternetGatewayDevice.LANDevice.LANHostConfigManagement.DHCPConditionalServingPool) {}
  rpc SetDHCPConditionalServingPool(stream tr098.InternetGatewayDevice.LANDevice.LANHostConfigManagement.DHCPConditionalServingPool) returns (GatewayReply) {}

  //?? rpc GetDHCPStaticAddress(GatewayRequest) returns (stream tr098.InternetGatewayDevice.LANDevice.LANHostConfigManagement.DHCPConditionalServingPool.DHCPStaticAddress) {}
  //?? rpc SetDHCPStaticAddress(stream tr098.InternetGatewayDevice.LANDevice.LANHostConfigManagement.DHCPConditionalServingPool.DHCPStaticAddress) returns (GatewayReply) {}

  //?? rpc GetDHCPOption(GatewayRequest) returns (stream tr098.InternetGatewayDevice.LANDevice.LANHostConfigManagement.DHCPConditionalServingPool.DHCPOption) {}
  //?? rpc SetDHCPOption(stream tr098.InternetGatewayDevice.LANDevice.LANHostConfigManagement.DHCPConditionalServingPool.DHCPOption) returns (GatewayReply) {}

  rpc GetLANEthernetInterfaceConfig(GatewayRequest) returns (stream tr098.InternetGatewayDevice.LANDevice.LANEthernetInterfaceConfig) {}
  rpc SetLANEthernetInterfaceConfig(stream tr098.InternetGatewayDevice.LANDevice.LANEthernetInterfaceConfig) returns (GatewayReply) {}

  rpc GetStats(GatewayRequest) returns (tr098.InternetGatewayDevice.LANDevice.LANEthernetInterfaceConfig.Stats) {}
  rpc SetStats(tr098.InternetGatewayDevice.LANDevice.LANEthernetInterfaceConfig.Stats) returns (GatewayReply) {}

  rpc GetLANUSBInterfaceConfig(GatewayRequest) returns (stream tr098.InternetGatewayDevice.LANDevice.LANUSBInterfaceConfig) {}
  rpc SetLANUSBInterfaceConfig(stream tr098.InternetGatewayDevice.LANDevice.LANUSBInterfaceConfig) returns (GatewayReply) {}

  //?? rpc GetStats(GatewayRequest) returns (tr098.InternetGatewayDevice.LANDevice.LANUSBInterfaceConfig.Stats) {}
  //?? rpc SetStats(tr098.InternetGatewayDevice.LANDevice.LANUSBInterfaceConfig.Stats) returns (GatewayReply) {}

  rpc GetWLANConfiguration(GatewayRequest) returns (stream tr098.InternetGatewayDevice.LANDevice.WLANConfiguration) {}
  rpc SetWLANConfiguration(stream tr098.InternetGatewayDevice.LANDevice.WLANConfiguration) returns (GatewayReply) {}

  rpc GetAssociatedDevice(GatewayRequest) returns (stream tr098.InternetGatewayDevice.LANDevice.WLANConfiguration.AssociatedDevice) {}
  rpc SetAssociatedDevice(stream tr098.InternetGatewayDevice.LANDevice.WLANConfiguration.AssociatedDevice) returns (GatewayReply) {}

  rpc GetWEPKey(GatewayRequest) returns (stream tr098.InternetGatewayDevice.LANDevice.WLANConfiguration.WEPKey) {}
  rpc SetWEPKey(stream tr098.InternetGatewayDevice.LANDevice.WLANConfiguration.WEPKey) returns (GatewayReply) {}

  rpc GetPreSharedKey(GatewayRequest) returns (stream tr098.InternetGatewayDevice.LANDevice.WLANConfiguration.PreSharedKey) {}
  rpc SetPreSharedKey(stream tr098.InternetGatewayDevice.LANDevice.WLANConfiguration.PreSharedKey) returns (GatewayReply) {}

  //?? rpc GetStats(GatewayRequest) returns (tr098.InternetGatewayDevice.LANDevice.WLANConfiguration.Stats) {}
  //?? rpc SetStats(tr098.InternetGatewayDevice.LANDevice.WLANConfiguration.Stats) returns (GatewayReply) {}

  rpc GetWPS(GatewayRequest) returns (tr098.InternetGatewayDevice.LANDevice.WLANConfiguration.WPS) {}
  rpc SetWPS(tr098.InternetGatewayDevice.LANDevice.WLANConfiguration.WPS) returns (GatewayReply) {}

  rpc GetRegistrar(GatewayRequest) returns (stream tr098.InternetGatewayDevice.LANDevice.WLANConfiguration.WPS.Registrar) {}
  rpc SetRegistrar(stream tr098.InternetGatewayDevice.LANDevice.WLANConfiguration.WPS.Registrar) returns (GatewayReply) {}

  rpc GetAPWMMParameter(GatewayRequest) returns (stream tr098.InternetGatewayDevice.LANDevice.WLANConfiguration.APWMMParameter) {}
  rpc SetAPWMMParameter(stream tr098.InternetGatewayDevice.LANDevice.WLANConfiguration.APWMMParameter) returns (GatewayReply) {}

  rpc GetSTAWMMParameter(GatewayRequest) returns (stream tr098.InternetGatewayDevice.LANDevice.WLANConfiguration.STAWMMParameter) {}
  rpc SetSTAWMMParameter(stream tr098.InternetGatewayDevice.LANDevice.WLANConfiguration.STAWMMParameter) returns (GatewayReply) {}

  rpc GetHosts(GatewayRequest) returns (tr098.InternetGatewayDevice.LANDevice.Hosts) {}
  rpc SetHosts(tr098.InternetGatewayDevice.LANDevice.Hosts) returns (GatewayReply) {}

  rpc GetHost(GatewayRequest) returns (stream tr098.InternetGatewayDevice.LANDevice.Hosts.Host) {}
  rpc SetHost(stream tr098.InternetGatewayDevice.LANDevice.Hosts.Host) returns (GatewayReply) {}

  rpc GetLANInterfaces(GatewayRequest) returns (tr098.InternetGatewayDevice.LANInterfaces) {}
  rpc SetLANInterfaces(tr098.InternetGatewayDevice.LANInterfaces) returns (GatewayReply) {}

  //?? rpc GetLANEthernetInterfaceConfig(GatewayRequest) returns (stream tr098.InternetGatewayDevice.LANInterfaces.LANEthernetInterfaceConfig) {}
  //?? rpc SetLANEthernetInterfaceConfig(stream tr098.InternetGatewayDevice.LANInterfaces.LANEthernetInterfaceConfig) returns (GatewayReply) {}

  //?? rpc GetLANUSBInterfaceConfig(GatewayRequest) returns (stream tr098.InternetGatewayDevice.LANInterfaces.LANUSBInterfaceConfig) {}
  //?? rpc SetLANUSBInterfaceConfig(stream tr098.InternetGatewayDevice.LANInterfaces.LANUSBInterfaceConfig) returns (GatewayReply) {}

  //?? rpc GetWLANConfiguration(GatewayRequest) returns (stream tr098.InternetGatewayDevice.LANInterfaces.WLANConfiguration) {}
  //?? rpc SetWLANConfiguration(stream tr098.InternetGatewayDevice.LANInterfaces.WLANConfiguration) returns (GatewayReply) {}

  rpc GetWANDevice(GatewayRequest) returns (stream tr098.InternetGatewayDevice.WANDevice) {}
  rpc SetWANDevice(stream tr098.InternetGatewayDevice.WANDevice) returns (GatewayReply) {}

  rpc GetWANCommonInterfaceConfig(GatewayRequest) returns (tr098.InternetGatewayDevice.WANDevice.WANCommonInterfaceConfig) {}
  rpc SetWANCommonInterfaceConfig(tr098.InternetGatewayDevice.WANDevice.WANCommonInterfaceConfig) returns (GatewayReply) {}

  rpc GetConnection(GatewayRequest) returns (stream tr098.InternetGatewayDevice.WANDevice.WANCommonInterfaceConfig.Connection) {}
  rpc SetConnection(stream tr098.InternetGatewayDevice.WANDevice.WANCommonInterfaceConfig.Connection) returns (GatewayReply) {}

  rpc GetWANDSLInterfaceConfig(GatewayRequest) returns (tr098.InternetGatewayDevice.WANDevice.WANDSLInterfaceConfig) {}
  rpc SetWANDSLInterfaceConfig(tr098.InternetGatewayDevice.WANDevice.WANDSLInterfaceConfig) returns (GatewayReply) {}

  //?? rpc GetStats(GatewayRequest) returns (tr098.InternetGatewayDevice.WANDevice.WANDSLInterfaceConfig.Stats) {}
  //?? rpc SetStats(tr098.InternetGatewayDevice.WANDevice.WANDSLInterfaceConfig.Stats) returns (GatewayReply) {}

  rpc GetTotal(GatewayRequest) returns (tr098.InternetGatewayDevice.WANDevice.WANDSLInterfaceConfig.Stats.Total) {}
  rpc SetTotal(tr098.InternetGatewayDevice.WANDevice.WANDSLInterfaceConfig.Stats.Total) returns (GatewayReply) {}

  rpc GetShowtime(GatewayRequest) returns (tr098.InternetGatewayDevice.WANDevice.WANDSLInterfaceConfig.Stats.Showtime) {}
  rpc SetShowtime(tr098.InternetGatewayDevice.WANDevice.WANDSLInterfaceConfig.Stats.Showtime) returns (GatewayReply) {}

  rpc GetLastShowtime(GatewayRequest) returns (tr098.InternetGatewayDevice.WANDevice.WANDSLInterfaceConfig.Stats.LastShowtime) {}
  rpc SetLastShowtime(tr098.InternetGatewayDevice.WANDevice.WANDSLInterfaceConfig.Stats.LastShowtime) returns (GatewayReply) {}

  rpc GetCurrentDay(GatewayRequest) returns (tr098.InternetGatewayDevice.WANDevice.WANDSLInterfaceConfig.Stats.CurrentDay) {}
  rpc SetCurrentDay(tr098.InternetGatewayDevice.WANDevice.WANDSLInterfaceConfig.Stats.CurrentDay) returns (GatewayReply) {}

  rpc GetQuarterHour(GatewayRequest) returns (tr098.InternetGatewayDevice.WANDevice.WANDSLInterfaceConfig.Stats.QuarterHour) {}
  rpc SetQuarterHour(tr098.InternetGatewayDevice.WANDevice.WANDSLInterfaceConfig.Stats.QuarterHour) returns (GatewayReply) {}

  rpc GetTestParams(GatewayRequest) returns (tr098.InternetGatewayDevice.WANDevice.WANDSLInterfaceConfig.TestParams) {}
  rpc SetTestParams(tr098.InternetGatewayDevice.WANDevice.WANDSLInterfaceConfig.TestParams) returns (GatewayReply) {}

  rpc GetWANEthernetInterfaceConfig(GatewayRequest) returns (tr098.InternetGatewayDevice.WANDevice.WANEthernetInterfaceConfig) {}
  rpc SetWANEthernetInterfaceConfig(tr098.InternetGatewayDevice.WANDevice.WANEthernetInterfaceConfig) returns (GatewayReply) {}

  //?? rpc GetStats(GatewayRequest) returns (tr098.InternetGatewayDevice.WANDevice.WANEthernetInterfaceConfig.Stats) {}
  //?? rpc SetStats(tr098.InternetGatewayDevice.WANDevice.WANEthernetInterfaceConfig.Stats) returns (GatewayReply) {}

  rpc GetWANDSLConnectionManagement(GatewayRequest) returns (tr098.InternetGatewayDevice.WANDevice.WANDSLConnectionManagement) {}
  rpc SetWANDSLConnectionManagement(tr098.InternetGatewayDevice.WANDevice.WANDSLConnectionManagement) returns (GatewayReply) {}

  rpc GetConnectionService(GatewayRequest) returns (stream tr098.InternetGatewayDevice.WANDevice.WANDSLConnectionManagement.ConnectionService) {}
  rpc SetConnectionService(stream tr098.InternetGatewayDevice.WANDevice.WANDSLConnectionManagement.ConnectionService) returns (GatewayReply) {}

  rpc GetWANDSLDiagnostics(GatewayRequest) returns (tr098.InternetGatewayDevice.WANDevice.WANDSLDiagnostics) {}
  rpc SetWANDSLDiagnostics(tr098.InternetGatewayDevice.WANDevice.WANDSLDiagnostics) returns (GatewayReply) {}

  rpc GetWANConnectionDevice(GatewayRequest) returns (stream tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice) {}
  rpc SetWANConnectionDevice(stream tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice) returns (GatewayReply) {}

  rpc GetWANDSLLinkConfig(GatewayRequest) returns (tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANDSLLinkConfig) {}
  rpc SetWANDSLLinkConfig(tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANDSLLinkConfig) returns (GatewayReply) {}

  rpc GetWANATMF5LoopbackDiagnostics(GatewayRequest) returns (tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANATMF5LoopbackDiagnostics) {}
  rpc SetWANATMF5LoopbackDiagnostics(tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANATMF5LoopbackDiagnostics) returns (GatewayReply) {}

  rpc GetWANPTMLinkConfig(GatewayRequest) returns (tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANPTMLinkConfig) {}
  rpc SetWANPTMLinkConfig(tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANPTMLinkConfig) returns (GatewayReply) {}

  //?? rpc GetStats(GatewayRequest) returns (tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANPTMLinkConfig.Stats) {}
  //?? rpc SetStats(tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANPTMLinkConfig.Stats) returns (GatewayReply) {}

  rpc GetWANEthernetLinkConfig(GatewayRequest) returns (tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANEthernetLinkConfig) {}
  rpc SetWANEthernetLinkConfig(tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANEthernetLinkConfig) returns (GatewayReply) {}

  rpc GetWANPOTSLinkConfig(GatewayRequest) returns (tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANPOTSLinkConfig) {}
  rpc SetWANPOTSLinkConfig(tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANPOTSLinkConfig) returns (GatewayReply) {}

  rpc GetWANIPConnection(GatewayRequest) returns (stream tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANIPConnection) {}
  rpc SetWANIPConnection(stream tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANIPConnection) returns (GatewayReply) {}

  rpc GetDHCPClient(GatewayRequest) returns (tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANIPConnection.DHCPClient) {}
  rpc SetDHCPClient(tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANIPConnection.DHCPClient) returns (GatewayReply) {}

  rpc GetSentDHCPOption(GatewayRequest) returns (stream tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANIPConnection.DHCPClient.SentDHCPOption) {}
  rpc SetSentDHCPOption(stream tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANIPConnection.DHCPClient.SentDHCPOption) returns (GatewayReply) {}

  rpc GetReqDHCPOption(GatewayRequest) returns (stream tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANIPConnection.DHCPClient.ReqDHCPOption) {}
  rpc SetReqDHCPOption(stream tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANIPConnection.DHCPClient.ReqDHCPOption) returns (GatewayReply) {}

  rpc GetPortMapping(GatewayRequest) returns (stream tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANIPConnection.PortMapping) {}
  rpc SetPortMapping(stream tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANIPConnection.PortMapping) returns (GatewayReply) {}

  //?? rpc GetStats(GatewayRequest) returns (tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANIPConnection.Stats) {}
  //?? rpc SetStats(tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANIPConnection.Stats) returns (GatewayReply) {}

  rpc GetWANPPPConnection(GatewayRequest) returns (stream tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANPPPConnection) {}
  rpc SetWANPPPConnection(stream tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANPPPConnection) returns (GatewayReply) {}

  //?? rpc GetPortMapping(GatewayRequest) returns (stream tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANPPPConnection.PortMapping) {}
  //?? rpc SetPortMapping(stream tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANPPPConnection.PortMapping) returns (GatewayReply) {}

  //?? rpc GetStats(GatewayRequest) returns (tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANPPPConnection.Stats) {}
  //?? rpc SetStats(tr098.InternetGatewayDevice.WANDevice.WANConnectionDevice.WANPPPConnection.Stats) returns (GatewayReply) {}

  rpc GetCaptivePortal(GatewayRequest) returns (tr098.InternetGatewayDevice.CaptivePortal) {}
  rpc SetCaptivePortal(tr098.InternetGatewayDevice.CaptivePortal) returns (GatewayReply) {}

  rpc GetTraceRouteDiagnostics(GatewayRequest) returns (tr098.InternetGatewayDevice.TraceRouteDiagnostics) {}
  rpc SetTraceRouteDiagnostics(tr098.InternetGatewayDevice.TraceRouteDiagnostics) returns (GatewayReply) {}

  rpc GetRouteHops(GatewayRequest) returns (stream tr098.InternetGatewayDevice.TraceRouteDiagnostics.RouteHops) {}
  rpc SetRouteHops(stream tr098.InternetGatewayDevice.TraceRouteDiagnostics.RouteHops) returns (GatewayReply) {}

  rpc GetUser(GatewayRequest) returns (stream tr098.InternetGatewayDevice.User) {}
  rpc SetUser(stream tr098.InternetGatewayDevice.User) returns (GatewayReply) {}

  rpc GetUPnP(GatewayRequest) returns (tr098.InternetGatewayDevice.UPnP) {}
  rpc SetUPnP(tr098.InternetGatewayDevice.UPnP) returns (GatewayReply) {}

  rpc GetDevice(GatewayRequest) returns (tr098.InternetGatewayDevice.UPnP.Device) {}
  rpc SetDevice(tr098.InternetGatewayDevice.UPnP.Device) returns (GatewayReply) {}

  //?? rpc GetCapabilities(GatewayRequest) returns (tr098.InternetGatewayDevice.UPnP.Device.Capabilities) {}
  //?? rpc SetCapabilities(tr098.InternetGatewayDevice.UPnP.Device.Capabilities) returns (GatewayReply) {}

  rpc GetDiscovery(GatewayRequest) returns (tr098.InternetGatewayDevice.UPnP.Discovery) {}
  rpc SetDiscovery(tr098.InternetGatewayDevice.UPnP.Discovery) returns (GatewayReply) {}

  rpc GetRootDevice(GatewayRequest) returns (stream tr098.InternetGatewayDevice.UPnP.Discovery.RootDevice) {}
  rpc SetRootDevice(stream tr098.InternetGatewayDevice.UPnP.Discovery.RootDevice) returns (GatewayReply) {}

  //?? rpc GetDevice(GatewayRequest) returns (stream tr098.InternetGatewayDevice.UPnP.Discovery.Device) {}
  //?? rpc SetDevice(stream tr098.InternetGatewayDevice.UPnP.Discovery.Device) returns (GatewayReply) {}

  rpc GetService(GatewayRequest) returns (stream tr098.InternetGatewayDevice.UPnP.Discovery.Service) {}
  rpc SetService(stream tr098.InternetGatewayDevice.UPnP.Discovery.Service) returns (GatewayReply) {}

  rpc GetDescription(GatewayRequest) returns (tr098.InternetGatewayDevice.UPnP.Description) {}
  rpc SetDescription(tr098.InternetGatewayDevice.UPnP.Description) returns (GatewayReply) {}

  rpc GetDeviceDescription(GatewayRequest) returns (stream tr098.InternetGatewayDevice.UPnP.Description.DeviceDescription) {}
  rpc SetDeviceDescription(stream tr098.InternetGatewayDevice.UPnP.Description.DeviceDescription) returns (GatewayReply) {}

  rpc GetDeviceInstance(GatewayRequest) returns (stream tr098.InternetGatewayDevice.UPnP.Description.DeviceInstance) {}
  rpc SetDeviceInstance(stream tr098.InternetGatewayDevice.UPnP.Description.DeviceInstance) returns (GatewayReply) {}

  rpc GetServiceInstance(GatewayRequest) returns (stream tr098.InternetGatewayDevice.UPnP.Description.ServiceInstance) {}
  rpc SetServiceInstance(stream tr098.InternetGatewayDevice.UPnP.Description.ServiceInstance) returns (GatewayReply) {}

  rpc GetDLNA(GatewayRequest) returns (tr098.InternetGatewayDevice.DLNA) {}
  rpc SetDLNA(tr098.InternetGatewayDevice.DLNA) returns (GatewayReply) {}

  //?? rpc GetCapabilities(GatewayRequest) returns (tr098.InternetGatewayDevice.DLNA.Capabilities) {}
  //?? rpc SetCapabilities(tr098.InternetGatewayDevice.DLNA.Capabilities) returns (GatewayReply) {}

  rpc GetSmartCardReader(GatewayRequest) returns (stream tr098.InternetGatewayDevice.SmartCardReader) {}
  rpc SetSmartCardReader(stream tr098.InternetGatewayDevice.SmartCardReader) returns (GatewayReply) {}

  rpc GetSmartCard(GatewayRequest) returns (tr098.InternetGatewayDevice.SmartCardReader.SmartCard) {}
  rpc SetSmartCard(tr098.InternetGatewayDevice.SmartCardReader.SmartCard) returns (GatewayReply) {}

  rpc GetSelfTestDiagnostics(GatewayRequest) returns (tr098.InternetGatewayDevice.SelfTestDiagnostics) {}
  rpc SetSelfTestDiagnostics(tr098.InternetGatewayDevice.SelfTestDiagnostics) returns (GatewayReply) {}

  rpc GetNSLookupDiagnostics(GatewayRequest) returns (tr098.InternetGatewayDevice.NSLookupDiagnostics) {}
  rpc SetNSLookupDiagnostics(tr098.InternetGatewayDevice.NSLookupDiagnostics) returns (GatewayReply) {}

  rpc GetResult(GatewayRequest) returns (stream tr098.InternetGatewayDevice.NSLookupDiagnostics.Result) {}
  rpc SetResult(stream tr098.InternetGatewayDevice.NSLookupDiagnostics.Result) returns (GatewayReply) {}

  rpc GetFirewall(GatewayRequest) returns (tr098.InternetGatewayDevice.Firewall) {}
  rpc SetFirewall(tr098.InternetGatewayDevice.Firewall) returns (GatewayReply) {}

  rpc GetUSBHosts(GatewayRequest) returns (tr098.InternetGatewayDevice.USBHosts) {}
  rpc SetUSBHosts(tr098.InternetGatewayDevice.USBHosts) returns (GatewayReply) {}

  //?? rpc GetHost(GatewayRequest) returns (stream tr098.InternetGatewayDevice.USBHosts.Host) {}
  //?? rpc SetHost(stream tr098.InternetGatewayDevice.USBHosts.Host) returns (GatewayReply) {}

  //?? rpc GetDevice(GatewayRequest) returns (stream tr098.InternetGatewayDevice.USBHosts.Host.Device) {}
  //?? rpc SetDevice(stream tr098.InternetGatewayDevice.USBHosts.Host.Device) returns (GatewayReply) {}

  rpc GetConfiguration(GatewayRequest) returns (stream tr098.InternetGatewayDevice.USBHosts.Host.Device.Configuration) {}
  rpc SetConfiguration(stream tr098.InternetGatewayDevice.USBHosts.Host.Device.Configuration) returns (GatewayReply) {}

  rpc GetInterface(GatewayRequest) returns (stream tr098.InternetGatewayDevice.USBHosts.Host.Device.Configuration.Interface) {}
  rpc SetInterface(stream tr098.InternetGatewayDevice.USBHosts.Host.Device.Configuration.Interface) returns (GatewayReply) {}

  rpc GetPeriodicStatistics(GatewayRequest) returns (tr098.InternetGatewayDevice.PeriodicStatistics) {}
  rpc SetPeriodicStatistics(tr098.InternetGatewayDevice.PeriodicStatistics) returns (GatewayReply) {}

  rpc GetSampleSet(GatewayRequest) returns (stream tr098.InternetGatewayDevice.PeriodicStatistics.SampleSet) {}
  rpc SetSampleSet(stream tr098.InternetGatewayDevice.PeriodicStatistics.SampleSet) returns (GatewayReply) {}

  rpc GetParameter(GatewayRequest) returns (stream tr098.InternetGatewayDevice.PeriodicStatistics.SampleSet.Parameter) {}
  rpc SetParameter(stream tr098.InternetGatewayDevice.PeriodicStatistics.SampleSet.Parameter) returns (GatewayReply) {}

  rpc GetDownloadAvailability(GatewayRequest) returns (tr098.InternetGatewayDevice.DownloadAvailability) {}
  rpc SetDownloadAvailability(tr098.InternetGatewayDevice.DownloadAvailability) returns (GatewayReply) {}

  rpc GetAnnouncement(GatewayRequest) returns (tr098.InternetGatewayDevice.DownloadAvailability.Announcement) {}
  rpc SetAnnouncement(tr098.InternetGatewayDevice.DownloadAvailability.Announcement) returns (GatewayReply) {}

  rpc GetGroup(GatewayRequest) returns (stream tr098.InternetGatewayDevice.DownloadAvailability.Announcement.Group) {}
  rpc SetGroup(stream tr098.InternetGatewayDevice.DownloadAvailability.Announcement.Group) returns (GatewayReply) {}

  rpc GetQuery(GatewayRequest) returns (tr098.InternetGatewayDevice.DownloadAvailability.Query) {}
  rpc SetQuery(tr098.InternetGatewayDevice.DownloadAvailability.Query) returns (GatewayReply) {}

  rpc GetSoftwareModules(GatewayRequest) returns (tr098.InternetGatewayDevice.SoftwareModules) {}
  rpc SetSoftwareModules(tr098.InternetGatewayDevice.SoftwareModules) returns (GatewayReply) {}

  rpc GetExecEnv(GatewayRequest) returns (stream tr098.InternetGatewayDevice.SoftwareModules.ExecEnv) {}
  rpc SetExecEnv(stream tr098.InternetGatewayDevice.SoftwareModules.ExecEnv) returns (GatewayReply) {}

  rpc GetDeploymentUnit(GatewayRequest) returns (stream tr098.InternetGatewayDevice.SoftwareModules.DeploymentUnit) {}
  rpc SetDeploymentUnit(stream tr098.InternetGatewayDevice.SoftwareModules.DeploymentUnit) returns (GatewayReply) {}

  rpc GetExecutionUnit(GatewayRequest) returns (stream tr098.InternetGatewayDevice.SoftwareModules.ExecutionUnit) {}
  rpc SetExecutionUnit(stream tr098.InternetGatewayDevice.SoftwareModules.ExecutionUnit) returns (GatewayReply) {}

  rpc GetExtensions(GatewayRequest) returns (tr098.InternetGatewayDevice.SoftwareModules.ExecutionUnit.Extensions) {}
  rpc SetExtensions(tr098.InternetGatewayDevice.SoftwareModules.ExecutionUnit.Extensions) returns (GatewayReply) {}

  rpc GetSecurity(GatewayRequest) returns (tr098.InternetGatewayDevice.Security) {}
  rpc SetSecurity(tr098.InternetGatewayDevice.Security) returns (GatewayReply) {}

  rpc GetCertificate(GatewayRequest) returns (stream tr098.InternetGatewayDevice.Security.Certificate) {}
  rpc SetCertificate(stream tr098.InternetGatewayDevice.Security.Certificate) returns (GatewayReply) {}

  rpc GetFaultMgmt(GatewayRequest) returns (tr098.InternetGatewayDevice.FaultMgmt) {}
  rpc SetFaultMgmt(tr098.InternetGatewayDevice.FaultMgmt) returns (GatewayReply) {}

  rpc GetSupportedAlarm(GatewayRequest) returns (stream tr098.InternetGatewayDevice.FaultMgmt.SupportedAlarm) {}
  rpc SetSupportedAlarm(stream tr098.InternetGatewayDevice.FaultMgmt.SupportedAlarm) returns (GatewayReply) {}

  rpc GetCurrentAlarm(GatewayRequest) returns (stream tr098.InternetGatewayDevice.FaultMgmt.CurrentAlarm) {}
  rpc SetCurrentAlarm(stream tr098.InternetGatewayDevice.FaultMgmt.CurrentAlarm) returns (GatewayReply) {}

  rpc GetHistoryEvent(GatewayRequest) returns (stream tr098.InternetGatewayDevice.FaultMgmt.HistoryEvent) {}
  rpc SetHistoryEvent(stream tr098.InternetGatewayDevice.FaultMgmt.HistoryEvent) returns (GatewayReply) {}

  rpc GetExpeditedEvent(GatewayRequest) returns (stream tr098.InternetGatewayDevice.FaultMgmt.ExpeditedEvent) {}
  rpc SetExpeditedEvent(stream tr098.InternetGatewayDevice.FaultMgmt.ExpeditedEvent) returns (GatewayReply) {}

  rpc GetQueuedEvent(GatewayRequest) returns (stream tr098.InternetGatewayDevice.FaultMgmt.QueuedEvent) {}
  rpc SetQueuedEvent(stream tr098.InternetGatewayDevice.FaultMgmt.QueuedEvent) returns (GatewayReply) {}

  rpc GetFAP(GatewayRequest) returns (tr098.InternetGatewayDevice.FAP) {}
  rpc SetFAP(tr098.InternetGatewayDevice.FAP) returns (GatewayReply) {}

  rpc GetGPS(GatewayRequest) returns (tr098.InternetGatewayDevice.FAP.GPS) {}
  rpc SetGPS(tr098.InternetGatewayDevice.FAP.GPS) returns (GatewayReply) {}

  rpc GetContinuousGPSStatus(GatewayRequest) returns (tr098.InternetGatewayDevice.FAP.GPS.ContinuousGPSStatus) {}
  rpc SetContinuousGPSStatus(tr098.InternetGatewayDevice.FAP.GPS.ContinuousGPSStatus) returns (GatewayReply) {}

  rpc GetAGPSServerConfig(GatewayRequest) returns (tr098.InternetGatewayDevice.FAP.GPS.AGPSServerConfig) {}
  rpc SetAGPSServerConfig(tr098.InternetGatewayDevice.FAP.GPS.AGPSServerConfig) returns (GatewayReply) {}

  rpc GetTunnel(GatewayRequest) returns (tr098.InternetGatewayDevice.FAP.Tunnel) {}
  rpc SetTunnel(tr098.InternetGatewayDevice.FAP.Tunnel) returns (GatewayReply) {}

  rpc GetCryptoProfile(GatewayRequest) returns (stream tr098.InternetGatewayDevice.FAP.Tunnel.CryptoProfile) {}
  rpc SetCryptoProfile(stream tr098.InternetGatewayDevice.FAP.Tunnel.CryptoProfile) returns (GatewayReply) {}

  rpc GetIKESA(GatewayRequest) returns (stream tr098.InternetGatewayDevice.FAP.Tunnel.IKESA) {}
  rpc SetIKESA(stream tr098.InternetGatewayDevice.FAP.Tunnel.IKESA) returns (GatewayReply) {}

  rpc GetChildSA(GatewayRequest) returns (stream tr098.InternetGatewayDevice.FAP.Tunnel.ChildSA) {}
  rpc SetChildSA(stream tr098.InternetGatewayDevice.FAP.Tunnel.ChildSA) returns (GatewayReply) {}

  rpc GetVirtualInterface(GatewayRequest) returns (stream tr098.InternetGatewayDevice.FAP.Tunnel.VirtualInterface) {}
  rpc SetVirtualInterface(stream tr098.InternetGatewayDevice.FAP.Tunnel.VirtualInterface) returns (GatewayReply) {}

  rpc GetPerfMgmt(GatewayRequest) returns (tr098.InternetGatewayDevice.FAP.PerfMgmt) {}
  rpc SetPerfMgmt(tr098.InternetGatewayDevice.FAP.PerfMgmt) returns (GatewayReply) {}

  rpc GetConfig(GatewayRequest) returns (stream tr098.InternetGatewayDevice.FAP.PerfMgmt.Config) {}
  rpc SetConfig(stream tr098.InternetGatewayDevice.FAP.PerfMgmt.Config) returns (GatewayReply) {}

  rpc GetApplicationPlatform(GatewayRequest) returns (tr098.InternetGatewayDevice.FAP.ApplicationPlatform) {}
  rpc SetApplicationPlatform(tr098.InternetGatewayDevice.FAP.ApplicationPlatform) returns (GatewayReply) {}

  //?? rpc GetCapabilities(GatewayRequest) returns (tr098.InternetGatewayDevice.FAP.ApplicationPlatform.Capabilities) {}
  //?? rpc SetCapabilities(tr098.InternetGatewayDevice.FAP.ApplicationPlatform.Capabilities) returns (GatewayReply) {}

  rpc GetControl(GatewayRequest) returns (tr098.InternetGatewayDevice.FAP.ApplicationPlatform.Control) {}
  rpc SetControl(tr098.InternetGatewayDevice.FAP.ApplicationPlatform.Control) returns (GatewayReply) {}

  rpc GetFemtoAwareness(GatewayRequest) returns (tr098.InternetGatewayDevice.FAP.ApplicationPlatform.Control.FemtoAwareness) {}
  rpc SetFemtoAwareness(tr098.InternetGatewayDevice.FAP.ApplicationPlatform.Control.FemtoAwareness) returns (GatewayReply) {}

  rpc GetSMS(GatewayRequest) returns (tr098.InternetGatewayDevice.FAP.ApplicationPlatform.Control.SMS) {}
  rpc SetSMS(tr098.InternetGatewayDevice.FAP.ApplicationPlatform.Control.SMS) returns (GatewayReply) {}

  rpc GetMMS(GatewayRequest) returns (tr098.InternetGatewayDevice.FAP.ApplicationPlatform.Control.MMS) {}
  rpc SetMMS(tr098.InternetGatewayDevice.FAP.ApplicationPlatform.Control.MMS) returns (GatewayReply) {}

  rpc GetTerminalLocation(GatewayRequest) returns (tr098.InternetGatewayDevice.FAP.ApplicationPlatform.Control.TerminalLocation) {}
  rpc SetTerminalLocation(tr098.InternetGatewayDevice.FAP.ApplicationPlatform.Control.TerminalLocation) returns (GatewayReply) {}

  rpc GetMonitoring(GatewayRequest) returns (tr098.InternetGatewayDevice.FAP.ApplicationPlatform.Monitoring) {}
  rpc SetMonitoring(tr098.InternetGatewayDevice.FAP.ApplicationPlatform.Monitoring) returns (GatewayReply) {}

  //?? rpc GetFemtoAwareness(GatewayRequest) returns (tr098.InternetGatewayDevice.FAP.ApplicationPlatform.Monitoring.FemtoAwareness) {}
  //?? rpc SetFemtoAwareness(tr098.InternetGatewayDevice.FAP.ApplicationPlatform.Monitoring.FemtoAwareness) returns (GatewayReply) {}

  //?? rpc GetSMS(GatewayRequest) returns (tr098.InternetGatewayDevice.FAP.ApplicationPlatform.Monitoring.SMS) {}
  //?? rpc SetSMS(tr098.InternetGatewayDevice.FAP.ApplicationPlatform.Monitoring.SMS) returns (GatewayReply) {}

  //?? rpc GetMMS(GatewayRequest) returns (tr098.InternetGatewayDevice.FAP.ApplicationPlatform.Monitoring.MMS) {}
  //?? rpc SetMMS(tr098.InternetGatewayDevice.FAP.ApplicationPlatform.Monitoring.MMS) returns (GatewayReply) {}

  //?? rpc GetTerminalLocation(GatewayRequest) returns (tr098.InternetGatewayDevice.FAP.ApplicationPlatform.Monitoring.TerminalLocation) {}
  //?? rpc SetTerminalLocation(tr098.InternetGatewayDevice.FAP.ApplicationPlatform.Monitoring.TerminalLocation) returns (GatewayReply) {}

  rpc GetBulkData(GatewayRequest) returns (tr098.InternetGatewayDevice.BulkData) {}
  rpc SetBulkData(tr098.InternetGatewayDevice.BulkData) returns (GatewayReply) {}

  rpc GetProfile(GatewayRequest) returns (stream tr098.InternetGatewayDevice.BulkData.Profile) {}
  rpc SetProfile(stream tr098.InternetGatewayDevice.BulkData.Profile) returns (GatewayReply) {}

  //?? rpc GetParameter(GatewayRequest) returns (stream tr098.InternetGatewayDevice.BulkData.Profile.Parameter) {}
  //?? rpc SetParameter(stream tr098.InternetGatewayDevice.BulkData.Profile.Parameter) returns (GatewayReply) {}

  rpc GetDNS(GatewayRequest) returns (tr098.InternetGatewayDevice.DNS) {}
  rpc SetDNS(tr098.InternetGatewayDevice.DNS) returns (GatewayReply) {}

  rpc GetSD(GatewayRequest) returns (tr098.InternetGatewayDevice.DNS.SD) {}
  rpc SetSD(tr098.InternetGatewayDevice.DNS.SD) returns (GatewayReply) {}

  //?? rpc GetService(GatewayRequest) returns (stream tr098.InternetGatewayDevice.DNS.SD.Service) {}
  //?? rpc SetService(stream tr098.InternetGatewayDevice.DNS.SD.Service) returns (GatewayReply) {}

  rpc GetTextRecord(GatewayRequest) returns (stream tr098.InternetGatewayDevice.DNS.SD.Service.TextRecord) {}
  rpc SetTextRecord(stream tr098.InternetGatewayDevice.DNS.SD.Service.TextRecord) returns (GatewayReply) {}

  rpc GetXMPP(GatewayRequest) returns (tr098.InternetGatewayDevice.XMPP) {}
  rpc SetXMPP(tr098.InternetGatewayDevice.XMPP) returns (GatewayReply) {}

  //?? rpc GetConnection(GatewayRequest) returns (stream tr098.InternetGatewayDevice.XMPP.Connection) {}
  //?? rpc SetConnection(stream tr098.InternetGatewayDevice.XMPP.Connection) returns (GatewayReply) {}

  rpc GetServer(GatewayRequest) returns (stream tr098.InternetGatewayDevice.XMPP.Connection.Server) {}
  rpc SetServer(stream tr098.InternetGatewayDevice.XMPP.Connection.Server) returns (GatewayReply) {}

  //?? rpc GetStats(GatewayRequest) returns (tr098.InternetGatewayDevice.XMPP.Connection.Stats) {}
  //?? rpc SetStats(tr098.InternetGatewayDevice.XMPP.Connection.Stats) returns (GatewayReply) {}

}
