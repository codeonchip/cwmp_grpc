// Generated by cwmp_proto_to_grpc.cc
// source: tr-140-1-3-0-full.proto
// 1st top-level message: StorageService
// Added service 

// tr-140-1-3-0-full.proto
// Generated by cwmp_xml_to_proto.cc
// source: tr-140-1-3-0-full.xml

syntax = "proto3";

package tr140; //!! renamed

//  uint32    storage_service_number_of_entries        = 0  ; //  mber of entries in {{object|StorageServi
message StorageService { // StorageService.{i}.
  bool      enable                                   = 1  ; //  Enables or Disables the entire Storage m
  string    alias                                    = 2  ; //  {{datatype|expand}}        }        
  uint32    physical_medium_number_of_entries        = 3  ; //  The number of instances of {{object|.Phy
  uint32    storage_array_number_of_entries          = 4  ; //  The number of instances of {{object|.Sto
  uint32    logical_volume_number_of_entries         = 5  ; //  The number of instances of {{object|.Log
  uint32    user_account_number_of_entries           = 6  ; //  The number of instances of {{object|.Use
  uint32    user_group_number_of_entries             = 7  ; //  The number of instances of {{object|.Use
  message Capabilities { // StorageService.{i}.Capabilities.
    bool      ftpcapable                               = 1  ; //  Does this device contain an FTP server a
    bool      sftpcapable                              = 2  ; //  Does this device contain an SSH FTP serv
    bool      httpcapable                              = 3  ; //  Does this device contain an HTTP server 
    bool      httpscapable                             = 4  ; //  Does this device contain an HTTPS server
    bool      httpwritable                             = 5  ; //  Does this device contain an HTTP server 
    string    supported_network_protocols              = 6  ; //  {{list}} Supported application-level net
    string    supported_file_system_types              = 7  ; //  {{list}} Supported FileSystems Types.  {
    string    supported_raid_types                     = 8  ; //  {{list}} Supported RAID types. {{enum}}
    bool      volume_encryption_capable                = 9  ; //  Does this device have the ability to enc
  }
  Capabilities capabilities = 8; // StorageService.{i}.Capabilities.
  message NetInfo { // StorageService.{i}.NetInfo.
    string    host_name                                = 1  ; //  Logical name which identifies the device
    string    domain_name                              = 2  ; //  Domain name for the device on the local 
  }
  NetInfo net_info = 9; // StorageService.{i}.NetInfo.
  message UserGroup { // StorageService.{i}.UserGroup.{i}.
    bool      enable                                   = 1  ; //  Enables or disables this group.        
    string    alias                                    = 2  ; //  {{datatype|expand}}        }        
    string    group_name                               = 3  ; //  The unique name of the group.        .
  }
  repeated UserGroup user_group = 10; // StorageService.{i}.UserGroup.{i}.
  message UserAccount { // StorageService.{i}.UserAccount.{i}.
    bool      enable                                   = 1  ; //  Enables or disables this user.        
    string    alias                                    = 2  ; //  {{datatype|expand}}        }        
    string    username                                 = 3  ; //  The unique name of the user.  Also used 
    string    password                                 = 4  ; //  Password used to authenticate the user w
    string    user_group_participation                 = 5  ; //  Represents a User Group that this User A
    bool      allow_ftpaccess                          = 6  ; //  Enables or disables access via FTP (incl
    bool      allow_httpaccess                         = 7  ; //  Enables or disables access via HTTP (inc
  }
  repeated UserAccount user_account = 11; // StorageService.{i}.UserAccount.{i}.
  message NetworkServer { // StorageService.{i}.NetworkServer.
    bool      afpenable                                = 1  ; //  Enables or disables the AFP network prot
    bool      nfsenable                                = 2  ; //  Enables or disables the NFS network prot
    bool      smbenable                                = 3  ; //  Enables or disables the SMB network prot
    bool      network_protocol_auth_req                = 4  ; //  If this parameter is set to {{false}} th
  }
  NetworkServer network_server = 12; // StorageService.{i}.NetworkServer.
  message FTPServer { // StorageService.{i}.FTPServer.
    bool      enable                                   = 1  ; //  Enables or disables the FTP server.    
    string    status                                   = 2  ; //  The current status of this FTP server. 
    uint32    max_num_users                            = 3  ; //  Maximum number of users allowed to log i
    uint32    idle_time                                = 4  ; //  Maximum amount of time in {{units}} that
    uint32    port_number                              = 5  ; //  The port number that the FTP server is l
    message AnonymousUser { // StorageService.{i}.FTPServer.AnonymousUser.
      bool      enable                                   = 1  ; //  Enables or disables support for anonymou
      string    starting_folder                          = 2  ; //  Represents the home directory for anonym
      bool      read_only_access                         = 3  ; //  If this is set to {{true}}, then the ano
    }
    AnonymousUser anonymous_user = 6; // StorageService.{i}.FTPServer.AnonymousUser.
  }
  FTPServer ftpserver = 13; // StorageService.{i}.FTPServer.
  message SFTPServer { // StorageService.{i}.SFTPServer.
    bool      enable                                   = 1  ; //  Enables or disables the SSH FTP server.
    string    status                                   = 2  ; //  The current status of this SSH FTP serve
    uint32    max_num_users                            = 3  ; //  Maximum number of users allowed to log i
    uint32    idle_time                                = 4  ; //  Maximum amount of time in {{units}} that
    uint32    port_number                              = 5  ; //  The port number that the SSH FTP server 
  }
  SFTPServer sftpserver = 14; // StorageService.{i}.SFTPServer.
  message HTTPServer { // StorageService.{i}.HTTPServer.
    bool      enable                                   = 1  ; //  Enables or disables the HTTP server.   
    string    status                                   = 2  ; //  The current status of this HTTP server.
    uint32    max_num_users                            = 3  ; //  Maximum number of users allowed to log i
    uint32    idle_time                                = 4  ; //  Maximum amount of time in {{units}} that
    bool      httpwriting_enabled                      = 5  ; //  Is support for the HTTP PUT/POST mechani
    uint32    port_number                              = 6  ; //  The port number that the HTTP server is 
    bool      authentication_req                       = 7  ; //  If {{true}}, HTTP will require login pri
  }
  HTTPServer httpserver = 15; // StorageService.{i}.HTTPServer.
  message HTTPSServer { // StorageService.{i}.HTTPSServer.
    bool      enable                                   = 1  ; //  Enables or disables the HTTPS server.  
    string    status                                   = 2  ; //  The current status of this HTTPS server.
    uint32    max_num_users                            = 3  ; //  Maximum number of users allowed to log i
    uint32    idle_time                                = 4  ; //  Maximum amount of time in {{units}} that
    bool      httpwriting_enabled                      = 5  ; //  Is support for the HTTP PUT/POST mechani
    uint32    port_number                              = 6  ; //  The port number that the HTTPS server is
    bool      authentication_req                       = 7  ; //  If {{true}}, HTTPS will require login pr
  }
  HTTPSServer httpsserver = 16; // StorageService.{i}.HTTPSServer.
  message PhysicalMedium { // StorageService.{i}.PhysicalMedium.{i}.
    string    alias                                    = 1  ; //  {{datatype|expand}}        }        
    string    name                                     = 2  ; //  A user-friendly name for this physical s
    string    vendor                                   = 3  ; //  The vendor of this physical storage medi
    string    model                                    = 4  ; //  The model name/number of this physical s
    string    serial_number                            = 5  ; //  The serial number of this physical stora
    string    firmware_version                         = 6  ; //  The firmware version for firmware contai
    string    connection_type                          = 7  ; //  The method of connection to this storage
    string    type                                     = 8  ; //  Specifies the type of the physical mediu
    bool      removable                                = 9  ; //  Is this physical storage medium removabl
    uint32    capacity                                 = 10 ; //  The formatted capacity of the physical s
    string    status                                   = 11 ; //  The general activity status of this phys
    uint32    uptime                                   = 12 ; //  Time since boot in {{units}}. This MAY r
    bool      smartcapable                             = 13 ; //  Is this physical medium capable of repor
    string    health                                   = 14 ; //  The general health of this physical stor
    bool      hot_swappable                            = 15 ; //  Is this physical medium capable of being
    message SMART { // StorageService.{i}.PhysicalMedium.{i}.SMART.
      uint32    reallocated_sectors_count                = 1  ; //  Count of reallocated sectors. When the h
      uint32    power_on_hours                           = 2  ; //  Count of hours in power-on state. It sho
      uint32    spin_retry_count                         = 3  ; //  Count of retry of spin start attempts. T
      uint32    power_cycle_count                        = 4  ; //  The count of full hard disk power on/off
      uint32    temperature                              = 5  ; //  Current internal temperature in {{units}
      uint32    reallocation_event_count                 = 6  ; //  Count of remap operations. The raw value
      uint32    current_pending_sector_count             = 7  ; //  Count of "unstable" sectors (waiting to 
      uint32    uncorrectable_sector_count               = 8  ; //  The total number of uncorrectable errors
      uint32    read_errors                              = 9  ; //  Total number of unrecoverable read error
      uint32    soft_read_errors                         = 10 ; //  Total number of off-track errors.      
      uint32    write_errors                             = 11 ; //  Total number of errors when writing a se
      uint32    spares_remaining                         = 12 ; //  Percentage of the spare sectors that can
      int32     predicted_failure                        = 13 ; //  Estimated number of {{units}} until the 
    }
    SMART smart = 16; // StorageService.{i}.PhysicalMedium.{i}.SMART.
  }
  repeated PhysicalMedium physical_medium = 17; // StorageService.{i}.PhysicalMedium.{i}.
  message StorageArray { // StorageService.{i}.StorageArray.{i}.
    string    alias                                    = 1  ; //  {{datatype|expand}}        }        
    string    name                                     = 2  ; //  A user-friendly name for this Storage Ar
    string    status                                   = 3  ; //  The current status of this StorageArray.
    bool      enable                                   = 4  ; //  Enables or disables this StorageArray in
    string    raid_type                                = 5  ; //  Note that after creation of the Storage 
    uint32    usable_capacity                          = 6  ; //  The total Usable Capacity of the Storage
    string    physical_medium_reference                = 7  ; //  Represents the physical medium used by t
  }
  repeated StorageArray storage_array = 18; // StorageService.{i}.StorageArray.{i}.
  message LogicalVolume { // StorageService.{i}.LogicalVolume.{i}.
    string    alias                                    = 1  ; //  {{datatype|expand}}        }        
    string    name                                     = 2  ; //  The name of the partition for this logic
    string    status                                   = 3  ; //  The current status of this Logical Volum
    bool      enable                                   = 4  ; //  Enables or disables this {{object}} inst
    string    physical_reference                       = 5  ; //  Represents the physical medium or RAID w
    string    file_system                              = 6  ; //  The file system for this {{object}} as i
    uint32    capacity                                 = 7  ; //  The Capacity of the Logical Volume in {{
    uint32    used_space                               = 8  ; //  The Amount of Used Space on the Logical 
    uint32    threshold_limit                          = 9  ; //  This value is specified in {{units}} and
    bool      threshold_reached                        = 10 ; //  When {{param|ThresholdLimit}} > 0 and {{
    bool      encrypted                                = 11 ; //  Is the Volume Encrypted?  The type of en
    uint32    folder_number_of_entries                 = 12 ; //  The number of instances of {{object|.Log
    message Folder { // StorageService.{i}.LogicalVolume.{i}.Folder.{i}.
      string    alias                                    = 1  ; //  {{datatype|expand}}        }        
      string    name                                     = 2  ; //  Setting of this variable will add a new 
      bool      enable                                   = 3  ; //  Entry is enabled or disabled        d
      uint32    user_account_access                      = 4  ; //  What are the User authentication require
      uint32    user_access_number_of_entries            = 5  ; //  The number of instances of {{object|.Log
      uint32    group_access_number_of_entries           = 6  ; //  The number of instances of {{object|.Log
      message UserAccess { // StorageService.{i}.LogicalVolume.{i}.Folder.{i}.UserAccess.{i}.
        string    alias                                    = 1  ; //  {{datatype|expand}}        }        
        bool      enable                                   = 2  ; //  Enables or disables the entry.        
        string    user_reference                           = 3  ; //  Represents a user that has access to thi
        uint32    permissions                              = 4  ; //  What permissions the user account has ov
      }
      repeated UserAccess user_access = 7; // StorageService.{i}.LogicalVolume.{i}.Folder.{i}.UserAccess.{i}.
      message GroupAccess { // StorageService.{i}.LogicalVolume.{i}.Folder.{i}.GroupAccess.{i}.
        string    alias                                    = 1  ; //  {{datatype|expand}}        }        
        bool      enable                                   = 2  ; //  Enables or disables the entry.        
        string    group_reference                          = 3  ; //  Represents a user group that is a collec
        uint32    permissions                              = 4  ; //  What permissions the group members have 
      }
      repeated GroupAccess group_access = 8; // StorageService.{i}.LogicalVolume.{i}.Folder.{i}.GroupAccess.{i}.
      message Quota { // StorageService.{i}.LogicalVolume.{i}.Folder.{i}.Quota.
        bool      enable                                   = 1  ; //  Enables or disables quota management for
        uint32    capacity                                 = 2  ; //  Maximum size in {{units}} of the quota f
        uint32    used_space                               = 3  ; //  Current size in {{units}} of this folder
        uint32    threshold_limit                          = 4  ; //  This value is specified in {{units}} and
        bool      threshold_reached                        = 5  ; //  When {{param|ThresholdLimit}} > 0 and {{
      }
      Quota quota = 9; // StorageService.{i}.LogicalVolume.{i}.Folder.{i}.Quota.
    }
    repeated Folder folder = 13; // StorageService.{i}.LogicalVolume.{i}.Folder.{i}.
  }
  repeated LogicalVolume logical_volume = 19; // StorageService.{i}.LogicalVolume.{i}.
}

message StorageRequest { int32 unused = 1; }

message StorageReply { int32 unused = 1; }

message X_012345_Message { int32 unused = 1;  } // Vendor extensions X_{OUI}_{NameOfNewThing}

service Storage {
  rpc GetStorageService(StorageRequest) returns (tr140.StorageService) {}
  rpc SetStorageService(tr140.StorageService) returns (StorageReply) {}

  rpc GetCapabilities(StorageRequest) returns (tr140.StorageService.Capabilities) {}
  rpc SetCapabilities(tr140.StorageService.Capabilities) returns (StorageReply) {}

  rpc GetNetInfo(StorageRequest) returns (tr140.StorageService.NetInfo) {}
  rpc SetNetInfo(tr140.StorageService.NetInfo) returns (StorageReply) {}

  rpc GetUserGroup(StorageRequest) returns (stream tr140.StorageService.UserGroup) {}
  rpc SetUserGroup(stream tr140.StorageService.UserGroup) returns (StorageReply) {}

  rpc GetUserAccount(StorageRequest) returns (stream tr140.StorageService.UserAccount) {}
  rpc SetUserAccount(stream tr140.StorageService.UserAccount) returns (StorageReply) {}

  rpc GetNetworkServer(StorageRequest) returns (tr140.StorageService.NetworkServer) {}
  rpc SetNetworkServer(tr140.StorageService.NetworkServer) returns (StorageReply) {}

  rpc GetFTPServer(StorageRequest) returns (tr140.StorageService.FTPServer) {}
  rpc SetFTPServer(tr140.StorageService.FTPServer) returns (StorageReply) {}

  rpc GetAnonymousUser(StorageRequest) returns (tr140.StorageService.FTPServer.AnonymousUser) {}
  rpc SetAnonymousUser(tr140.StorageService.FTPServer.AnonymousUser) returns (StorageReply) {}

  rpc GetSFTPServer(StorageRequest) returns (tr140.StorageService.SFTPServer) {}
  rpc SetSFTPServer(tr140.StorageService.SFTPServer) returns (StorageReply) {}

  rpc GetHTTPServer(StorageRequest) returns (tr140.StorageService.HTTPServer) {}
  rpc SetHTTPServer(tr140.StorageService.HTTPServer) returns (StorageReply) {}

  rpc GetHTTPSServer(StorageRequest) returns (tr140.StorageService.HTTPSServer) {}
  rpc SetHTTPSServer(tr140.StorageService.HTTPSServer) returns (StorageReply) {}

  rpc GetPhysicalMedium(StorageRequest) returns (stream tr140.StorageService.PhysicalMedium) {}
  rpc SetPhysicalMedium(stream tr140.StorageService.PhysicalMedium) returns (StorageReply) {}

  rpc GetSMART(StorageRequest) returns (tr140.StorageService.PhysicalMedium.SMART) {}
  rpc SetSMART(tr140.StorageService.PhysicalMedium.SMART) returns (StorageReply) {}

  rpc GetStorageArray(StorageRequest) returns (stream tr140.StorageService.StorageArray) {}
  rpc SetStorageArray(stream tr140.StorageService.StorageArray) returns (StorageReply) {}

  rpc GetLogicalVolume(StorageRequest) returns (stream tr140.StorageService.LogicalVolume) {}
  rpc SetLogicalVolume(stream tr140.StorageService.LogicalVolume) returns (StorageReply) {}

  rpc GetFolder(StorageRequest) returns (stream tr140.StorageService.LogicalVolume.Folder) {}
  rpc SetFolder(stream tr140.StorageService.LogicalVolume.Folder) returns (StorageReply) {}

  rpc GetUserAccess(StorageRequest) returns (stream tr140.StorageService.LogicalVolume.Folder.UserAccess) {}
  rpc SetUserAccess(stream tr140.StorageService.LogicalVolume.Folder.UserAccess) returns (StorageReply) {}

  rpc GetGroupAccess(StorageRequest) returns (stream tr140.StorageService.LogicalVolume.Folder.GroupAccess) {}
  rpc SetGroupAccess(stream tr140.StorageService.LogicalVolume.Folder.GroupAccess) returns (StorageReply) {}

  rpc GetQuota(StorageRequest) returns (tr140.StorageService.LogicalVolume.Folder.Quota) {}
  rpc SetQuota(tr140.StorageService.LogicalVolume.Folder.Quota) returns (StorageReply) {}

}
